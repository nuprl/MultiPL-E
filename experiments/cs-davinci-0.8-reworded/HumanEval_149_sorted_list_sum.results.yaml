language: cs
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        foreach (string\
    \ str in lst) {\n            if (str.Length % 2 == 0) {\n                ret.Add(str);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47338a7366874fb38b99b2101b72095e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47338a7366874fb38b99b2101b72095e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var lst2 = lst.Where(i => i.Length % 2 == 0).OrderBy(i => i).OrderBy(i\
    \ => i.Length).ToList();\n        return lst2;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <305e43f961ef4c7fb194e37d2d1a6ee7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <305e43f961ef4c7fb194e37d2d1a6ee7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Write your code here...\n        List<string> newLst = new\
    \ List<string>();\n        string temp = \"\";\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            temp = lst[i];\n            if (temp.Length % 2 == 0) {\n\
    \                newLst.Add(temp);\n            }\n        }\n        lst = newLst;\n\
    \        lst.Sort();\n        return lst;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d79b789de3194dc5823ab34f4e13cd69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d79b789de3194dc5823ab34f4e13cd69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        List<string> res = new List<string>();\n\
    \        res.Add(lst[0]);\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] != lst[i - 1]) {\n                res.Add(lst[i]);\n    \
    \        }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7797db3ec154d6da989d226a8a7b401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7797db3ec154d6da989d226a8a7b401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8002215cebdc405f95108e4a18671318>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8002215cebdc405f95108e4a18671318>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> newLst = new List<string>();\n        foreach (string\
    \ str in lst) {\n            if (str.Length % 2 == 0) {\n                newLst.Add(str);\n\
    \            }\n        }\n        newLst.Sort();\n        return newLst;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76fa8da68b5b461eacb76f16ec1feda9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76fa8da68b5b461eacb76f16ec1feda9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        int min = Int32.MaxValue;\n\
    \        int max = Int32.MinValue;\n        foreach (string s in lst) {\n    \
    \        if (s.Length < min) min = s.Length;\n            if (s.Length > max)\
    \ max = s.Length;\n        }\n        int[] counts = new int[max - min + 1];\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            counts[lst[i].Length\
    \ - min]++;\n        }\n        int[][] sorted = new int[counts.Length][];\n \
    \       for (int i = 0; i < counts.Length; i++) {\n            sorted[i] = new\
    \ int[counts[i]];\n        }\n        int[] index = new int[counts.Length];\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            int length = lst[i].Length\
    \ - min;\n            sorted[length][index[length]] = i;\n            index[length]++;\n\
    \        }\n        List<string> ans = new List<string>();\n        for (int i\
    \ = 0; i < sorted.Length; i++) {\n            if (sorted[i].Length == 0) continue;\n\
    \            string[] toSort = new string[sorted[i].Length];\n            for\
    \ (int j = 0; j < sorted[i].Length; j++) {\n                toSort[j] = lst[sorted[i][j]];\n\
    \            }\n            Array.Sort(toSort);\n            ans.AddRange(toSort);\n\
    \        }\n        return ans;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <512b42b8699644bdb157021aa4ea74a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <512b42b8699644bdb157021aa4ea74a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 0) {\n      \
    \          ret.Add(lst[i]);\n            }\n        }\n        ret.Sort();\n \
    \       return ret;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc40d2ffe5e64bc28c86b78752e987ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc40d2ffe5e64bc28c86b78752e987ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        //implement your code here\n        return null;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <47c02c907342452095da02d86bff828b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <47c02c907342452095da02d86bff828b>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        List<string> result = new List<string>();\n\
    \        foreach (string s in lst) {\n            if (s.Length % 2 == 0) {\n \
    \               result.Add(s);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12efeb3b135b45c595781af821d16edc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12efeb3b135b45c595781af821d16edc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(i => i.Length % 2 == 0).OrderBy(j => j.Length).ThenBy(k\
    \ => k).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9517cfa9f31346159e86a8db68fc921d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9517cfa9f31346159e86a8db68fc921d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // TODO\n        List<string> result = new List<string>();\n\
    \        int minLength = lst.Min(s => s.Length);\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            if (lst[i].Length == minLength) {\n         \
    \       result.Add(lst[i]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0284419920047a48d1729dd8612b174>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0284419920047a48d1729dd8612b174>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> answer = new List<string>();\n        int length\
    \ = lst[0].Length;\n        for (int i = 0; i < lst.Count; i++) {\n          \
    \  if (lst[i].Length == length) {\n                answer.Add(lst[i]);\n     \
    \       }\n        }\n        return answer;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e500f3a5760342d38323e0c654ab6ec0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e500f3a5760342d38323e0c654ab6ec0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).Distinct().OrderBy(x\
    \ => x.Length).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b8765bb242b4603b47509db647512ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b8765bb242b4603b47509db647512ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ls = new List<string>();\n        if (lst.Count\
    \ == 0) {\n            return lst;\n        }\n        //int max = lst.Max(item\
    \ => item.Length);\n        //int min = lst.Min(item => item.Length);\n      \
    \  int min = int.MaxValue;\n        int max = int.MinValue;\n        foreach (string\
    \ item in lst) {\n            int length = item.Length;\n            if (length\
    \ > max) {\n                max = length;\n            }\n            if (length\
    \ < min) {\n                min = length;\n            }\n        }\n        for\
    \ (int i = min; i <= max; i++) {\n            foreach (string item in lst) {\n\
    \                if (item.Length == i) {\n                    ls.Add(item);\n\
    \                }\n            }\n        }\n        return ls;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd5aa19a6c4a4bfeb822f2fd97d4977d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd5aa19a6c4a4bfeb822f2fd97d4977d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // TODO Implement this function\n        List<string> result\
    \ = new List<string>();\n        int count = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Length; j++) {\n            \
    \    count += (int)lst[i][j];\n            }\n            if (count % 2 == 0)\
    \ {\n                result.Add(lst[i]);\n            }\n            count = 0;\n\
    \        }\n        result.Sort();\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90bc2dc1438945e58df8b6aee25744de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90bc2dc1438945e58df8b6aee25744de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        HashSet<int> set = new HashSet<int>();\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            set.Add(lst[i].Length);\n        }\n \
    \       List<int> sorted = set.ToList();\n        sorted.Sort();\n        List<string>\
    \ res = new List<string>();\n        for (int i = 0; i < sorted.Count; i++) {\n\
    \            var m = lst.FindAll(x => x.Length == sorted[i]);\n            m.Sort();\n\
    \            res.AddRange(m);\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a940c44ed1d542cca8d17700c7770473>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a940c44ed1d542cca8d17700c7770473>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        if (lst.Count() == 0) {\n            return new List<string>();\n\
    \        }\n        int len = lst[0].Length;\n        List<string> lst1 = new\
    \ List<string>();\n        List<string> lst2 = new List<string>();\n        for\
    \ (int i = 0; i < lst.Count(); i++) {\n            if (lst[i].Length == len) {\n\
    \                lst1.Add(lst[i]);\n            } else {\n                lst2.Add(lst[i]);\n\
    \            }\n        }\n        return lst1.Concat(SortedListSum(lst2)).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9b80ece3b264c3084470a296a838705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9b80ece3b264c3084470a296a838705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        int x = lst.Count;\n        int y = 0;\n        int z = 0;\n\
    \        string[] arr = new string[x];\n        for (int i = 0; i < x; i++) {\n\
    \            arr[i] = lst[i];\n        }\n        for (int i = 0; i < x; i++)\
    \ {\n            if (lst[i].Length % 2 == 0) {\n                arr[y] = lst[i];\n\
    \                y++;\n            }\n        }\n        string[] arr2 = new string[y];\n\
    \        for (int i = 0; i < y; i++) {\n            arr2[i] = arr[i];\n      \
    \  }\n        return new List<string>(arr2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9ac7306b19b47b5be9c88680b5dcf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9ac7306b19b47b5be9c88680b5dcf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        //Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <d3d673840a9c4263b2b2f4a23837cb0b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <d3d673840a9c4263b2b2f4a23837cb0b>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        throw new NotImplementedException();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00024] in <396915ea43b04ee9a975369d648c5a25>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00024]\
    \ in <396915ea43b04ee9a975369d648c5a25>:0 \n"
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> odd = new List<string>();\n        List<string>\
    \ even = new List<string>();\n        int offset = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            int len = lst[i].Length;\n            if\
    \ (len % 2 == 0) {\n                even.Add(lst[i]);\n            } else {\n\
    \                odd.Add(lst[i]);\n            }\n        }\n        even.Sort();\n\
    \        odd.Sort();\n        return even;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c0fc5d88b5e4fdd971a298ddd81969f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c0fc5d88b5e4fdd971a298ddd81969f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> newlst = new List<string>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if ((lst[i].Length % 2) == 0) {\n\
    \                newlst.Add(lst[i]);\n            }\n        }\n        newlst.Sort();\n\
    \        return newlst;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\"\
    , (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ec6d254100c4dd5828f5cbe9c3f818e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ec6d254100c4dd5828f5cbe9c3f818e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var result = new List<string>();\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            int len = lst[i].Length;\n            if (len\
    \ % 2 == 0) {\n                result.Add(lst[i]);\n            }\n        }\n\
    \        result.Sort();\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06a39a79b2f44cde9cf06bba59432c9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06a39a79b2f44cde9cf06bba59432c9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // YOUR CODE HERE\n        // Hint:\n        // Use LINQ query!\n\
    \        // Tip:\n        // You can use .ToList() to convert a LINQ query result\
    \ to a list.\n        return new List<string>();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49ddd520e4c048ea8cc56fc599215112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49ddd520e4c048ea8cc56fc599215112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // return lst.Where(el => el.Length % 2 == 0).ToList();\n  \
    \      // return lst.Where(el => el.Length % 2 == 0).OrderBy(el => el.Length).ToList();\n\
    \        // return lst.Where(el => el.Length % 2 == 0).OrderBy(el => el.Length).OrderBy(el\
    \ => el).ToList();\n        return lst.Where(el => el.Length % 2 == 0).OrderBy(el\
    \ => el.Length).ThenBy(el => el).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22c8e796d5c04793b8476d02919b43f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22c8e796d5c04793b8476d02919b43f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        List<string> outlist = new List<string>();\n\
    \        int lastlen = 0;\n        int lastind = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (lst[i].Length != lastlen) {\n         \
    \       outlist.Add(lst[i]);\n                lastlen = lst[i].Length;\n     \
    \           lastind = outlist.Count - 1;\n            } else {\n             \
    \   outlist[lastind] += lst[i];\n            }\n        }\n        return outlist;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b159b8109a5b47d9bb4ca78181ff15d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b159b8109a5b47d9bb4ca78181ff15d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(s => s.Length % 2 == 0).OrderBy(s => s.Length).ThenBy(s\
    \ => s).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(s => s.Length % 2 == 0).Distinct().OrderBy(s\
    \ => s.Length).ThenBy(s => s).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <309e6ede9abd4c77884b86effafc7c6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <309e6ede9abd4c77884b86effafc7c6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(s => s.Length % 2 == 0).Distinct().OrderBy(s\
    \ => s.Length).ThenBy(s => s).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <309e6ede9abd4c77884b86effafc7c6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <309e6ede9abd4c77884b86effafc7c6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        List<string>\
    \ sortedList = lst.OrderBy(x => x.Length).ThenBy(x => x).ToList();\n        for\
    \ (int i = 0; i < sortedList.Count; i++) {\n            if (sortedList[i].Length\
    \ % 2 == 0) {\n                result.Add(sortedList[i]);\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <360248c146f546eb86f69652dee59a36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <360248c146f546eb86f69652dee59a36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Write your code here\n        return lst;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ae62b778d02465c9f0db66839f1f9d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ae62b778d02465c9f0db66839f1f9d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        //throw new NotImplementedException();\n        var sorted =\
    \ lst.OrderBy(a => a.Length).ThenBy(b => b).ToList();\n        //sorted.RemoveAll(c\
    \ => c.Length % 2 != 0);\n        //return sorted;\n        List<string> result\
    \ = new List<string>();\n        foreach (var w in sorted) {\n            if (w.Length\
    \ % 2 == 0) {\n                result.Add(w);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c6f7761845e476198704eb9e8db5fa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c6f7761845e476198704eb9e8db5fa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> oddLength = new List<string>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 1) {\n  \
    \              oddLength.Add(lst[i]);\n            }\n        }\n        lst.RemoveAll(x\
    \ => oddLength.Contains(x));\n        lst.Sort();\n        return lst;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13d7a71730754d11985e539acdfc2294>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13d7a71730754d11985e539acdfc2294>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var lstEvenWords = lst.Where(word => word.Length % 2 == 0).OrderBy(word\
    \ => word.Length).ThenBy(word => word).ToList();\n        return lstEvenWords;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e1f516e0c6b409f8c2cd6ee04bd29b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e1f516e0c6b409f8c2cd6ee04bd29b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // return the list ordered by length, and if they have the same\
    \ length, order by alphabet\n        return lst.OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <392b951880be4f8986c2403a1fdb8a14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <392b951880be4f8986c2403a1fdb8a14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Using Linq:\n        var sortedList = lst.Where(str => str.Length\
    \ % 2 == 0).OrderBy(str => str.Length).ThenBy(str => str).ToList();\n        return\
    \ sortedList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <607cbf28976f420aaf9d3d820ed57b9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <607cbf28976f420aaf9d3d820ed57b9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <0ef5acaf451c416bb636c37d4cb5e8c9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <0ef5acaf451c416bb636c37d4cb5e8c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        if (lst ==\
    \ null) {\n            return result;\n        }\n\n        foreach (string item\
    \ in lst) {\n            if (item.Length % 2 == 0) {\n                result.Add(item);\n\
    \            }\n        }\n\n        result.Sort((x, y) => {\n            int\
    \ diff = x.Length - y.Length;\n            if (diff == 0) {\n                return\
    \ x.CompareTo(y);\n            } else {\n                return diff;\n      \
    \      }\n        });\n\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <072b094a8c3c4d62bf4c735b51d48f88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <072b094a8c3c4d62bf4c735b51d48f88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // TODO: Implement me\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <7ec92754ce1a4b04ac941ac8f7b381a1>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <7ec92754ce1a4b04ac941ac8f7b381a1>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Insert your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <810278728de348b7ad53ecc52a383b46>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <810278728de348b7ad53ecc52a383b46>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(e => e.Length % 2 == 0).OrderBy(e => e.Length).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b1a7994f9c423a9845ddc5ad71352b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b1a7994f9c423a9845ddc5ad71352b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d08668a939cd4ae3b33efe5814af0bd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // TODO: Write your code here.\n        //return null;\n   \
    \     return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9733220e7ff44491aa10f799248f4ebd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9733220e7ff44491aa10f799248f4ebd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var res = new List<string>();\n        var bigList = new List<string>();\n\
    \        foreach (var item in lst) {\n            if (item.Length % 2 == 0)\n\
    \                res.Add(item);\n            else\n                bigList.Add(item);\n\
    \        }\n        var s = new SortedSet<string>(res,new StringComparer());\n\
    \        return new List<string>(s);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvu0i1cy.cs(33,43): error CS0144: Cannot create an instance of the abstract
    class or interface ''StringComparer''

    '
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return new List<string>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).Distinct().OrderBy(x\
    \ => x.Length).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b8765bb242b4603b47509db647512ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b8765bb242b4603b47509db647512ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <c72a3137c4f54bad8e9bc7b8090bc756>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <c72a3137c4f54bad8e9bc7b8090bc756>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(s => s.Length % 2 == 0).OrderBy(s => s.Length).ThenBy(s\
    \ => s).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        HashSet<int> hashSet = new HashSet<int>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 1) {\n  \
    \              hashSet.Add(i);\n            }\n        }\n        var result =\
    \ lst.Where((item, index) => !hashSet.Contains(index));\n        return result.OrderBy(item\
    \ => item.Length).ThenBy(item => item).ToList();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e35b71fa82434440a1d521c72376cf1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e35b71fa82434440a1d521c72376cf1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var ls = new List<string>();\n        var m = new Dictionary<int,\
    \ List<string>>();\n        foreach (var i in lst) {\n            int length =\
    \ i.Length;\n            if (length % 2 == 0) {\n                if (!m.ContainsKey(length))\
    \ {\n                    m[length] = new List<string>();\n                }\n\
    \                m[length].Add(i);\n            }\n        }\n        var o =\
    \ new List<string>();\n        for (int i = 0; i < lst.Count; i++) {\n       \
    \     if (lst[i].Length % 2 == 0) {\n                o.Add(lst[i]);\n        \
    \    }\n        }\n        var l = m.Keys.ToList();\n        l.Sort();\n     \
    \   for (int i = 0; i < l.Count; i++) {\n            var d = m[l[i]];\n      \
    \      d.Sort();\n            for (int j = 0; j < d.Count; j++) {\n          \
    \      o.Add(d[j]);\n            }\n        }\n        return o;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c56fe4b143843dab5b128ed7603e8ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c56fe4b143843dab5b128ed7603e8ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> newList = new List<string>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            int len = lst[i].Length;\n       \
    \     if (len % 2 == 0) {\n                newList.Add(lst[i]);\n            }\n\
    \        }\n        return newList;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5c7f6640c2b426b889727b899acca4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5c7f6640c2b426b889727b899acca4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort((x, y) => x.Length.CompareTo(y.Length));\n        var\
    \ lstNew = new List<string>();\n        var len = 0;\n        foreach (var item\
    \ in lst) {\n            if (item.Length == len)\n                continue;\n\
    \            len = item.Length;\n            lstNew.Add(item);\n        }\n  \
    \      return lstNew;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\",\
    \ (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69ee84eeb5f442738db52d7c90377e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69ee84eeb5f442738db52d7c90377e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> res = new List<string>();\n        //YOUR CODE\
    \ HERE\n        res = lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8da55547c554b86a352012dd04a1073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8da55547c554b86a352012dd04a1073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        int len = lst[0].Length;\n        return lst.Where(x => x.Length\
    \ % 2 == 0).OrderBy(x => x).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf8a68facae64937b8c7797cbf923245>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf8a68facae64937b8c7797cbf923245>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Given a list of strings, return a list with the strings\n\
    \        // in sorted order, except group all the strings that begin with 'x'\
    \ first.\n        // e.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields\n\
    \        // ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']\n        // Hint: this\
    \ can be done by making 2 lists and sorting each of them\n        // before combining\
    \ them.\n        var lstx = new List<string>();\n        var lsto = new List<string>();\n\
    \        foreach (var s in lst) {\n            if (s.StartsWith(\"x\")) {\n  \
    \              lstx.Add(s);\n            } else {\n                lsto.Add(s);\n\
    \            }\n        }\n        lstx.Sort();\n        lsto.Sort();\n      \
    \  lstx.AddRange(lsto);\n        return lstx;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1307f7c49a4b4d9e93b031776b581e8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1307f7c49a4b4d9e93b031776b581e8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(i => i.Length % 2 == 0).OrderBy(i => i.Length).ThenBy(i\
    \ => i).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <522bca76491a49b38bdea21be09ce396>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <522bca76491a49b38bdea21be09ce396>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> list_new = new List<string>();\n        int max_len\
    \ = 0;\n        foreach (string str in lst) {\n            if (str.Length % 2\
    \ == 0) {\n                list_new.Add(str);\n                if (str.Length\
    \ > max_len) {\n                    max_len = str.Length;\n                }\n\
    \            }\n        }\n        foreach (string str in list_new) {\n      \
    \      if (str.Length != max_len) {\n                lst.Remove(str);\n      \
    \      }\n        }\n        lst.Sort();\n        return lst;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3de4cd1f623c463b9833871a9519ea0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3de4cd1f623c463b9833871a9519ea0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // REPLACE THE CODE BELOW WITH YOUR OWN CODE.\n        List<string>\
    \ res = new List<string>();\n        foreach (string s in lst) {\n           \
    \ if (s.Length % 2 == 0) {\n                res.Add(s);\n            }\n     \
    \   }\n        res.Sort();\n        return res;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <654d4f7684c241bc9356a3ee660da1a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <654d4f7684c241bc9356a3ee660da1a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> sortedList = new List<string>();\n        foreach\
    \ (string el in lst) {\n            if (el.Length % 2 == 0) {\n              \
    \  sortedList.Add(el);\n            }\n        }\n        sortedList.Sort();\n\
    \        return sortedList;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d24dc444e56f434db219eb0e26d509f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d24dc444e56f434db219eb0e26d509f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        result.AddRange(\n\
    \            lst.Where(x => x.Length % 2 == 0)\n               .OrderBy(x => x.Length)\n\
    \               .ThenBy(x => x)\n        );\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d281e6576a4d76b977633c950a5f35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d281e6576a4d76b977633c950a5f35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        List<string>\
    \ temp = new List<string>();\n        Dictionary<int, List<string>> dictionary\
    \ = new Dictionary<int, List<string>>();\n        int len = lst.Count;\n     \
    \   int i = 0;\n        while (i < len) {\n            int wordlen = lst[i].Length;\n\
    \            if (wordlen % 2 == 0) {\n                if (dictionary.ContainsKey(wordlen))\
    \ {\n                    dictionary[wordlen].Add(lst[i]);\n                } else\
    \ {\n                    dictionary.Add(wordlen, new List<string>());\n      \
    \              dictionary[wordlen].Add(lst[i]);\n                }\n         \
    \   }\n            i++;\n        }\n        Dictionary<int, List<string>> sortedDictionary\
    \ = dictionary.OrderBy(x => x.Key).ToDictionary(x => x.Key, x => x.Value);\n \
    \       foreach (var entry in sortedDictionary) {\n            List<string> list\
    \ = entry.Value;\n            list.Sort();\n            result.AddRange(list);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be92765cbc0f4e9cbac5b948d127c1b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be92765cbc0f4e9cbac5b948d127c1b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // YOUR CODE HERE\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00024] in <4cd58c9ed7bf4eefa72a82b1ccc83138>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00024]\
    \ in <4cd58c9ed7bf4eefa72a82b1ccc83138>:0 \n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        result.AddRange(lst.Where(item\
    \ => item.Length % 2 == 0));\n        result.Sort();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab185a0a8456415cbd86a7e68bd41c68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab185a0a8456415cbd86a7e68bd41c68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        return lst;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89043389fc344c55adfd20094ee88e11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89043389fc344c55adfd20094ee88e11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> sortedList = new List<string>();\n        sortedList\
    \ = lst.Where(s => s.Length % 2 == 0).OrderBy(s => s.Length).ThenBy(s => s).ToList();\n\
    \        return sortedList;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84f945efecf1487ea4152fb5620a5fe8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84f945efecf1487ea4152fb5620a5fe8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> list = new List<string>();\n        foreach (string\
    \ s in lst) {\n            list.Add(s);\n        }\n        list.Sort();\n   \
    \     list.Sort(delegate(string s1, string s2) {\n            return s1.Length.CompareTo(s2.Length);\n\
    \        });\n        return list;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef8e1e2eae90477eaf5e865432c57346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef8e1e2eae90477eaf5e865432c57346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        Dictionary<int, List<string>> dict = new Dictionary<int, List<string>>();\n\
    \        foreach (string str in lst) {\n            int key = str.Length;\n  \
    \          if (!dict.ContainsKey(key)) {\n                dict[key] = new List<string>();\n\
    \            }\n            dict[key].Add(str);\n        }\n        List<string>\
    \ result = new List<string>();\n        foreach (int key in dict.Keys) {\n   \
    \         result.AddRange(dict[key].OrderBy(x => x));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09986fbdaee64123ada8b1a97980cbc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09986fbdaee64123ada8b1a97980cbc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return new List<string>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Define the new sorted list\n        List<string> sorted =\
    \ new List<string>();\n        // Declare the longest word variable\n        string\
    \ longest = \"\";\n        // Define the list of words with odd lengths\n    \
    \    List<string> odd = new List<string>();\n        // Loop through the original\
    \ list\n        foreach (string s in lst) {\n            // If the length of the\
    \ string is odd\n            if (s.Length % 2 == 1) {\n                // Then\
    \ add it to the list of odd words\n                odd.Add(s);\n            }\n\
    \        }\n        // Loop through the odd words\n        foreach (string s in\
    \ odd) {\n            // If the length of the string is greater than the length\
    \ of the longest word\n            if (s.Length > longest.Length) {\n        \
    \        // Then set the longest word to this string\n                longest\
    \ = s;\n            }\n        }\n        // Loop through the list\n        foreach\
    \ (string s in lst) {\n            // If the string is in the list of odd words\n\
    \            if (odd.Contains(s)) {\n                // Then remove it from the\
    \ original list\n                lst.Remove(s);\n            }\n        }\n  \
    \      // For each string in the original list\n        foreach (string s in lst)\
    \ {\n            // If the string is not longer than the longest odd string\n\
    \            if (s.Length <= longest.Length) {\n                // Then add it\
    \ to the new sorted list\n                sorted.Add(s);\n            }\n    \
    \    }\n        // For each string in the odd words list\n        foreach (string\
    \ s in odd) {\n            // If the string is not longer than the longest odd\
    \ string\n            if (s.Length <= longest.Length) {\n                // Then\
    \ add it to the new sorted list\n                sorted.Add(s);\n            }\n\
    \        }\n        // Return the new sorted list\n        return sorted;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Collection was\
    \ modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare\
    \ () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext\
    \ () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortedListSum\
    \ (System.Collections.Generic.List`1[T] lst) [0x000d8] in <78ade75fded24a7ebbcffc6208e038f9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00024] in <78ade75fded24a7ebbcffc6208e038f9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Collection\
    \ was modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare\
    \ () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext\
    \ () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortedListSum\
    \ (System.Collections.Generic.List`1[T] lst) [0x000d8] in <78ade75fded24a7ebbcffc6208e038f9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00024] in <78ade75fded24a7ebbcffc6208e038f9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(w => w.Length % 2 == 0).Distinct().OrderBy(w\
    \ => w.Length).ThenBy(w => w).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2a1014a1a354e8882f5f2085f3b4da9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2a1014a1a354e8882f5f2085f3b4da9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <0ef5acaf451c416bb636c37d4cb5e8c9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <0ef5acaf451c416bb636c37d4cb5e8c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> newlst = new List<string>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 0) {\n  \
    \              newlst.Add(lst[i]);\n            }\n        }\n        newlst.Sort();\n\
    \        return newlst;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\"\
    , (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b062f250d00940cc82e74745f8353711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b062f250d00940cc82e74745f8353711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return new List<string>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // You'll need to write your function and then submit it.\n\
    \        // We'll return the result and print it to the shell when we run the\
    \ program!\n        List<string> list = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if (s.Length % 2 == 0) {\n                list.Add(s);\n\
    \            }\n        }\n        list.Sort();\n        return list;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0dd29a267c7b45d99757c5af05278a98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0dd29a267c7b45d99757c5af05278a98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return (from str in lst\n                where str.Length %\
    \ 2 == 0\n                orderby str\n                select str).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2b44d3df9db4b529d9eb3e1f929b99b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2b44d3df9db4b529d9eb3e1f929b99b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        int sum =\
    \ 0;\n        foreach (string s in lst) {\n            sum += s.Length;\n    \
    \    }\n        if (sum % 2 == 0) {\n            foreach (string s in lst) {\n\
    \                if (s.Length % 2 == 0) {\n                    result.Add(s);\n\
    \                }\n            }\n        }\n        result.Sort();\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32c014c927134a4389ba92aaa7aa7cf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32c014c927134a4389ba92aaa7aa7cf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        int sum = 0;\n        foreach (string s in lst) {\n        \
    \    sum += s.Length;\n        }\n        Console.WriteLine(sum);\n        return\
    \ new List<string>();\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\",\
    \ (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59f6b8501d9e43ceac79b28da2594395>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59f6b8501d9e43ceac79b28da2594395>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: '6

    13

    4

    10

    6

    6

    12

    '
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(s => s.Length % 2 == 0).OrderBy(s => s.Length).ThenBy(s\
    \ => s).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        for (int i = lst.Count - 1; i >= 0; i--)\
    \ {\n            if (lst[i].Length % 2 == 1) {\n                lst.RemoveAt(i);\n\
    \            }\n        }\n        return lst;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42e439b1bea44d08b31316afe45b8780>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42e439b1bea44d08b31316afe45b8780>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        if (lst.Count == 1)\
    \ return lst;\n        var oddIndexes = new List<int>();\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 1) oddIndexes.Add(i);\n\
    \        }\n        for (int i = oddIndexes.Count - 1; i >= 0; i--) {\n      \
    \      lst.RemoveAt(oddIndexes[i]);\n        }\n        lst.Sort();\n        return\
    \ lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b6a06c8dc664680bfc0d1992403acb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b6a06c8dc664680bfc0d1992403acb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> newList = new List<string>();\n        foreach\
    \ (string i in lst) {\n            if (i.Length % 2 == 0) {\n                newList.Add(i);\n\
    \            }\n        }\n        newList.Sort();\n        return newList;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60325b578bc74dac86b41f6f70af4d10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60325b578bc74dac86b41f6f70af4d10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(str => str.Length % 2 == 0).OrderBy(str =>\
    \ str.Length).ThenBy(str => str).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ece0604eb58416db416f6eaa114a6ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ece0604eb58416db416f6eaa114a6ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <c72a3137c4f54bad8e9bc7b8090bc756>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <c72a3137c4f54bad8e9bc7b8090bc756>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // The list is a list of strings, and you should be sorting\
    \ it\n        // and removing the odd length strings.\n        lst.Sort();\n \
    \       int i = 0;\n        while (i < lst.Count) {\n            if (lst[i].Length\
    \ % 2 == 1) {\n                lst.RemoveAt(i);\n            } else {\n      \
    \          i += 1;\n            }\n        }\n        return lst;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62ffcd187df049e2af038914a0b22e22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62ffcd187df049e2af038914a0b22e22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var even = lst.Where(x => x.Length % 2 == 0).ToList();\n   \
    \     even.Sort();\n        return even;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bf3509ba67c423bada5c297fc69b8c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bf3509ba67c423bada5c297fc69b8c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(s => s.Length % 2 == 0).Distinct().OrderBy(s\
    \ => s.Length).ThenBy(s => s).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <309e6ede9abd4c77884b86effafc7c6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <309e6ede9abd4c77884b86effafc7c6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var result = new List<string>();\n        if (lst.Count == 0)\
    \ return result;\n        int len = lst[0].Length;\n        lst.Sort();\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Length == len)\
    \ {\n                result.Add(lst[i]);\n            } else {\n             \
    \   break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f00cc7fad5bc4a08b06273a7f3fea14a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f00cc7fad5bc4a08b06273a7f3fea14a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> newList = new List<string>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            string item = lst[i];\n          \
    \  if (item.Length % 2 == 0) {\n                newList.Add(item);\n         \
    \   }\n        }\n        return newList;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e11bcc0a3de2430a8b9aaee07d484a88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e11bcc0a3de2430a8b9aaee07d484a88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var sortedList = new List<string>();\n        foreach (var s\
    \ in lst) {\n            if (s.Length % 2 == 0) {\n                sortedList.Add(s);\n\
    \            }\n        }\n        sortedList.Sort();\n        return sortedList;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96b523da481546328156b1c52ac084e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96b523da481546328156b1c52ac084e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code goes here\n\n        return lst;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9e997074ce4422e85b4d6442cc115f1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9e997074ce4422e85b4d6442cc115f1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var result = new List<string>();\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <022cbafcdd4c401e85e4e81221a6972d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <022cbafcdd4c401e85e4e81221a6972d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.OrderBy(x => x.Length).ThenBy(x => x).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2cdf74a64104350adc3e52726a65a86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2cdf74a64104350adc3e52726a65a86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 0) {\n  \
    \              result.Add(lst[i]);\n            }\n        }\n        result.Sort();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\"\
    , (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adbf67121d7940689e88eb97f3826123>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adbf67121d7940689e88eb97f3826123>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // TODO: implement this function\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <807162254fc447c6b3504d66d6beb2bb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <807162254fc447c6b3504d66d6beb2bb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> sumList = new List<string>();\n        return sumList;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71e7b746119940bb80594d5f58f28156>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71e7b746119940bb80594d5f58f28156>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(str => str.Length % 2 == 0).OrderBy(str =>\
    \ str.Length).ThenBy(str => str).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ece0604eb58416db416f6eaa114a6ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ece0604eb58416db416f6eaa114a6ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        int len = lst[0].Length;\n        var result = new List<string>();\n\
    \        if (len % 2 == 0) {\n            result.Add(lst[0]);\n        }\n   \
    \     lst.RemoveAt(0);\n        if (lst.Count == 0) {\n            return result;\n\
    \        }\n        result.AddRange(SortedListSum(lst));\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe34c48b99e44ada2059d059d694969>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe34c48b99e44ada2059d059d694969>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> res = new List<string>();\n        foreach (string\
    \ word in lst) {\n            if (word.Length % 2 == 0) {\n                res.Add(word);\n\
    \            }\n        }\n        res.Sort();\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20d0e918ddbf43b4993d7b097bc531be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20d0e918ddbf43b4993d7b097bc531be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code here\n        var res = new List<string>();\n \
    \       foreach (var item in lst) {\n            if (item.Length % 2 == 0) {\n\
    \                res.Add(item);\n            }\n        }\n        res.Sort();\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9f8bc47cc7e4d7eb9ca0911df69d113>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9f8bc47cc7e4d7eb9ca0911df69d113>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        Dictionary<int, List<string>> lengths = new Dictionary<int,\
    \ List<string>>();\n        foreach (string s in lst) {\n            if (!lengths.ContainsKey(s.Length))\
    \ {\n                lengths[s.Length] = new List<string>();\n            }\n\
    \            lengths[s.Length].Add(s);\n        }\n        List<string> r = new\
    \ List<string>();\n        foreach (KeyValuePair<int, List<string>> kvp in lengths)\
    \ {\n            if (kvp.Key % 2 == 0) {\n                r.AddRange(kvp.Value);\n\
    \            }\n        }\n        return r;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b70477a09d4d4e4ea59a13305af4ebf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b70477a09d4d4e4ea59a13305af4ebf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> rlst = new List<string>();\n        rlst.AddRange(lst);\n\
    \        rlst.Sort((string x, string y) => {\n            if (x.Length == y.Length)\
    \ {\n                return x.CompareTo(y);\n            }\n            return\
    \ x.Length.CompareTo(y.Length);\n        });\n        return rlst;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a0dfb86cbe9440c8d19ee6c75046470>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a0dfb86cbe9440c8d19ee6c75046470>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.GroupBy(x => x.Length).Select(x => x.OrderBy(y =>\
    \ y).ToList()).SelectMany(x => x).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6968cc4d0f7b4d8fb97e82e9338849e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6968cc4d0f7b4d8fb97e82e9338849e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code here\n        int median = 0;\n        int sum\
    \ = 0;\n        // Loop the the List and check the sum of all even numbers\n \
    \       for (int i = 0; i < lst.Count; i++) {\n            median = int.Parse(lst[i]);\n\
    \            sum += median;\n        }\n        return lst;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortedListSum (System.Collections.Generic.List`1[T] lst) [0x00011]\
    \ in <3a18191837624eb3b14385ba2528ff4c>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <3a18191837624eb3b14385ba2528ff4c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortedListSum (System.Collections.Generic.List`1[T] lst) [0x00011]\
    \ in <3a18191837624eb3b14385ba2528ff4c>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <3a18191837624eb3b14385ba2528ff4c>:0 \n"
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.FindAll(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98bd6796c2d442c2879ef91dffb86e80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98bd6796c2d442c2879ef91dffb86e80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        return lst;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89043389fc344c55adfd20094ee88e11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89043389fc344c55adfd20094ee88e11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // return lst.Where(s => s.Length % 2 == 0).OrderBy(s => s.Length).ThenBy(s\
    \ => s).ToList();\n        int x = lst.Where(s => s.Length % 2 == 0).Count();\n\
    \        int y = lst.Where(s => s.Length % 2 == 1).Count();\n        string[]\
    \ even = new string[x];\n        string[] odd = new string[y];\n        int curr\
    \ = 0;\n        foreach (string s in lst) {\n            if (s.Length % 2 == 0)\
    \ {\n                even[curr] = s;\n                curr++;\n            }\n\
    \        }\n        curr = 0;\n        foreach (string s in lst) {\n         \
    \   if (s.Length % 2 == 1) {\n                odd[curr] = s;\n               \
    \ curr++;\n            }\n        }\n        Array.Sort(even);\n        Array.Sort(odd);\n\
    \        List<string> res = new List<string>();\n        for (int i = 0; i < even.Length;\
    \ i++) {\n            res.Add(even[i]);\n        }\n        for (int i = 0; i\
    \ < odd.Length; i++) {\n            res.Add(odd[i]);\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9e58d8c9a3b426cb07d4748449b28ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9e58d8c9a3b426cb07d4748449b28ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code goes here\n        // ...\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <c524066fda1642acbcd78f6dadc09665>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <c524066fda1642acbcd78f6dadc09665>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var lst2 = new List<string>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            if (lst[i].Length % 2 == 0) {\n             \
    \   lst2.Add(lst[i]);\n            }\n        }\n        lst2.Sort();\n      \
    \  return lst2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <661fc6b7af6d430999bb88a0bb2ca4e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <661fc6b7af6d430999bb88a0bb2ca4e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var dict = new Dictionary<int, List<string>>();\n        foreach\
    \ (var word in lst) {\n            if (!dict.ContainsKey(word.Length)) {\n   \
    \             dict[word.Length] = new List<string>();\n            }\n       \
    \     dict[word.Length].Add(word);\n        }\n        var result = new List<string>();\n\
    \        foreach (var item in dict.Keys.OrderBy(x => x)) {\n            var words\
    \ = dict[item];\n            words.Sort();\n            result.AddRange(words);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79bcc2f517474f07887cb8dc2fe9615b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79bcc2f517474f07887cb8dc2fe9615b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        else {\n            int min = lst[0].Length;\n            for (int i\
    \ = 0; i < lst.Count; i++) {\n                if (lst[i].Length < min) {\n   \
    \                 min = lst[i].Length;\n                }\n            }\n   \
    \         int[] len = new int[min];\n            for (int i = 0; i < lst.Count;\
    \ i++) {\n                len[lst[i].Length]++;\n            }\n            lst.Sort();\n\
    \            List<string> result = new List<string>();\n            string prev\
    \ = lst[0];\n            for (int i = 0; i < lst.Count; i++) {\n             \
    \   if (lst[i] != prev) {\n                    result.Add(prev);\n           \
    \         prev = lst[i];\n                }\n            }\n            result.Add(prev);\n\
    \            return result;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.SortedListSum (System.Collections.Generic.List`1[T]\
    \ lst) [0x00082] in <6bcbdafdf9974219a64edbdeec9e669a>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <6bcbdafdf9974219a64edbdeec9e669a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.SortedListSum (System.Collections.Generic.List`1[T]\
    \ lst) [0x00082] in <6bcbdafdf9974219a64edbdeec9e669a>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <6bcbdafdf9974219a64edbdeec9e669a>:0 \n"
  stdout: ''
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        List<string> newList = new List<string>();\n\
    \        int lastLen = 0;\n        foreach (string s in lst) {\n            if\
    \ (s.Length == lastLen) {\n                newList.Add(s);\n            } else\
    \ if (s.Length == lastLen + 1) {\n                newList.Add(s);\n          \
    \      lastLen = s.Length;\n            }\n        }\n        return newList;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33b4c880e15c4a47933f2208a7ea510e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33b4c880e15c4a47933f2208a7ea510e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if (s.Length % 2 == 0) {\n                ret.Add(s);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e0c9b7796cc45dbafd63b58b43ab828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e0c9b7796cc45dbafd63b58b43ab828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var deleted = lst.Select(s => s.Length).Distinct().OrderBy(s\
    \ => s).Skip(1).ToList();\n        return lst.Where(s => !deleted.Contains(s.Length)).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56996b2c1d724a30a0fb2212a8d40e83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56996b2c1d724a30a0fb2212a8d40e83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var isEven = ((x) => { return x % 2 == 0; });\n        var isOdd\
    \ = ((x) => { return x % 2 == 1; });\n        var sorted = lst.Where(x => x.Length\
    \ % 2 == 0)\n                        .OrderBy(x => x.Length)\n               \
    \         .ThenBy(x => x).ToList();\n        return sorted;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu1g5z4yl.cs(25,13): error CS0815: Cannot assign lambda expression to an
    implicitly-typed variable

    /tmp/tmpu1g5z4yl.cs(26,13): error CS0815: Cannot assign lambda expression to an
    implicitly-typed variable

    '
  timestamp: 1660028299
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // may not modify this method\n        return lst;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5a44f8ae35446acbfa79a5c2a949d07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5a44f8ae35446acbfa79a5c2a949d07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> oddLength = new List<string>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 1) {\n  \
    \              oddLength.Add(lst[i]);\n            }\n        }\n        foreach\
    \ (string s in oddLength) {\n            lst.Remove(s);\n        }\n        return\
    \ lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc63a578b9f44a1badb88c21b27f8f99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc63a578b9f44a1badb88c21b27f8f99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort(); // Sorts the list in alphabetical order\n      \
    \  List<string> newList = new List<string>();\n        List<string> secondList\
    \ = new List<string>();\n        for (int i = 0; i < lst.Count; i++) {\n     \
    \       string s = lst[i];\n            if (s.Length % 2 == 0) {\n           \
    \     newList.Add(s);\n            }\n        }\n        secondList = newList.Distinct().ToList();\n\
    \        return secondList;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89b0f1bf32854b9ab1d121ec68baba21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89b0f1bf32854b9ab1d121ec68baba21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> res = new List<string>();\n        lst.Sort();\n\
    \        int preIdx = 0;\n        for (int i = 1; i < lst.Count; i++) {\n    \
    \        if (lst[i].Length == lst[preIdx].Length) {\n                res.Add(lst[preIdx]\
    \ + lst[i]);\n                preIdx = i + 1;\n            }\n        }\n    \
    \    if (preIdx < lst.Count) {\n            res.Add(lst[preIdx]);\n        }\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef7d8066b28046dd94f063e43238e5c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef7d8066b28046dd94f063e43238e5c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> temp = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if ((s.Length % 2) == 0) {\n                temp.Add(s);\n\
    \            }\n        }\n        temp.Sort();\n        return temp;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0349548525945a1852106cf3d3ed3f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0349548525945a1852106cf3d3ed3f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var ret = new List<string>();\n        int index = 0;\n    \
    \    var dict = new Dictionary<string, int>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (dict.ContainsKey(lst[i])) {\n                dict[lst[i]]++;\n\
    \            } else {\n                dict[lst[i]] = 1;\n            }\n    \
    \    }\n        var dlst = dict.ToList();\n        dlst.Sort((a, b) => (a.Key.Length\
    \ != b.Key.Length) ? a.Key.Length - b.Key.Length : a.Key.CompareTo(b.Key));\n\
    \        foreach (var d in dlst) {\n            if (d.Value % 2 == 0) {\n    \
    \            continue;\n            }\n            ret.Add(d.Key);\n        }\n\
    \        return ret;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be86bdfc0ad244d0b89b27425a8454a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be86bdfc0ad244d0b89b27425a8454a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your Code Here\n        List<string> newlst = new List<string>();\n\
    \        foreach (string item in lst) {\n            if (item.Length % 2 == 0)\
    \ {\n                newlst.Add(item);\n            }\n        }\n        newlst.Sort();\n\
    \        return newlst;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\"\
    , (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfb9f27eb07540c19a2a03c0b978fdbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfb9f27eb07540c19a2a03c0b978fdbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        //Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <e0a8c0deb5444713bae293a6f19727e3>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <e0a8c0deb5444713bae293a6f19727e3>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Delete the strings that have odd lengths from it\n      \
    \  var odd = new List<string>();\n        foreach (var s in lst) {\n         \
    \   if (s.Length % 2 == 1) {\n                odd.Add(s);\n            }\n   \
    \     }\n        foreach (var s in odd) {\n            lst.Remove(s);\n      \
    \  }\n        lst.Sort();\n        return lst;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11c8ed14754e47a6ba9982c944fe6062>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11c8ed14754e47a6ba9982c944fe6062>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> oddLengthList = new List<string>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 0) {\n\
    \                oddLengthList.Add(lst[i]);\n            }\n        }\n      \
    \  oddLengthList.Sort();\n        return oddLengthList;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b34a2846d6ea428ab8a757dbd9969312>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b34a2846d6ea428ab8a757dbd9969312>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c9d4e8abd5c468f88842e70b883aeb6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c9d4e8abd5c468f88842e70b883aeb6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Write your code here\n        var result = new List<string>();\n\
    \        var sorted = lst.OrderBy(x => x.Length).ToList();\n        int len =\
    \ sorted[0].Length;\n        foreach (var item in sorted) {\n            if (item.Length\
    \ == len) {\n                result.Add(item);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe46ac02263840d2bfab4ae41001c91a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe46ac02263840d2bfab4ae41001c91a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var ordered = lst.OrderBy(s => s.Length).ThenBy(s => s);\n \
    \       var result = new List<string>();\n        string last = \"\";\n      \
    \  foreach (var item in ordered) {\n            if (item.Length == last.Length)\
    \ {\n                result[result.Count - 1] = item;\n            } else {\n\
    \                result.Add(item);\n            }\n            last = item;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac2576b8f30d4a99b0095a36a2c9f967>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac2576b8f30d4a99b0095a36a2c9f967>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55e7ba601b274777b92054c2bc1a6b8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55e7ba601b274777b92054c2bc1a6b8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> newList = new List<string>();\n        // Your\
    \ code here\n        return newList;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e35f2321de2748499575128c8fe83a17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e35f2321de2748499575128c8fe83a17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        foreach (string\
    \ str in lst) {\n            if (str.Length % 2 == 0) {\n                ret.Add(str);\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f016826abd9476ca870d280eea81424>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f016826abd9476ca870d280eea81424>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(s => s.Length % 2 == 0).OrderBy(s => s.Length).ThenBy(s\
    \ => s).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 0)\n    \
    \            result.Add(lst[i]);\n        }\n        result.Sort((string s1, string\
    \ s2) => {\n            if (s1.Length < s2.Length)\n                return -1;\n\
    \            else if (s1.Length > s2.Length)\n                return 1;\n    \
    \        else\n                return s1.CompareTo(s2);\n        });\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28254d9d67e54874ab84d5a502b4c7f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28254d9d67e54874ab84d5a502b4c7f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // write your code here\n        return lst;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5372244b06143d79a9b8930e750005b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5372244b06143d79a9b8930e750005b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var res = new List<string>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            res.Add(lst[i]);\n        }\n        for (int i = 0; i <\
    \ res.Count; i++) {\n            for (int j = i + 1; j < res.Count; j++) {\n \
    \               if (res[i].Length > res[j].Length) {\n                    var\
    \ t = res[i];\n                    res[i] = res[j];\n                    res[j]\
    \ = t;\n                }\n            }\n        }\n        return res;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b1236eb2ea145f288201c06042d0371>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b1236eb2ea145f288201c06042d0371>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var lst2 = lst.OrderBy(x => x.Length).ThenBy(x => x).ToList();\n\
    \        lst2.RemoveAll(x => x.Length % 2 == 1);\n        return lst2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b65e1a3a1474c8182c9a16ad0c957ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b65e1a3a1474c8182c9a16ad0c957ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var unique = new HashSet<string>(lst);\n        var results\
    \ = new List<string>();\n        foreach (var item in unique) {\n            var\
    \ count = 0;\n            foreach (var item2 in lst) {\n                if (item2\
    \ == item) {\n                    count += 1;\n                }\n           \
    \ }\n            results.Add(item + \"(\" + count + \")\");\n        }\n     \
    \   return results;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dffc3dd1f350413d88ff346142167e6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dffc3dd1f350413d88ff346142167e6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> res = new List<string>();\n        int len = lst[0].Length;\n\
    \        foreach (string str in lst) {\n            if (str.Length == len) {\n\
    \                res.Add(str);\n            }\n        }\n        res.Sort();\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cdc0a7cc32204e64a5934cceecede912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cdc0a7cc32204e64a5934cceecede912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Write your code here\n        string[] a = lst.ToArray();\n\
    \        List<string> even = new List<string>();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            if (a[i].Length % 2 == 0) {\n                even.Add(a[i]);\n\
    \            }\n        }\n        even.Sort();\n        return even;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dc8946508334b0796080a28f7286715>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dc8946508334b0796080a28f7286715>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        result.AddRange(lst.Where(s\
    \ => s.Length % 2 == 0).OrderBy(s => s).ToList());\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7daaf13a92f54730b369e3e174e73c5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7daaf13a92f54730b369e3e174e73c5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // <CODE>\n        // return (new List<string>(new string[]{(string)\"\
    qwerty\"}));\n        var list = new List<string>();\n        var length = lst[0].Length;\n\
    \        foreach (var s in lst) {\n            if (s.Length == length) {\n   \
    \             list.Add(s);\n            }\n        }\n        list.Sort();\n \
    \       return list;\n        // </CODE>\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0635b6c3f55d4d1fb71ee7bdfda2fa6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0635b6c3f55d4d1fb71ee7bdfda2fa6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        int min = int.MaxValue;\n\
    \        List<string> copy = new List<string>(lst);\n        while (copy.Count\
    \ != 0) {\n            min = int.MaxValue;\n            foreach (string s in copy)\
    \ {\n                if (s.Length < min) {\n                    min = s.Length;\n\
    \                }\n            }\n            copy.RemoveAll(s => s.Length !=\
    \ min);\n            copy.Sort();\n            ret.AddRange(copy);\n         \
    \   copy.Clear();\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <800db60078a348509c38ebbe95891351>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <800db60078a348509c38ebbe95891351>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return (from elem in lst\n                where elem.Length\
    \ % 2 == 0\n                orderby elem\n                select elem).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce32bbcba0f64fbbb083389c5b4d77e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce32bbcba0f64fbbb083389c5b4d77e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // FIXME: Implement me!\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <b74523aae5234284a66d8eb8698be08b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <b74523aae5234284a66d8eb8698be08b>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        return lst;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89043389fc344c55adfd20094ee88e11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89043389fc344c55adfd20094ee88e11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code here...\n        List<string> oddList = new List<string>();\n\
    \        List<string> evenList = new List<string>();\n        foreach (string\
    \ str in lst) {\n            if (str.Length % 2 == 0) {\n                evenList.Add(str);\n\
    \            } else {\n                oddList.Add(str);\n            }\n    \
    \    }\n        // Sort each list alphabetically before adding\n        evenList.Sort();\n\
    \        oddList.Sort();\n        evenList.AddRange(oddList);\n        return\
    \ evenList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <082a7da565a14a9899ff20df58c875f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <082a7da565a14a9899ff20df58c875f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        int i = 0;\n\
    \        while (i < lst.Count) {\n            int sum = 0;\n            string\
    \ s = lst[i];\n            for (int k = 0; k < s.Length; k++) {\n            \
    \    if (s[k] != ' ') {\n                    sum += (int)s[k];\n             \
    \   }\n            }\n            if (sum % 2 == 0) {\n                result.Add(s);\n\
    \            }\n            i++;\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccd8920ff81542b8bffc141f23406774>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccd8920ff81542b8bffc141f23406774>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.FindAll(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98bd6796c2d442c2879ef91dffb86e80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98bd6796c2d442c2879ef91dffb86e80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        if (lst.Count\
    \ == 0) {\n            return ret;\n        }\n        List<string> newlst = new\
    \ List<string>();\n        for (int i = 0; i < lst.Count; i++) {\n           \
    \ if (lst[i].Length % 2 == 0) {\n                newlst.Add(lst[i]);\n       \
    \     }\n        }\n        ret = newlst.OrderBy(x => x.Length).ThenBy(x => x).ToList();\n\
    \        return ret;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79e12a734a774f7185cfe6b8ae668144>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79e12a734a774f7185cfe6b8ae668144>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(s => s.Length % 2 == 0).OrderBy(s => s.Length).ThenBy(s\
    \ => s).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ccb5dc3d29540ad961933c9e702f7de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ThenBy(x\
    \ => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <520ea8e6f89642cfb83c0711f6094186>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var result = new List<string>();\n        var hash = new HashSet<string>();\n\
    \        foreach (var x in lst) {\n            int length = x.Length;\n      \
    \      if (length % 2 == 0) {\n                hash.Add(x);\n            }\n \
    \       }\n        result = hash.ToList();\n        result.Sort();\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c07a30df11a34c81a122d7d89df2b0c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c07a30df11a34c81a122d7d89df2b0c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return new List<string>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <c72a3137c4f54bad8e9bc7b8090bc756>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <c72a3137c4f54bad8e9bc7b8090bc756>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // change your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc2d72fb87ff45dab6d7c923b78c5c82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc2d72fb87ff45dab6d7c923b78c5c82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var ret = new List<string>();\n        foreach (var str in lst)\
    \ {\n            ret.Add(str);\n        }\n        ret.Sort();\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9be413a1963e410da85aa41deb173ee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9be413a1963e410da85aa41deb173ee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var sorted = lst.Where(x => x.Length % 2 == 0).OrderBy(x =>\
    \ x.Length).ToList();\n        return sorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5724322a86f7442dad9539eaad9b6168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5724322a86f7442dad9539eaad9b6168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        foreach (string\
    \ str in lst) {\n            if (str.Length % 2 == 0) {\n                result.Add(str);\n\
    \            }\n        }\n        // sort by length\n        result.Sort((a,\
    \ b) => {\n            int lenA = a.Length;\n            int lenB = b.Length;\n\
    \            if (lenA == lenB) {\n                return a.CompareTo(b);\n   \
    \         }\n            return lenA.CompareTo(lenB);\n        });\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15fc4a5c1465450ebe51941a1c8bfa73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15fc4a5c1465450ebe51941a1c8bfa73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> list = new List<string>();\n        for (int i\
    \ = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 0) {\n    \
    \            list.Add(lst[i]);\n            }\n        }\n        for (int i =\
    \ 0; i < list.Count; i++) {\n            for (int j = 0; j < list.Count; j++)\
    \ {\n                if (list[i].Length < list[j].Length) {\n                \
    \    string temp = list[i];\n                    list[i] = list[j];\n        \
    \            list[j] = temp;\n                }\n            }\n        }\n  \
    \      return list;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"\
    a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"\
    }))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702f17e398ff43aa8ab294dda4cf788b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702f17e398ff43aa8ab294dda4cf788b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return new List<string>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2554f45d5d8544c4a97c24591ce7e4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // write your code here:\n        // Create a temporary list\
    \ to build our result\n        List<string> temp = new List<string>();\n     \
    \   // The task is to delete all of the odd length strings, so we loop over each\
    \ string\n        foreach (string word in lst) {\n            // If the length\
    \ of the word is even, then it stays in the list\n            if (word.Length\
    \ % 2 == 0) {\n                temp.Add(word);\n            }\n        }\n   \
    \     // Sort the list by length, then alphabetically\n        // The first part\
    \ of the lambda function uses the Length property of each string to sort them\n\
    \        // The second part makes sure that any strings of the same length are\
    \ sorted alphabetically\n        temp.Sort((a, b) => a.Length != b.Length ? a.Length.CompareTo(b.Length)\
    \ : a.CompareTo(b));\n        // temp.Sort(delegate(string s1, string s2) { return\
    \ s1.Length != s2.Length ? s1.Length.CompareTo(s2.Length) : s1.CompareTo(s2);\
    \ });\n        // temp.Sort((a, b) => { return a.Length != b.Length ? a.Length.CompareTo(b.Length)\
    \ : a.CompareTo(b); });\n        // return the newly sorted list\n        return\
    \ temp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89adbe186f7d4e439da0e2fe2afade26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89adbe186f7d4e439da0e2fe2afade26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> nList = new List<string>();\n        int len =\
    \ 0;\n        if (lst.Count > 0) {\n            len = lst[0].Length;\n       \
    \ }\n        foreach (string item in lst) {\n            if (item.Length == len)\
    \ {\n                nList.Add(item);\n            }\n        }\n        return\
    \ nList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9ee1b0f3cfb48c48ad6c04c1983f143>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9ee1b0f3cfb48c48ad6c04c1983f143>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if (s.Length % 2 == 0) {\n                ret.Add(s);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e0c9b7796cc45dbafd63b58b43ab828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e0c9b7796cc45dbafd63b58b43ab828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        int length = lst[0].Length;\n        List<string> new_lst =\
    \ new List<string>();\n        foreach (string str in lst) {\n            if (str.Length\
    \ == length) {\n                new_lst.Add(str);\n            }\n        }\n\
    \        new_lst.Sort();\n        return new_lst;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a5851af703841d2992feeabf0b21471>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a5851af703841d2992feeabf0b21471>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> retVal = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if (s.Length % 2 == 0) {\n                retVal.Add(s);\n\
    \            }\n        }\n        retVal.Sort();\n        return retVal;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55d31d4a56774c07b015a981bfb479bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55d31d4a56774c07b015a981bfb479bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        var unique = lst.Distinct();\n        var ordered = unique.OrderBy(s\
    \ => s.Length).ThenBy(s => s);\n        return ordered.ToList();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f26b1892c2ea4f8aaab81deeb39a084b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f26b1892c2ea4f8aaab81deeb39a084b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Write your code here\n        return lst;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ae62b778d02465c9f0db66839f1f9d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ae62b778d02465c9f0db66839f1f9d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // YOUR CODE HERE\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <ab5a9860fdb7462aacbddcf15f6aa8de>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <ab5a9860fdb7462aacbddcf15f6aa8de>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // write your answer between here...\n        List<string> res\
    \ = new List<string>();\n        var sorted = lst.OrderBy(p => p.Length).ThenBy(p\
    \ => p);\n        foreach (var x in sorted) {\n            if (x.Length % 2 ==\
    \ 0) {\n                res.Add(x);\n            }\n        }\n        return\
    \ res;\n        // ... and here\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca1599ceeb97447b9d6879527d6a2508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca1599ceeb97447b9d6879527d6a2508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> retList = new List<string>();\n        foreach\
    \ (string item in lst) {\n            if (item.Length % 2 == 0) {\n          \
    \      retList.Add(item);\n            }\n        }\n        retList.Sort();\n\
    \        return retList;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\"\
    , (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0673cf96e1394f2e9a919edb576e9037>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0673cf96e1394f2e9a919edb576e9037>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // TODO\n        List<string> NewList = new List<string>();\n\
    \        List<string> ReturnList = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if (s.Length % 2 == 0) {\n                NewList.Add(s);\n\
    \            }\n        }\n        NewList.Sort();\n        ReturnList = NewList;\n\
    \        return ReturnList;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b895aadf40e4b3ebd53e300a8390851>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b895aadf40e4b3ebd53e300a8390851>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n\
    \            }\n        }\n        result.Sort();\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <611d5a8ffda24ef2b7f4efd0266c41e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <611d5a8ffda24ef2b7f4efd0266c41e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        throw new Exception(\"Not implemented!\");\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Exception: Not implemented!\n  at Problem.Main\
    \ (System.String[] args) [0x00024] in <9efbf627a9884853bdf2480a3553ada8>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Not implemented!\n  at Problem.Main\
    \ (System.String[] args) [0x00024] in <9efbf627a9884853bdf2480a3553ada8>:0 \n"
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> res = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if (s.Length % 2 == 0) {\n                res.Add(s);\n\
    \            }\n        }\n        res.Sort();\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe96e16710ad4f64a49f0ae8550cc16d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe96e16710ad4f64a49f0ae8550cc16d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> output = new List<string>();\n        int length\
    \ = lst[0].Length;\n        foreach (string s in lst) {\n            if (s.Length\
    \ == length) {\n                output.Add(s);\n            }\n        }\n   \
    \     output.Sort();\n        return output;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <569f22dea3af45bfb5f203f9faee70ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <569f22dea3af45bfb5f203f9faee70ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        int currentLength\
    \ = 0;\n        while (true) {\n            foreach (string item in lst) {\n \
    \               if (item.Length == currentLength) {\n                    result.Add(item);\n\
    \                }\n            }\n            currentLength++;\n            if\
    \ (currentLength > lst.Max(m => m.Length)) {\n                break;\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8920385c05a2419695b6e85d5d379f50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8920385c05a2419695b6e85d5d379f50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028302
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> result = new List<string>();\n        foreach (string\
    \ i in lst) {\n            if (i.Length % 2 == 0)\n                result.Add(i);\n\
    \        }\n        result.Sort();\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ce0e556f16740ae949528b1af0e6985>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ce0e556f16740ae949528b1af0e6985>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028301
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> ret = new List<string>();\n        int len = lst[0].Length;\n\
    \        foreach (string s in lst) {\n            if (s.Length == len) {\n   \
    \             ret.Add(s);\n            }\n        }\n        ret.Sort();\n   \
    \     return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <788cb6194df84a1bac82e275996581b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <788cb6194df84a1bac82e275996581b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028302
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return lst.Where(x => x.Length % 2 == 0).OrderBy(x => x.Length).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8002215cebdc405f95108e4a18671318>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8002215cebdc405f95108e4a18671318>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort((a, b) => a.Length.CompareTo(b.Length));\n        lst.Sort((a,\
    \ b) => a.CompareTo(b));\n        return lst;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60bf44686d8a42c5901191e38944d474>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60bf44686d8a42c5901191e38944d474>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028302
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Write your code here\n        List<string> result = new List<string>();\n\
    \        foreach (string i in lst) {\n            if (i.Length % 2 == 0) {\n \
    \               result.Add(i);\n            }\n        }\n        result.Sort();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\"\
    , (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9afdc044022f41fb8da305625f69f03d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9afdc044022f41fb8da305625f69f03d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028302
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        lst.Sort();\n        var lst2 = new List<string>();\n      \
    \  for (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 ==\
    \ 0) {\n                lst2.Add(lst[i]);\n            }\n        }\n        return\
    \ lst2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be1a7c2de761432b824f018c2103ad84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be1a7c2de761432b824f018c2103ad84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028302
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"\
    aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"\
    a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0003c] in <32dc2dedcd374f4297a436a7b77232d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        List<string> even = new List<string>();\n        foreach (string\
    \ s in lst) {\n            if (s.Length % 2 == 0) {\n                even.Add(s);\n\
    \            }\n        }\n        even.Sort();\n        return even;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\"\
    , (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"\
    asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22e69344b91143599c5c71374254e257>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22e69344b91143599c5c71374254e257>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028302
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"\
    ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new\
    \ string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string>\
    \ lst) {\n        // Remove all strings with odd lengths\n        lst.RemoveAll(s\
    \ => s.Length % 2 == 1);\n        // Sort by length. If length is the same, sort\
    \ alphabetically\n        lst.Sort((a, b) => a.Length == b.Length ? a.CompareTo(b)\
    \ : a.Length.CompareTo(b.Length));\n        return lst;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new\
    \ string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"\
    }))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"\
    school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\",\
    \ (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new\
    \ List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n\
    \    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\",\
    \ (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new\
    \ List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"\
    aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new\
    \ string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d1c6a0b50d248869cee3b776bf6322c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d1c6a0b50d248869cee3b776bf6322c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028302
