name: HumanEval_71_triangle_area
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given the lengths of the three sides of a triangle. Return the\
  \ area of\n    // the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
  \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
  \    // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n   \
  \ // >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float\
  \ TriangleArea(long a, long b, long c) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),\
  \ (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n\
  \    Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),\
  \ (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n\
  \    Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),\
  \ (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==\
  \ (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n\
  \    }\n\n}\n"
completions: ["        var sorted = new long[] { a, b, c }.OrderBy(x => x).ToArray();\n\
    \        if (sorted[0] + sorted[1] <= sorted[2]) {\n            return -1;\n \
    \       }\n        var p = (a + b + c) / 2.0f;\n        return (float)Math.Sqrt(p\
    \ * (p - a) * (p - b) * (p - c));", "        // Your Code Here\n        return\
    \ -1;", "        if (a + b > c && a + c > b && b + c > a) {\n            float\
    \ s = (a + b + c) / 2f;\n            float area = (float)Math.Sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n            return (float)Math.Round(area, 2);\n    \
    \    }\n        return -1;", '        throw new NotImplementedException();', " \
    \       float[] Sides = new float[] { a, b, c };\n        Array.Sort(Sides);\n\
    \        float sum = Sides[0] + Sides[1];\n        if (sum <= Sides[2]) {\n  \
    \          return -1;\n        } else {\n            return 0.5f * (Sides[0] *\
    \ Sides[1]);\n        }", "        // your code goes here\n        return 0.0f;",
  "        // TODO: Implement your solution here\n        if(a + b > c && a + c >\
    \ b && b + c > a) {\n            return (float)Math.Sqrt((a + b + c) * (a + b\
    \ - c) * (a - b + c) * (-a + b + c)) / 4;\n        } else {\n            return\
    \ -1;\n        }", "        // TODO: Implement\n        return 0;", "        //\
    \ First check if a triangle is even possible given the side lengths\n        if\
    \ ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return -1;\n \
    \       }\n        // The area of a triangle is:\n        //    A = 0.5 * sqrt(p(p-a)(p-b)(p-c))\n\
    \        // where p is the semiperimeter\n        var p = (a + b + c) / 2;\n \
    \       var area = 0.5 * Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n       \
    \ return (float)area;", "        // Using Heron's formula for calculating the\
    \ area of a triangle.\n        // Now we have to add the triangle inequality constraint.\n\
    \        if (a + b > c && a + c > b && b + c > a) {\n            float p = (a\
    \ + b + c) / 2f;\n            float area = (float)Math.Sqrt(p * (p - a) * (p -\
    \ b) * (p - c));\n            return area;\n        }\n        return -1;", " \
    \       if (a + b > c && a + c > b && b + c > a) {\n            double s = (a\
    \ + b + c) / 2.0;\n            return (float)Math.Sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n        }\n        return -1;", "        float s = (a + b + c) /\
    \ 2;\n        if (s > a && s > b && s > c) {\n            return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        }\n        return -1;", "        if\
    \ (a + b > c && a + c > b && b + c > a) {\n            var p = (a + b + c) / 2.0f;\n\
    \            return (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n     \
    \   }\n        return -1;", "        if ((a + b) > c && (a + c) > b && (b + c)\
    \ > a) {\n            float s = (a + b + c) / 2.0f;\n            return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        }\n        return -1;", "        //\
    \ Your solution goes here.\n        return -1f;", "        long[] arr = new long[]\
    \ { a, b, c };\n        Array.Sort(arr);\n        long sum = arr[0] + arr[1];\n\
    \        return sum > arr[2] ? (float)(0.5 * arr[0] * arr[1]) : -1;", "      \
    \  float result = -1;\n        if (a + b > c && a + c > b && b + c > a) {\n  \
    \          float s = (a + b + c) / 2.0f;\n            result = (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        }\n        return result;", "     \
    \   var edgeCount = new long[] { a, b, c }.OrderBy(x => x).ToArray();\n      \
    \  if (edgeCount[0] + edgeCount[1] > edgeCount[2]) {\n            var p = (a +\
    \ b + c) / 2.0f;\n            return (float)Math.Sqrt(p * (p - a) * (p - b) *\
    \ (p - c));\n        }\n        return -1;", '        return 0;', "        //\
    \ Write your code here\n        float s = (a + b + c) / 2.0f;\n        float area\
    \ = -1;\n        if ((a < s) && (b < s) && (c < s)) {\n            area = (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        }\n        return area;", "       \
    \ if (a > b) {\n            var temp = a;\n            a = b;\n            b =\
    \ temp;\n        }\n        if (b > c) {\n            var temp = b;\n        \
    \    b = c;\n            c = temp;\n        }\n        if (a > b) {\n        \
    \    var temp = a;\n            a = b;\n            b = temp;\n        }\n   \
    \     if (a + b <= c) return -1;\n        if (a <= 0 || b <= 0 || c <= 0) return\
    \ -1;\n        var s = (a + b + c) / 2.0f;\n        return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));", "        // your code goes here\n        if\
    \ (a + b > c && a + c > b && b + c > a)\n            return ((float)Math.Sqrt((a\
    \ + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) / 4);\n        else\n  \
    \          return -1;", "        double s = (a + b + c) / 2;\n        return (float)(-1L);",
  "        if (a <= 0 || b <= 0 || c <= 0) {\n            return -1;\n        }\n\
    \        // (s * (s - a) * (s - b) * (s - c))\n        // where s = (a + b + c)\
    \ / 2.0\n        float s = (a + b + c) / 2.0f;\n        return s * (s - a) * (s\
    \ - b) * (s - c) <= 0 ? -1 : (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));",
  "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n\
    \        }\n        // the area of a triangle is half the base times the height\n\
    \        // to find the area of a triangle, we can use heron's formula\n     \
    \   // a, b, c are the lengths of the three sides\n        // P is the perimeter\n\
    \        // s is half the perimeter\n        // A is the area of the triangle\n\
    \        // then, A = sqrt(s(s-a)(s-b)(s-c))\n        // or, A = sqrt(P/2(P/2-a)(P/2-b)(P/2-c))\n\
    \        // or, A = sqrt((P^2)/4 - (P(a+b+c)/2) + (abc)/4)\n        // or, A =\
    \ sqrt((a^2 + b^2 + c^2 - ab - bc - ca)/4)\n        // which is what we use below\n\
    \        double a2 = a * a;\n        double b2 = b * b;\n        double c2 = c\
    \ * c;\n        double ab = a * b;\n        double bc = b * c;\n        double\
    \ ca = c * a;\n        return (float)Math.Sqrt((a2 + b2 + c2 - ab - bc - ca) /\
    \ 4);", "        // if the sum of any two sides is greater than the third side\n\
    \        if (a+b > c && a+c > b && b+c > a) {\n            // half perimeter\n\
    \            float p = (a+b+c)/2f;\n            return (float)Math.Sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \        }\n        return -1;", "        var sides = new long[] { a, b, c };\n\
    \        Array.Sort(sides);\n        return sides[0] + sides[1] > sides[2] ? (float)Math.Sqrt(\n\
    \            sides[0] * sides[0] + sides[1] * sides[1] - sides[2] * sides[2])\
    \ / 4 : -1;", "        float s = (a + b + c) / 2.0f;\n        float area = (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        if (a + b > c && a + c > b && b + c\
    \ > a) {\n            return area;\n        }\n        return -1;", "        float\
    \ s = (a + b + c) / 2;\n        return a + b > c && a + c > b && b + c > a ? (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c)) : -1;", "        return (a > 0 && b > 0 && c\
    \ > 0 && a + b > c && a + c > b && b + c > a) ?\n            (float)(0.5f * Math.Sqrt(a\
    \ * a + b * b - 2 * a * b * Math.Cos(Math.PI * c / Math.Sqrt(a * a + b * b - a\
    \ * b)))) :\n            -1;", '        return -1;', "        if (a + b > c &&\
    \ a + c > b && b + c > a) {\n            double s = (a + b + c) / 2f;\n      \
    \      return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n\
    \        return -1;", "        // sort(a, b, c)\n        if (a > b) {\n      \
    \      var tmp = a;\n            a = b;\n            b = tmp;\n        }\n   \
    \     if (b > c) {\n            var tmp = b;\n            b = c;\n           \
    \ c = tmp;\n        }\n        if (a > b) {\n            var tmp = a;\n      \
    \      a = b;\n            b = tmp;\n        }\n        if (a+b <= c) {\n    \
    \        return -1;\n        }\n        // Heron's formula\n        var s = (a+b+c)/2.0f;\n\
    \        return (float)Math.Sqrt(s*(s-a)*(s-b)*(s-c));", "        // (1) All sides\
    \ must be positive\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return\
    \ -1.0f;\n        }\n        // (2) The sum of any two sides must be greater than\
    \ the third side\n        if (a + b <= c || a + c <= b || b + c <= a) {\n    \
    \        return -1.0f;\n        }\n        // The area is the half of the semi-perimeter\
    \ times the radius of the\n        // incircle. See area and incircle:\n     \
    \   // http://mathworld.wolfram.com/Triangle.html\n        float area = 0.5f *\
    \ (a + b + c) * (c - a + b) * (a - b + c) * (a + b - c);\n        if (area <=\
    \ 0) {\n            return -1.0f;\n        }\n        return (float)Math.Sqrt(area);",
  "        float num = -1f;\n        bool sides = a + b > c && a + c > b && b + c\
    \ > a;\n        if (sides) {\n            double area = a * b * c;\n         \
    \   area /= 4 * Math.Sqrt(area);\n            num = (float)area;\n        }\n\
    \        return num;", "        float s = 0;\n        if (a + b > c && a + c >\
    \ b && b + c > a) {\n            s = (float)((a + b + c) / 2.0);\n           \
    \ return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n     \
    \   return -1;", "        // TODO\n        return -1;", "        long[] sides\
    \ = new long[] { a, b, c };\n        Array.Sort(sides);\n        if (sides[0]\
    \ + sides[1] <= sides[2]) return -1;\n        double s = 0.5 * (a + b + c);\n\
    \        return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));", "       \
    \ float p = (a + b + c) / 2f;\n        float area = (float)Math.Sqrt(p * (p -\
    \ a) * (p - b) * (p - c));\n        if (area > 0) {\n            return (float)Math.Round(area,\
    \ 2);\n        }\n        return -1;", "        // TODO\n        throw new NotImplementedException();",
  "        // Your code here\n        return 0;", "        var list = new List<long>()\
    \ { a, b, c };\n        list.Sort();\n        var sorted = list.ToArray();\n \
    \       if (sorted[0] + sorted[1] > sorted[2]) {\n            return 0.5f * sorted[0]\
    \ * sorted[1];\n        }\n        return -1;", "        // It's possible to use\
    \ the Heron's formula to calculate the area of a triangle\n        // using the\
    \ three sides of the triangle.\n        // https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \        //\n        // We also know that a + b > c, b + c > a, and a + c > b.\n\
    \        // Since the triangle area will be negative if these conditions are not\
    \ met, we return -1.\n        //\n        // Time complexity: O(1)\n        //\
    \ Space complexity: O(1)\n        if (a + b <= c || b + c <= a || a + c <= b)\
    \ {\n            return -1;\n        }\n        float s = (a + b + c) / 2.0f;\n\
    \        return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));", "       \
    \ if ((a + b) <= c || (a + c) <= b || (b + c) <= a) {\n            return -1;\n\
    \        }\n        var p = (a + b + c) / 2f;\n        return (float)Math.Sqrt(p\
    \ * (p - a) * (p - b) * (p - c));", "        if ((a > 0) && (b > 0) && (c > 0))\
    \ {\n            var s = (a + b + c) / 2;\n            var A = Math.Sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n            if (!float.IsNaN(A)) {\n           \
    \     return (float)A;\n            }\n        }\n        return -1;", "     \
    \   // Implement\n        return -1;", "        float s = (a + b + c) / 2.0f;\n\
    \        float tmp = s * (s - a) * (s - b) * (s - c);\n        if (tmp < 0) return\
    \ -1;\n        float area = (float)Math.Sqrt(tmp);\n        return area;", " \
    \       if (a + b > c && a + c > b && b + c > a) {\n            return (float)0.5\
    \ * (a * b + b * c + a * c);\n        }\n        return -1;", "        // Start\
    \ by getting the semiperimeter, which is half the perimeter\n        // of the\
    \ triangle. Formula is s = (a + b + c) / 2\n        // With the semiperimeter,\
    \ use Heron's formula to get the area\n        // of the triangle using the three\
    \ sides.\n        // https://en.wikipedia.org/wiki/Heron%27s_formula\n       \
    \ // The formula is: \n        // A = sqrt(s(s-a)(s-b)(s-c))\n        // The two\
    \ requirements for a valid triangle are:\n        // a, b, c > 0\n        // The\
    \ sum of any two sides is greater than the third side\n        // To check these\
    \ conditions, simply check if any sides are less than 0\n        // and if any\
    \ two sides added together is less than the third side\n        // If either of\
    \ those conditions aren't met, return -1\n        // If they are, return the area\
    \ of the triangle\n        if (a <= 0 || b <= 0 || c <= 0 || a + b < c || a +\
    \ c < b || b + c < a) {\n            return -1;\n        }\n        float s =\
    \ (a + b + c) / 2.0f;\n        float area = (float)Math.Sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n        return area;", "        // Your code goes here\n \
    \       float s = (a + b + c) / 2.0f;\n        float area = s * (s - a) * (s -\
    \ b) * (s - c);\n        return area <= 0 ? -1 : (float)Math.Sqrt(area);", " \
    \       float result = -1;\n        if(a < b + c && b < a + c && c < a + b) {\n\
    \            float p = (a + b + c) / 2;\n            result = (float)Math.Sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n        }\n        return result;", "     \
    \   float n = (float)(a + b + c) / 2;\n        float s = (float)Math.Sqrt(n *\
    \ (n - a) * (n - b) * (n - c));\n        if (s > 0) {\n            return s;\n\
    \        }\n        return -1;", "        // Your code goes here.\n        return\
    \ default(float);", "        // YOUR CODE HERE\n        return -1;", "       \
    \ // make a triangle with a as the base and b, c as legs\n        float s = (a\
    \ + b + c) / 2.0f;\n        float area = (float)Math.Sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n        if (area == 0) {\n            return -1;\n        }\n \
    \       return area;", '        return -1;', "        float s = (a + b + c) /\
    \ 2.0f;\n        if (s > a && s > b && s > c) {\n            return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        }\n        return -1;", "        if\
    \ (a < 0 || b < 0 || c < 0) return -1;\n        if (a == 0 || b == 0 || c == 0)\
    \ return -1;\n        if (a + b <= c) return -1;\n        if (a + c <= b) return\
    \ -1;\n        if (b + c <= a) return -1;\n        float result = (float)(a *\
    \ b * c);\n        float e = (float)((a + b + c) / 2);\n        float area = (float)Math.Sqrt(e\
    \ * (e - a) * (e - b) * (e - c));\n        return area;", "        if (a + b >\
    \ c && a + c > b && b + c > a) {\n            float s = (a + b + c) / 2f;\n  \
    \          return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n       \
    \ }\n        return -1;", "        if (a + b <= c || a + c <= b || b + c <= a)\
    \ {\n            return -1;\n        }\n        double p = (a + b + c) / 2.0;\n\
    \        double result = Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n       \
    \ return (float)result;", "        bool isValid = true;\n        float result\
    \ = -1.0f;\n        if (a+b <= c || a+c <= b || b+c <= a) {\n            isValid\
    \ = false;\n        }\n        if (isValid) {\n            float s = (a+b+c)/2.0f;\n\
    \            result = s*(s-a)*(s-b)*(s-c);\n            result = (float)Math.Sqrt(result);\n\
    \        }\n        return result;", "        if (a <= 0 || b <= 0 || c <= 0)\
    \ {\n            return -1;\n        }\n        var p = (a + b + c) / 2.0f;\n\
    \        var s = (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        return\
    \ s;", "        float s = (a + b + c) / 2;\n        if( s < a || s < b || s <\
    \ c )\n            return -1;\n        return (float)Math.Sqrt(s * (s - a) * (s\
    \ - b) * (s - c));", "        float[] sides = new float[] { (float)a, (float)b,\
    \ (float)c };\n        Array.Sort(sides);\n        float a2 = sides[0], b2 = sides[1],\
    \ c2 = sides[2];\n        float[] tri = new float[] { a2, b2, c2 };\n        if\
    \ (tri[0] + tri[1] > tri[2]) {\n            float p = (tri[0] + tri[1] + tri[2])\
    \ / 2;\n            float area = (float)Math.Sqrt(p * (p - tri[0]) * (p - tri[1])\
    \ * (p - tri[2]));\n            return area;\n        }\n        return -1;",
  "        //check if the three sides form a valid triangle\n        bool valid =\
    \ false;\n        if ((a + b) > c && (a + c) > b && (b + c) > a) {\n         \
    \   valid = true;\n        }\n\n        if (valid) {\n            // find the\
    \ semi-perimeter\n            double s = ((a + b + c) / 2.0);\n            double\
    \ area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n            return (float)area;\n\
    \        }\n        else {\n            return -1.0f;\n        }", "        float\
    \ perimeter = (float)(a + b + c);\n        float s = perimeter / 2;\n        float\
    \ area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        if (area\
    \ == 0) {\n            return -1;\n        }\n        return (float)Math.Round(area,\
    \ 2);", "        if (a + b > c && a + c > b && b + c > a) {\n            var s\
    \ = (a + b + c) / 2f;\n            return (float)Math.Sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n        }\n        return -1;", '        throw new NotImplementedException();',
  "        // your code here\n        float result = -1.0f;\n        if ((a+b > c)\
    \ && (a+c > b) && (b+c > a)) {\n            float p = (a+b+c)/2.0f;\n        \
    \    result = (float)Math.Sqrt(p*(p-a)*(p-b)*(p-c));\n        }\n        return\
    \ result;", "        if (a + b > c && a + c > b && b + c > a) {\n            double\
    \ s = (a + b + c) / 2.0;\n            return (float)Math.Sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n        }\n        return -1;", '        return -1;', "  \
    \      float area = -1;\n        if ((a + b > c) && (a + c > b) && (b + c > a))\
    \ {\n            float p = (a + b + c) / 2;\n            area = (float)Math.Sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n        }\n        return area;", "       \
    \ if (a + b <= c || b + c <= a || a + c <= b) {\n            return -1;\n    \
    \    }\n        return (float)Math.Round(0.5 * Math.Abs(a * (b * b - c * c) +\
    \ b * (c * c - a * a) + c * (a * a - b * b)), 2);", "        if (a+b>c && a+c>b\
    \ && b+c>a) {\n            var s = (a+b+c)/2.0f;\n            return (float)Math.Sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \        }\n        return -1;", "        if (a + b > c && a + c > b && b + c\
    \ > a) {\n            return (float)0.5 * (a + b + c);\n        }\n        return\
    \ -1;", '        return (a+b>c && a+c>b && b+c>a) ? (float)(a*b*c)/2 : -1;', " \
    \       // Implement me\n        return 0;", "        var triple = new [] { a,\
    \ b, c };\n        Array.Sort(triple);\n        if (triple[0] + triple[1] > triple[2])\
    \ {\n            return (float)(0.5 * Math.Sqrt(\n                triple[0] *\
    \ triple[0] +\n                triple[1] * triple[1] -\n                triple[2]\
    \ * triple[2]));\n        } else {\n            return -1f;\n        }", "   \
    \     if (a + b > c && a + c > b && b + c > a)\n            return (float)(0.5\
    \ * Math.Sqrt(a * a + b * b - 2 * a * b * Math.Cos(c * Math.PI / 180)));\n   \
    \     else\n            return -1;", '        return -1;', "        double d1\
    \ = (double)a;\n        double d2 = (double)b;\n        double d3 = (double)c;\n\
    \        if(d1+d2>d3 && d1+d3>d2 && d2+d3>d1) {\n            return (float)(0.5*Math.Sqrt((d1+d2+d3)*(d1+d2-d3)*(d1+d3-d2)*(d2+d3-d1)));\n\
    \        }\n        return -1;", "        var area = Area(a, b, c);\n        if\
    \ (area < 0) return -1;\n        return (float)Math.Round(area, 2);", "      \
    \  // Compute the area of the triangle with Heron's formula\n        // https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \        if(a <= 0 || b <= 0 || c <= 0 || a + b <= c || a + c <= b || b + c <=\
    \ a) {\n            return -1;\n        }\n        var p = (a + b + c) / 2.0f;\n\
    \        var area = Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        return\
    \ (float)Math.Round(area, 2);", "        if (a + b <= c || a + c <= b || b + c\
    \ <= a) {\n            return -1;\n        }\n        var s = (a + b + c) / 2f;\n\
    \        return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));", "       \
    \ float s = (a + b + c) / 2.0f;\n        if (s - a < 0 || s - b < 0 || s - c <\
    \ 0) {\n            return -1;\n        }\n        return (float)Math.Sqrt(s *\
    \ (s - a) * (s - b) * (s - c));", "        var sides = new long[] { a, b, c };\n\
    \        Array.Sort(sides);\n        var left = sides[0];\n        var middle\
    \ = sides[1];\n        var right = sides[2];\n        if (left + middle > right)\
    \ {\n            var halfPerimeter = (left + middle + right) / 2;\n          \
    \  return (float)Math.Sqrt(halfPerimeter * (halfPerimeter - left) * (halfPerimeter\
    \ - middle) * (halfPerimeter - right));\n        }\n        return -1;", "   \
    \     // C#: tuples\n        // https://docs.microsoft.com/en-us/dotnet/csharp/tuples\n\
    \        var t = (a, b, c);\n        var (x, y, z) = t;\n\n        // C#: sort\n\
    \        // https://www.dotnetperls.com/sort\n        // x <= y <= z\n       \
    \ if (x > y) {\n            var temp = x;\n            x = y;\n            y =\
    \ temp;\n        }\n        if (y > z) {\n            var temp = y;\n        \
    \    y = z;\n            z = temp;\n        }\n        if (x > y) {\n        \
    \    var temp = x;\n            x = y;\n            y = temp;\n        }\n\n \
    \       // Invalid triangle\n        if (x + y <= z) {\n            return -1;\n\
    \        }\n\n        // C#: pythagorean theorem\n        // https://www.mathsisfun.com/pythagoras.html\n\
    \        var s = (x + y + z) / 2.0f;\n        var area = (float)Math.Sqrt(s *\
    \ (s - x) * (s - y) * (s - z));\n        return area;", "        if (a < 0 ||\
    \ b < 0 || c < 0) {\n            return -1;\n        }\n\n        if (a == 0 ||\
    \ b == 0 || c == 0) {\n            return -1;\n        }\n\n        if (a + b\
    \ <= c) {\n            return -1;\n        }\n\n        if (a + c <= b) {\n  \
    \          return -1;\n        }\n\n        if (b + c <= a) {\n            return\
    \ -1;\n        }\n\n        float p = (a + b + c) / 2.0f;\n        float area\
    \ = (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        return area;",
  "        // Implementation here\n        return -1;", "        // check if valid\
    \ triangle\n        if (a+b > c && a+c > b && b+c > a) {\n            // Calculate\
    \ the area of the triangle\n            float s = (a+b+c)/2f;\n            float\
    \ area = (float)Math.Sqrt(s*(s-a)*(s-b)*(s-c));\n            return area;\n  \
    \      } else {\n            return -1;\n        }", "        float result = -1;\n\
    \        if (isValidTriangle(a, b, c)) {\n            float s = (a + b + c) /\
    \ 2;\n            float area = s * (s - a) * (s - b) * (s - c);\n            result\
    \ = area;\n        }\n        return result;", "        //long[] sides = new long[]\
    \ {a, b, c};\n        //Array.Sort(sides);\n        if (a <= 0 || b <= 0 || c\
    \ <= 0) {\n            return -1;\n        }\n        float sides = (float)(a\
    \ + b + c) / 2;\n        return (float)Math.Sqrt(sides * (sides - a) * (sides\
    \ - b) * (sides - c));", "        //Start our timer to test how fast we solve\
    \ the problem.\n        Stopwatch stopwatch = new Stopwatch();\n        stopwatch.Start();\n\
    \        // We are checking the first two conditions of \n        // the triangle\
    \ inequality theorem.\n        if (a + b > c && a + c > b && b + c > a) {\n  \
    \          //p is the semi-perimeter of the triangle.\n            float p = (a\
    \ + b + c) / 2f;\n            //If we meet the conditions we solve for the area\
    \ \n            //of the triangle and return it.\n            stopwatch.Stop();\n\
    \            float elapsedMs = stopwatch.ElapsedMilliseconds;\n            Console.WriteLine(\"\
    TriangleArea() took \" + elapsedMs + \" milliseconds to run.\");\n           \
    \ return (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        }\n     \
    \   //Else we return -1 as we were told to.\n        stopwatch.Stop();\n     \
    \   float elapsedMs2 = stopwatch.ElapsedMilliseconds;\n        Console.WriteLine(\"\
    TriangleArea() took \" + elapsedMs2 + \" milliseconds to run.\");\n        return\
    \ -1;", "        float s = (a + b + c) / 2.0f;\n        float area = (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        if (area > 0)\n            return area;\n\
    \        else\n            return -1;", "        // 0. First, check if the sum\
    \ of any two sides is less than the third\n        if ((a + b) < c || (a + c)\
    \ < b || (b + c) < a) {\n            return -1;\n        }\n        // 1. Use\
    \ Heron's formula (http://www.mathsisfun.com/geometry/herons-formula.html)\n \
    \       //    to compute the area of the triangle\n        float s = (a + b +\
    \ c) / 2;\n        float area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n        // 2. Return the area of the triangle rounded to 2 decimal points\n\
    \        return Math.Round(area, 2);", "        // do a sanity check, see if the\
    \ sides can even make a triangle\n        if(a+b <= c || a+c <= b || b+c <= a)\
    \ {\n            return -1;\n        }\n        // area of a triangle\n      \
    \  // A = sqrt(p(p-a)(p-b)(p-c))\n        // p = (a+b+c)/2\n        // where a,\
    \ b, and c are the sides of the triangle\n        // A = (p(p-a)(p-b)(p-c))^0.5\n\
    \        float p = (a+b+c)/2.0f;\n        float part = p*(p-a)*(p-b)*(p-c);\n\
    \        if(part < 0) {\n            part = part * -1;\n        }\n        //\
    \ round to 2 decimal places\n        return (float)Math.Round(Math.Sqrt(part),\
    \ 2);", "        return a + b > c && b + c > a && a + c > b ?\n            0.5f\
    \ * (float)(a * b + b * c + a * c) :\n            -1f;", "        if (a + b >\
    \ c && a + c > b && b + c > a)\n            return (float)(0.5 * Math.Sqrt(a *\
    \ a + b * b - 2 * a * b * Math.Cos(c * Math.PI / 180)));\n        else\n     \
    \       return -1;", "        float s = (a + b + c) / 2.0f;\n        if (s <=\
    \ a || s <= b || s <= c) {\n            return -1;\n        }\n        float area\
    \ = s * (s - a) * (s - b) * (s - c);\n        return area > 0 ? (float)Math.Sqrt(area)\
    \ : -1;", "        // Big O(1)\n        // Make sure that sides are within a possible\
    \ triangle\n        if (a < 1 || b < 1 || c < 1) {\n            return -1;\n \
    \       }\n        if (a + b < c || a + c < b || b + c < a) {\n            return\
    \ -1;\n        }\n        float s = (a + b + c) / 2;\n        float area = (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        return (float)Math.Round(area, 2);",
  "        var s = (a + b + c) / 2.0f;\n        return (s - a) * (s - b) * (s - c)\
    \ <= 0 ? -1 : (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));", "        //\
    \ Write your code here\n        float s = ((a + b + c) / 2.0f);\n        return\
    \ Math.Abs(s - a) * Math.Abs(s - b) * Math.Abs(s - c) == 0 ? -1 : (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));", "        if (a + b > c && a + c > b && b +\
    \ c > a) {\n            double s = (a + b + c) / 2.0;\n            return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        }\n        return -1;", "        var\
    \ l = new List<long>() { a, b, c };\n        var largest = l.Max();\n        var\
    \ other = l.Sum() - largest;\n        if (other <= largest) {\n            return\
    \ -1;\n        }\n        else {\n            var s = (float)((a + b + c) / 2.0);\n\
    \            return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n     \
    \   }", "        if (a <= 0 || b <= 0 || c <= 0) {\n            return -1;\n \
    \       }\n        if (a + b > c && a + c > b && b + c > a) {\n            return\
    \ (float) 0.5 * a * b;\n        }\n        return -1;", "        if (a+b > c &&\
    \ a+c > b && b+c > a)\n            return (float)(0.5*a*b);\n        else\n  \
    \          return -1;", "        // Check whether the sides create a valid triangle\n\
    \        bool validTriangle = a + b > c && a + c > b && b + c > a;\n        //\
    \ If it is a valid triangle then calculate the area\n        if (validTriangle)\
    \ {\n            // Using Heron's formula\n            float s = (a + b + c) /\
    \ 2.0f;\n            float area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s\
    \ - c));\n            return area;\n        }\n        // Else return -1\n   \
    \     return -1;", "        long ab = a + b;\n        long bc = b + c;\n     \
    \   long ca = c + a;\n        if (ab <= c || bc <= a || ca <= b) {\n         \
    \   return -1;\n        }\n        return (float)Math.Sqrt(\n                (a\
    \ + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)\n            ) / 4;", '        return
    (((a + b) > c) && ((a + c) > b) && ((b + c) > a)) ? (float)(a * b) / 2 : -1;',
  "        // NOTE: this is implemented using Heron's formula for the area of a\n\
    \        // triangle:\n        //    area = sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\n        // where s = 1/2(a + b + c)\n        //\n        // This formula\
    \ gets problematic if the side lengths are large, since\n        // then the product\
    \ (s - a) * (s - b) * (s - c) might overflow\n        // (even when the individual\
    \ terms don't overflow), and then sqrt might\n        // not do anything to fix\
    \ the result. So we do the calculation in\n        // floating point, rather than\
    \ in integers.\n        //\n        // (this also avoids issues with comparing\
    \ ints for < or >, since a\n        // long overflow in a + b does not necessarily\
    \ show up as an overflow\n        // in a < b)\n        float s = (a + b + c)\
    \ / 2.0f;\n        float area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n        if (area <= 0)\n            return -1;\n        return area;",
  "        // your code here\n        return (float)-1L;", "        float result =\
    \ -1;\n        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n            float\
    \ p = (a + b + c) / 2.0f;\n            result = (float)Math.Sqrt(p * (p - a) *\
    \ (p - b) * (p - c));\n        }\n        return result;", "        // Are any\
    \ sides <= 0\n        if (a <= 0 || b <= 0 || c <= 0) return -1;\n        // Are\
    \ any sides >= to the sum of the other two sides\n        if (a >= b + c || b\
    \ >= a + c || c >= a + b) return -1;\n        // return the area of the triangle\n\
    \        float s = (a + b + c) / 2f;\n        return (float)Math.Sqrt(s * (s -\
    \ a) * (s - b) * (s - c));", "        // Your code\n        throw new NotImplementedException();",
  "        var sides = new long[] { a, b, c };\n        Array.Sort(sides);\n     \
    \   var c1 = sides[0];\n        var c2 = sides[1];\n        var c3 = sides[2];\n\
    \        if (c1 + c2 > c3) {\n            // Heron's formula\n            var\
    \ p = (c1 + c2 + c3) / 2;\n            var area = Math.Sqrt(p * (p - c1) * (p\
    \ - c2) * (p - c3));\n            return (float)area;\n        }\n        return\
    \ -1;", "        // A valid triangle is when the sum of any two sides is greater\
    \ than the third side.\n        if (a < 0 || b < 0 || c < 0) {\n            return\
    \ -1;\n        } else if (a + b <= c || a + c <= b || b + c <= a) {\n        \
    \    return -1;\n        } else {\n            // Heron's Formula\n          \
    \  float x = (float)(a + b + c) / 2;\n            float y = (float)Math.Sqrt(x\
    \ * (x - a) * (x - b) * (x - c));\n            return y;\n        }", "      \
    \  if (a + b > c && a + c > b && b + c > a) {\n            var s = (a + b + c)\
    \ / 2.0f;\n            return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \        } else {\n            return -1;\n        }", "        // Write your\
    \ code here.\n        return -1;", "        if (a + b <= c || a + c <= b || b\
    \ + c <= a) {\n            return -1f;\n        }\n        float s = (a + b +\
    \ c) / 2f;\n        float area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n        return area;", "        float s = (a + b + c) / 2;\n        float\
    \ area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        return area\
    \ == 0 ? -1 : area;", "        float s = (a + b + c) / 2;\n        if (s < a ||\
    \ s < b || s < c) {\n            return -1;\n        }\n        return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));", "        // TODO: Implement your solution\
    \ here\n        return -1f;", "        if (a + b <= c || a + c <= b || b + c <=\
    \ a) {\n            return -1;\n        }\n        var s = (a + b + c) / 2.0f;\n\
    \        return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));", "       \
    \ // Solution 1\n        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n  \
    \          double s = (a + b + c) / 2;\n            double area = Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n            return (float)Math.Round(area,\
    \ 2);\n        }\n        return -1;\n        // Solution 2\n        //return\
    \ (a + b > c && a + c > b && b + c > a) ? (float)Math.Round(0.5 * Math.Abs(a *\
    \ (b - c) + b * (c - a) + c * (a - b)), 2) : -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // if(a + b > c && a + c > b && b + c >\
    \ a)\n        //   return (float)Math.Sqrt((double)(a + b + c) * (a + b - c) *\
    \ (a - b + c) * (-a + b + c)) / 4;\n        // return -1;\n        double x =\
    \ Math.Sqrt((double)(a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)) /\
    \ 4;\n        return x > 0 ? (float)x : -1;", "        // TODO\n        //if (a\
    \ <= 0 || b <= 0 || c <= 0) return -1;\n        //var p = (a + b + c) / 2.0;\n\
    \        //return Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        if ((a+b\
    \ > c) && (a+c > b) && (b+c > a))\n        {\n            var p = (a + b + c)\
    \ / 2.0;\n            return (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \        }\n        return -1;", "        float s = (a + b + c) / 2.0f;\n    \
    \    float area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n       \
    \ if (a + b > c && a + c > b && b + c > a) {\n            return (float)Math.Round(area,\
    \ 2);\n        }\n        return -1.0f;", "        if (a+b<=c || a+c<=b || b+c<=a)\
    \ {\n            return -1;\n        }\n        float p = (a+b+c)/2;\n       \
    \ float s = (float)Math.Sqrt(p*(p-a)*(p-b)*(p-c));\n        return s;", "    \
    \    float semiP = (a + b + c) / 2;\n        float area = (float)Math.Sqrt(semiP\
    \ * (semiP - a) * (semiP - b) * (semiP - c));\n        return area < 0 ? -1 :\
    \ area;", "        var sides = new List<long>() { a, b, c };\n        sides.Sort();\n\
    \        return (sides[0] + sides[1] > sides[2]) ? (float)(sides[0] * sides[1]\
    \ / 2) : -1;", "        if (a <= 0 || b <= 0 || c <= 0) return -1;\n        if\
    \ ((a + b) <= c || (a + c) <= b || (b + c) <= a) return -1;\n        float s =\
    \ (a + b + c) / 2.0f;\n        float area = (float)Math.Sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n        area = (float)Math.Round(area, 2);\n        return\
    \ area;", "        float area = (float)(a + b + c) / 2;\n        return area >\
    \ 0 ? (float)Math.Sqrt(area * (area - a) * (area - b) * (area - c)) : -1;", " \
    \       var s = (a + b + c) / 2f;\n        if (s - a <= 0 || s - b <= 0 || s -\
    \ c <= 0) {\n            return -1;\n        }\n        return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));", "        // YOUR CODE HERE\n        return\
    \ -1;", "        double s = (a + b + c) / 2.0;\n        double area = Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        if (area <= 0) {\n            return\
    \ -1;\n        }\n        return (float)Math.Round(area, 2);", "        // Start\
    \ with a base case\n        // There are only two cases where a triangle is not\
    \ valid\n        // A + B <= C or A + C <= B or B + C <= A \n        // Ensure\
    \ that these three cases are not valid and if they aren't\n        // return -1\n\
    \        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n\
    \        }\n        // Otherwise compute the Area of the triangle\n        //\
    \ The Area of a triangle when given the lengths of the sides\n        // is the\
    \ square root of s(s-a)(s-b)(s-c)\n        // where s = (a + b + c) / 2\n    \
    \    float s = (a + b + c) / 2.0f;\n        return (float)Math.Sqrt(s * (s - a)\
    \ * (s - b) * (s - c));", "        if (a + b > c && a + c > b && b + c > a) {\n\
    \            float p = (a + b + c) / 2.0f;\n            return (float)Math.Sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n        }\n        return -1;", "        float\
    \ s = (a + b + c) / 2.0f;\n        if (s - a <= 0 || s - b <= 0 || s - c <= 0)\n\
    \            return -1;\n        return (float)Math.Sqrt(s * (s - a) * (s - b)\
    \ * (s - c));", "        // Your code goes here!\n        return -1f;", '        return
    -1;', "        var s = (a + b + c) / 2f;\n        return s > a && s > b && s >\
    \ c ? (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c)) : -1;", "        long\
    \ A = a * a;\n        long B = b * b;\n        long C = c * c;\n        if (A\
    \ == 0 || B == 0 || C == 0) return -1;\n        float s = (a + b + c) / 2.0f;\n\
    \        float area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n   \
    \     if (area < 0) return -1;\n        return area;", "        // your code here\n\
    \        return -1f;", "        if ((a + b > c) && (a + c > b) && (b + c > a))\
    \ {\n            float s = (a + b + c) / 2.0f;\n            float area = (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n            return area;\n        }\n     \
    \   return -1;", "        // Your code goes here\n        float area = -1;\n \
    \       if (a + b > c && a + c > b && b + c > a) {\n            area = (float)Math.Sqrt((a\
    \ + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)) / 4;\n        }\n     \
    \   return area;", "        if(a + b > c && a + c > b && b + c > a) {\n      \
    \      var p = (a + b + c) / 2.0f;\n            return (float)Math.Sqrt(p * (p\
    \ - a) * (p - b) * (p - c));\n        }\n        return -1;", "        if(!IsValidTriangle(a,\
    \ b, c))\n            return -1;\n        else {\n            // Use heron's formula.\n\
    \            float s = (a + b + c) / 2.0f;\n            return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        }", "        if ((a + b > c) && (a\
    \ + c > b) && (b + c > a)) {\n            float area = ((float)a * (float)b *\
    \ (float)c) / 4;\n            return area;\n        }\n        return -1;", " \
    \       if (IsValidTriangle(a, b, c))\n            return TriArea(a, b, c);\n\
    \        else return -1f;", "        float s = (a + b + c) / 2.0f;\n        float\
    \ area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        return area;",
  "        float s = (a + b + c) / 2;\n        if (s <= 0) {\n            return -1;\n\
    \        }\n        float area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n        return (float)Math.Round(area, 2);", "        if (a + b <= c ||\
    \ a + c <= b || b + c <= a)\n            return -1;\n        double s = (a + b\
    \ + c) / 2.0;\n        return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));",
  "        double s = (a + b + c) / 2;\n        float area = (float)Math.Sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n        if (area > 0)\n            return area;\n\
    \        else\n            return -1;", "        if ((a + b > c) && (a + c > b)\
    \ && (b + c > a)) {\n            var s = (a + b + c) / 2f;\n            return\
    \ (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n        return\
    \ -1;", "        float s = (a + b + c) / 2;\n        if (s <= a || s <= b || s\
    \ <= c) {\n            return -1;\n        }\n        return MathF.Sqrt(s * (s\
    \ - a) * (s - b) * (s - c));", '        return a + b > c && a + c > b && b + c
    > a ? 0.5f * (a + b + c) : -1;', "        if (a + b > c && a + c > b && b + c\
    \ > a) {\n            return ((float)Math.Sqrt((a + b + c) * (a + b - c) * (a\
    \ - b + c) * (-a + b + c)) / 4.0f);\n        }\n        return -1.0f;", "    \
    \    long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n    \
    \    if (sides[0] + sides[1] <= sides[2]) {\n            return -1;\n        }\n\
    \        // Area = sqrt(p(p-a)(p-b)(p-c)) where p is the perimeter half\n    \
    \    float p = (float)(a + b + c) / 2;\n        float area = (float)Math.Sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n        return (float)Math.Round(area, 2);",
  "        if (a + b > c && a + c > b && b + c > a) {\n            return (float)0.5\
    \ * (a * b * c);\n        }\n        return -1;", "        if (a < b + c && b\
    \ < a + c && c < a + b) {\n            double s = (a + b + c) / 2f;\n        \
    \    double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n            return\
    \ (float)area;\n        }\n        return -1;", "        var arr = new long[]\
    \ { a, b, c };\n        Array.Sort(arr);\n        // If the sum of any two sides\
    \ is greater than the third side,\n        // then we have a valid triangle.\n\
    \        if (arr[0] + arr[1] > arr[2]) {\n            var s = (a + b + c) / 2f;\n\
    \            return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n     \
    \   }\n        return -1;", "        // If it's a valid triangle, return the area,\
    \ otherwise return -1\n        if (a+b>c && a+c>b && b+c>a) {\n            float\
    \ area = a*b*c;\n            return (float)Math.Sqrt(area);\n        }\n     \
    \   return -1;", "        if ((a + b) > c && (a + c) > b && (b + c) > a) {\n \
    \           double s = (a + b + c) / 2;\n            double area = Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n            return (float)area;\n        }\n\
    \        return -1;", "        // TODO: implement this function\n        return\
    \ (float)-1L;", "        return (a + b > c && a + c > b && b + c > a) ?\n    \
    \        0.5f * (float)(a * b + b * c + a * c) : -1f;", "        if (a + b > c\
    \ && a + c > b && b + c > a) {\n            var s = (a + b + c) / 2.0f;\n    \
    \        return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n\
    \        return -1.0f;", "        var s = (a + b + c) / 2;\n        if (s - a\
    \ <= 0 || s - b <= 0 || s - c <= 0) {\n            return -1;\n        }\n   \
    \     return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));", "        //\
    \ return a*b*c/2;\n        var arr = new[] {a, b, c};\n        Array.Sort(arr);\n\
    \        if (arr[0] + arr[1] <= arr[2]) return -1;\n        return Math.Abs(arr[0]\
    \ + arr[1] + arr[2]) * 0.5f;", "        var sides = new List<long>{a, b, c};\n\
    \        sides.Sort();\n        if (sides[0] + sides[1] <= sides[2]) {\n     \
    \       return -1;\n        }\n\n        var s = (a + b + c) / 2f;\n        var\
    \ area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float)Math.Round(area,\
    \ 2);", "        if (a + b > c && a + c > b && b + c > a) {\n            var half\
    \ = (a + b + c) / 2.0f;\n            return (float)Math.Sqrt(half * (half - a)\
    \ * (half - b) * (half - c));\n        }\n        return -1;", "        // your\
    \ code goes here\n        float s = (a + b + c) / 2.0f;\n        float area =\
    \ (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        if (area < 0)\n\
    \            return -1;\n        return area;", "        float area = 0.0f;\n\
    \        if (a + b > c && a + c > b && b + c > a) {\n            float p = (a\
    \ + b + c) / 2.0f;\n            area = (float)Math.Sqrt(p * (p - a) * (p - b)\
    \ * (p - c));\n        } else {\n            area = -1.0f;\n        }\n      \
    \  return (float)Math.Round(area, 2);", "        long max = Math.Max(a, Math.Max(b,\
    \ c));\n        long sum = a + b + c;\n        return (max > sum - max) ? -1 :\
    \ (float)0.5 * Math.Sqrt(sum * (sum - 2 * a) * (sum - 2 * b) * (sum - 2 * c));",
  "        // Error Checking - make sure that a, b, and c are > 0.\n        if (a\
    \ <= 0 || b <= 0 || c <= 0)\n            return -1.0f;\n        // Check the triangle\
    \ inequality theorem.\n        if (a + b <= c || a + c <= b || b + c <= a)\n \
    \           return -1.0f;\n        // Use Heron's formula to calculate the area\
    \ of the triangle.\n        // This formula requires that you first calculate\
    \ the semi-perimeter.\n        float s = (a + b + c) / 2.0f;\n        // Now calculate\
    \ the area.\n        return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));",
  "        if (a + b > c && a + c > b && b + c > a)\n            return (float)(0.5f\
    \ * (a * b + b * c + a * c));\n        else\n            return -1;", "      \
    \  if (a + b > c && a + c > b && b + c > a) {\n            float s = (a + b +\
    \ c) / 2.0f;\n            return (float)Math.Sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n        }\n        return -1;", "        var ls = new long[] { a, b, c\
    \ };\n        Array.Sort(ls);\n        if (ls[0] + ls[1] > ls[2]) {\n        \
    \    var p = (a + b + c) / 2f;\n            return (float)Math.Sqrt(p * (p - a)\
    \ * (p - b) * (p - c));\n        }\n        return -1;", "        double p = (a\
    \ + b + c) / 2;\n        double area = Math.Sqrt(p * (p - a) * (p - b) * (p -\
    \ c));\n        if (area < 0) {\n            return -1;\n        }\n        return\
    \ (float)Math.Round(area, 2);", "        var x = a + b;\n        var y = a + c;\n\
    \        var z = b + c;\n        if (x <= c || y <= b || z <= a)\n           \
    \ return -1;\n        var p = (a + b + c) / 2.0f;\n        return (float)Math.Sqrt(p\
    \ * (p - a) * (p - b) * (p - c));", "        if (a+b <= c || a+c <= b || b+c <=\
    \ a) {\n            return -1f;\n        }\n        var p = (a+b+c)/2f;\n    \
    \    return (float)Math.Sqrt(p*(p-a)*(p-b)*(p-c));", "        var p = (a + b +\
    \ c) / 2f;\n        var area = (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \        if (area == 0) {\n            return -1;\n        }\n        return area;",
  "        if (a + b > c && a + c > b && b + c > a) {\n            double p = (a +\
    \ b + c) / 2.0;\n            return (float)Math.Sqrt(p * (p - a) * (p - b) * (p\
    \ - c));\n        }\n        return -1;", "        if (a + b <= c || b + c <=\
    \ a || a + c <= b)\n            return -1;\n        else\n            return (float)Math.Sqrt((a\
    \ + b + c) * (a + b - c) * (b + c - a) * (c + a - b)) / 4;", "        // return\
    \ (a + b + c) >= 3 ? (float)Math.Sqrt((a + b + c) * (-a + b + c) * (a - b + c)\
    \ * (a + b - c)) / 4 : -1;\n        if ((a + b + c) >= 3) {\n            var s\
    \ = (a + b + c) / 2;\n            return (float)Math.Sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n        }\n        return -1;", "        if (a + b > c && a + c\
    \ > b && b + c > a) {\n            float p = (a + b + c) / 2.0f;\n           \
    \ float area = (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n          \
    \  return (float)Math.Round(area, 2);\n        }\n        return -1;", "     \
    \   if (a + b > c && a + c > b && b + c > a) {\n            float p = (a + b +\
    \ c) / 2.0f;\n            float area = (float)Math.Sqrt(p * (p - a) * (p - b)\
    \ * (p - c));\n            return area;\n        }\n        return -1;", "   \
    \     double s = (a + b + c) / 2.0;\n        double area = Math.Sqrt(s * (s -\
    \ a) * (s - b) * (s - c));\n        return (float)Math.Round(area, 2);", "   \
    \     // Let's assume these are the sides of a triangle. How would we figure out\
    \ \n        // if the three sides make a valid triangle? As a rule, the sum of\
    \ any two \n        // sides must be greater than the third side.\n        //\
    \ If we take the Pythagorean Theorem, we get:\n        // a^2 + b^2 = c^2 \n \
    \       // If a and b are the legs of the triangle, then c is the hypotenuse.\
    \ \n        // This can be rewritten to:\n        // b^2 = c^2 - a^2\n       \
    \ // Then,\n        // b = sqrt(c^2 - a^2)\n        // Then,\n        // b + a\
    \ > c\n        // b + c > a\n        // a + c > b\n        // We can apply this\
    \ to all the sides and check if these three conditions \n        // are true for\
    \ a valid triangle:\n        if (a + b > c && b + c > a && a + c > b) {\n    \
    \        // If we have a valid triangle, we can figure out the area using \n \
    \           // Heron's formula:\n            // area = sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n            // where s = (a + b + c) / 2.\n            // Then\
    \ we can return the value after rounding it to 2 decimal points.\n           \
    \ return (float)Math.Round(Math.Sqrt((a + b + c) * (a + b - c) * (b + c - a) *\
    \ (a + c - b)) / 4, 2);\n        }\n        // Otherwise we return -1.\n     \
    \   return -1;", "        // Write your code here\n        return -1.0f;", " \
    \       // Implement me!\n        return -1;", "        // Your code goes here.\n\
    \        return -1;", "        if (a + b <= c || a + c <= b || b + c <= a)\n \
    \           return -1;\n        var s = (a + b + c) / 2.0f;\n        return (float)Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));", "        if (a < 0 || b < 0 || c < 0) {\n\
    \            return -1;\n        }\n        else if (a + b <= c || a + c <= b\
    \ || b + c <= a) {\n            return -1;\n        }\n        else {\n      \
    \      float s = (a + b + c) / 2.0f;\n            return (float)Math.Sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n        }", "        // Check that three sides\
    \ make a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n\
    \            return -1;\n        }\n        // Compute the perimeter\n       \
    \ float perimeter = (float)(a + b + c);\n        // Compute the area using Heron's\
    \ formula\n        float halfPerimeter = perimeter / 2;\n        float area =\
    \ halfPerimeter * (halfPerimeter - a) * (halfPerimeter - b) * (halfPerimeter -\
    \ c);\n        area = (float)Math.Sqrt(area);\n        // Return the area rounded\
    \ to 2 decimal points\n        return (float)Math.Round(area, 2);", "        //\
    \ First, we need to check the triangle inequality:\n        // If the sum of any\
    \ two sides is greater than the third side, then it's a triangle\n        if(a\
    \ + b > c && a + c > b && b + c > a) {\n            // Using Heron's formula:\n\
    \            // A = sqrt(s(s-a)(s-b)(s-c))\n            // where\n           \
    \ // s = (a + b + c) / 2\n            double s = (a + b + c) / 2.0;\n        \
    \    return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n  \
    \      return -1;", "        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n\
    \            return (float)Math.Round(\n                Math.Sqrt(\n         \
    \           (a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)\n         \
    \       ) / 4f, 2);\n        }\n        return -1;", "        // If a is the longest\
    \ side, then a < b + c\n        if (a > b + c) return -1;\n        // If b is\
    \ the longest side, then b < a + c\n        if (b > a + c) return -1;\n      \
    \  // If c is the longest side, then c < a + b\n        if (c > a + b) return\
    \ -1;\n        // If no side is the longest side, it's a valid triangle.\n   \
    \     // Area = sqrt(p(p-a)(p-b)(p-c))\n        // p = (a + b + c) / 2\n     \
    \   float p = (a + b + c) / 2f;\n        return (float)Math.Sqrt(p * (p - a) *\
    \ (p - b) * (p - c));", "        float s = (a + b + c) / 2.0f;\n        if (s\
    \ - a <= 0 || s - b <= 0 || s - c <= 0) {\n            return -1;\n        }\n\
    \        return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));", "       \
    \ var sides = new List<long> { a, b, c };\n        sides.Sort();\n        var\
    \ sidesum = sides.Take(2).Sum();\n        if (sidesum > sides[2]) {\n        \
    \    var s = (sidesum + sides[2]) / 2.0f;\n            return (float)Math.Sqrt(s\
    \ * (s - sides[0]) * (s - sides[1]) * (s - sides[2]));\n        }\n        return\
    \ -1;"]
stop_tokens:
- "\n    }\n"
