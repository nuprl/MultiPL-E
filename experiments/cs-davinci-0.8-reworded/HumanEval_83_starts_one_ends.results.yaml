language: cs
name: HumanEval_83_starts_one_ends
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We'll use dynamic programming, along\
    \ with BigIntegers to calculate\n        // the number of count start or end with\
    \ 1.\n        BigInteger[,] dp = new BigInteger[2, n];\n        // dp[i, j] is\
    \ the number of n-digit positive integers that start or end\n        // with 1,\
    \ where the first digit is i.\n        for (int i = 0; i < 2; i++) {\n       \
    \     dp[i, 0] = 1;\n        }\n        for (int i = 0; i < 2; i++) {\n      \
    \      for (int j = 1; j < n; j++) {\n                // There are 9 choices for\
    \ the other digits.\n                dp[i, j] = 9 * dp[i, j - 1];\n          \
    \      // If we had a leading 1, then we can't have another 1\n              \
    \  // because we've already used our trailing 1.\n                if (i == 1)\
    \ {\n                    dp[i, j] -= dp[1, j - 1];\n                }\n      \
    \      }\n        }\n        return (long)(dp[0, n - 1] + dp[1, n - 1]);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <556c60a96ef449888ba7c70292a063cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <556c60a96ef449888ba7c70292a063cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821015
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long numbers = 0;\n        for (int i\
    \ = 1; i <= n; i++) {\n            numbers += NumbersWithDigits(i, 1);\n     \
    \   }\n        return numbers;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaqo0wm1r.cs(14,24): error CS0103: The name ''NumbersWithDigits'' does
    not exist in the current context

    '
  timestamp: 1659821015
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n >= 0);\n        // Starting\
    \ with 1, there are exactly n-1 choices for the rest of the\n        // digits.\
    \ So you get 10^(n-1) of them.\n        //\n        // For ending with 1, there\
    \ are n-1 choices for the rest of the digits.\n        // However, they can't\
    \ be all zeros, otherwise they're not n-digit.\n        // So, there are 10^(n-2)\
    \ choices which do end with 1.\n        //\n        // However, we double-counted\
    \ those that start and end with 1. So\n        // subtract those out, which are\
    \ 10^(n-2).\n        //\n        // Add them all together, and we get 10^(n-1)\
    \ + 10^(n-2) - 10^(n-2) =\n        // 10^(n-1).\n        return (long)Math.Pow(10,\
    \ n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f226b29ad51945aea91c89d8305ea7f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f226b29ad51945aea91c89d8305ea7f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821015
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Base case\n        if (n == 1) return\
    \ 2;\n        // A number that ends in 1 can end in either 0 or 1. So the count\
    \ of\n        // numbers of n-digit positive integers that end in 1 is 2 times\
    \ the\n        // number of numbers of (n-1)-digit positive integers that end\
    \ in 1.\n        var End = 2 * StartsOneEnds(n - 1);\n        // A number that\
    \ starts in 1 can end in either 0 or 1. So the count of\n        // numbers of\
    \ n-digit positive integers that start in 1 is 2 times the\n        // number\
    \ of numbers of (n-1)-digit positive integers that start in 1.\n        var Start\
    \ = 2 * StartsOneEnds(n - 1);\n        // An n-digit number that ends in 1 cannot\
    \ start in 1. So the final\n        // answer is the sum of the count of numbers\
    \ that start in 1 and the\n        // count of numbers that end in 1.\n      \
    \  return Start + End;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b01cef71b29a49ff8469edd1fac7014c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b01cef71b29a49ff8469edd1fac7014c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821015
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n >= 1);\n        // We use\
    \ the following algorithm (see below for proof)\n        // Let f(n) be the answer,\
    \ then\n        // f(n) = f(n-1) + 10 * 9^(n-1)\n        long ans = 0;\n     \
    \   long cur = 1;\n        while (n-- > 0) {\n            ans += cur;\n      \
    \      cur = (cur * 10) % 1000000007;\n        }\n        return ans;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52ff3cc4f2e84d0ab408227ba196bee4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52ff3cc4f2e84d0ab408227ba196bee4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = 0;\n        if (n == 1) {\n\
    \            count++;\n        } else {\n            count += n - 1;\n       \
    \     count += n * (n - 1) / 2;\n        }\n        return count;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2c69122c32f46dc84cf93a57a099f84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2c69122c32f46dc84cf93a57a099f84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821015
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n >= 1);\n        var count\
    \ = 0L;\n        if (n == 1) {\n            count += 2;\n        } else {\n  \
    \          count += 9 * (n - 1);\n            if (n > 2) {\n                count\
    \ += 9 * 9 * (n - 2);\n            }\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <059f93c39c8e4ef18ec5b43ff5eab361>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <059f93c39c8e4ef18ec5b43ff5eab361>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Note that `n` is at most 10^18.\n \
    \       // The range of [0, 10^n) can be represented by an array of length\n \
    \       // 10^n.\n        long[] counts = new long[(int)Math.Pow(10, n)];\n  \
    \      // Base case.\n        counts[0] = 1;\n        for (int i = 1; i < n; i++)\
    \ {\n            long factor = (long)Math.Pow(10, i);\n            // When the\
    \ digit is 1, it can be chosen as the first or last digit.\n            counts[factor]\
    \ = counts[factor - 1] * 9 + counts[factor / 10];\n            // When the digit\
    \ is not 1, it can only be chosen as the first digit.\n            counts[factor\
    \ + 1] = counts[factor - 1] * 9;\n            for (int j = 2; j < 9; j++) {\n\
    \                factor++;\n                counts[factor] = counts[factor - 1]\
    \ * 9;\n            }\n        }\n        return counts[(int)Math.Pow(10, n) -\
    \ 1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe2a6542be614acdae923b1b4b9bcfd5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe2a6542be614acdae923b1b4b9bcfd5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long res = 0;\n        long a = n - 1;\n\
    \        long b = n;\n        long c = n - 1;\n        while (a > 0) {\n     \
    \       res += ((a - 1) * 5 + 1) * b * c;\n            a--;\n            b *=\
    \ 10;\n            c *= 9;\n        }\n        res += 1 * b * c;\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e6da9ab5ea41169aeb596661e961c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e6da9ab5ea41169aeb596661e961c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long cnt = 1;\n        long tot = 0;\n\
    \        while (n > 0) {\n            tot += cnt;\n            cnt = cnt * 10\
    \ + 1;\n            n--;\n        }\n        return tot;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ceca88f521914de3b61fecc1e98d491c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ceca88f521914de3b61fecc1e98d491c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821015
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long result = 0;\n        long pow10 =\
    \ 1;\n        long pow2 = 2;\n        long pow3 = 6;\n        long remainder =\
    \ n % 2;\n        while (n > 0) {\n            result += (n / 2) * pow3 + pow10;\n\
    \            // Fix the leftover\n            if (remainder > 0) {\n         \
    \       result += pow2;\n            }\n            pow10 *= 10;\n           \
    \ pow2 *= 100;\n            pow3 *= 100;\n            n /= 2;\n            remainder\
    \ = n % 2;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db19c9c5c57f442483a5d58d917b9469>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db19c9c5c57f442483a5d58d917b9469>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821015
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n\n        // How\
    \ many solutions can we find with the number n?\n        // For example, n = 2,\
    \ n = 22, n = 33, n = 44 are numbers of 2 digits that\n        // start or end\
    \ with 1 and they form the only solutions.\n        // How do we find the solution\
    \ with n+1 digits?\n        // 1(2) 3 4\n        // 1(2) 3 4\n        // 1(2)\
    \ 3 4\n        // 1(2) 3 4\n        // The numbers in brackets are the numbers\
    \ that have n digits and start or\n        // end with 1. We can place the numbers\
    \ 1 to 9 in the brackets and for each\n        // number place all solutions in\
    \ the remaining digits.\n        // 1(2) 3 4\n        // 1(23) 4\n        // 1(234)\n\
    \        // = 4\n        // 1(2) 3 4\n        // 1(32) 4\n        // 1(324)\n\
    \        // = 4\n        // 1(2) 3 4\n        // 1(2) 3 4\n        // 1(2) 3 4\n\
    \        // 1(2) 3 4\n        // = 16\n        // Sum = 24.\n        // The first\
    \ term represents adding a number in brackets with a 1 at the\n        // start.\n\
    \        // The second term represents adding a number in brackets with a 1 at\
    \ the\n        // end.\n        // We end up with two terms because we double\
    \ count all solutions where we\n        // can add a 1 at the start and a 1 at\
    \ the end.\n        return CountSolutions(n) + CountSolutions(n);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1e7eoce.cs(45,16): error CS0103: The name ''CountSolutions'' does not
    exist in the current context

    /tmp/tmp_1e7eoce.cs(45,36): error CS0103: The name ''CountSolutions'' does not
    exist in the current context

    '
  timestamp: 1659821015
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = 0;\n        long exp = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            count += 9 * exp;\n      \
    \      exp *= 10;\n        }\n        count += (exp / 10);\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ecd324067574a93b59ccf423fe09e02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ecd324067574a93b59ccf423fe09e02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We can split the digits in 3 parts:\
    \ starting digits, middle digits and\n        // ending digits. Starting and ending\
    \ digit count as one, so they are\n        // really just a single digit.\n  \
    \      //\n        // We have the following recursive formula:\n        // f(n)\
    \ = 2 * f(n - 1) + f(n - 2)\n        //\n        // For the base cases, we have\
    \ f(1) = 2 and f(2) = 4.\n        //\n        // This is a Fibonacci sequence,\
    \ except with an extra 2 * f(n - 1) factor.\n        //\n        // There is no\
    \ closed form, but we can use recursion. We can also use\n        // dynamic programming,\
    \ which will be more efficient.\n\n        // We store known values here to avoid\
    \ recomputing them.\n        Dictionary<long, long> knownValues = new Dictionary<long,\
    \ long>();\n        knownValues[1] = 2;\n        knownValues[2] = 4;\n\n     \
    \   long StartsOneEnds(long m) {\n            if (knownValues.ContainsKey(m))\n\
    \                return knownValues[m];\n\n            long result = 2 * StartsOneEnds(m\
    \ - 1) + StartsOneEnds(m - 2);\n            knownValues[m] = result;\n       \
    \     return result;\n        }\n\n        return StartsOneEnds(n);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <667b81b20a2a479aba8a6354ed43ce96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <667b81b20a2a479aba8a6354ed43ce96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // The idea is as follows:\n        //\
    \   Given an n-digit number, there are 10 choices for the first digit.\n     \
    \   //   If you choose 1, there are 10^(n-1) choices for the remaining digits.\n\
    \        //   Otherwise, there are 10^n choices for the remaining digits.\n  \
    \      //   So the answer is 10*10^(n-1) + (10-1)*10^n.\n        return 10 * BigInteger.Pow(10,\
    \ n - 1) + (10 - 1) * BigInteger.Pow(10, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvw6_v4j.cs(17,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmphvw6_v4j.cs(17,79): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659821015
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // There are two cases:\n        // Case\
    \ 1: The number consists of a single 1, followed by (n-1) 0s.\n        // Case\
    \ 2: The number consists of an arbitrary k-digit number, followed\n        //\
    \         by (n-k) 1s, followed by (k-1) 0s.\n        // For example, if n = 5,\
    \ then the numbers are:\n        // Case 1: 10000\n        // Case 2: 1xxxx, x1xxx,\
    \ xx1xx, xxx1x, xxxx1\n        // Case 1: 10^(n-1)\n        // Case 2: Sum_k(10^(k-1)*C(n-1,k-1))\n\
    \        //        = Sum_k(C(n-1,k-1)),\n        //        = [x^(n-1)] (1+x)^(n-1),\n\
    \        //        = [x^(n-1)] (1+x)^n,\n        //        = C(n,n-1),\n     \
    \   //        = C(n,1).\n        // Therefore, C(n,1) = C(n,n-1) + 10^(n-1).\n\
    \        // Note that C(n,1) = nC1 = n.\n        // This gives us the recurrence\n\
    \        //   C(n,1) = C(n-1,1) + 10^(n-2)\n        //          = C(n-2,1) + 10^(n-3)\
    \ + 10^(n-2)\n        //          = C(n-3,1) + 10^(n-4) + 10^(n-3) + 10^(n-2)\n\
    \        //          = ...\n        //          = C(1,1) + 10^(n-2) + 10^(n-3)\
    \ + ... + 10^0\n        //          = 1 + 10^(n-2) + 10^(n-3) + ... + 10^0\n \
    \       //          = 10^(n-1) - 1 + 1\n        //          = 10^(n-1).\n    \
    \    // The answer is therefore 10^(n-1).\n        return BigInteger.\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi9jllmjz.cs(38,27): error CS1001: Identifier expected

    /tmp/tmpi9jllmjz.cs(38,27): error CS1002: ; expected

    '
  timestamp: 1659821015
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Initialize a helper function cache\
    \ to avoid calling it more than once\n        // with the same arguments.\n  \
    \      var cache = new Dictionary<Tuple<long, long>, long>();\n        // Count\
    \ numbers of length 1 that start with 1 and end with 1.\n        long count =\
    \ 1;\n        // Count numbers of length n that start with 1 but end with 0.\n\
    \        count += CountStart1(n - 1, 0, cache);\n        // Count numbers of length\
    \ n that start with 0 but end with 1.\n        count += CountEnd1(n - 1, 0, cache);\n\
    \        // Count numbers of length n that start with 1 and end with 1.\n    \
    \    count += CountStart1End1(n - 1, 0, cache);\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprt1iwd36.cs(18,18): error CS0103: The name ''CountStart1'' does not exist
    in the current context

    /tmp/tmprt1iwd36.cs(20,18): error CS0103: The name ''CountEnd1'' does not exist
    in the current context

    /tmp/tmprt1iwd36.cs(22,18): error CS0103: The name ''CountStart1End1'' does not
    exist in the current context

    '
  timestamp: 1659821015
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 1;\n\
    \        } else if (n == 2) {\n            return 2;\n        } else {\n     \
    \       long m = (long) Math.Pow(10, n - 1);\n            return StartsOneEnds(n\
    \ - 1) + (m - m / 10) * 9;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b430dc23bec44144bbe0a48c56f671bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b430dc23bec44144bbe0a48c56f671bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Number of n-digit positive integers\
    \ that start or end with 1:\n        //     2 * (10 ^ (n - 1)) - 10 ^ (n - 2)\n\
    \        return 2 * (long)BigInteger.Pow(10, n - 1) - (long)BigInteger.Pow(10,\
    \ n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm7wq0k8l.cs(14,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpm7wq0k8l.cs(14,79): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659821015
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 1;\n\
    \        } else if (n == 2) {\n            return 10;\n        } else {\n    \
    \        long prev = 10;\n            long curr = 19;\n            for (long k\
    \ = 3; k <= n; k++) {\n                var next = 10 * curr - prev;\n        \
    \        prev = curr;\n                curr = next;\n            }\n         \
    \   return curr;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0639da564b5a4058a8d929acfc9c8f1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0639da564b5a4058a8d929acfc9c8f1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821015
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // we're looking for all digits of numbers,\
    \ except 0, that\n        // can be a leading digit, AND, with a 0 or 1 as their\
    \ last digit\n        //\n        // so, the leading digit must be a 1, and there\
    \ are n-1 remaining\n        // digits, which can be anything, there are 9 choices.\n\
    \        //\n        // the last digit can be a 0 or a 1, so we have 2 choices\n\
    \        //\n        // we want to count permutations of these. if we had k choices\
    \ of\n        // the first digit, and l choices of the last digit, and there are\
    \ n\n        // digits total, and we let p be the count of permutations\n    \
    \    //\n        // we can say:\n        //\n        //  p = n!/k!/l!\n      \
    \  //  or\n        //  p = n! / (n-k-l)!\n        //\n        // here, we have\
    \ k = 1, l = 2\n        //\n        // we're now counting permutations of 1, 2,\
    \ and a bunch of 9s.\n        //\n        // to count the number of permutations\
    \ of this, we can use the\n        // inclusion-exclusion principle. we want to\
    \ count permutations of\n        // the 1,2, and 9s, but we need to exclude permutations\
    \ of the 1 and\n        // 2, and permutations of the 2 and 9, and permutations\
    \ of the 1 and\n        // 9. we can also add back in permutations of the 1, 2,\
    \ and 9.\n        //\n        //  p = n! / (n-k-l)! - 2(n-k-l)! + 1(n-k-l)!\n\
    \        //  or\n        //  p = n! / (n-k-l)! - (n-k-l)!\n        //\n      \
    \  //  or\n        //\n        //  p = n! / 2(n-k-l)!\n        //\n        //\
    \  or\n        //\n        //  p = n! / 2n! / 2(n-k-l)!\n        //\n        //\
    \  or\n        //\n        //  p = n! / 2^n / 2(n-k-l)!\n        //\n        //\
    \  or\n        //\n       \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwutfuy40.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We can find the number of n-digit integers\
    \ starting with 1 using\n        // a simple recurrence (see below).\n       \
    \ long s = StartsOne(n);\n        long ans = s;\n        // We can find the number\
    \ of n-digit integers ending with 1 by\n        // finding the number of n-digit\
    \ integers such that their last\n        // two digits are not 1.  We will use\
    \ inclusion-exclusion for this.\n        long not11 = s;\n        for (int i =\
    \ 2; i <= 9; i++) {\n            not11 += StartsOne(n - 1) * 9;\n        }\n \
    \       ans += not11;\n        // Now we need to subtract the integers starting\
    \ with 1 and ending\n        // with 1.  This can be found by counting the number\
    \ of integers\n        // starting with 1 that have no 1 in the last two digits.\n\
    \        long not1 = not11;\n        for (int i = 1; i <= 9; i++) {\n        \
    \    not1 += StartsOne(n - 2) * 9;\n        }\n        // To get the number of\
    \ integers ending with 1, we subtract the\n        // integers starting with 1\
    \ ending with 0 or 2 through 9 from not1.\n        ans += not1 - s * 9;\n    \
    \    return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7oaso98j.cs(14,18): error CS0103: The name ''StartsOne'' does not exist
    in the current context

    /tmp/tmp7oaso98j.cs(21,22): error CS0103: The name ''StartsOne'' does not exist
    in the current context

    /tmp/tmp7oaso98j.cs(29,21): error CS0103: The name ''StartsOne'' does not exist
    in the current context

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var startWithOneMod = Mod(n, 1);\n   \
    \     var endWithOneMod = Mod(n, 0);\n        return startWithOneMod + endWithOneMod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppzjhx0fh.cs(12,31): error CS0103: The name ''Mod'' does not exist in the
    current context

    /tmp/tmppzjhx0fh.cs(13,29): error CS0103: The name ''Mod'' does not exist in the
    current context

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // For n=1, there is only 1 such number.\n\
    \        if (n == 1) return 1;\n        // For n=2, the answer is 11.\n      \
    \  if (n == 2) return 11;\n        // For n=3, the answer is 111.\n        if\
    \ (n == 3) return 111;\n        // For n=4, the answer is 1111 + 11+11 = 1113.\n\
    \        if (n == 4) return 1113;\n        // For larger values of n, consider\
    \ the digits of 1.\n        // The answer is (with d the number of digits):\n\
    \        // 1111 + 11+11 + ... + 11+11 + 111,\n        // where the summands corresponds\
    \ to the value of the first d-1 digits.\n        long d = 1;\n        long p =\
    \ 10;\n        while (p <= n) {\n            d++;\n            p *= 10;\n    \
    \    }\n        // If n is larger than d, then d-1 is the first part of the number.\n\
    \        // It must have length 1 to d-1.\n        if (n > d) return 1111 + (d\
    \ - 1) * 11;\n        // Otherwise, it must have length exactly n.\n        return\
    \ (p / 10) + (n - 1) * 11;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23fa9f4fd1c4df0bd5f20398cbb98be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23fa9f4fd1c4df0bd5f20398cbb98be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We can calculate the number of numbers\
    \ that start with 1 and end\n        // with 1, then subtract it from the total\
    \ number of n-digit positive\n        // integers.\n\n        // The number of\
    \ single-digit numbers is 10, and the number of n-digit\n        // numbers is\
    \ 10^n.\n        long total = (n == 1) ? 10 : (long)Math.Pow(10, n);\n\n     \
    \   // For simplicity, we will calculate the number of numbers that start\n  \
    \      // with 1, then subtract that from total.\n\n        // There are n-1 digits\
    \ that can be any number, so the number of n-digit\n        // numbers that start\
    \ with 1 is 9*10^(n-1).\n        long startsOne = (n == 1) ? 9 : 9 * (long)Math.Pow(10,\
    \ n - 1);\n\n        // Now, calculate the number of numbers that start and end\
    \ with 1.\n        // There are 9 choices for the digits after the second 1, and\
    \ n-2\n        // choices for the remaining digits, so the number of n-digit numbers\n\
    \        // that start and end with 1 is 9*10^(n-2).\n        long startsOneEndsOne\
    \ = (n == 1) ? 0 : 9 * (long)Math.Pow(10, n - 2);\n\n        // Now, the count\
    \ of the numbers of n-digit positive integers that start\n        // or end with\
    \ 1 is startsOne - startsOneEndsOne.\n        return startsOne - startsOneEndsOne;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e70d55a1a9c4f648745e871bf724932>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e70d55a1a9c4f648745e871bf724932>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We can count the numbers of n-digit\
    \ positive integers that end with 1\n        // by multiplying the number of (n-1)-digit\
    \ positive integers that start\n        // with 1 and adding 1. We can count the\
    \ number of (n-1)-digit positive\n        // integers that start with 1 by multiplying\
    \ the number of (n-2)-digit\n        // positive integers that start with 1 by\
    \ 10 and adding 9. This gives\n        // the following recurrence relation:\n\
    \        //\n        // f(n) = 9 * f(n-1) + 1, where f(1) = 1.\n        //\n \
    \       // Clearly, f(n) = 9 * f(n-1) + 1 = 9 * (9 * f(n-2) + 1) + 1 =\n     \
    \   // 9^2 * f(n-2) + 9 + 1 = ... = 9^(n-1) * f(1) + 9^(n-2) + ... + 9 + 1 =\n\
    \        // 9^(n-1) + 9^(n-2) + ... + 9 + 1 = (9^n - 1) / (9 - 1).\n        //\n\
    \        // The above relation is true for any base b. Thus, we can count the\n\
    \        // number of n-digit positive integers that start or end with 1 by\n\
    \        // computing (b^n - 1) / (b - 1) for b = 10.\n        return (long)(Math.Pow(10,\
    \ n) - 1) / 9;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6cf22f15c68a4cb488fda71a33a9f279>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6cf22f15c68a4cb488fda71a33a9f279>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 1;\n\
    \        }\n        long m = 1;\n        for (int i = 0; i < n - 1; i++) {\n \
    \           m *= 10;\n        }\n        return (9 * m) + 1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d28b3b736b55458e809cb761b26f3bc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d28b3b736b55458e809cb761b26f3bc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // If n == 1, the answer is 10.\n    \
    \    if (n == 1) {\n            return 10;\n        }\n        // Initialize the\
    \ answer to 0, and get the range.\n        long s = 0;\n        BigInteger range\
    \ = BigInteger.Pow(10, n - 1);\n        // For each number in the range, if the\
    \ first digit is 1, then add 1 to\n        // the count.\n        for (BigInteger\
    \ i = 1; i < range; i++) {\n            if (BigInteger.Remainder(i, 10) == 1)\
    \ {\n                s++;\n            }\n        }\n        // Multiply the count\
    \ by 2, and return it.\n        return s * 2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmop7lje7.cs(18,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        return CountRecurse(n, false, true, false,\
    \ false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfge1dzh9.cs(12,16): error CS0103: The name ''CountRecurse'' does not exist
    in the current context

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Let x be the number of n-digit positive\
    \ integers that start with 1.\n        // Let y be the number of n-digit positive\
    \ integers that end with 1.\n        //\n        // Then we want to count x +\
    \ y.\n        //\n        // x = 9 * (9 ^ (n - 1)).\n        //\n        // y\
    \ = 9 * (9 ^ (n - 2)).\n        //\n        // Thus:\n        //\n        // x\
    \ + y = 9 * (9 ^ (n - 1)) + 9 * (9 ^ (n - 2))\n        //\n        //      = 9\
    \ * ((9 ^ (n - 1)) + (9 ^ (n - 2)))\n        //\n        //      = 9 * (9 ^ (n\
    \ - 2) * (9 + 1))\n        //\n        //      = 9 * (9 ^ (n - 2) * 10)\n    \
    \    //\n        //      = 90 * (9 ^ (n - 2))\n        //\n        //      = 90\
    \ * (9 ^ (n - 2))\n        //\n        //      = 90 * (9 ^ (n - 2))\n        //\n\
    \        //      = 90 * (9 ^ (n - 2))\n        //\n        //      = 90 * (9 ^\
    \ (n - 2))\n        //\n        //      = 90 * (9 ^ (n - 2))\n        //\n   \
    \     //      = 90 * (9 ^ (n - 2))\n        //\n        //      = 90 * (9 ^ (n\
    \ - 2))\n        //\n        //      = 90 * (9 ^ (n - 2))\n        //\n      \
    \  //      = 90 * (9 ^ (n - 2))\n        //\n        //      = 90 * (9 ^ (n -\
    \ 2))\n        //\n        //      = 90 * (9 ^ (n - 2))\n        //\n        //\
    \      = 90 * (9 ^ (n - 2))\n        //\n        //      = 90 * (9 ^ (n - 2))\n\
    \        //\n        //      = 90 * (9 ^ (n - 2))\n        //\n        //    \
    \  = 90 * (9 ^ (n - 2))\n        //\n        //      = 90 * (9 ^ (n - 2))\n  \
    \      //\n        //\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdbez1qyt.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long result = 0;\n        // We do not\
    \ have to worry about leading zeros as we are only counting\n        // numbers\
    \ that start with 1. Let's construct the number.\n        // This loop picks the\
    \ last digit.\n        for (long lastDigit = 1; lastDigit <= 9; lastDigit++) {\n\
    \            // This loop picks the first digit.\n            for (long firstDigit\
    \ = 1; firstDigit <= 9; firstDigit++) {\n                // Let's build the number.\n\
    \                long number = 0;\n                number += firstDigit;\n   \
    \             // The number of digits between the first and last digits.\n   \
    \             // Subtract two as we already have the first and last digits.\n\
    \                long digitsBetween = n - 2;\n                for (long i = 0;\
    \ i < digitsBetween; i++) {\n                    number *= 10;\n             \
    \       number += lastDigit;\n                }\n                number *= 10;\n\
    \                number += lastDigit;\n                // We only care about numbers\
    \ that are n digits long.\n                if (number.ToString().Length == n)\
    \ {\n                    result++;\n                }\n            }\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0c90c224e7f4d6ea0f21fa9f119034b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0c90c224e7f4d6ea0f21fa9f119034b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // The count of such numbers is the number\
    \ of ways to partition a number\n        // of 1s into groups of size 1 <= r <=\
    \ n.\n        long count = 0;\n        var partitions = PartitionGenerator.Generate(n);\n\
    \        for (int i = 0; i < partitions.Count; i++) {\n            var p = partitions[i];\n\
    \            for (int j = 0; j < p.Count; j++) {\n                if (p[j] ==\
    \ 1) {\n                    count++;\n                }\n            }\n     \
    \   }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6z2pbbi.cs(15,26): error CS0103: The name ''PartitionGenerator'' does
    not exist in the current context

    /tmp/tmpz6z2pbbi.cs(16,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpz6z2pbbi.cs(18,29): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        return AllDigits(n) - StartsOne(n);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp04w9xnk2.cs(12,16): error CS0103: The name ''AllDigits'' does not exist
    in the current context

    /tmp/tmp04w9xnk2.cs(12,31): error CS0103: The name ''StartsOne'' does not exist
    in the current context

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // TODO: implement this\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cde8737c7554dc3aed9399a83307416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cde8737c7554dc3aed9399a83307416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n        // a[i]\
    \ = count of n-digit integers that start with 1\n        // b[i] = count of n-digit\
    \ integers that end with 1\n        long[] a = new long[n+1];\n        long[]\
    \ b = new long[n+1];\n        a[1] = b[1] = 1;\n        for (int i = 2; i <= n;\
    \ i++) {\n            a[i] = b[i-1];\n            b[i] = a[i-1] + b[i-1];\n  \
    \      }\n        return a[n] + b[n];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bf1b9cf11f7413093caeaa179fc98e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bf1b9cf11f7413093caeaa179fc98e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // The number of n-digit positive integers\
    \ that start with 1 is\n        // 9*10^(n-1).\n        var starts1 = (BigInteger)9\
    \ * BigInteger.Pow(10, n - 1);\n        // For numbers that end with 1, note that\
    \ this is the same as the\n        // number of n-digit positive integers that\
    \ end with 1. This can be\n        // computed with a recurrence, since the number\
    \ of numbers ending with\n        // 1 is the same as the number of numbers ending\
    \ with 0.\n        var ends1 = BigInteger.Pow(10, n);\n        var cache = new\
    \ BigInteger[n];\n        cache[0] = BigInteger.Pow(10, n - 1);\n        for (int\
    \ i = 1; i < n; i++) {\n            // If we flip the last digit, it goes from\
    \ ending with a 1 to\n            // ending with a 0, and vice versa.\n      \
    \      cache[i] = cache[i - 1] * 2;\n        }\n        ends1 = ends1 - cache[n\
    \ - 1];\n        return (long)(starts1 + ends1);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl9c64by7.cs(14,58): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpl9c64by7.cs(19,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpl9c64by7.cs(21,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // n = 1: 1\n        // n = 2: 10, 11,\
    \ 01\n        // n = 3: 100, 101, 110, 111, 010, 011, 001\n        // n = 4: 1000,\
    \ 1001, 1010, 1011, 1100, 1101, 1110, 1111,\n        //        0100, 0101, 0110,\
    \ 0111, 0010, 0011, 0001\n        // n = 5: 10000, 10001, 10010, 10011, 10100,\
    \ 10101, 10110, 10111,\n        //        11000, 11001, 11010, 11011, 11100, 11101,\
    \ 11110, 11111,\n        //        01000, 01001, 01010, 01011, 01100, 01101, 01110,\
    \ 01111,\n        //        00100, 00101, 00110, 00111, 00010, 00011, 00001\n\
    \        // We can see that there are 8^(n-1) n-digit numbers that start or end\n\
    \        // with 1.\n        return (long)Math.Pow(8, n - 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7cb9f237d85d414fbfcc231c79ed52c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7cb9f237d85d414fbfcc231c79ed52c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Compute number of digit n-digit numbers\
    \ that start with 1.\n        // Then compute number of digit n-digit numbers\
    \ that end with 1.\n        // Subtract out the number of n-digit numbers that\
    \ start and end\n        // with 1 (111...1).\n        long start = 0;\n     \
    \   long end = 0;\n        long startEnd = 0;\n        long i = 1;\n        long\
    \ powerOfTen = (long)Math.Pow(10, n - 1);\n        long endPowerOfTen = 10;\n\
    \        for (long j = 0; j < n; j++) {\n            start += (powerOfTen - (i\
    \ - 1)) * 9;\n            end += (powerOfTen - (i - 1)) * 9;\n            if (j\
    \ == n - 1) {\n                // Don't multiply by nine when only one digit remains.\n\
    \                i *= 10;\n            } else {\n                i *= 10;\n  \
    \              i += 9;\n            }\n            startEnd += (i - powerOfTen)\
    \ * 9;\n            powerOfTen /= 10;\n            endPowerOfTen *= 10;\n    \
    \    }\n        return start + end - startEnd;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <182abf8c54c3437d805b8b1c9affe309>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <182abf8c54c3437d805b8b1c9affe309>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We use a dynamic programming approach.\n\
    \        //\n        // Let's say we have already defined A(m) as the number of\
    \ m-digit\n        // numbers that start or end with 1, for m < n.\n        //\n\
    \        // Then A(n) = 10 * A(n-1) + 9^(n-1)\n        // (since the first digit\
    \ cannot be 0 and then the rest is free).\n        //\n        // In general,\
    \ A(m) = 10 * A(m-1) + 9^(m-1)\n        //\n        long[] A = new long[n+1];\n\
    \        A[0] = 0;\n        A[1] = 2;\n        for (int i = 2; i <= n; i++) {\n\
    \            A[i] = 10 * A[i-1] + (long)Math.Pow(9, i-1);\n        }\n       \
    \ return A[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3989301d24ea40799b9b4b9cc9450a78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3989301d24ea40799b9b4b9cc9450a78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n < 1) throw new ArgumentOutOfRangeException(\"\
    n must be positive\");\n        if (n == 1) return 2;\n        if (n == 2) return\
    \ 4;\n        var a = new long[n + 1];\n        a[1] = 2;\n        a[2] = 4;\n\
    \        for (var i = 3; i <= n; i++) {\n            a[i] = a[i - 1] + a[i - 2];\n\
    \        }\n        return a[n];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3d92d819a5b484a860acbff45b0f57e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3d92d819a5b484a860acbff45b0f57e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        return CountEndsOne(n) + CountStartsOne(n);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjgkrbljs.cs(12,16): error CS0103: The name ''CountEndsOne'' does not exist
    in the current context

    /tmp/tmpjgkrbljs.cs(12,34): error CS0103: The name ''CountStartsOne'' does not
    exist in the current context

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        return n;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b141577ff5e47cfa6cf590fe462ea2e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b141577ff5e47cfa6cf590fe462ea2e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long ans = 0;\n        for (long i = 1;\
    \ i <= n; i++) {\n            long cur = 0;\n            for (long j = 0; j <\
    \ i; j++) {\n                cur = cur * 10 + 1;\n            }\n            ans\
    \ += cur;\n        }\n        return ans;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64dad0c8935644959a9edb262a25f1ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64dad0c8935644959a9edb262a25f1ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        BigInteger[] a = new BigInteger[(int)n];\n\
    \        BigInteger[] b = new BigInteger[(int)n];\n        a[0] = 2;\n       \
    \ b[0] = 9;\n        for (int i = 1; i < n; i++) {\n            a[i] = a[i - 1]\
    \ * 9 + b[i - 1];\n            b[i] = a[i - 1] * 8 + b[i - 1] * 9;\n        }\n\
    \        return (long)(a[n - 1] + b[n - 1]);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af676f7a64114691a48dc68d7e8ad06e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af676f7a64114691a48dc68d7e8ad06e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        return\
    \ 10 * Count(n - 1) + 9 * Count(n - 2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpofi1pfv9.cs(13,21): error CS0103: The name ''Count'' does not exist in
    the current context

    /tmp/tmpofi1pfv9.cs(13,40): error CS0103: The name ''Count'' does not exist in
    the current context

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 2;\n\
    \        } else if (n == 2) {\n            return 10;\n        } else {\n    \
    \        return (9 * A(n - 1)) + (10 * B(n - 2));\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp28wnnwts.cs(17,25): error CS0103: The name ''A'' does not exist in the
    current context

    /tmp/tmp28wnnwts.cs(17,43): error CS0103: The name ''B'' does not exist in the
    current context

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long total = 0;\n        for (long i =\
    \ 1; i <= n; i++) {\n            total += CountStartsEnds(i);\n        }\n   \
    \     return total;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp00uk6gdt.cs(14,22): error CS0103: The name ''CountStartsEnds'' does not
    exist in the current context

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We compute the number of n-digit numbers\
    \ that start with 1, then we\n        // subtract the number of n-digit numbers\
    \ that start with 1 but end in\n        // 0. To count the number of numbers that\
    \ start with 1, we can split it\n        // into two cases: the first digit is\
    \ 1 and all other digits are 0, or\n        // the first digit is 1 and the rest\
    \ of the digits are not all 0.\n\n        // If all other digits are 0, then there\
    \ is only one possible number\n        // with this property, and this occurs\
    \ when n = 1.\n        if (n == 1) {\n            return 1;\n        }\n\n   \
    \     // Now assume that the remaining digits are not all 0. Then there are\n\
    \        // n-1 digits to choose from and each can be chosen in 10 ways.\n   \
    \     // Multiplying these together, there are 10^(n-1) numbers of this form.\n\
    \        return 10 * (long)Math.Pow(10, n - 1);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28ac10bc5eba44ef9c566cdff84e9c2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28ac10bc5eba44ef9c566cdff84e9c2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 1;\n\
    \        } else if (n == 2) {\n            return 3;\n        } else {\n     \
    \       long prev = 1;\n            long curr = 3;\n            for (long i =\
    \ 3; i <= n; i++) {\n                long next = prev + curr + 1;\n          \
    \      prev = curr;\n                curr = next;\n            }\n           \
    \ return curr;\n        }\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e39d6758aab248a4b01210209a46c0b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e39d6758aab248a4b01210209a46c0b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We can use the inclusion-exclusion\
    \ principle to solve this problem.\n        // Let S be the set of n-digit positive\
    \ integers. First compute the\n        // cardinality of the set of n-digit positive\
    \ integers that do not start\n        // with 1.  This is the cardinality of the\
    \ set of the remaining digits,\n        // which is 9 to the power of n-1.\n \
    \       long notStarts = 9L.Pow(n - 1);\n        // Next compute the cardinality\
    \ of the set of n-digit positive integers\n        // that do not end with 1.\
    \  This is the cardinality of the set of\n        // remaining digits, which is\
    \ 9 to the power of n-1.\n        long notEnds = 9L.Pow(n - 1);\n        // Now\
    \ compute the cardinality of the set of n-digit positive integers\n        //\
    \ that do not start with 1 and do not end with 1.  This is the\n        // cardinality\
    \ of the set of the remaining digits, which is 9 to the\n        // power of n-2.\n\
    \        long notStartsEnds = 9L.Pow(n - 2);\n        // Now apply the inclusion-exclusion\
    \ principle to obtain the cardinality\n        // of the set of n-digit positive\
    \ integers that start or end with 1.\n        return 10L.Pow(n) - notStarts -\
    \ notEnds + notStartsEnds;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1z7jtn87.cs(17,29): error CS1061: ''long'' does not contain a definition
    for ''Pow'' and no accessible extension method ''Pow'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp1z7jtn87.cs(21,27): error CS1061: ''long'' does not contain a definition
    for ''Pow'' and no accessible extension method ''Pow'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp1z7jtn87.cs(26,33): error CS1061: ''long'' does not contain a definition
    for ''Pow'' and no accessible extension method ''Pow'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp1z7jtn87.cs(29,20): error CS1061: ''long'' does not contain a definition
    for ''Pow'' and no accessible extension method ''Pow'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n <= 0)\n            return 0;\n \
    \       // For example:\n        // n = 3\n        // Starts with one:\n     \
    \   // 1XX\n        // 1X\n        // Ends with one:\n        // X1X\n       \
    \ // X1\n        // We want to count these numbers.\n        // There are 2*9^(n-1)\
    \ of them.\n        // We account for the 0XX and XX0 cases by halving.\n    \
    \    return 2 * (long)Math.Pow(9, n - 1) / 2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7305e3848b774ef1a16f4c346ab2894c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7305e3848b774ef1a16f4c346ab2894c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Let's denote the number of n-digit\
    \ numbers that have no starting or\n        // ending 1s by S(n), and the number\
    \ of n-digit numbers that have\n        // exactly one starting or ending 1 by\
    \ E(n). We have:\n        //\n        // S(n) = 10 * S(n - 1) + 10^(n - 1)\n \
    \       // E(n) = S(n - 1) + E(n - 1) + 10^(n - 1)\n        //\n        // The\
    \ system of equations implies:\n        //\n        // S(n) = 9 * S(n - 1) + 9\
    \ * 10^(n - 1)\n        // E(n) = 8 * S(n - 1) + 8 * 10^(n - 1)\n        //\n\
    \        // S(n) + E(n) = 10 * S(n - 1) + 10^(n - 1) + 8 * S(n - 1) + 8 * 10^(n\
    \ - 1)\n        //             = (18 * S(n - 1) + 9 * 10^(n - 1)) / 9\n      \
    \  //\n        // S(n) = (S(n - 1) + E(n - 1)) * (9 * 10^(n - 1) - 1) / 9\n  \
    \      //      = (S(n - 1) + E(n - 1)) * (10^(n - 1) - 1)\n        //      = (10^(n\
    \ - 1) - 1) * (S(n - 1) + E(n - 1))\n        //      = (10^(n - 1) - 1) * (E(n\
    \ - 1) + 9 * S(n - 1) + 9 * 10^(n - 1)) / 9\n        //      = (10^(n - 1) - 1)\
    \ * (E(n - 1) + 9 * 10^(n - 1)) / 9\n        //      = (10^(n - 1) - 1) * E(n\
    \ - 1) / 9 + 10^(n - 1) - 1\n        //\n        // E(n) = (E(n - 1) + S(n - 1))\
    \ * (10^(n - 1) - 1)\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl56tompb.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // This is the number of n-digit positive\
    \ integers that end with 1.\n        long end1 = CountEnds(n);\n        // This\
    \ is the number of n-digit positive integers that start with 1.\n        long\
    \ start1 = CountStart(n);\n        // The total number of n-digit positive integers\
    \ that start or end with 1\n        // is the sum of the numbers of n-digit integers\
    \ that start or end with 1.\n        return end1 + start1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy749b09p.cs(13,21): error CS0103: The name ''CountEnds'' does not exist
    in the current context

    /tmp/tmpy749b09p.cs(15,23): error CS0103: The name ''CountStart'' does not exist
    in the current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n        long size\
    \ = (n + 1) / 2;\n        // For example,\n        // if n is 5, then size = 3\
    \ and we're looking for the count of 2-digit\n        // positive integers that\
    \ start or end with 1.\n        //\n        // If a 2-digit number starts with\
    \ 1, then it will be between 10 and 19.\n        // If a 2-digit number ends with\
    \ 1, then it will be between 1 and 91.\n        // (Because there's no zero in\
    \ the second digit.)\n        //\n        // Those two ranges have a total of\
    \ 90 numbers.\n        return 9 * size + 10;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2abc5ed6c8c14e40ac32883f358e923b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2abc5ed6c8c14e40ac32883f358e923b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // The number of such numbers is equal\
    \ to the number of possible\n        // numbers we can append or prepend 1 to.\n\
    \        //\n        // Appending 1 to a number is the same as prepending 1 to\
    \ a number\n        // minus 1. The reason for that is that any number of the\
    \ form\n        // (any number)(1)(any number) also has a representation\n   \
    \     // (1)(any number)(any number) that is one less.\n        //\n        //\
    \ So the number of ways is equal to the number of ways to prepend\n        //\
    \ 1 to a number minus the number of ways to prepend 1 to a number\n        //\
    \ minus 1.\n        //\n        // It's easier to count prependings than appendings\
    \ since we can\n        // always start from the smallest possible number.\n \
    \       //\n        // A number can always be written as d_0d_1d_2...d_{n-1} where\n\
    \        // 0 < d_0 < d_1 < ... < d_{n-1} < 10.\n        //\n        // The number\
    \ of numbers that can be prepended to d_0d_1d_2...d_{n-1}\n        // is the number\
    \ of ways to prepend a digit to d_0d_1d_2...d_{n-1}\n        // minus the number\
    \ of ways to prepend a digit to d_1d_2...d_{n-1}.\n        // The reason is the\
    \ same as before, we can always prepend 1 to\n        // d_0d_1d_2...d_{n-1} and\
    \ then remove the 1 from d_0 to get\n        // the number d_1d_2...d_{n-1}.\n\
    \        //\n        // The number of ways to prepend a digit to d_0d_1d_2...d_{n-1}\
    \ is\n        // the same as to prepend a digit to d_1d_2...d_{n-1} since all\n\
    \        // digits are admissible.\n        //\n        // So we have to do the\
    \ same calculation again, and again, and again\n        // until we get to the\
    \ last number.\n        //\n        // If the last number is d_0 the number of\
    \ ways to prepend a digit to\n       \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpghu43qmc.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long k = n / 2;\n        // [k] = # of\
    \ numbers in the range [1, 9...9] = 9...9 = 10^k - 1\n        // [k] = Sum(Sum(1,\
    \ i), i = 1, k)\n        // [k] = Sum(Sum(1, i), i = 1, k-1) + Sum(1, k)\n   \
    \     // [k] = (n-1) * Sum(1, k)\n        // [k] = (n-1) * 10^k\n        long\
    \ result = (n - 1) * Pow(10, k);\n        Debug.Assert(result == 123456);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph9tkzf70.cs(18,33): error CS0103: The name ''Pow'' does not exist in the
    current context

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 10;\n        return\
    \ (long)BigInteger.Log10(10, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctv94o7d.cs(13,33): error CS1501: No overload for method ''Log10'' takes
    2 arguments

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n <= 1) {\n            return 1;\n\
    \        }\n        long cnt = 0;\n        long p = (long)Math.Pow(10, n-1);\n\
    \        for (long i = 0; i < 10; i++) {\n            cnt += 9 * p;\n        \
    \    p /= 10;\n        }\n        return cnt;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2bf8ca9cd7c41d4aa26c30754023c75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2bf8ca9cd7c41d4aa26c30754023c75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Make sure we have enough memory to\
    \ hold the large numbers we'll be generating\n        Debug.Assert(n < (long)int.MaxValue);\n\
    \n        // Create a list of the numbers of (n-1)-digit positive integers that\
    \ start or end with 1.\n        List<BigInteger> list = new List<BigInteger>();\n\
    \        for (int i = 0; i < 10; i++)\n            list.Add(i);\n\n        //\
    \ Extend the list to n digits by doubling the list n-1 times, then adding a 0\
    \ at the end.\n        // This is to ensure the starting 1 or ending 1 is preserved.\n\
    \        for (int i = 0; i < n - 1; i++) {\n            // Double the list by\
    \ starting with a 0 and then concatenating each item with a 0 or 1.\n        \
    \    List<BigInteger> list2 = new List<BigInteger>();\n            list2.Add(0);\n\
    \            foreach (BigInteger item in list) {\n                list2.Add(item\
    \ * 10);\n                list2.Add(item * 10 + 1);\n            }\n         \
    \   list = list2;\n        }\n\n        // Add a 0 to the end of each list item.\n\
    \        for (int i = 0; i < list.Count; i++)\n            list[i] *= 10;\n\n\
    \        // Remove duplicates and sort the list.\n        list = list.Distinct().ToList();\n\
    \        list.Sort();\n\n        // Make sure the list has the correct length.\n\
    \        Debug.Assert(list.Count == 1023);\n\n        // Return the number of\
    \ items in the list.\n        return list.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.StartsOneEnds (System.Int64\
    \ n) [0x00000] in <08847ddabd734822b346eaf8500ec44c>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08847ddabd734822b346eaf8500ec44c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08847ddabd734822b346eaf8500ec44c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0"
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // For every number of this length, consider\
    \ what the leading digit is.\n        long total = 0;\n        for (int leading\
    \ = 1; leading <= 9; leading++) {\n            // This number must start with\
    \ the value leading.\n            long first = leading * PowerOf10(n - 1);\n \
    \           // How many digits follow?\n            for (int follows = 0; follows\
    \ <= 9; follows++) {\n                // How many digits before the ending 1?\n\
    \                // This can be an arbitrary number that fits in an n-digit number.\n\
    \                // For every value from 0 to n-2, we have a contribution.\n \
    \               for (int before = 0; before <= n - 2; before++) {\n          \
    \          long last = PowerOf10(before) + 1;\n                    total += CountInRange(first,\
    \ first + 9, first + follows) *\n                             CountInRange(last,\
    \ last + 9, last + follows);\n                }\n            }\n        }\n  \
    \      return total;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpts1no6f1.cs(16,36): error CS0103: The name ''PowerOf10'' does not exist
    in the current context

    /tmp/tmpts1no6f1.cs(23,33): error CS0103: The name ''PowerOf10'' does not exist
    in the current context

    /tmp/tmpts1no6f1.cs(24,30): error CS0103: The name ''CountInRange'' does not exist
    in the current context

    /tmp/tmpts1no6f1.cs(25,30): error CS0103: The name ''CountInRange'' does not exist
    in the current context

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We have the following cases\n     \
    \   // n = 1: returns 1\n        // n = 2: returns 11\n        // n = 3: returns\
    \ 111 + 101 + 11 = 223\n        // n = 4: returns 1111 + 1011 + 1111 + 1001 +\
    \ 101 + 11 = 3333\n        // n = 5: returns 11111 + 10111 + 11011 + 11101 + 11001\
    \ + 10001 + 1011 + 1111 + 101 = 5555\n        // n = 6: returns 111111 + 101111\
    \ + 110111 + 111011 + 111101 + 110011 + 100011 + 10111 + 11111 + 11011 + 11101\
    \ + 11001 + 10001 + 1011 + 1111 + 101 = 7777\n        // n = 7: returns 1111111\
    \ + 1011111 + 1101111 + 1110111 + 1111011 + 1111101 + 1100011 + 1000111 + 101111\
    \ + 111111 + 110111 + 111011 + 111101 + 110011 + 100011 + 10111 + 11111 + 11011\
    \ + 11101 + 11001 + 10001 + 1011 + 1111 + 101 = 9999\n        // n = 8: returns\
    \ 11111111 + 10111111 + 11011111 + 11101111 + 11110111 + 11111011 + 11111101 +\
    \ 11000111 + 10001111 + 1011111 + 1111111 + 1101111 + 1110111 + 1111011 + 1111101\
    \ + 1100011 + 1000111 + 101111 + 111111 + 110111 + 111011 + 111101 + 110011 +\
    \ 100011 + 10111 + 11111 + 11011 + 11101 + 11001 + 10001 + 1011 + 1111 + 101 =\
    \ 11111\n        // n = 9: returns 111111111 + 101111111 + 110111111 + 111011111\
    \ + 111101111 + 111110111 + 111111011 + 111111101 + 110000111 + 100001111 + 100011111\
    \ + 10111111 + 11111111 + 11011111 + 11101111 + 11110111 + 11111011 + 11111101\
    \ + 11000111 + 10001111 + 1011111 + 1111111 + 1101111 + 1110111 + 1111011 + 1111101\
    \ + 1100011 + 1000111 + 101111 + 111111 + 110111 + 111011 + 111101 + 110011 +\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1hj4kow0.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // How many combinations are there of\
    \ the remaining n-1 digits?\n        BigInteger combinations = BigInteger.Pow(10,\
    \ n - 1);\n        // The number of combinations which start or end with 1 is\
    \ the number of\n        // combinations which end with 1 plus the number of combinations\
    \ which\n        // start with 1, minus the number of combinations which start\
    \ and end\n        // with 1.  The start and end with 1 case must be excluded\
    \ because it\n        // has been counted twice.\n        return (long)(combinations\
    \ + combinations - (10 * (n - 1)));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppzwtdr04.cs(13,54): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We have that the number must start\
    \ or end with a one,\n        // so we break the number into A, B, C, and D, where\n\
    \        // A is either 1 or 0, B is any number of digits, C is between 1 and\
    \ 9\n        // and D is either 1 or 0. \n        // When we count this, we get\
    \ the following:\n        //   A is either 0 or 1 (2 options), \n        //  \
    \ B is any number of digits, \n        //   C is between 1 and 9 (9 options),\
    \ \n        //   D is either 0 or 1 (2 options).\n        // We can now make a\
    \ recurrence relation for this count:\n        //   Count(n) = Count(n-1) + Count(n-2)\
    \ + 9 * Count(n-3) + 2 * Count(n-4)\n        // The base cases are:\n        //\
    \   Count(1) = 2 (1 and 1)\n        //   Count(2) = 3 (11, 10, and 1)\n      \
    \  //   Count(3) = 9 (1x, 1x, 1x, 1x, 1x, 1x, 1x, 1x, and 10)\n        //   Count(4)\
    \ = 29 (1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx,\
    \ 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 1xx, 10x, 10x, and 11)\n      \
    \  // We can now use the above recurrence relation to calculate count for any\
    \ n, however the\n        // numbers will grow very large very quickly, so we'll\
    \ need to use big integers.\n        BigInteger count = new BigInteger(29);\n\
    \        BigInteger countLast = new BigInteger(9);\n        BigInteger countSecondLast\
    \ = new BigInteger(3);\n        BigInteger countThirdLast = new BigInteger(1);\n\
    \        BigInteger countFourthLast = new BigInteger(2);\n        for (long i\
    \ = 4; i < n; i++) {\n            countFourthLast = countThirdLast;\n        \
    \    countThirdLast = countSecondLast;\n            count\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa4nqgpjc.cs(38,18): error CS1002: ; expected

    /tmp/tmpa4nqgpjc.cs(40,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpa4nqgpjc.cs(48,2): error CS1513: } expected

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n <= 1) {\n            return 0;\n\
    \        }\n        // We want to count the number of numbers 0 <= x < 10^n that\
    \ start or end with 1\n        // which is equivalent to counting the number of\
    \ numbers 0 <= x < 10^n - 1 with x % 10 != 1\n        // as 0 <= x < 10^n < 10^n\
    \ - 1.\n        // Let a_i be the number of n-digit numbers x with i < x % 10\
    \ < 10, a_0 is the number\n        // of n-digit numbers x with x % 10 = 0, and\
    \ a_9 is the number of n-digit numbers x with\n        // x % 10 = 9.\n\n    \
    \    // Assume a_0 = a_9 = 0\n        // For each 0 <= i < 9 and each 0 <= j <\
    \ 9, there are 10^(n-1) * 9 such numbers\n        // x with a_i <= x < a_i + 10^(n-1)\
    \ * 9, x % 10 = j.\n        // For each 0 <= i < 9, there are 10^(n-1) such numbers\
    \ x with a_i <= x < a_i + 10^(n-1),\n        // x % 10 = 9.\n        // For each\
    \ 0 <= i < 9, there are 10^(n-1) such numbers x with a_i <= x < a_i + 10^(n-1),\n\
    \        // x % 10 = 0.\n        // For each 0 <= i < 9, there are a_i numbers\
    \ x with x % 10 = i.\n        // The numbers of numbers x with x % 10 = i and\
    \ x < a_i + 10^(n-1) is a_i + 10^(n-1) * i.\n        // The number of numbers\
    \ x with x % 10 = i and x < a_i + 10^(n-1) * 9 is\n        // a_i + 10^(n-1) *\
    \ i + 10^(n-1) * 9.\n        // The number of numbers x with x % 10 = i and x\
    \ < a_i + 10^(n-1) * 9 is\n        // a_i + 10^(n-1) * i + 10^(n-1\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7bxu0uqb.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n < 1) {\n            throw new ArgumentException(\"\
    n must be positive\");\n        }\n        if (n == 1) {\n            return 1;\n\
    \        }\n        return dp(n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2yp8cbx_.cs(18,16): error CS0103: The name ''dp'' does not exist in the
    current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var count = 0L;\n        for (long i =\
    \ 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aadec14761e642b58843765cbc78b449>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aadec14761e642b58843765cbc78b449>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        return (n / 2) * Calc.Factorial(n);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6aruwhz3.cs(12,26): error CS0103: The name ''Calc'' does not exist in
    the current context

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n > 0);\n        return n\
    \ == 1 ? 2 : n > 1 ? (4 * F(n - 1) - 1) : 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdvi3lx2m.cs(13,42): error CS0103: The name ''F'' does not exist in the
    current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n        if (n ==\
    \ 2) return 4;\n        long less = StartsOneEnds(n - 1);\n        long cur =\
    \ less * 10 - 2;\n        return less + cur;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dc6e27860d2458a9c33973b064bc06c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dc6e27860d2458a9c33973b064bc06c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // There are at most 9 * 9 * ... * 9 =\
    \ 9^(n-1) numbers that satisfy the\n        // conditions, however the recursive\
    \ formula for counting them is simpler\n        // than that for the total numbers\
    \ of n-digit positive integers.\n\n        // Count the count of the numbers of\
    \ n-digit positive integers that start\n        // with 1 and end with 2, ...,\
    \ 9.\n        long count1 = 0;\n        long digit = 1;\n        for (long d =\
    \ 2; d <= 9; d++) {\n            count1 += Count(digit, d, n);\n        }\n\n\
    \        // Count the count of the numbers of n-digit positive integers that start\n\
    \        // with 2, ..., 9 and end with 1.\n        long count2 = 0;\n       \
    \ for (long d = 2; d <= 9; d++) {\n            digit = d;\n            count2\
    \ += Count(digit, 1, n);\n        }\n\n        // The total count is the sum of\
    \ the counts of the two cases.\n        return count1 + count2;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpssgpw6re.cs(21,23): error CS0103: The name ''Count'' does not exist in
    the current context

    /tmp/tmpssgpw6re.cs(29,23): error CS0103: The name ''Count'' does not exist in
    the current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 10;\n        if (n\
    \ == 2) return 55;\n        if (n == 3) return 220;\n        long result = n *\
    \ n * n * n;\n        // Exclude numbers that have a 1 in the middle but not at\
    \ one end.\n        result -= 9 * n * n * n;\n        // Exclude numbers that\
    \ don't have a 1 at all.\n        result -= 9 * n * n;\n        // Exclude the\
    \ numbers that have a 1 at the other end (the 1 is counted above).\n        result\
    \ -= 9 * n * n;\n        // Exclude the numbers that have a 1 at both ends (the\
    \ 1 is counted above).\n        result -= n * n;\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cc3122292474ff69d25d533d8514b46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cc3122292474ff69d25d533d8514b46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 10;\n        if (n\
    \ == 2) return 100;\n        long res = 0;\n        long mod = 1000000007;\n \
    \       long ten = 100;\n        // Count numbers with at least one digit\n  \
    \      res += ten;\n        // Count numbers with exactly one digit\n        res\
    \ += ((n - 1) * 10) % mod;\n        // Count numbers with at least two digits\n\
    \        res += (n - 1) * ((90 * ten) % mod);\n        res %= mod;\n        res\
    \ += (n - 1) * (n - 2) / 2 * ((81 * ten * ten) % mod);\n        res %= mod;\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <337f21ce91a0452bb60fd4e8447b56ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <337f21ce91a0452bb60fd4e8447b56ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Build the graph.\n        int digits\
    \ = (int)Math.Ceiling(Math.Log10(n));\n        var graph = new Graph(digits);\n\
    \        for (int i = 0; i < digits; i++) {\n            for (int j = 0; j < digits;\
    \ j++) {\n                int[] x = new int[digits];\n                int[] y\
    \ = new int[digits];\n                x[i] = 1;\n                y[j] = 1;\n \
    \               if (i > 0) x[i - 1] = 9;\n                if (j < digits - 1)\
    \ y[j + 1] = 9;\n                BigInteger a = BigInteger.Parse(new string(x.Select(z\
    \ => (char)('0' + z)).ToArray()));\n                BigInteger b = BigInteger.Parse(new\
    \ string(y.Select(z => (char)('0' + z)).ToArray()));\n                if (a <\
    \ n && b < n) {\n                    graph.AddEdge(i, j);\n                }\n\
    \            }\n        }\n        return graph.ComputeSum().ToString().Last()\
    \ - '0';\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0gb1roo9.cs(14,25): error CS0246: The type or namespace name ''Graph''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        long mid\
    \ = n / 2;\n        long ans = CountWithOne(mid);\n        if (n % 2 == 1) ans\
    \ *= 10;\n        return ans;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkp7_ptz.cs(14,20): error CS0103: The name ''CountWithOne'' does not exist
    in the current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 10;\n        if (n\
    \ == 2) return 55;\n        long fact = 1;\n        for (long i = 2; i <= n; i++)\
    \ fact *= i;\n        long k = n/2;\n        long m = (n % 2 == 0) ? 0 : (n-1)/2;\n\
    \        BigInteger sum = BigInteger.Zero;\n        while (k >= 0) {\n       \
    \     BigInteger a = (n-k) * 10;\n            BigInteger b = (k * k * fact * fact\
    \ * fact * fact);\n            sum += a * b;\n            k--;\n        }\n  \
    \      while (m >= 0) {\n            BigInteger a = (n-m) * 10;\n            BigInteger\
    \ b = (m * m * fact * fact * fact * fact);\n            sum += a * b;\n      \
    \      m--;\n        }\n        return (long)sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2ae579e6b8042be8fd5aa63e2ce492f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2ae579e6b8042be8fd5aa63e2ce492f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n        long ones\
    \ = CountOnes(n);\n        return OnesOrEndsOnes(n - 1) * ones + StartsOneEnds(n\
    \ - 1) * (9 - ones);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyqybfmyc.cs(13,21): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpyqybfmyc.cs(14,16): error CS0103: The name ''OnesOrEndsOnes'' does not
    exist in the current context

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We can solve this problem by iteration.\
    \ Consider the \"last digit\n        // group\" of a number of digits n, namely\
    \ the group of digits that\n        // terminates the number.  There are 9 possibilities\
    \ of the last digit\n        // group because 0 is excluded.  For each of these\
    \ possibilities, there\n        // are 10possibilities for the number of digits\
    \ n-1 since the first\n        // digit can be 0.  Thus the recurrence relation\
    \ is:\n        //   a(n) = 10 * a(n-1) + 9\n        // with the initial conditions:\n\
    \        //   a(1) = 10\n        //   a(2) = 19\n        //   a(3) = 28\n    \
    \    // and so on.  I haven't proven that this is correct, but it makes\n    \
    \    // sense.\n        //\n        // The iterative solution would be to compute\
    \ the sum of the last 9\n        // digits and multiply by 10.\n        //\n \
    \       // We can see the symmetry of this recurrence by writing the recursive\n\
    \        // function for the sum of first digits and subtracting from 100.\n \
    \       //\n        // Both functions are positive, so it is a nice exercise in\n\
    \        // understanding the symmetry of the problem to prove that the\n    \
    \    // functions have the same sum.\n        //\n        // We also can see that\
    \ the recurrence relation is of the form\n        // a(n) = 10*a(n-1) + b, which\
    \ has a solution of\n        // a(n) = c*10^n + d.\n        //\n        // This\
    \ makes sense because we expect a(n) to be linear in n since\n        // there\
    \ are 10^n n-digit numbers.\n        //\n        // Moreover, with the initial\
    \ conditions we get the equations\n        // 10 = 10c + d\n        // 19 = 100c\
    \ + d\n        // Solving these we get\n        // c = 1\n        // d = 9\n \
    \       //\n        // So we see that the solution is a(n) = 10^n + 9 and it counts\n\
    \        // numbers starting or ending with 1.\n        //\n        // Except\
    \ we have to minus 1 since it counts 0 which we don't want.\n        return (long)Math.Pow(10,\
    \ n) + 9\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqfvzk_7v.cs(54,41): error CS1002: ; expected

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We need to count the number of n-digit\
    \ positive integers that do not\n        // start with 1.\n        long count\
    \ = 9; // Exclude the leading 1.\n        for (int i = 1; i < n; i++) {\n    \
    \        count *= 10;\n        }\n        // Now we subtract the number of n-digit\
    \ positive integers that do not\n        // end with 1.\n        count -= 9; //\
    \ Exclude the ending 1.\n        for (int i = 1; i < n; i++) {\n            count\
    \ *= 9;\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb57e6484b64d27afd58777a1fb5f37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb57e6484b64d27afd58777a1fb5f37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n < 1)\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        // Base cases: 1-digit and 2-digit numbers\n        long result\
    \ = 2;\n        if (n == 1)\n            return result;\n        // The number\
    \ of n-digit numbers that start with 1 is twice the\n        // number of (n-1)-digit\
    \ numbers that start with 1, because we can\n        // pick any remaining digit.\n\
    \        // The number of n-digit numbers that end with 1 is twice the\n     \
    \   // number of (n-1)-digit numbers that end with 1, because we can\n       \
    \ // pick any starting digit.\n        // The number of n-digit numbers that start\
    \ and end with 1 is\n        // the number of (n-2)-digit numbers that start and\
    \ end with 1,\n        // because we can pick any remaining two digits.\n    \
    \    result += StartsOneEnds(n - 1) * 2 - StartsOneEnds(n - 2);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a24c083cef0a464583b2424f7b1464d9>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Specified argument was out of the range of\
    \ valid values.\nParameter name: n\n  at Problem.StartsOneEnds (System.Int64 n)\
    \ [0x0000a] in <a24c083cef0a464583b2424f7b1464d9>:0 \n  at Problem.StartsOneEnds\
    \ (System.Int64 n) [0x0002f] in <a24c083cef0a464583b2424f7b1464d9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00012] in <a24c083cef0a464583b2424f7b1464d9>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: n\n  at Problem.StartsOneEnds\
    \ (System.Int64 n) [0x0000a] in <a24c083cef0a464583b2424f7b1464d9>:0 \n  at Problem.StartsOneEnds\
    \ (System.Int64 n) [0x0002f] in <a24c083cef0a464583b2424f7b1464d9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00012] in <a24c083cef0a464583b2424f7b1464d9>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 1;\n\
    \        }\n        // We have a choice of starting with a 1, and then the rest\
    \ of the digits\n        // can be anything, or starting with a 2 or more and\
    \ ending with a 1.\n        return 9*Pow10(n-1) + StartsOneEnds(n-1);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptglqppjm.cs(17,18): error CS0103: The name ''Pow10'' does not exist in
    the current context

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // a[i] = count of n-digit numbers start/end\
    \ with 1, n = i.\n        long[] a = new long[n+1];\n        a[1] = 1;\n     \
    \   for (int i = 2; i <= n; i++) {\n            // 1xx...x = a[i-1] * 9, where\
    \ x = 0..9, except x = 1.\n            a[i] = a[i-1] * 9;\n            // x1x...x\
    \ = a[i-1] * 9, where x = 0..9, except x = 1.\n            a[i] += a[i-1] * 9;\n\
    \            // xxx...1x = a[i-1] * 9, where x = 0..9, except x = 1.\n       \
    \     a[i] += a[i-1] * 9;\n            // 1xx...1x = a[i-1] * 9, where x = 0..9,\
    \ except x = 1.\n            a[i] += a[i-1] * 9;\n            // xxx...x1 = a[i-1]\
    \ * 1, where x = 0..9, except x = 1.\n            a[i] += a[i-1] * 1;\n      \
    \      // 1xx...x1 = a[i-1] * 1, where x = 0..9, except x = 1.\n            a[i]\
    \ += a[i-1] * 1;\n            // x1x...x1 = a[i-1] * 1, where x = 0..9, except\
    \ x = 1.\n            a[i] += a[i-1] * 1;\n            // 1xx...1x1 = a[i-1] *\
    \ 1, where x = 0..9, except x = 1.\n            a[i] += a[i-1] * 1;\n        \
    \    // 1xx...x11 = a[i-1] * 1, where x = 0..9, except x = 1.\n            a[i]\
    \ += a[i-1] * 1;\n            // 111...111 = a[i-1] * 1, where x = 0..9, except\
    \ x = 1.\n            a[i] +=\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpny2encfj.cs(35,20): error CS1525: Invalid expression term ''}''

    /tmp/tmpny2encfj.cs(35,20): error CS1002: ; expected

    /tmp/tmpny2encfj.cs(37,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpny2encfj.cs(45,2): error CS1513: } expected

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Let d(n) be the number of numbers of\
    \ n-digit positive integers that\n        // start or end with 1.\n        //\n\
    \        // We have:\n        //\n        // d(1) = 2\n        // d(2) = 4\n \
    \       // d(3) = 10\n        // d(4) = 28\n        // d(5) = 82\n        // d(6)\
    \ = 248\n        // d(7) = 762\n        // d(8) = 2328\n        // d(9) = 7132\n\
    \        // d(10) = 21894\n        // d(11) = 67902\n        // d(12) = 209214\n\
    \        // d(13) = 639302\n        // d(14) = 1977086\n        // d(15) = 6141410\n\
    \        // d(16) = 19019722\n        // d(17) = 58413274\n        // d(18) =\
    \ 179639452\n        // d(19) = 550115166\n        // d(20) = 1693876266\n   \
    \     // d(21) = 5235737894\n        // d(22) = 16118991502\n        // d(23)\
    \ = 49724432058\n        // d(24) = 152878732428\n        // d(25) = 471864621642\n\
    \        // d(26) = 1452342993450\n        // d(27) = 4470903421418\n        //\
    \ d(28) = 13827448119100\n        // d(29) = 42283317040074\n        // d(30)\
    \ = 131909856518128\n        // d(31) = 399086335831110\n        // d(32) = 1260303437953746\n\
    \        // d(33) = 3768950178261582\n        // d(34) = 12058382030785282\n \
    \       // d(35) = 35518011926282314\n        // d(36) = 115506921047207598\n\
    \        // d(37) = 334907828611063226\n        // d(38) = 110\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42dz2i7r.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // In terms of digit 1, the number starts\
    \ and ends with 1.\n        if (n == 1) {\n            return 1;\n        }\n\
    \        // The number may start and end with a 1.\n        // The number may\
    \ start with a 1 and end with something else.\n        // The number may start\
    \ with something else and end with a 1.\n        // The number may start and end\
    \ with something else.\n        return 1 + AllDigits(n - 1) + Starts(n - 1) +\
    \ Ends(n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm69c3h72.cs(20,20): error CS0103: The name ''AllDigits'' does not exist
    in the current context

    /tmp/tmpm69c3h72.cs(20,39): error CS0103: The name ''Starts'' does not exist in
    the current context

    /tmp/tmpm69c3h72.cs(20,55): error CS0103: The name ''Ends'' does not exist in
    the current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = (int) Math.Pow(10, n - 1);\n\
    \        count += 10 * (n - 1) * (int) Math.Pow(10, n - 2);\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9ae510fa08f4f8e8a7ac7db637d5943>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9ae510fa08f4f8e8a7ac7db637d5943>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        // Count\
    \ of 3 digit numbers that start with 1 (100)\n        long count = 10;\n     \
    \   // Count of n digit numbers that start with 1 and end with 1.\n        long\
    \ ends1 = 0;\n        // Count of n digit numbers that start with 1.\n       \
    \ long start1 = 10;\n        // Count of n digit numbers that start with 1 and\
    \ end with 0.\n        long ends0 = 0;\n        for (long d = 2; d <= n; d++)\
    \ {\n            long nextEnds1 = start1 + ends0;\n            long nextEnds0\
    \ = start1 + ends1;\n            long nextStart1 = start1 * 10;\n            count\
    \ += nextEnds1 + nextEnds0;\n            ends1 = nextEnds1;\n            ends0\
    \ = nextEnds0;\n            start1 = nextStart1;\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84326859135148c892d86e028e65cd90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84326859135148c892d86e028e65cd90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // dp[i][j] = the number of i-digit numbers\
    \ that start with 1 and end with j\n        var dp = new long[n + 1, 2];\n   \
    \     dp[1, 0] = 1;\n        dp[1, 1] = 1;\n        for (int i = 2; i <= n; i++)\
    \ {\n            dp[i, 0] = dp[i - 1, 0] + dp[i - 1, 1];\n            dp[i, 1]\
    \ = dp[i - 1, 0];\n        }\n        return dp[n, 0] + dp[n, 1];\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <958265a2489f4c09a5ed418286e12abc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <958265a2489f4c09a5ed418286e12abc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Manually count the cases that end in\
    \ 0, since they aren't allowed.\n        return (n == 1 ? 0 : (long)Math.Pow(2,\
    \ n - 1)) - (n == 1 ? 0 : 1);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a1884e0318a452a83849e41d7ae01ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a1884e0318a452a83849e41d7ae01ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Let n=4. We have four choices for the\
    \ first digit, and for each of\n        // those we have ten choices for the next\
    \ digit. So the count of numbers\n        // that start with 1 is 4*10^(n-2).\
    \ The same argument holds for the count\n        // of numbers that end with 1.\
    \ So the total count of numbers that start\n        // or end with 1 is 2*4*10^(n-2).\n\
    \        return 2*4*(long)BigInteger.Pow(10, n-2);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt8thfxsv.cs(17,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = 0;\n        if (n == 1) {\n\
    \            count++;\n        } else {\n            count += StartsOneEnds(n\
    \ - 1);\n            long digitCount = 1;\n            long digitMax = 9;\n  \
    \          while (digitCount < n - 1) {\n                count += StartsOneEnds(n\
    \ - digitCount - 1) * digitMax;\n                digitCount++;\n             \
    \   digitMax *= 10;\n            }\n            count += digitMax;\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1b0284a972240179719f6660ea86e27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1b0284a972240179719f6660ea86e27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        // We can\
    \ find a recurrence for this, but it's easier to just count\n        // manually.\n\
    \        long ct = 0;\n        for (int i = 1; i < 10; i++) {\n            //\
    \ Count all numbers that start with i and have n-1 digits.\n            ct +=\
    \ Count(i, n - 1);\n        }\n        return ct;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzh7722aa.cs(18,19): error CS0103: The name ''Count'' does not exist in
    the current context

    '
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // [0] = 0\n        // [1] = 1\n     \
    \   // [2] = 2\n        // [3] = 3\n        // [4] = 4 + 1 = 5\n        // [5]\
    \ = 5 + 1 = 6\n        // [6] = 6 + 2 = 8\n        // [7] = 7 + 3 = 10\n     \
    \   // [8] = 8 + 4 = 12\n        // [9] = 9 + 5 = 14\n        // [10] = 10 + 6\
    \ = 16\n        // [11] = 11 + 7 = 18\n        // [12] = 12 + 8 = 20\n       \
    \ // [13] = 13 + 9 = 22\n        // [14] = 14 + 10 = 24\n        // [15] = 15\
    \ + 11 = 26\n        // [16] = 16 + 12 = 28\n        // [17] = 17 + 13 = 30\n\
    \        // [18] = 18 + 14 = 32\n        // [19] = 19 + 15 = 34\n        // [20]\
    \ = 20 + 16 = 36\n        // [21] = 21 + 17 = 38\n        // [22] = 22 + 18 =\
    \ 40\n        // [23] = 23 + 19 = 42\n        // [24] = 24 + 20 = 44\n       \
    \ // [25] = 25 + 21 = 46\n        // [26] = 26 + 22 = 48\n        // [27] = 27\
    \ + 23 = 50\n        // [28] = 28 + 24 = 52\n        // [29] = 29 + 25 = 54\n\
    \        // [30] = 30 + 26 = 56\n        // [31] = 31 + 27 = 58\n        // [32]\
    \ = 32 + 28 = 60\n        // [33] = 33 + 29 = 62\n        // [34] = 34 + 30 =\
    \ 64\n        // [35] = 35 + 31 = 66\n        // [36] = 36 + 32 = 68\n       \
    \ // [37] = 37 + 33 = 70\n        // [38] = 38 + 34 = 72\n        // [39] = 39\
    \ + 35 = 74\n        // [40] = 40 + 36 = 76\n        // [41] = 41 + 37 = 78\n\
    \        // [42] = 42 + 38 = 80\n        // [43] = 43 + 39 = 82\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxk656iwa.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977779
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 10;\n        // Recursion\n\
    \        long a = StartsOneEnds(n - 1);\n        long b = StartsOneEnds(n - 2);\n\
    \        // The numbers with a 1 at the end are the numbers with a 1 at the\n\
    \        // beginning of the previous number, times 9 (because the last digit\n\
    \        // can be 0-9).\n        long ends = a * 9;\n        // The numbers with\
    \ a 1 at the beginning are the numbers with a 1 at\n        // the end of the\
    \ previous number, but this time times 10 (because the\n        // last digit\
    \ can be 0-9), plus the numbers with no 1s at the beginning\n        // or end\
    \ of the last digit, times 9 (because the first digit can be\n        // 1-9),\
    \ plus the numbers with a 1 at the end, times 10 (because the\n        // first\
    \ digit can be 0-9).\n        long starts = a * 10 + b * 9 + ends * 10;\n    \
    \    return starts + ends;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6799a64114904f50989396b47daf2830>:0 \n"
  stdout: None
  timestamp: 1659977784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 1;\n\
    \        } else if (n == 2) {\n            return 10;\n        } else {\n    \
    \        return StartsOneEnds(n - 1) + StartsOneEnds(n - 2);\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79373ce2a8841baa91885a11c0b5442>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79373ce2a8841baa91885a11c0b5442>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        long x\
    \ = (long)Math.Pow(10, n - 1);\n        long y = (long)Math.Pow(10, n);\n    \
    \    long z = (long)Math.Pow(10, n - 2);\n        long sum = y - x;\n        sum\
    \ += (z - 1) * 9;\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f71802d92f0840309e0ac0e004326e5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f71802d92f0840309e0ac0e004326e5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long[] count = new long[n + 1];\n    \
    \    count[0] = 1;\n        count[1] = 1;\n        for (int i = 2; i <= n; i++)\
    \ {\n            count[i] = count[i - 1] + count[i - 2];\n        }\n        return\
    \ count[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22f6c276bf0847b9a33c2a7098c50154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22f6c276bf0847b9a33c2a7098c50154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // A(n) = C(n-1,0) + C(n-1,1) + ... +\
    \ C(n-1,n-1) = 2^(n-1)\n        return (1L << (n - 1));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppdd5lhpv.cs(13,17): error CS0019: Operator ''<<'' cannot be applied to
    operands of type ''long'' and ''long''

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        long lo\
    \ = 1, hi = (long) Math.Pow(10, n - 1);\n        var tens = new List<long> { 1\
    \ };\n        while (tens.Last() < hi) tens.Add(tens.Last() * 10);\n        var\
    \ prev = new long[tens.Count];\n        var curr = new long[tens.Count];\n   \
    \     for (int i = 0; i < tens.Count; i++) prev[i] = tens[i] - 1;\n        for\
    \ (int k = 2; k <= n; k++) {\n            for (int i = 0; i < tens.Count; i++)\
    \ {\n                curr[i] = 0;\n                for (int j = i + 1; j < tens.Count;\
    \ j++) {\n                    curr[i] += prev[j];\n                }\n       \
    \     }\n            var temp = prev;\n            prev = curr;\n            curr\
    \ = temp;\n        }\n        return prev.Sum();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f838f84a30a4c6c9abadf890b533c2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f838f84a30a4c6c9abadf890b533c2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n <= 0) {\n            return 0;\n\
    \        }\n        long ten = (long)Math.Pow(10, n - 1);\n        long nine =\
    \ (long)Math.Pow(10, n - 2);\n        long count = n * ten;\n        if (n % 2\
    \ == 0) {\n            count += nine * nine * 10;\n        } else {\n        \
    \    count += nine * nine * 100;\n        }\n        return count;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46bd7903ecb848f794752f2633be1560>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46bd7903ecb848f794752f2633be1560>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // For even n, it is the number of ways\
    \ to choose 1 digit from a pool of\n        // 10, and 9 digits from a pool of\
    \ 9, then multiply those together.\n        // For odd n, it is the number of\
    \ ways to choose 2 digits from a pool of\n        // 10, and 9 digits from a pool\
    \ of 9, then multiply those together.\n        return (BigInteger.Pow(10, n) -\
    \ BigInteger.Pow(9, n)) % 1000000007;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn96ctsd2.cs(16,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpn96ctsd2.cs(16,59): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 1;\n\
    \        }\n        else if (n == 2) {\n            return 10;\n        }\n  \
    \      else {\n            long n1 = StartsOneEnds(n - 1);\n            long n2\
    \ = StartsOneEnds(n - 2);\n            return (n1 + 10 * n2);\n        }\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5ec242f8462442ab0c293e8610ca951>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5ec242f8462442ab0c293e8610ca951>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // O(n*log(n)) time and O(n) space.\n\
    \        // We generate the numbers using the following matrix recurrence:\n \
    \       // The vector starts[1, i] gives the number of i-digit integers that\n\
    \        // start with 1. The vector ends[1, i] gives the number of i-digit\n\
    \        // integers that end with 1. The vector starts[2, i] gives the number\n\
    \        // of i-digit integers that start with 2. The vector ends[2, i] gives\n\
    \        // the number of i-digit integers that end with 2.\n        // The vector\
    \ starts[i, i] gives the number of i-digit integers that\n        // start with\
    \ i. The vector ends[i, i] gives the number of i-digit\n        // integers that\
    \ end with i.\n        // The matrix recurrence is:\n        //    starts[i, j]\
    \ = sum_{0 <= k < i} starts[k, j-1]\n        //    ends[i, j] = sum_{i <= k <=\
    \ 9} ends[k, j-1]\n        // The answer is ends[1, n] + ends[1, n-1] + ... +\
    \ ends[1, 1].\n        var starts = new long[10, n+1];\n        var ends = new\
    \ long[10, n+1];\n        for (long i = 1; i <= 9; i++) {\n            starts[i,\
    \ 1] = 1;\n            ends[i, 1] = 1;\n        }\n        for (long j = 2; j\
    \ <= n; j++) {\n            for (long i = 1; i <= 9; i++) {\n                for\
    \ (long k = 0; k < i; k++) {\n                    starts[i, j] += starts[k, j-1];\n\
    \                }\n                for (long k = i; k <= 9; k++) {\n        \
    \            ends[i, j] += ends[k, j-1];\n                }\n            }\n \
    \       }\n        long ans = 0;\n        for (long i = 1; i <= n; i++) {\n  \
    \          ans += ends[1, i];\n        }\n        return ans;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf72ca482f614a169ea2a05ed5b90214>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf72ca482f614a169ea2a05ed5b90214>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // D(n, l) is the count of n-digit positive\
    \ integers that start with l.\n        // D(1, 1) = 1.\n        // D(2, 1) = 10\
    \ - 1 = 9.\n        // D(3, 1) = 10 * 10 - 10 = 90.\n        // D(4, 1) = 10 *\
    \ 10 * 10 - 10 * 10 = 900.\n        // D(n, 1) = 10 ^ (n - 1) - 10 ^ (n - 2).\n\
    \        // For example, D(3, 1) = D(3, 2) = D(3, 3) = D(3, 4) = D(3, 5) = D(3,\
    \ 6)\n        // = D(3, 7) = D(3, 8) = D(3, 9) = D(3, 0) = 90.\n        // D(n,\
    \ l) = D(n - 1, 0) + D(n - 1, 1) + ... + D(n - 1, 9).\n        // D(n, l) = (10\
    \ ^ (n - 1) - 10 ^ (n - 2)) * 10 + (10 ^ (n - 2) - 10 ^ (n - 3)) * 9.\n      \
    \  // D(n, l) = 10 ^ (n - 1) * (10 - 1) + 10 ^ (n - 2) * (10 - 10).\n        //\
    \ D(n, l) = 10 ^ (n - 1) - 10 ^ (n - 2).\n        // For example, D(3, 2) = D(3,\
    \ 3) = D(3, 4) = D(3, 5) = D(3, 6) = D(3, 7)\n        // = D(3, 8) = D(3, 9) =\
    \ D(3, 0) = 90.\n        // D(n, l) = D(n - 1, 0) + D(n - 1, 1) + ... + D(n -\
    \ 1, 9).\n        // D(n, l) = D(n - 1, 0) + D(n - 1, 1) + ... + D(n - 1, l -\
    \ 1) + D(n - 1, l + 1) + ... + D\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2p788t6d.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We can use dynamic programming to solve\
    \ this.  Let f(i) be the number\n        // of i-digit numbers that start with\
    \ 1, and let g(i) be the number of\n        // i-digit numbers that end with 1.\
    \  f(1) = 1.  g(1) = 1.  Then for\n        // f(i), note that f(i) = f(i-1) +\
    \ g(i-1), because the i-digit numbers\n        // that start with 1 must either\
    \ come from i-1 digit numbers that start\n        // with 1, or i-1 digit numbers\
    \ that end with 1.  For g(i), we have\n        // g(i) = f(i-1) + g(i-1), because\
    \ the i-digit numbers that end with 1\n        // must either come from i-1 digit\
    \ numbers that start with 1, or i-1\n        // digit numbers that end with 1.\
    \  So the count is f(n) + g(n).  We can\n        // derive the following looping\
    \ formulas, and we will use these to\n        // compute f(n) and g(n):\n    \
    \    // f(i) = f(i-1) + g(i-1)\n        // g(i) = f(i-1) + g(i-1)\n        //\
    \       f(i) = f(i-1) + g(i-1)\n        //       g(i) = 2f(i-1) + g(i-1)\n   \
    \     //       g(i) = 2f(i-1) + g(i-1)\n        //       g(i) = 2f(i-1) + 2g(i-1)\n\
    \        // So we start with f(1) = 1, g(1) = 1, and use these equations to\n\
    \        // compute f(i) and g(i) for i > 1.\n        long f = 1;\n        long\
    \ g = 1;\n        for (long i = 2; i <= n; i++) {\n            long fNew = f +\
    \ g;\n            long gNew = 2 * f + 2 * g;\n            f = fNew;\n        \
    \    g = gNew;\n        }\n        return f\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4wwu8dgv.cs(39,17): error CS1002: ; expected

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n <= 1) return n;\n        // Let\
    \ f(i) be the count of i-digit positive integers that end with 1.\n        //\
    \ Let g(i) be the count of i-digit positive integers that start with 1.\n    \
    \    // Consider the first digit of such a number. If we pick 0 as the first\n\
    \        // digit, we have g(i - 1) options for the rest. If we pick 1 as the\
    \ first\n        // digit, we have f(i - 1) options for the rest. Therefore, we\
    \ have\n        // f(i) = g(i - 1) + f(i - 1) and g(i) = f(i).\n        long f\
    \ = 1, g = 1;\n        for (long i = 1; i < n; i++) {\n            long f1 = g;\n\
    \            long g1 = f + g;\n            f = f1;\n            g = g1;\n    \
    \    }\n        return f + g;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7da089af0a1d475790ec28c081e71e2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7da089af0a1d475790ec28c081e71e2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n > 0);\n        if (n ==\
    \ 1) {\n            return 1;\n        }\n        // Count numbers of n-digit\
    \ positive integers: 10^(n-1)\n        long total = (long)Math.Pow(10, n - 1);\n\
    \        // Count numbers that end with 1 but do not start with 1: 10^(n-2)\n\
    \        long noFirst = (long)Math.Pow(10, n - 2);\n        // Count numbers that\
    \ start with 1 but do not end with 1:\n        // Count numbers that end with\
    \ a digit other than 1:\n        // Count numbers that end with an even digit:\
    \ 5*10^(n-2)\n        // Count numbers that end with a zero: 1*10^(n-2)\n    \
    \    // Count numbers that end with an odd digit other than 1: (8*10^(n-2))\n\
    \        long noLast = 5 * (long)Math.Pow(10, n - 2) + 1 * (long)Math.Pow(10,\
    \ n - 2) +\n            8 * (long)Math.Pow(10, n - 2);\n        return total -\
    \ noFirst - noLast;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3aa77bd6463444799562f2e8b7639c2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3aa77bd6463444799562f2e8b7639c2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 10;\n\
    \        }\n        long total = 0;\n        for (long i = 0; i < 10; i++) {\n\
    \            total += CountDigits(n-1, i, 1, false);\n        }\n        return\
    \ total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ymwwe4j.cs(17,22): error CS0103: The name ''CountDigits'' does not exist
    in the current context

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n > 0);\n        // 1 + 10^(n-1)\
    \ + 9^n\n        return n + n * (long)Math.Pow(10, n - 1) + (long)Math.Pow(9,\
    \ n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c3616ecc2b0485c99a0c5b2f33ed6bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c3616ecc2b0485c99a0c5b2f33ed6bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n\n        // We\
    \ are solving this recursively. It's easier to see the pattern.\n\n        //\
    \ count[n][0] = the number of numbers of length n with 0 ending digits.\n    \
    \    // count[n][1] = the number of numbers of length n with 1 ending digits.\n\
    \        long[][] count = new long[n + 1][];\n        for (int i = 0; i <= n;\
    \ i++) {\n            count[i] = new long[2];\n        }\n\n        // The base\
    \ case is clear.\n        count[1][0] = 1;\n        count[1][1] = 1;\n\n     \
    \   // Calculate the result going from the second digit onward.\n        for (int\
    \ i = 2; i <= n; i++) {\n            // How many numbers of length i have 0 at\
    \ the end?\n            // They must have a 1 at the beginning, then 0 digits\
    \ at the end.\n            count[i][0] = count[i - 1][1];\n\n            // How\
    \ many numbers of length i have 1 at the end?\n            // They must have a\
    \ 0 at the beginning, then 1 digits at the end.\n            count[i][1] = count[i\
    \ - 1][0];\n        }\n\n        // The total count is the sum of both.\n    \
    \    return count[n][0] + count[n][1];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb862ec809a34be89b5c211bc353245a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb862ec809a34be89b5c211bc353245a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = 0;\n        for (long i =\
    \ 1; i <= n; i++) {\n            if (n % i == 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb9cc450cff3492f8135745fc161fac7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb9cc450cff3492f8135745fc161fac7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Let A(n) be the number of n-digit positive\
    \ integers that start with 1\n        // and B(n) be the number of n-digit positive\
    \ integers that end with 1.\n        // A(n) = 9(10^(n-1)) - 1\n        // B(n)\
    \ = 10^(n-1)\n        // So the answer is A(n) + B(n) - 1.\n        // If n =\
    \ 0, then A(n) = B(n) = 0, so the answer is -1.\n        if (n == 0) {\n     \
    \       return -1;\n        } else {\n            return (9 * BigInteger.Pow(10,\
    \ n - 1) - 1 + BigInteger.Pow(10, n - 1))\n                .ToString().Length;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwxjef8cj.cs(21,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpwxjef8cj.cs(21,76): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // If we keep adding 1 to the ending of\
    \ a number, then we're just taking\n        // the number in base 2 and flipping\
    \ a 1 over to the left.  The number\n        // of n-digit positive integers that\
    \ start with 1 is just 2^(n-1).\n        return (long) Math.Pow(2, n-1);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fadbc5ff382e4ca5b199a16f5a2a4963>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fadbc5ff382e4ca5b199a16f5a2a4963>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var left = Count(n - 1);\n        var\
    \ right = Count(n - 2);\n        return (left + right) % 1000000007;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxyvq5v4y.cs(12,20): error CS0103: The name ''Count'' does not exist in
    the current context

    /tmp/tmpxyvq5v4y.cs(13,21): error CS0103: The name ''Count'' does not exist in
    the current context

    '
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // 3 cases\n        // 1) 1 only\n   \
    \     // 2) 1-k-1\n        // 3) 1-k-1-1\n        long count = 0;\n        for\
    \ (int i = 1; i <= n; i++) {\n            // Count numbers starting with 1, of\
    \ length i\n            count += DigitCount(i - 1);\n            // Then count\
    \ numbers ending with 1, of length i\n            count += DigitCount(i - 1);\n\
    \        }\n        // Remove counts of numbers starting and ending with 1, add\
    \ back the\n        // count of numbers starting and ending with 1\n        for\
    \ (int i = 1; i <= n - 2; i++) {\n            // Count of numbers starting and\
    \ ending with 1, of length i + 2\n            count -= DigitCount(i);\n      \
    \  }\n        // Remove the case of 1-k-1 (including k = 1)\n        count -=\
    \ 10;\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqzj2pbgs.cs(19,22): error CS0103: The name ''DigitCount'' does not exist
    in the current context

    /tmp/tmpqzj2pbgs.cs(21,22): error CS0103: The name ''DigitCount'' does not exist
    in the current context

    /tmp/tmpqzj2pbgs.cs(27,22): error CS0103: The name ''DigitCount'' does not exist
    in the current context

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Solve for one value\n        long r\
    \ = 0;\n        long limit = 0;\n        for (long i = 1; i <= n; i++) {\n   \
    \         limit *= 10;\n            limit += 9;\n        }\n        for (long\
    \ i = 1; i <= limit; i++) {\n            if (i.ToString().StartsWith(\"1\") ||\
    \ i.ToString().EndsWith(\"1\")) {\n                r++;\n            }\n     \
    \   }\n        return r;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93c4f238f98448d5845389f6592e1b25>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93c4f238f98448d5845389f6592e1b25>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var onesEnds = new BigInteger[n + 1];\n\
    \        onesEnds[0] = 0;\n        onesEnds[1] = 1;\n        onesEnds[2] = 20;\n\
    \        onesEnds[3] = 300;\n        var count = onesEnds[n];\n        for (var\
    \ i = 4; i <= n; i++) {\n            onesEnds[i] = onesEnds[i - 1] * 10 + onesEnds[i\
    \ - 2] * 8;\n            count += onesEnds[i];\n        }\n        return (long)count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.StartsOneEnds (System.Int64 n) [0x0002f]\
    \ in <1236072ee2f141eeb488744f8b7f5c07>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <1236072ee2f141eeb488744f8b7f5c07>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.StartsOneEnds (System.Int64 n) [0x0002f] in <1236072ee2f141eeb488744f8b7f5c07>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <1236072ee2f141eeb488744f8b7f5c07>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 10;\n        return\
    \ CountGood(n) + CountGood(n-1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjg8ahi1g.cs(13,16): error CS0103: The name ''CountGood'' does not exist
    in the current context

    /tmp/tmpjg8ahi1g.cs(13,31): error CS0103: The name ''CountGood'' does not exist
    in the current context

    '
  timestamp: 1659977779
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Observe that the number of numbers\
    \ that start with 1 is the same as\n        // the number of numbers that end\
    \ with 1 (just reverse them).\n        // Also observe that the number of numbers\
    \ that don't start or end with\n        // 1 is equal to the number of numbers\
    \ with fewer digits.\n        long notStartsEnds = StartsOneEnds(n - 1);\n   \
    \     // The number of numbers that start or end with 1 is equal to 9 times\n\
    \        // the number of numbers that don't start or end with 1.\n        long\
    \ startsEnds = 9 * notStartsEnds;\n        // Finally, the number of numbers with\
    \ n digits is equal to the number\n        // of numbers that start or end with\
    \ 1 plus the number of numbers that\n        // don't start or end with 1.\n \
    \       return startsEnds + notStartsEnds;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long ans = 2 * DigitCounts(n - 1);\n \
    \       long k = 2;\n        while (k < n) {\n            long first = DigitCounts(k\
    \ - 1);\n            long last = DigitCounts(n - k);\n            ans += 9 * (first\
    \ * last + first + last);\n            k++;\n        }\n        if (n > 1) {\n\
    \            ans += 9 * DigitCounts(n - 2);\n        }\n        return ans;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp13w07fz8.cs(12,24): error CS0103: The name ''DigitCounts'' does not exist
    in the current context

    /tmp/tmp13w07fz8.cs(15,26): error CS0103: The name ''DigitCounts'' does not exist
    in the current context

    /tmp/tmp13w07fz8.cs(16,25): error CS0103: The name ''DigitCounts'' does not exist
    in the current context

    /tmp/tmp13w07fz8.cs(21,24): error CS0103: The name ''DigitCounts'' does not exist
    in the current context

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n > 0);\n        long[] g\
    \ = new long[n+1];\n        g[0] = 1;\n        g[1] = 1;\n        for (int i =\
    \ 2; i <= n; i++) {\n            // The answer is the sum of ways to get a number\
    \ of length i\n            // given that the last digit is 1. The former are i-1\
    \ digit\n            // numbers that end in 1 and i-1 digit numbers that end in\
    \ non-1.\n            g[i] = g[i-1] + g[i-2];\n        }\n        return g[n];\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ad6c7b8f7f04d79ba0c25335a75b1c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ad6c7b8f7f04d79ba0c25335a75b1c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Counting ending 1 is the same as counting\
    \ starting 1\n        // but with a shifted perspective.\n        // Count them\
    \ both separately, then take the average.\n        return (StartsOne(n) + EndsOne(n))\
    \ / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn987t09y.cs(15,17): error CS0103: The name ''StartsOne'' does not exist
    in the current context

    /tmp/tmpn987t09y.cs(15,32): error CS0103: The name ''EndsOne'' does not exist
    in the current context

    '
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n        if (n ==\
    \ 2) return 4;\n        long k = n / 2;\n        long v = ModPow(10, k, 1000000007);\n\
    \        if (n % 2 == 0) {\n            return v * 2 % 1000000007;\n        }\
    \ else {\n            return (v * 2 + ModPow(10, n / 2 + 1, 1000000007)) % 1000000007;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3bcmvt5s.cs(15,18): error CS0103: The name ''ModPow'' does not exist in
    the current context

    /tmp/tmp3bcmvt5s.cs(19,29): error CS0103: The name ''ModPow'' does not exist in
    the current context

    '
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // If a number ends with 1, it must start\
    \ with 1, so count only the\n        // numbers that start with 1.\n        //\n\
    \        // A positive integer has 10 different characters, from 0 to 9.\n   \
    \     // The first digit cannot be 0.\n        // The problem is similar to the\
    \ task of arranging 10 characters in n\n        // places.\n        //\n     \
    \   // The number of numbers that start with 1 is given by the solution of\n \
    \       // the following equation.\n        //\n        // x + 10x^2 + ... + 10^(n-1)x^n\
    \ = 10^n\n        // x(1 + 10x + ... + 10^(n-1)x^(n-1)) = 10^n\n        // x(1\
    \ - 10^(n-1)x^(n-1)) / (1 - 10x) = 10^n\n        // x = 10^n / ((1 - 10x) * (1\
    \ - 10^(n-1)x^(n-1)))\n        //\n        // Use Newton method to find the root\
    \ of the above equation.\n        //\n        // Let f(x) = 10^n / ((1 - 10x)\
    \ * (1 - 10^(n-1)x^(n-1)))\n        // The equation becomes f(x) = x.\n      \
    \  //\n        // f'(x) = 10^n * (10 * (1 - 10^(n-1)x^(n-1)) + (1 - 10x) * (n\
    \ - 1) *\n        // 10^(n-1)x^(n-2)) / ((1 - 10x)^2 * (1 - 10^(n-1)x^(n-1))^2)\n\
    \        //\n        // Pick a random initial point x_0.\n        // x_i+1 = x_i\
    \ - f(x_i) / f'(x_i)\n        BigInteger x = BigInteger.One;\n        for (int\
    \ i = 0; i < n; i++) {\n            x *= 10;\n        }\n        x /= (n + 1);\n\
    \        var xN = x;\n        var xN1 = x * 10;\n        while (BigInteger\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbqb44x0u.cs(45,26): error CS1026: ) expected

    /tmp/tmpbqb44x0u.cs(45,26): error CS1525: Invalid expression term ''}''

    /tmp/tmpbqb44x0u.cs(45,26): error CS1002: ; expected

    '
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var result = new int[n + 1];\n       \
    \ var pad = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n        \
    \    pad[i] = 9;\n        }\n        for (int i = 1; i <= n; i++) {\n        \
    \    result[i] = (int)StartsOneEnds(i, pad);\n        }\n        return result[n];\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvjs8zf2.cs(18,30): error CS1501: No overload for method ''StartsOneEnds''
    takes 2 arguments

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        if (n ==\
    \ 2) return 11;\n        // General case: If the number starts with 1, then we\
    \ have exactly\n        // 9 digits remaining. Otherwise, we have 10 digits remaining.\n\
    \        return 10 * StartsOneEnds(n - 1) + 9 * StartsOneEnds(n - 2);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e56ec41d5d7d4642a51489394ab68106>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e56ec41d5d7d4642a51489394ab68106>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n < 1)\n            throw new ArgumentOutOfRangeException(\"\
    n\", \"Should be positive.\");\n        // count[i] is the number of n-digit integers\
    \ that are all 1s and start\n        // with 1.\n        long[] count = new long[n\
    \ + 1];\n        // Set the only possible value for the number of all-ones integers.\n\
    \        count[n] = 1;\n        // Fill the array by considering all possible\
    \ prefixes of all-ones\n        // integers.\n        for (long i = n - 1; i >=\
    \ 0; i--) {\n            // Each prefix of n+1 digits can be extended to n+2 digits.\n\
    \            // Subtract the invalid ones (which start with 0) and add the\n \
    \           // invalid ones (which start with 2).\n            count[i] = (count[i\
    \ + 1] + 1) * 9 - 8;\n        }\n        return count[0];\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09e4833ee6a14be797e8e7a850f2d663>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09e4833ee6a14be797e8e7a850f2d663>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n        if (n ==\
    \ 2) return 6;\n        long A = 2;\n        long B = 4;\n        for (int i =\
    \ 3; i <= n; i++) {\n            long next = 8 * B + 2 * A;\n            A = B;\n\
    \            B = next;\n        }\n        return B;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f535a3dd4cf34c51afcb00cdb96c0c55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f535a3dd4cf34c51afcb00cdb96c0c55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long res = 0;\n        if (n == 1) {\n\
    \            res = 1;\n        } else if (n == 2) {\n            res = 9;\n  \
    \      } else {\n            long[] dp = new long[n + 1];\n            dp[1] =\
    \ 1;\n            dp[2] = 9;\n            for (int i = 3; i <= n; i++) {\n   \
    \             dp[i] = dp[i - 1] * 10 - dp[i - 2];\n            }\n           \
    \ res = dp[n];\n        }\n        return res;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8119f110be0747a7927f6fd82ab0c0f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8119f110be0747a7927f6fd82ab0c0f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long num = 0;\n        for (long i = 0;\
    \ i < n; i++) {\n            num += (long)Math.Pow(10, i);\n        }\n      \
    \  num *= 2;\n        num -= (long)Math.Pow(10, n - 1);\n        return num;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4c6e070ae3144ea95b7281fc0a59dd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4c6e070ae3144ea95b7281fc0a59dd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = 0;\n        BigInteger min\
    \ = BigInteger.Pow(10, n - 1);\n        BigInteger max = BigInteger.Pow(10, n);\n\
    \        for (BigInteger i = min; i < max; i++) {\n            if (i.ToString().StartsWith(\"\
    1\") || i.ToString().EndsWith(\"1\")) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp16k1yu6v.cs(13,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp16k1yu6v.cs(14,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        if (n ==\
    \ 2) return 10;\n        if (n % 2 == 0) return 10 * StartsOneEnds(n - 1) - 9\
    \ * (n / 2 - 1);\n        return 10 * StartsOneEnds(n - 1) - 9 * (n / 2);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41ba2c74a53745a586a0b8a384818923>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41ba2c74a53745a586a0b8a384818923>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Count of all n-digit numbers (subtract\
    \ 1 because 0 counts)\n        var top = 9 * MathHelper.Pow(10, n - 1) - 1;\n\
    \        // Count of n-digit numbers ending in 1\n        var bottom = MathHelper.Pow(10,\
    \ n - 1) - 1;\n        return top - bottom;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzd0eq4ep.cs(13,23): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    /tmp/tmpzd0eq4ep.cs(15,22): error CS0103: The name ''MathHelper'' does not exist
    in the current context

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n <= 0) {\n            return 0;\n\
    \        } else if (n == 1) {\n            return 2;\n        } else {\n     \
    \       return (StartsOneEnds(n - 1) * 9) + StartsOneEnds(n - 2);\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c415a6b68b2e45ebacd524cbc382b357>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c415a6b68b2e45ebacd524cbc382b357>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n <= 1) return n;\n        // The\
    \ first digit must be 1 and then we can have 0 to 9 for the\n        // remaining\
    \ digits.\n        long first = Count(10, n - 1);\n        // The last digit must\
    \ be 1 and then we can have 0 to 9 for the\n        // remaining digits.\n   \
    \     long last = Count(10, n - 1);\n        // The first digit is 1 and the last\
    \ digit is 1. We can have 0 to 9\n        // digits between the two 1s.\n    \
    \    long both = Count(10, n - 2);\n        return first + last + both;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp5_j8b5h.cs(15,22): error CS0103: The name ''Count'' does not exist in
    the current context

    /tmp/tmpp5_j8b5h.cs(18,21): error CS0103: The name ''Count'' does not exist in
    the current context

    /tmp/tmpp5_j8b5h.cs(21,21): error CS0103: The name ''Count'' does not exist in
    the current context

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // If n is 0, there are 1 such number\n\
    \        if (n == 0) return 1;\n        // Otherwise, the number of such numbers\
    \ is the sum of the number of\n        // n-digit numbers that start with 1 and\
    \ end with a different digit and\n        // the number of n-digit numbers that\
    \ end with 1 and start with a\n        // different digit.\n        return StartsOneEnds(n\
    \ - 1) + 1 + (9 * StartsOneEnds(n - 1));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3a9f34a341b455fb552979fcc2e6522>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3a9f34a341b455fb552979fcc2e6522>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // The number of n-digit positive integers\
    \ that start with 1 is\n        // 10^(n-1) which can be written as a simple formula\
    \ using\n        // BigInteger.Pow()\n        BigInteger start = BigInteger.Pow(10,\
    \ n - 1);\n        BigInteger end = BigInteger.Pow(10, n);\n        BigInteger\
    \ between = BigInteger.Pow(10, n - 2);\n        return (start + between + end)\
    \ % 1000000007;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8kb86o92.cs(15,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp8kb86o92.cs(16,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp8kb86o92.cs(17,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp8kb86o92.cs(18,16): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Start with the base case.\n       \
    \ // So if n = 1, then the answer is only 1.\n        if (n == 1) {\n        \
    \    return 1;\n        }\n\n        // Now let's think about how to calculate\
    \ the answer.\n        // For n > 1, the answer is the sum of \n        // 1)\
    \ the number of n-digit integers starting with 1\n        // 2) the number of\
    \ n-digit integers ending with 1\n        // Now, how do we calculate the number\
    \ of n-digit integers starting with 1?\n        // Well, the second digit can\
    \ be anything, so there are 9 numbers for this digit.\n        // Now, the third\
    \ digit can be anything, so there are 9 numbers for this digit.\n        // And\
    \ so on...\n        // So the number of n-digit integers starting with 1 is 9\
    \ * 9 * ... * 9\n        // Which is 9^(n-1)\n        // We can calculate the\
    \ number of n-digit integers ending with 1 by the same argument.\n        // And\
    \ then we just add these two numbers.\n        return (long)Math.Pow(9, n - 1)\
    \ + (long)Math.Pow(9, n - 1);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1403b43a45b54e778eae8f1018f503f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1403b43a45b54e778eae8f1018f503f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // The problem is recursively defined.\
    \ For positive integer k, define\n        // F(k) as the count of k-digit numbers\
    \ that end with 1.\n        // F(1) = 1 (only 1 counts)\n        // F(2) = 10\
    \ (counting all two-digit numbers that end with 1)\n        // F(3) = 100 (counting\
    \ all three-digit numbers that end with 1)\n        // F(4) = 100 + F(3) + F(2)\
    \ + F(1)\n        //          (counting all four-digit numbers that end with 1)\n\
    \        //            One digit -> F(1)\n        //            Two digits ->\
    \ F(2)\n        //            Three digits -> F(3)\n        //            Four\
    \ digits -> 100\n        // F(k) = 10^(k-1) + F(k-1) + F(k-2) + ... + F(1)\n \
    \       // => F(k) = 10^(k-1) + F(k-1) + 10*F(k-2) + 100*F(k-3) + ... + 10^(k-2)*F(2)\n\
    \        // For convenience, consider the base case F(0) = 0.\n        // => F(k)\
    \ = 10^(k-1) + F(k-1) + 10*F(k-2) + 100*F(k-3) + ... + 10^(k-2)*F(2)\n       \
    \ //          + 10^(k-2)*F(1) + 10^(k-3)*F(0)\n        // Now, define H(k) as\
    \ the count of k-digit numbers that start or end with 1.\n        // => H(k) =\
    \ F(k) + H(k-1) + H(k-2) + ... + H(1) + H(0)\n        //          (by definition\
    \ F(k) is the set of k-digit numbers that end with 1,\n        //           and\
    \ H(k-1) is the set of k-digit numbers that start with 1.\n        //        \
    \   Also, H(0) = 1 (only 1 counts)).\n        // => H(k) = 10^(k-1\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy_kwh_z1.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        long p\
    \ = 9;\n        for (long i = 1; i < n - 1; i++) p *= 10;\n        return StartsOneEnds(n\
    \ - 1) + p;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2625ce9113e84739a88a0d5f4c8b87ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2625ce9113e84739a88a0d5f4c8b87ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n < 1) {\n            throw new ArgumentException(\"\
    n must be positive\");\n        }\n        if (n == 1) {\n            return 1;\n\
    \        }\n        return Sum(k => DigitSum(n, k));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ng3vqi0.cs(18,16): error CS0103: The name ''Sum'' does not exist in the
    current context

    '
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n >= 1);\n        return\
    \ Solve(n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpczrfvd0n.cs(13,16): error CS0103: The name ''Solve'' does not exist in
    the current context

    '
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var result = 0L;\n        var next = 10L;\n\
    \        // The number of digits that start with 1 is 9 * 10 ^ (n - 1).\n    \
    \    while (next <= n) {\n            result += 9 * Pow(10, next - 1);\n     \
    \       next++;\n        }\n        // Only the last digit might end with 1.\n\
    \        var endingOne = (n - 1) * 9;\n        result += endingOne;\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6y5li5bf.cs(16,27): error CS0103: The name ''Pow'' does not exist in the
    current context

    '
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Let the number of n-digit numbers that\
    \ start or end with 1 be f(n).\n        // For example, f(1) = 2, f(2) = 5, f(3)\
    \ = 11, etc.\n        //\n        // We can count the numbers that start with\
    \ 1 as follows:\n        //\n        // 1[x]\n        // where [x] denotes any\
    \ n-1 digit number. This yields f(n-1) such numbers.\n        // Note that leading\
    \ zeros are not allowed.\n        //\n        // We can count the numbers that\
    \ end with 1 as follows:\n        //\n        // [x]1\n        // where [x] denotes\
    \ any n-1 digit number. This yields f(n-1) such numbers.\n        // Note that\
    \ trailing zeros are allowed.\n        //\n        // For example, suppose n =\
    \ 4. Then we have the following numbers:\n        //\n        // 1[x], [x]1, 1001,\
    \ 1011, 1111\n        //\n        // Note that the numbers f(1) = 2, f(2) = 5,\
    \ f(3) = 11 are defined to be\n        // 1, 11, 101, 111, and 1001, 1011, 1111,\
    \ respectively.\n        //\n        // We can avoid double counting numbers that\
    \ start and end with 1 as\n        // follows:\n        //\n        // 1[x]1\n\
    \        // where [x] denotes any n-2 digit number. This yields f(n-2) such numbers.\n\
    \        // We do not need to exclude leading or trailing zeros because that\n\
    \        // has already been done above.\n        //\n        // For example,\
    \ suppose n = 4. Then we have the following numbers:\n        //\n        // 1001,\
    \ 1011, 1111\n        //\n        // Now for the recurrence. We have f(n) = f(n-1)\
    \ + f(n-1) - f(n-2).\n        //\n        // We can also write this in a more\
    \ algebraic form as follows:\n        //\n        // Let d = f(n) - f(n-1) - f(n-1)\
    \ + f(n-2).\n        // Then d = f(n) - 2*f(\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp20uf6kou.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Divide the problem into two parts:\n\
    \        //   Part 1: X_0..X_{n-1} where X_0 = 1\n        //   Part 2: X_0..X_{n-1}\
    \ where X_{n-1} = 1\n\n        // Part 1: X_0..X_{n-1} where X_0 = 1\n       \
    \ // Part 1 is equivalent to the number of (n-1)-digit numbers that do not\n \
    \       // start with 1. We can use the same method for the original problem.\n\
    \n        // Part 2: X_0..X_{n-1} where X_{n-1} = 1\n        // Part 2 is equivalent\
    \ to the number of (n-1)-digit numbers that do not\n        // end with 1. We\
    \ can use the same method for the original problem.\n\n        // Therefore, we\
    \ can use a recursive approach.\n        if (n == 1) {\n            return 2;\n\
    \        }\n        return StartsOneEnds(n - 1) + StartsOneEnds(n - 1);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f23d10565f64def8fb54c8ca7dab4b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f23d10565f64def8fb54c8ca7dab4b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 2;\n\
    \        }\n        long res = StartsOneEnds(n - 1);\n        res += (long)Math.Pow(10,\
    \ n - 1);\n        res += (long)Math.Pow(10, n - 2);\n        return res;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dd2d0944f1e48158fd1f687f63b1d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dd2d0944f1e48158fd1f687f63b1d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        return 9 * (long)Math.Pow(10, n - 1);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <193cbd6308b240a9902b19094ebea3ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <193cbd6308b240a9902b19094ebea3ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        BigInteger base2 = BigInteger.Pow(2, n\
    \ - 1);\n        BigInteger base5 = BigInteger.Pow(5, n - 1);\n        BigInteger\
    \ denom = BigInteger.Pow(10, n - 1);\n        return (long)(base2 + base5 - 9\
    \ * denom);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg0jq3njt.cs(12,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpg0jq3njt.cs(13,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpg0jq3njt.cs(14,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 2;\n\
    \        } else if (n == 2) {\n            return 5;\n        } else {\n     \
    \       return (StartsOneEnds(n - 1) * 8) - (StartsOneEnds(n - 2) * 4);\n    \
    \    }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d722ec1cde2f4291b8ff472f94e7f693>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d722ec1cde2f4291b8ff472f94e7f693>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Count the numbers that end in 1.\n\
    \        long count = 0;\n        long base2 = 1;\n        while (base2 <= n)\
    \ {\n            count += base2;\n            base2 *= 2;\n        }\n       \
    \ // Count the numbers that start in 1.\n        long start1 = 1;\n        long\
    \ base10 = 1;\n        while (base10 <= n) {\n            count += (n - base10\
    \ + 1) * start1;\n            base10 *= 10;\n            start1 *= 10;\n     \
    \   }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455f3e0ab97c4213b6c4004f018cd2ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455f3e0ab97c4213b6c4004f018cd2ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n        if (n ==\
    \ 2) return 6;\n        long c = 0;\n        var digits = new List<int>();\n \
    \       int i = 0;\n        while (digits.Count < n) {\n            if (digits.Count\
    \ == 0) {\n                digits.Add(1);\n                i = 0;\n          \
    \  } else if (digits.Count == n - 1) {\n                digits.Add(1);\n     \
    \           i = -1;\n            } else {\n                digits.Add(0);\n  \
    \              i = 0;\n            }\n            while (digits.Count < n) {\n\
    \                digits.Add(digits[i]);\n                i++;\n            }\n\
    \            if (digits.Count == n) {\n                var nString = digits.Select(d\
    \ => d.ToString()).Aggregate((a, b) => a + b);\n                var nInt = BigInteger.Parse(nString);\n\
    \                if (nInt.IsProbablePrime(5)) {\n                    c++;\n  \
    \              }\n            }\n            digits.RemoveAt(0);\n        }\n\
    \        return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0gdfnuw.cs(35,26): error CS1061: ''BigInteger'' does not contain a definition
    for ''IsProbablePrime'' and no accessible extension method ''IsProbablePrime''
    accepting a first argument of type ''BigInteger'' could be found (are you missing
    a using directive or an assembly reference?)

    '
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We count the number of integer strings\
    \ that start with 1 and end with\n        // 0. There are 9 choices for the first\
    \ digit, 10 choices for each\n        // digit after the first, and 10 choices\
    \ for the last digit. So the\n        // answer is 9 \xD7 10^(n-2) \xD7 10.\n\n\
    \        // Then there are the integer strings that start with 1 and end with\
    \ 1.\n        // There are still 9 choices for the first digit and 10 choices\
    \ for the\n        // last digit, but there are also now 9 choices for each digit\
    \ between\n        // them. So the answer is 9 \xD7 9^(n-2) \xD7 10.\n\n     \
    \   // We can combine these two to get 9 \xD7 (10^(n-2) + 9^(n-2)) \xD7 10.\n\
    \        return 9 * (exp(10, n - 2) + exp(9, n - 2)) * 10;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmdwph94q.cs(23,21): error CS0103: The name ''exp'' does not exist in the
    current context

    /tmp/tmpmdwph94q.cs(23,38): error CS0103: The name ''exp'' does not exist in the
    current context

    '
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n < 1) {\n            throw new ArgumentException(\"\
    input must be >= 1\");\n        }\n        if (n == 1) {\n            return 10;\n\
    \        }\n        // Let w = 10^(n-1)\n        // Use the fact that w^2 = 1\
    \ mod 10^n\n        var w = BigInteger.Pow(10, n - 1);\n        // We want to\
    \ count the number of numbers mod 10^n that are >= w and\n        // have ones\
    \ as the first and last digits.\n        // Call this n.  The number of n-digit\
    \ numbers that have ones as the\n        // first and last digits is n * (n-1)\
    \ * w.\n        // We know that there are 2 * w * (w-1) numbers that start with\
    \ 1,\n        // and the same number that end with 1.\n        // That's exactly\
    \ 2nw of the numbers that start or end with 1.\n        // But we want the number\
    \ of n-digit numbers, not the number of numbers\n        // mod 10^n.  We know\
    \ that the number of numbers mod 10^n is 10^n, and\n        // we want the number\
    \ of numbers mod 10^n that start or end with 1.\n        // So the number of numbers\
    \ we want is (2n-2)w.\n        //\n        // So we have n = (2n-2)w, and need\
    \ to solve for w.\n        var n_minus_two = n - 2;\n        var w_squared = n_minus_two\
    \ * w * w % BigInteger.Pow(10, n);\n        // The problem is that w_squared is\
    \ going to be a BigInteger, and w\n        // might not be a perfect square mod\
    \ 10^n.  This is a problem for\n        // BigInteger.Pow, which I didn't have\
    \ time to fix.\n        // So instead I'll brute force the square root: we know\
    \ that w < 10^n,\n        // so we just need to iterate over all of the numbers\
    \ between 1 and\n        // 10^n and find the one that when squared yields w_squared.\n\
    \        BigInteger w1 = 0;\n        for (w1 = 1; w1 <= w; w1++) {\n         \
    \   if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy9wos0z5.cs(44,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpy9wos0z5.cs(44,17): error CS1026: ) expected

    /tmp/tmpy9wos0z5.cs(44,17): error CS1002: ; expected

    /tmp/tmpy9wos0z5.cs(46,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpy9wos0z5.cs(54,2): error CS1513: } expected

    '
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We can do this by making a state machine.\
    \ A positive integer can start\n        // with 1, 2, 3, 4, 5, 6, 7, 8, or 9.\
    \ If it starts with 1, then it can\n        // continue with 1, 2, 3, 4, 5, 6,\
    \ 7, 8, or 9. If it starts with 2-9, then\n        // it can continue with 0-9,\
    \ for a total of 10 possible digits. The\n        // machine starts in state start1.\
    \  We have a transition from start1 to\n        // either start2 or end2, from\
    \ start2 to end2, from end2 to start3, from\n        // start3 to end3, and from\
    \ end3 to none (which represents accepting the\n        // input). The number\
    \ of accept states is the number of positive\n        // integers that start or\
    \ end with 1.\n\n        // The number of states is 10 (because the number of\
    \ transitions is\n        // bounded by the number of states) and the number of\
    \ transitions is 9\n        // (because the number of transitions is also bounded\
    \ by the number of\n        // states). The number of transitions should be multiplied\
    \ by the length\n        // of the input (n), but the length of the input can\
    \ be much larger than\n        // the number of states. So, we need to speed up\
    \ the transition\n        // calculations to get a reasonable performance.\n \
    \       //\n        // The matrix A is indexed by the state and by the digit.\
    \ The state is\n        // the row and the digit is the column. A[i,j] is the\
    \ target state of\n        // state i with digit j.\n        var A = new BigInteger[10,\
    \ 10];\n        // The matrix A contains the number of times that state i is visited.\
    \ We\n        // use this matrix to calculate the number of transitions from state\
    \ i\n        // to state j.\n        var B = new BigInteger[10, 10];\n       \
    \ // The vector V is indexed by the state. V[i] is the number of times that\n\
    \        // state i is visited.\n        var V = new BigInteger[10];\n       \
    \ // The vector X is indexed by the state. X[i] is the number of transitions\n\
    \        // from state i.\n        var X = new BigInteger[10];\n        // The\
    \ vector Y is indexed\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpidqfvf2o.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We do the obvious DP approach.\n  \
    \      //\n        // There are two cases:\n        //   1) the first digit is\
    \ 1, but the last digit is not 1.\n        //   2) the last digit is 1, but the\
    \ first digit is not 1.\n        //\n        // The number of numbers in the first\
    \ case is:\n        //   9*dp[n-1]\n        // where dp[i] is the number of numbers\
    \ of length i that start with 1.\n        // This is because the second digit\
    \ can be anything that is not 1,\n        // and the rest can be anything.\n \
    \       //\n        // The number of numbers in the second case is:\n        //\
    \   9*dp[n-1]\n        // for the same reason.\n        //\n        // Then we\
    \ sum these, giving 2*9*dp[n-1]. There is one final case\n        // that we haven't\
    \ counted yet:\n        //   2) the first digit is 1 and the last digit is 1.\n\
    \        //\n        // This is a little tricky. We can just pick the first digit\
    \ to be 1,\n        // the last digit to be 1, and then the rest can be anything.\n\
    \        // This gives us:\n        //   9*dp[n-2]\n        //\n        // Putting\
    \ this all together, the answer is:\n        //   2*9*dp[n-1] + 9*dp[n-2]\n  \
    \      //\n        // Except, dp[0] is 1, not 0, because the number 1 satisfies\
    \ our condition.\n        //\n\n        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n == 1) {\n            return 1;\n        }\n\n      \
    \  long[] dp = new long[n+1];\n        dp[0] = 1;\n        dp[1] = 1;\n      \
    \  for (int i = 2; i <= n; i++) {\n            dp[i] = 2*9*dp[i-1] + 9*dp[i-2];\n\
    \        }\n        return dp[n];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4844fafcc614b0890b76bce0c755bb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4844fafcc614b0890b76bce0c755bb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n >= 1);\n        if (n ==\
    \ 1) return 10;\n\n        // Count the positive integers that end in 1.\n   \
    \     // These are the numbers in [1, 10^(n-1) - 1] that end in 1.\n        long\
    \ result = (long)Math.Pow(10, n - 1) - 1;\n\n        // Count the positive integers\
    \ that start in 1.\n        // Subtract the integers that do not.\n        //\
    \ These are the numbers in [0, 10^(n-1) - 1]\n        // that start with [2, 9].\n\
    \        for (long i = 2; i <= 9; i++) {\n            result -= (long)Math.Pow(10,\
    \ n - 1) - 1;\n        }\n\n        // Count the integers that both start and\
    \ end in 1.\n        // There are n - 2 such digits that can be chosen.\n    \
    \    // There are 9 ways to choose each digit.\n        // Subtract this count\
    \ to avoid double-counting.\n        result -= 9 * (n - 2);\n\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b57a42a032ae4bf28b2786b585ba1dce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b57a42a032ae4bf28b2786b585ba1dce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long result = 0;\n        if (n % 2 ==\
    \ 0) {\n            // Even number of digits.\n            // There are 3^(n/2)\
    \ - 1 with the first digit equal to the last\n            // digit. For example,\
    \ 123123, for n = 6.\n            // There are 2*3^((n-2)/2) with the first digit\
    \ not equal to the\n            // last digit. For example, 123321, for n = 6.\n\
    \            long countOfSameStartAndEnd = (long)Math.Pow(3, n / 2) - 1;\n   \
    \         long countOfDiffStartAndEnd = (long)Math.Pow(3, (n - 2) / 2) * 2;\n\
    \            result = countOfSameStartAndEnd + countOfDiffStartAndEnd;\n     \
    \   } else {\n            // Odd number of digits.\n            // There are 3^((n-1)/2)\
    \ integers with the first digit equal to the\n            // last digit. For example,\
    \ 12321, for n = 5.\n            // There are 3^((n-1)/2) integers with the first\
    \ digit not equal to\n            // the last digit. For example, 12221, for n\
    \ = 5.\n            result = (long)Math.Pow(3, (n - 1) / 2) * 2;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b25dd6edb839442381c1d6f020514ffb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b25dd6edb839442381c1d6f020514ffb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // The number of n-digit integers that\
    \ end in 1 is the same as the number\n        // of (n-1)-digit integers, or 10^(n-1).\n\
    \        long ends1 = (long) Math.Pow(10, n-1);\n        // The number of n-digit\
    \ integers that start in 1 is (n-1) * 10^(n-2),\n        // since we can choose\
    \ a number from 0 to 9 for each of the remaining n-2\n        // digits.\n   \
    \     long starts1 = (n-1) * (long) Math.Pow(10, n-2);\n        return ends1 +\
    \ starts1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1974501d8af74c86b77656e199dd5801>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1974501d8af74c86b77656e199dd5801>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n < 1)\n            throw new ArgumentOutOfRangeException(\"\
    n must be at least 1\");\n        if (n == 1)\n            return 2;\n       \
    \ long a = 1, b = 2, c = 3;\n        for (int i = 2; i <= n; i++) {\n        \
    \    c = 3 * a + b;\n            a = b;\n            b = c;\n        }\n     \
    \   return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e2f227ab00e4cbba1e012a702eb25c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e2f227ab00e4cbba1e012a702eb25c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = 0;\n        // Count the\
    \ numbers that start with 1\n        for (long i = 1; i < n; i++) {\n        \
    \    count += (long)Math.Pow(9, i);\n        }\n        // Count the numbers that\
    \ end with 1\n        count += (long)Math.Pow(9, n-1);\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dd90063b0244b32a191bfee84585134>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dd90063b0244b32a191bfee84585134>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We sum the digit counts of the form\
    \ 1xx...x and xxx...x1.\n        if (n == 1) return 1;\n        long nn = n -\
    \ 1;\n        // Digit counts ending in 1.\n        long ending1 = (long)Math.Pow(10,\
    \ nn);\n        // Digit counts starting in 1.\n        long starting1 = 9 * (long)Math.Pow(10,\
    \ nn - 1);\n        return ending1 + starting1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <988bdfaf893546528639929d7108d0a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <988bdfaf893546528639929d7108d0a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var ret = 1;\n        for (var i = 1;\
    \ i < n; i++) {\n            ret = (ret * 10 + 1) % Mod;\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpacbz9e3t.cs(14,36): error CS0103: The name ''Mod'' does not exist in the
    current context

    '
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 10;\n\
    \        }\n        if (n == 2) {\n            return 55;\n        }\n       \
    \ // Let the base b be the number of digits of n.\n        var b = (long)Math.Ceiling(Math.Log10(n));\n\
    \        // All permutations of the digits 0, 1, and 2 form a sequence of \n \
    \       // numbers that start with a 1. The number of such permutations of \n\
    \        // length b is 3^b.\n        var r = BigInteger.Pow(3, b);\n        //\
    \ Exclude permutations which start with a 1 but end with a 0. These \n       \
    \ // are permutations of the digits 0 and 1, which is 2^(b-1).\n        r -= BigInteger.Pow(2,\
    \ b - 1);\n        // Exclude permutations which start with a 1 but end with a\
    \ 2. These \n        // are permutations of the digits 0 and 2, which is 2^(b-1).\n\
    \        r -= BigInteger.Pow(2, b - 1);\n        // Exclude permutations which\
    \ start with a 0 and end with a 1. These \n        // are permutations of the\
    \ digits 1 and 2, which is 2^(b-1).\n        r -= BigInteger.Pow(2, b - 1);\n\
    \        // Include permutations which start with a 1, end with a 1, and are \n\
    \        // below n. This is the number of numbers of length b which start with\
    \ \n        // a 1 and end with a 1.\n        var x = (n - (long)Math.Pow(10,\
    \ b - 1)) + 1;\n        // Exclude permutations which start with a 1 and end with\
    \ a 1 but are \n        // above n. These are permutations of the digits 0, 1,\
    \ and 2 \n        // excluding permutations of the digits 0 and 1 and permutations\
    \ of \n        // the digits 0 and 2, which is 3^(b-1) - 2^(b-2).\n        r -=\
    \ BigInteger.Pow(3, b - 1) - BigInteger.Pow(2, b - 2);\n        // The rest of\
    \ the sequence of numbers which start with a 1 is below \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfk5y3ms7.cs(23,35): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpfk5y3ms7.cs(26,32): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpfk5y3ms7.cs(29,32): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpfk5y3ms7.cs(32,32): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpfk5y3ms7.cs(41,32): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpfk5y3ms7.cs(41,59): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpfk5y3ms7.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long result = 0;\n        // Consider\
    \ each position in the integer.\n        for (int i = 0; i < n; i++) {\n     \
    \       // Divide the number into three parts: the first digit, the middle\n \
    \           // digits, and the last digit.\n            // If the first digit\
    \ is 1, the middle digits can be anything between\n            // 0 and 9, and\
    \ the last digit is 1, then there is one number in the\n            // set.\n\
    \            result += (long)Math.Pow(10, i) * 10;\n            // If the last\
    \ digit is 1, the first digits can be anything between\n            // 0 and 9,\
    \ and the middle digits are 1, then there is one number in\n            // the\
    \ set.\n            result += (long)Math.Pow(10, i) * 10;\n        }\n       \
    \ // If the first and last digits are 1, then there is one number in the\n   \
    \     // set.\n        result += 1;\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70629fd733474d7fa1e38dcf8aeb8a2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70629fd733474d7fa1e38dcf8aeb8a2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Create cache\n        var ans = new\
    \ long[n + 1];\n        ans[0] = 0;\n        ans[1] = 1;\n        for (int i =\
    \ 2; i <= n; i++) {\n            // We can place a leading one\n            //\
    \ We can place a trailing one\n            // We can place two ones on either\
    \ side\n            // We can place a one in the middle\n            // We can\
    \ place two ones in the middle\n            ans[i] = ans[i - 1] + ans[i - 2] +\
    \ (long)Math.Pow(2, i - 1);\n        }\n        return ans[n];\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <434168e675f440839c125a204dd69668>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <434168e675f440839c125a204dd69668>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long x = 0;\n        long pow = 1;\n \
    \       for (long i = 1; i < n; i++) {\n            pow *= 10;\n            x\
    \ += pow;\n        }\n        return x * 2 + 1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aecf5df1853e4d6b925e75983397483b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aecf5df1853e4d6b925e75983397483b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // This is always 10^(n-1) - 1.\n    \
    \    // (because of the leading or trailing one).\n        return Power(10, n\
    \ - 1) - 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpetrm33i6.cs(14,16): error CS0103: The name ''Power'' does not exist in
    the current context

    '
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // For example, the count of 4-digit positive\
    \ integers that start or end\n        // with 1 is 907.\n        //\n        //\
    \ [2135, 2341, 3125, 3251, 4312, 4532, 5123, 5423, 6351, 6453, 7643,\n       \
    \ //  7654, 8547, 8756, 9256, 9367]\n        //\n        // Given that every 4-digit\
    \ positive integer either starts or ends with 1,\n        // we can partition\
    \ our set of 4-digit positive integers into the set of\n        // those that\
    \ end with 1 and those that start with 1.\n        //\n        // [1][234]\n \
    \       // [123][4]\n        // [2][135]\n        // [23][41]\n        // [3][125]\n\
    \        // [32][51]\n        // [4][312]\n        // [43][12]\n        // [5][123]\n\
    \        // [54][23]\n        // [6][351]\n        // [64][53]\n        // [7][643]\n\
    \        // [76][54]\n        // [8][547]\n        // [85][47]\n        // [9][256]\n\
    \        // [92][56]\n        // [9][367]\n        //\n        // Let the set\
    \ of 4-digit positive integers that end with 1 be A, and the\n        // set of\
    \ 4-digit positive integers that start with 1 be B. We can generate\n        //\
    \ A by choosing the last digit, 1, followed by choosing three digits among\n \
    \       // {0, 2, 3, 4, 5, 6, 7, 8, 9}. There are 9 possibilities, and 3^2 choices\n\
    \        // for the other three digits, so |A| = 9 * 3^2 = 81.\n        //\n \
    \       // Likewise, we can generate B by choosing the first digit, 1, followed\
    \ by\n        // choosing three digits among {0, 2, 3, 4, 5, 6, 7, 8, 9}. There\
    \ are 9\n        // possibilities, and 3^2 choices for the other three digits,\
    \ so |B| = 9 *\n        // 3^2 = 81.\n        //\n        // Let A intersect B\
    \ = {1} = {1000\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8f29m0cs.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 2;\n\
    \        } else if (n == 2) {\n            return 4;\n        } else {\n     \
    \       return StartsOneEnds(n - 1) + StartsOneEnds(n - 2);\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de26fd848b74404c8ffe73b03aacaa24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de26fd848b74404c8ffe73b03aacaa24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        Debug.Assert(n > 0);\n        // The answer\
    \ is (10^{n-1}-1) + (10^{n-1}-1)\n        // and we will compute it efficiently.\n\
    \        return (PowerTen(n - 1) - 1) * 2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyskbv9na.cs(15,17): error CS0103: The name ''PowerTen'' does not exist
    in the current context

    '
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // (10^n - 1) / 9 - 10^(n-1) + 1\n   \
    \     return ((Power(10, n) - 1) / 9) - Power(10, n - 1) + 1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgs2e1l4b.cs(13,18): error CS0103: The name ''Power'' does not exist in
    the current context

    /tmp/tmpgs2e1l4b.cs(13,43): error CS0103: The name ''Power'' does not exist in
    the current context

    '
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 10;\n\
    \        }\n        long res = 0;\n        var N = n;\n        var twos = 0;\n\
    \        for (var i = 1; i < n; i++) {\n            twos += 9 * (long)Math.Pow(10,\
    \ i);\n        }\n        var all = twos * 10;\n        return all;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp45ouvvo8.cs(19,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp45ouvvo8.cs(15,14): warning CS0219: The variable ''res'' is assigned but
    its value is never used

    '
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long m = n/2;\n        long pow10 = 1;\n\
    \        for (long i = 0; i < m; i++) {\n            pow10 *= 10;\n        }\n\
    \        long c = 0;\n        if (n % 2 == 0) {\n            c = pow10 - 1;\n\
    \        } else {\n            c = (pow10 - 1) * 10;\n        }\n        return\
    \ c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e614175277184472a25f18b0b2fe8020>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e614175277184472a25f18b0b2fe8020>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var pow = BigInteger.Pow(10, n - 1);\n\
    \        var mod = BigInteger.Pow(10, 9) + 7;\n        var startCount = BigInteger.Multiply(pow,\
    \ 8);\n        var endCount = BigInteger.Subtract(pow, 1);\n        var total\
    \ = BigInteger.Add(startCount, endCount);\n        return BigInteger.Remainder(total,\
    \ mod).ToInt64();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph3lp_1vv.cs(12,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmph3lp_1vv.cs(17,49): error CS1061: ''BigInteger'' does not contain a definition
    for ''ToInt64'' and no accessible extension method ''ToInt64'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Count of n-digit numbers starting with\
    \ 1.\n        long s = CountOnes(n);\n        // Count of n-digit numbers ending\
    \ with 1.\n        long e = CountOnes(n - 1);\n        // Numbers that start with\
    \ 1 and end with 1.\n        long o = CountOnes(n - 2);\n        return s + e\
    \ - o;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7z1bilxz.cs(13,18): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp7z1bilxz.cs(15,18): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp7z1bilxz.cs(17,18): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        return n == 1 ? 1 : (n + 1) / 2;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b6447f2b1f44420a9f06578e5d1a151>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b6447f2b1f44420a9f06578e5d1a151>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 10;\n\
    \        }\n        return 9 + CountStrings(n - 1, 1);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw0tit102.cs(15,20): error CS0103: The name ''CountStrings'' does not exist
    in the current context

    '
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = 0;\n        long m = 10;\n\
    \        while (n-- > 0) {\n            count += 9 * m / 10;\n            m *=\
    \ 10;\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e40a302434a415093b1d1e1bb494d92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e40a302434a415093b1d1e1bb494d92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Count[n] is the count of n-digit numbers\
    \ that start or end with 1.\n        long[] Count = new long[n + 1];\n       \
    \ // Count[1] is just 1.\n        Count[1] = 1;\n        for (long i = 2; i <=\
    \ n; i++) {\n            // The first digit can be 1 or not. If not, there are\
    \ 8 choices.\n            Count[i] = 8 * Count[i - 1];\n            // If the\
    \ first digit is 1, the remaining digits can be anything.\n            Count[i]\
    \ += Count[i - 1];\n        }\n        return Count[n];\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a261f24dcceb4e28b87cb4ab285e2858>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a261f24dcceb4e28b87cb4ab285e2858>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var dp = new long[n+1];\n        dp[1]\
    \ = 2;\n        for (long j = 2; j <= n; j++) {\n            dp[j] = dp[j-1] +\
    \ dp[j-2];\n        }\n        return dp[n];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab45e9cfa7ba49a5a1a460f6ee9b020c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab45e9cfa7ba49a5a1a460f6ee9b020c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // This is a straightforward DP problem.\n\
    \n        // Let dp[i] be the number of i-digit positive integers that start or\
    \ end\n        // with 1.\n        //\n        // Then we have:\n        //\n\
    \        // dp[0] = 0\n        // dp[1] = 1\n        // dp[2] = 9\n        //\
    \ dp[3] = 17\n        // dp[4] = dp[3] + 9 * dp[2]\n        // dp[5] = dp[4] +\
    \ 9 * dp[3]\n        // dp[6] = dp[5] + 9 * dp[4]\n        // ...\n        //\
    \ dp[n] = dp[n - 1] + 9 * dp[n - 2]\n        //\n        // The answer is dp[n].\n\
    \n        if (n == 0) {\n            return 0;\n        }\n\n        long a =\
    \ 1;\n        long b = 9;\n        for (long i = 1; i < n; i++) {\n          \
    \  long c = b + 9 * a;\n            a = b;\n            b = c;\n        }\n\n\
    \        return b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f08764a334546b7a83dde2b2178c23b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f08764a334546b7a83dde2b2178c23b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Claim: This is the same as the number\
    \ of n-digit numbers that don't\n        // start or end with 2 or higher.\n \
    \       // This can be seen by drawing a tree for all possible representations\
    \ of\n        // the numbers and seeing there is a bijection between the two sets.\n\
    \        // This can also be seen because the two are counted by the same recursive\n\
    \        // formula (see below).\n        // So we will just solve that problem\
    \ instead.\n        // Since this problem is a lot easier to solve.\n        //\
    \ Note that the number of 0-digit numbers that don't start or end with 2\n   \
    \     // or higher is 1 (empty string).\n        if (n == 0) return 1;\n     \
    \   // The number of digits can be either 10, 100, 1000, etc. (1 and 0).\n   \
    \     // The sum is the number of all n-digit numbers, so 10^n - 1.\n        var\
    \ ans = BigInteger.Pow(10, n) - 1;\n        // The number of digits can also be\
    \ 20, 30, ..., 90, or 200, 300, ..., 900.\n        // This is 9 * 10^(n-2) * 2.\n\
    \        ans -= 9 * BigInteger.Pow(10, n - 2) * 2;\n        // The number of digits\
    \ can also be 2-digit numbers starting with 2 and\n        // going to 9, or 3-digit\
    \ numbers starting with 20, 30, ..., 90, or 4-digit\n        // numbers starting\
    \ with 200, 300, ..., 900, etc.\n        // This is the recursive part.\n    \
    \    // We can solve it recursively because the problem is self-similar.\n   \
    \     // The number of 1-digit numbers not starting or ending with 2 or higher\
    \ is\n        // the same as the number of 3-digit numbers not starting or ending\
    \ with 2\n        // or higher.\n        // This can be seen by drawing a tree\
    \ for all possible representations of\n        // the numbers and seeing there\
    \ is a bijection between the two sets.\n        // This can also be seen because\
    \ the two are counted by the same recursive\n        // formula (see below).\n\
    \        for (int i = 1; i < n; i++) {\n            ans -= StartsOneEnds(i);\n\
    \        }\n        return (long)ans;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_hyhjoz6.cs(25,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp_hyhjoz6.cs(28,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 10;\n\
    \        }\n        return 9 * (long)Math.Pow(10, n - 1);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b84582e89814fbdaca2e3740eb858b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b84582e89814fbdaca2e3740eb858b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // The number of digits for numbers starting\
    \ with 1 is at least 2 and at\n        // most n.\n        //\n        // For\
    \ a given number of digits m, the number of n-digit positive\n        // integers\
    \ that start with 1 is:\n        //\n        //   For 2 <= m <= n: 9 * 10^(m-2)\n\
    \        //   For m == 1: 1\n        //\n        // So the total number of positive\
    \ integers with n digits that start\n        // with 1 is:\n        //\n     \
    \   //   Sum(m=2..n) 9 * 10^(m-2) + 1\n        //\n        // We can use the formula\
    \ for the sum of a geometric series to calculate\n        // the total in O(1)\
    \ time:\n        //\n        //   Sum(m=2..n) 9 * 10^(m-2)\n        //   Sum(m=0..n-2)\
    \ 9 * 10^m\n        //   9 * Sum(m=0..n-2) 10^m\n        //   9 * 10^0 + 10^1\
    \ + ... + 10^(n-2)\n        //   9 * (10^(n-1) - 1) / (10 - 1)\n        //   9\
    \ * (10^(n-1) - 1) / 9\n        //   10^(n-1) - 1\n        //\n        // The\
    \ total number of positive integers with n digits that start or end\n        //\
    \ with 1 is twice this total.\n        return 9 * (long)Math.Pow(10, n - 1) -\
    \ 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a16df634c3442be9743dfed72756d70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a16df634c3442be9743dfed72756d70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // We want the number of 10^(n-1) - 1\
    \ < x < 10^n.\n        //\n        // The first digit of x can be the 1, the last\
    \ digit can be 1, or\n        // the first and last digits can both be 1.\n  \
    \      //\n        // Let x, y, and z be the number of x values where the first\
    \ digit,\n        // last digit, and both digits are 1, respectively. Then\n \
    \       // n = x + y + z.\n        //\n        // x = 10^(n-1) - 1\n        //\
    \ y = 9 * 10^(n-2)\n        // z = 9 * 10^(n-2)\n        //\n        // Since\
    \ z = y = x / 10, n = (10 * x + 2 * x) / 10 = (12 * x) / 10 =\n        // 1.2\
    \ * x, so x = 10 * n / 12.\n        //\n        // We want y and z, so return\
    \ 2 * n / 12 = n / 6.\n        return n / 6;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d965ab50dce34100b3ff0cf71f42a0c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d965ab50dce34100b3ff0cf71f42a0c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        var count = 0L;\n        // For each of\
    \ the first n + 1 digits, we either have a 1 or not.\n        // If there's a\
    \ 1, then the remaining digits can be anything.\n        // If there's not a 1,\
    \ then the remaining digits can only not be a 1.\n        for (var i = 0; i <=\
    \ n; i++) {\n            // If there's a 1, then the remaining digits can be anything.\n\
    \            if (i == 1) {\n                count += (long)Math.Pow(9, n - 1);\n\
    \            } else {\n                // If there's not a 1, then the remaining\
    \ digits can only not be a 1.\n                count += (long)Math.Pow(8, n -\
    \ 1);\n            }\n        }\n        return count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd56bf2419844d3c9e58adcd9b4ecf6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd56bf2419844d3c9e58adcd9b4ecf6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 2;\n\
    \        }\n        // 10^(n-1) - 1\n        var pow = BigInteger.Pow(10, n -\
    \ 1);\n        return (long)(pow - 1) * 9 + 1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx8dr3mvb.cs(16,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 2;\n\
    \        }\n        // The leading digit can be 1, and the rest can be 1 or 0.\n\
    \        return 1 + 9 * Power10(n - 1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpprg113e5.cs(16,24): error CS0103: The name ''Power10'' does not exist
    in the current context

    '
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Let dp[i] be the count of i-digit numbers\
    \ that end with 1.\n        // dp[i] = 10 * dp[i - 1] + 10^(i - 1).\n        //\
    \ 10 * dp[i - 1] is the count of i-digit numbers that end with 1 and\n       \
    \ // are not 1 and the (i - 1)-digit number in the ten's place is not 0.\n   \
    \     // 10^(i - 1) is the count of i-digit numbers where the (i - 1)-digit\n\
    \        // number in the ten's place is 0 and the number is not 1. \n       \
    \ // The last term is also the count of i-digit numbers that start with 1.\n \
    \       long[] dp = new long[n + 1];\n        dp[1] = 2;\n        for (int i =\
    \ 2; i <= n; i++) {\n            dp[i] = 10 * dp[i - 1] + Pow10(i - 1);\n    \
    \    }\n        return dp[n];\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyeimuzxl.cs(22,38): error CS0103: The name ''Pow10'' does not exist in
    the current context

    '
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // TODO: handle n = 1.\n        if (n\
    \ == 1) {\n            return 10;\n        }\n        if (n == 2) {\n        \
    \    return 100;\n        }\n        long top = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            top += (long) Math.Pow(10, i);\n        }\n       \
    \ long bottom = 0;\n        for (int i = 0; i < n - 1; i++) {\n            bottom\
    \ += (long) Math.Pow(10, i);\n        }\n        return top + bottom;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7df739fb0fbb4d77af0b2b86ae32ce92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7df739fb0fbb4d77af0b2b86ae32ce92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // In other words, calculate the ways\
    \ you can write a number as:\n        // a = ...\n        // b = 1 ...\n     \
    \   // c = ... 1\n        // d = 1 ... 1\n        // where a, b, c, d are nonnegative\
    \ integers and a+b+c+d=n.\n        // For each case, it is easy to see that we\
    \ can count these as:\n        // a = 1 ...\n        // b = 1 ...\n        //\
    \ c = ... 1\n        // d = 1 ... 1\n        // And for each of these cases, we\
    \ can calculate the number of ways as\n        // a = n-1 ...\n        // b =\
    \ n-1 ... 1\n        // c = ... 1 n-1\n        // d = n-1 ... 1 n-1\n        //\
    \ The number of ways to write 1 ... 1 is simply n-1, which gives us\n        //\
    \ the base case. We can now implement this recursively:\n        if (n == 1) {\n\
    \            return 1;\n        }\n        return (n-1) + StartsOneEnds(n-1) +\
    \ StartsOneEnds(n-1) + StartsOneEnds(n-1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a67ee814d2f34c5ab6709f3f3071470b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a67ee814d2f34c5ab6709f3f3071470b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) return 2;\n        long count\
    \ = 0;\n        // We can start with one if the number of digits is odd\n    \
    \    if (n % 2 == 1) count += 11;\n        // We can end with one if there is\
    \ at least 1 digit\n        if (n >= 2) count += 11;\n        // We can start\
    \ and end with one if the number of digits is at least 3\n        if (n >= 3)\
    \ count += 10;\n        // Then we have the inner digits, which can be filled\
    \ in any way\n        count += (long)Math.Pow(10, n / 2 - 1) * (n / 2 - 1) * 10;\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80e8861b10134b3eaaae22c0169d14df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80e8861b10134b3eaaae22c0169d14df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Number of n-digit numbers with the\
    \ leading digit zero is 9^(n-1).\n        // Number of n-digit numbers ending\
    \ with zero is n*9^(n-1).\n        // Overall count is the sum of the two.\n \
    \       long res = n * (long)Math.Pow(9, n - 1);\n        res += (long)Math.Pow(9,\
    \ n - 1);\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <982c002a07de4eccb89a1e7956293a96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <982c002a07de4eccb89a1e7956293a96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long result = 0;\n        // Count the\
    \ numbers of n-digit integers that end with 1.\n        // this is the number\
    \ of n-1 digit integers that have no leading zeros.\n        // which is 9 * [n-1\
    \ digit integers without leading zeros]\n        result += 9 * Count(n - 1);\n\
    \        // Count the numbers of n-digit integers that start with 1.\n       \
    \ // this is 10^(n-1) for n == 1 and for n > 1, it is 10^(n-2) * 9,\n        //\
    \ the 9 coming from the fact that the 0th digit can't be 1.\n        result +=\
    \ n == 1 ? 10 : 10 * 9 * (long)Math.Pow(10, n - 2);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm_1oedvo.cs(16,23): error CS0103: The name ''Count'' does not exist in
    the current context

    '
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Time: O(n)\n        // Space: O(1)\n\
    \        long result = 0;\n        // Numbers starting with 1.\n        result\
    \ += n * FastPow(9, n - 1);\n        // Numbers ending with 1.\n        result\
    \ += FastPow(10, n - 1);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcorgy4ae.cs(16,23): error CS0103: The name ''FastPow'' does not exist
    in the current context

    /tmp/tmpcorgy4ae.cs(18,19): error CS0103: The name ''FastPow'' does not exist
    in the current context

    '
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n < 2) return 0;\n        if (n ==\
    \ 2) return 10;\n        if (n == 3) return 100;\n        return 10 * StartsOneEnds(n\
    \ - 1) + 90 * (n - 2) * StartsOneEnds(n - 2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7fe2ae0adab847f0b58939c54e783da6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7fe2ae0adab847f0b58939c54e783da6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long start = 1;\n        long end = 0;\n\
    \        long ten = 10;\n        while (n > 0) {\n            end = start;\n \
    \           start = (start * ten) + 1;\n            n--;\n        }\n        return\
    \ start + end;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8906b67f47364160bb39925280f70d76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8906b67f47364160bb39925280f70d76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long count = 0;\n        for (long digit\
    \ = 1; digit <= n; digit++) {\n            var left = (long) Math.Pow(10, digit\
    \ - 1);\n            var right = (long) Math.Pow(10, n - digit);\n           \
    \ count += 9 * left * right;\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n\
    \    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c453803e3ed47aebb66a2fdc32a7d0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c453803e3ed47aebb66a2fdc32a7d0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        // Let S(n) be the count of n-digit positive\
    \ integers that start with 1.\n        // Let E(n) be the count of n-digit positive\
    \ integers that end with 1.\n        // Let C(n) be the count of n-digit positive\
    \ integers that do not\n        // start or end with 1.\n        // Then:\n  \
    \      //    S(n) = E(n-1)\n        //    E(n) = S(n-1) + C(n-1)\n        // \
    \   C(n) = C(n-1) * 9\n        //    C(1) = 0\n        //    E(1) = 1\n      \
    \  //    S(1) = 1\n        //\n        // We can compute S(n) and E(n) iteratively,\
    \ but we need both at the\n        // same time so the recurrence is a pain. \
    \ Instead, we'll use the\n        // fact that S(n) = E(n-1), and we'll compute\
    \ C(n) directly.\n        //    C(n) = C(n-1) * 9 = C(n-2) * 9 * 9 = ... = C(0)\
    \ * 9^n.\n        //    C(0) = 0.\n        //    So C(n) = 0.\n        //\n  \
    \      // S(n) = E(n-1) = S(n-2) + C(n-2) = S(n-3) + C(n-3) + C(n-2) = ...\n \
    \       //       = S(1) + C(1) + C(2) + ... + C(n-2) + C(n-1)\n        //    \
    \   = 1 + C(1) + C(2) + ... + C(n-2) + C(n-1)\n        //\n        // C(n) = C(n-1)\
    \ * 9 = C(n-2) * 9 * 9 = ... = C(0) * 9^n.\n        // C(0) = 0.\n        // So\
    \ C(n) = 0.\n        //\n        // Let G(n) = 1 + C(1) + C(2) + ... + C(n-\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc63fhti3.cs(11,24): error CS0161: ''Problem.StartsOneEnds(long)'': not
    all code paths return a value

    '
  timestamp: 1659977782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long ret = 0;\n        for (long i = 0;\
    \ i < 10; i++) {\n            for (long j = 0; j < 10; j++) {\n              \
    \  ret += Count(n - 2, i, j);\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
    \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
    \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
    \ == (18000L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnc3sq2b5.cs(15,24): error CS0103: The name ''Count'' does not exist in
    the current context

    '
  timestamp: 1659977782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        if (n == 1) {\n            return 10;\n\
    \        }\n        if (n == 2) {\n            return 91;\n        }\n       \
    \ var r = new long[n + 1];\n        r[1] = 10;\n        r[2] = 81;\n        for\
    \ (int i = 3; i <= n; i++) {\n            r[i] = r[i - 1] * 9 + r[i - 2];\n  \
    \      }\n        return r[n];\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac4282a0f0904302b762cee669f64ac3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac4282a0f0904302b762cee669f64ac3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
    \ long StartsOneEnds(long n) {\n        long result = 0;\n        // print(n,\
    \ sum(10^i for i in range(0, n - 1)))\n        // print(n, (10 ^ (n - 1)) * (n\
    \ - 1))\n        if (n == 1) {\n            return 10;\n        }\n        for\
    \ (int i = 1; i < n; i++) {\n            result += 10 * (long)Math.Pow(10, i -\
    \ 1);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L))\
    \ == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L))\
    \ == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82c578db6f6d46a1b5726b1cb100bac1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82c578db6f6d46a1b5726b1cb100bac1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977783
