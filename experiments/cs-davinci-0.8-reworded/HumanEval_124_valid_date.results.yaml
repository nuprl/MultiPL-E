language: cs
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    < 10) return false;\n        if (date[2] != '-' || date[5] != '-') return false;\n
    \       if (date.Any(char.IsLetter)) return false;\n        if (int.Parse(date.Substring(0,
    2)) > 12) return false;\n        if (int.Parse(date.Substring(3, 2)) > 31) return
    false;\n        if (int.Parse(date.Substring(6, 4)) < 1) return false;\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ec6f51804f143e0b71770e6bdd86608>:0
    \n"
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    != 10) return false;\n        int d, m, y;\n        if (!Int32.TryParse(date.Substring(0,
    2), out m)) return false;\n        if (!Int32.TryParse(date.Substring(3, 2), out
    d)) return false;\n        if (!Int32.TryParse(date.Substring(6, 4), out y)) return
    false;\n        if (date[2] != '-' || date[5] != '-') return false;\n        if
    (m < 1 || m > 12) return false;\n        if (d < 1 || d > DateTime.DaysInMonth(y,
    m)) return false;\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var numbers
    = date.Split('-');\n        if (numbers.Length != 3) return false;\n        var
    day = int.Parse(numbers[1]);\n        var month = int.Parse(numbers[0]);\n        var
    year = int.Parse(numbers[2]);\n        if (year < 1) return false;\n        if
    (month < 1 || month > 12) return false;\n        if (month % 2 == 0 && month !=
    2) {\n            if (day < 1 || day > 30) return false;\n        } else if (month
    == 2) {\n            if (year % 4 == 0) {\n                if (day < 1 || day
    > 29) return false;\n            } else {\n                if (day < 1 || day
    > 28) return false;\n            }\n        } else {\n            if (day < 1
    || day > 31) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    d = date.Split('-');\n        int m = Convert.ToInt32(d[0]);\n        int dt =
    Convert.ToInt32(d[1]);\n        int y = Convert.ToInt32(d[2]);\n        int dd
    = 0;\n        if (m > 12) return false;\n        if (m == 1 || m == 3 || m ==
    5 || m == 7 || m == 8 || m == 10 || m == 12) dd = 31;\n        else if (m == 4
    || m == 6 || m == 9 || m == 11) dd = 30;\n        else if (m == 2) {\n            if
    (y % 4 == 0) dd = 29;\n            else dd = 28;\n        }\n        if (dt >
    dd) return false;\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <152783189dd2428598fa243fdd2ee8f6>:0
    \n\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.ValidDate
    (System.String date) [0x0000b] in <152783189dd2428598fa243fdd2ee8f6>:0 \n  at
    Problem.Main (System.String[] args) [0x0006a] in <152783189dd2428598fa243fdd2ee8f6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // your
    code goes here\n        if(date.Length == 0) return false;\n        if(date.Length
    != 10) return false;\n        if(date[2] != '-' || date[5] != '-') return false;\n
    \       try {\n            int month = int.Parse(date.Substring(0, 2));\n            int
    day = int.Parse(date.Substring(3, 2));\n            int year = int.Parse(date.Substring(6,
    4));\n            if(year < 0) return false;\n            if(month < 1 || month
    > 12) return false;\n            if(month == 2) {\n                if(day < 1
    || day > 29) return false;\n            } else if(month % 2 == 0) {\n                if(day
    < 1 || day > 30) return false;\n            } else {\n                if(day <
    1 || day > 31) return false;\n            }\n        } catch {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        try {\n
    \           DateTime dt = DateTime.Parse(date);\n            return true;\n        }
    catch (Exception e) {\n            return false;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ded99173b9024ec18306ca245cc4f6f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ded99173b9024ec18306ca245cc4f6f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // your
    code here\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c96bec10b9d748269a6df99c9e677da9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c96bec10b9d748269a6df99c9e677da9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    result = false;\n        string[] dateArr = date.Split('-');\n        if (dateArr.Length
    != 3) {\n            return result;\n        }\n        int year = Convert.ToInt32(dateArr[2]);\n
    \       int month = Convert.ToInt32(dateArr[0]);\n        int day = Convert.ToInt32(dateArr[1]);\n
    \       if ((year > 0) && (month > 0) && (month < 13) && (day > 0) && (day < 32))
    {\n            if ((month == 1) || (month == 3) || (month == 5) || (month == 7)
    || (month == 8) || (month == 10) || (month == 12)) {\n                if (day
    <= 31) {\n                    result = true;\n                }\n            }
    else if ((month == 4) || (month == 6) || (month == 9) || (month == 11)) {\n                if
    (day <= 30) {\n                    result = true;\n                }\n            }
    else if (month == 2) {\n                if (day <= 29) {\n                    result
    = true;\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    parts = date.Split('-');\n        if (parts.Length != 3) return false;\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month > 12 || month < 1) return false;\n
    \       if (month == 2) {\n            if (year % 4 == 0) {\n                if
    (day > 29 || day < 1) return false;\n            } else {\n                if
    (day > 28 || day < 1) return false;\n            }\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30 || day
    < 1) return false;\n        } else {\n            if (day > 31 || day < 1) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (String.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        if (date.Length != 10) {\n            return
    false;\n        }\n        if (date[2] != '-' || date[5] != '-') {\n            return
    false;\n        }\n        int month = 0;\n        int day = 0;\n        int year
    = 0;\n        try {\n            month = Int32.Parse(date.Substring(0, 2));\n
    \           day = Int32.Parse(date.Substring(3, 2));\n            year = Int32.Parse(date.Substring(6,
    4));\n        } catch (Exception) {\n            return false;\n        }\n        if
    (month < 1 || month > 12) {\n            return false;\n        }\n        if
    (day < 1 || day > 31) {\n            return false;\n        }\n        if (month
    == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day > 30) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(!date.Contains(\"-\"))
    {\n            return false;\n        }\n        int month = int.Parse(date.Split('-')[0]);\n
    \       int day = int.Parse(date.Split('-')[1]);\n        int year = int.Parse(date.Split('-')[2]);\n
    \       if(month > 12 || month < 1) {\n            return false;\n        }\n
    \       if(year < 0) {\n            return false;\n        }\n        if(month
    == 2) {\n            if(day < 1 || day > 29) {\n                return false;\n
    \           }\n        } else if(new List<int>() {1,3,5,7,8,10,12}.Contains(month))
    {\n            if(day < 1 || day > 31) {\n                return false;\n            }\n
    \       } else {\n            if(day < 1 || day > 30) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x00047]
    in <0ca870f2150d4bbd8d30240b82005170>:0 \n  at Problem.Main (System.String[] args)
    [0x000e9] in <0ca870f2150d4bbd8d30240b82005170>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x00047] in <0ca870f2150d4bbd8d30240b82005170>:0
    \n  at Problem.Main (System.String[] args) [0x000e9] in <0ca870f2150d4bbd8d30240b82005170>:0
    \n"
  stdout: ''
  timestamp: 1660008903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        // This is how you extract tokens
    from a string\n        var tokens = date.Split('-');\n        var month = int.Parse(tokens[0]);\n
    \       var day = int.Parse(tokens[1]);\n        var year = int.Parse(tokens[2]);\n
    \       // TODO: implement the rest of the logic here\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4008179ddee14847abc87168c0dfebda>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4008179ddee14847abc87168c0dfebda>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008904
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Create
    a char array from the given string\n        char[] delimiters = { '-' };\n        string[]
    parts = date.Split(delimiters);\n        int month = int.Parse(parts[0]);\n        int
    day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if
    ((month < 1 || month > 12) || (day < 1 || day > 31) || (year < 0 || year > 9999))
    {\n            return false;\n        }\n        if (day > 30 && month != 2 &&
    (month < 8 && month % 2 == 1 || month > 7 && month % 2 == 0)) {\n            return
    false;\n        }\n        if (day > 29 && month == 2) {\n            return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00015] in <b8d0892d5da347158c5ad66ce40e1cd4>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <b8d0892d5da347158c5ad66ce40e1cd4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00015] in <b8d0892d5da347158c5ad66ce40e1cd4>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <b8d0892d5da347158c5ad66ce40e1cd4>:0
    \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int daysInMonth
    = 0;\n        string[] monthDays = { \"31\", \"28\", \"31\", \"30\", \"31\", \"30\",
    \"31\", \"31\", \"30\", \"31\", \"30\", \"31\" };\n        if (date.Length ==
    0) {\n            return false;\n        }\n        string[] dateSplit = date.Split('-');\n
    \       if (dateSplit.Length != 3) {\n            return false;\n        }\n        //
    Check month\n        if (Convert.ToInt32(dateSplit[0]) < 1 || Convert.ToInt32(dateSplit[0])
    > 12) {\n            return false;\n        }\n        // Check day\n        daysInMonth
    = Convert.ToInt32(monthDays[Convert.ToInt32(dateSplit[0]) - 1]);\n        if (Convert.ToInt32(dateSplit[0])
    == 2) {\n            // check leap year\n            if (Convert.ToInt32(dateSplit[2])
    % 4 == 0) {\n                if (Convert.ToInt32(dateSplit[2]) % 100 == 0) {\n
    \                   if (Convert.ToInt32(dateSplit[2]) % 400 == 0) {\n                        daysInMonth
    = 29;\n                    }\n                } else {\n                    daysInMonth
    = 29;\n                }\n            }\n        }\n        if (Convert.ToInt32(dateSplit[1])
    < 1 || Convert.ToInt32(dateSplit[1]) > daysInMonth) {\n            return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var parts
    = date.Split('-');\n        if (parts.Length != 3) return false;\n        try
    {\n            var year = int.Parse(parts[2]);\n            var month = int.Parse(parts[0]);\n
    \           var day = int.Parse(parts[1]);\n            if (month < 1 || month
    > 12) return false;\n            switch (month) {\n                case 2:\n                    if
    (day < 1 || day > 29) return false;\n                    if (day == 29 && (year
    % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) return false;\n                    break;\n
    \               case 4:\n                case 6:\n                case 9:\n                case
    11:\n                    if (day < 1 || day > 30) return false;\n                    break;\n
    \               default:\n                    if (day < 1 || day > 31) return
    false;\n                    break;\n            }\n            return true;\n
    \       } catch (Exception) {\n            return false;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    split = date.Split('-');\n        int month = Convert.ToInt32(split[0]);\n        int
    day = Convert.ToInt32(split[1]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2) {\n            if (day < 1 || day >
    29) {\n                return false;\n            }\n        } else if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||
    day > 30) {\n                return false;\n            }\n        } else {\n
    \           if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.ValidDate
    (System.String date) [0x0000b] in <3e099796009f4e149e009756ec62ad13>:0 \n  at
    Problem.Main (System.String[] args) [0x0006a] in <3e099796009f4e149e009756ec62ad13>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.ValidDate
    (System.String date) [0x0000b] in <3e099796009f4e149e009756ec62ad13>:0 \n  at
    Problem.Main (System.String[] args) [0x0006a] in <3e099796009f4e149e009756ec62ad13>:0
    \n"
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    dateArr = date.Split('-');\n        int dateStrLen = date.Length;\n        int
    dateArrLen = dateArr.Length;\n        int day = 0;\n        int month = 0;\n        int
    year = 0;\n        if (dateStrLen == 0) {\n            return false;\n        }\n
    \       if (dateArrLen != 3) {\n            return false;\n        }\n        try
    {\n            day = int.Parse(dateArr[1]);\n            month = int.Parse(dateArr[0]);\n
    \           year = int.Parse(dateArr[2]);\n        } catch (Exception) {\n            return
    false;\n        }\n        if (month > 12 || month < 1) {\n            return
    false;\n        }\n        if (day > 31 || day < 1) {\n            return false;\n
    \       }\n        if (month == 2) {\n            if (day > 29) {\n                return
    false;\n            }\n        }\n        if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    valid = true;\n        List<string> days = new List<string>();\n        List<string>
    months = new List<string>();\n        List<string> years = new List<string>();\n
    \       List<string> days_with_31 = new List<string>();\n        List<string>
    days_with_30 = new List<string>();\n        for (int i = 1; i <= 31; i++) {\n
    \           days.Add(i.ToString());\n            if (i > 29) {\n                days_with_31.Add(i.ToString());\n
    \           }\n            if (i > 30) {\n                days_with_30.Add(i.ToString());\n
    \           }\n        }\n        for (int i = 1; i <= 12; i++) {\n            months.Add(i.ToString());\n
    \       }\n        for (int i = 1900; i <= 2020; i++) {\n            years.Add(i.ToString());\n
    \       }\n        string[] delimited_date = date.Split('-');\n        foreach
    (string component in delimited_date) {\n            if (component.Length != 2
    && component.Length != 4) {\n                valid = false;\n            }\n        }\n
    \       if (date.Length != 10) {\n            valid = false;\n        }\n        if
    (delimited_date.Length != 3) {\n            valid = false;\n        }\n        if
    (months.Contains(delimited_date[0]) && days.Contains(delimited_date[1]) && years.Contains(delimited_date[2]))
    {\n            if (delimited_date[0] == \"02\" && days_with_31.Contains(delimited_date[1]))
    {\n                valid = false;\n            }\n            if (delimited_date[0]
    == \"04\" || delimited_date[0] == \"06\" || delimited_date[0] == \"09\" || delimited_date[0]
    == \"11\") {\n                if (days_with_31.Contains(delimited_date[1])) {\n
    \                   valid = false;\n                }\n            }\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpicoy1f71.cs(71,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpicoy1f71.cs(90,2): error CS1513: } expected

    '
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        Console.WriteLine(\"Date:
    \" + date);\n        string[] parts = date.Split(\"-\");\n        if (parts.Length
    != 3) {\n            return false;\n        }\n        int month = Int32.Parse(parts[0]);\n
    \       int day = Int32.Parse(parts[1]);\n        int year = Int32.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month % 2 == 0) {\n            if (day
    < 1 || day > 30) {\n                return false;\n            }\n        } else
    {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: "Date: 03-11-2000\nDate: 15-01-2012\nDate: 04-0-2040\nDate: 06-04-2020\nDate:
    01-01-2007\nDate: 03-32-2011\nDate: \nDate: 04-31-3000\nDate: 06-06-2005\nDate:
    21-31-2000\nDate: 04-12-2003\nDate: 04122003\nDate: 20030412\nDate: 2003-04\nDate:
    2003-04-12\nDate: 04-2003\n"
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    date.Length != 0 && //\n               DateTime.TryParse(date, out var dateTime)
    && //\n               dateTime.Year > 1970 && //\n               dateTime.Month
    > 0 && dateTime.Month < 13 && //\n               dateTime.Day > 0 && dateTime.Day
    < 32;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cec8cedfca684b3689bc8b800445deab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cec8cedfca684b3689bc8b800445deab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // returns
    true if date is valid and false if date is invalid\n        // do something\n
    \       try {\n            DateTime dt = DateTime.Parse(date);\n            return
    true;\n        } catch (FormatException) {\n            return false;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea9019e654484a629d5321fd71b1dfff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea9019e654484a629d5321fd71b1dfff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var parts
    = date.Split(\"-\".ToCharArray());\n        return parts.Length == 3 &&\n               int.TryParse(parts[0],
    out int month) &&\n               int.TryParse(parts[1], out int day) &&\n               int.TryParse(parts[2],
    out int year) &&\n               month >= 1 && month <= 12 &&\n               day
    >= 1 &&\n               (day <= 31 && (month == 1 || month == 3 || month == 5
    || month == 7 || month == 8 || month == 10 || month == 12)) &&\n               (day
    <= 30 && (month == 4 || month == 6 || month == 9 || month == 11)) &&\n               (day
    <= 29 && month == 2) &&\n               year >= 2000 && year <= 3000;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <738b570c7496404a9070f9e53e54da60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <738b570c7496404a9070f9e53e54da60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    d = date.Split('-');\n        int year = Convert.ToInt32(d[2]);\n        int month
    = Convert.ToInt32(d[0]);\n        int day = Convert.ToInt32(d[1]);\n        if
    (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return
    false;\n        if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 400 == 0) return true;\n                if
    (year % 100 == 0) return false;\n                if (year % 4 == 0) return true;\n
    \               return false;\n            }\n        }\n        if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0000b]
    in <d389a26f104949cb83930e33eac5f939>:0 \n  at Problem.Main (System.String[] args)
    [0x0006a] in <d389a26f104949cb83930e33eac5f939>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0000b] in <d389a26f104949cb83930e33eac5f939>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <d389a26f104949cb83930e33eac5f939>:0
    \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    < 10) return false;\n        if (date[2] != '-' || date[5] != '-') return false;\n
    \       int day = int.Parse(date.Substring(0, 2));\n        int month = int.Parse(date.Substring(3,
    2));\n        if (month < 1 || month > 12) return false;\n        if (month ==
    2) {\n            if (day < 1 || day > 29) return false;\n        } else if (month
    % 2 == 0) {\n            if (day < 1 || day > 30) return false;\n        } else
    {\n            if (day < 1 || day > 31) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6579b3dd6f0470290e2b11a9dca60ee>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d80e977802a74260b72d2e7062949b17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d80e977802a74260b72d2e7062949b17>:0 \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // We
    don't care about year\n        date = date.Substring(0, date.LastIndexOf('-'));\n
    \       string[] parts = date.Split('-');\n        int month = Int32.Parse(parts[0]);\n
    \       int day = Int32.Parse(parts[1]);\n        if (day < 1 || day > 31) return
    false;\n        if (month < 1 || month > 12) return false;\n        if (month
    == 2 && day > 29) return false;\n        if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot
    be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <2d21078824524413abf66226a31f2448>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <2d21078824524413abf66226a31f2448>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length
    cannot be less than zero.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <2d21078824524413abf66226a31f2448>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <2d21078824524413abf66226a31f2448>:0
    \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    valid = true;\n        // Your code here\n        // The date is valid if all
    of the following rules are satisfied:\n        // 1. The date string is not empty.\n
    \       // 2. The number of days is not less than 1 or higher than 31 days for
    months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than
    30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher
    than 29 for the month 2.\n        // 3. The months should not be less than 1 or
    higher than 12.\n        // 4. The date should be in the format: mm-dd-yyyy\n
    \       var dateParts = date.Split('-');\n        if (dateParts.Length != 3) {\n
    \           return false;\n        }\n        if (string.IsNullOrEmpty(dateParts[0])
    || string.IsNullOrEmpty(dateParts[1]) || string.IsNullOrEmpty(dateParts[2])) {\n
    \           return false;\n        }\n        int day = 0;\n        int month
    = 0;\n        int year = 0;\n        if (!int.TryParse(dateParts[0], out month)
    || month < 1 || month > 12) {\n            return false;\n        }\n        if
    (!int.TryParse(dateParts[1], out day) || day < 1 || day > 31) {\n            return
    false;\n        }\n        if (!int.TryParse(dateParts[2], out year)) {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b2ee094bb1d483e8f29b1267477a5e5>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    dt = date.Split('-');\n        if (date == \"\" || dt.Length != 3) return false;\n
    \       int d = int.Parse(dt[0]);\n        int m = int.Parse(dt[1]);\n        int
    y = int.Parse(dt[2]);\n        if (m == 2) {\n            if (d > 29) return false;\n
    \           if (d > 28 && !(y % 4 == 0 && (y % 100 != 0 || y % 400 == 0))) return
    false;\n        } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if
    (d > 30) return false;\n        } else if (m == 1 || m == 3 || m == 5 || m ==
    7 || m == 8 || m == 10 || m == 12) {\n            if (d > 31) return false;\n
    \       } else {\n            return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3baed3955dcc4e9d9255c7a28f26fa38>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(date.Length
    == 0) {\n            return false;\n        }\n        string[] tokens = date.Split('-');\n
    \       if(tokens.Length != 3) {\n            return false;\n        }\n        if(tokens[0].Length
    != 2 || tokens[1].Length != 2 || tokens[2].Length != 4) {\n            return
    false;\n        }\n        int d = int.Parse(tokens[0]);\n        int m = int.Parse(tokens[1]);\n
    \       int y = int.Parse(tokens[2]);\n        if(m > 12 || m < 1) {\n            return
    false;\n        }\n        if(m == 2) {\n            if(d > 29 || d < 1) {\n                return
    false;\n            }\n        } else if(m == 4 || m == 6 || m == 9 || m == 11)
    {\n            if(d > 30 || d < 1) {\n                return false;\n            }\n
    \       } else {\n            if(d > 31 || d < 1) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <081336ed412e4be7b52110e5a928e046>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // This
    should do it.\n        DateTime dt;\n        return DateTime.TryParse(date, out
    dt);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b27ca9319db43c99cfbcae618731589>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b27ca9319db43c99cfbcae618731589>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    elements = date.Split('-');\n        if (elements.Length != 3) return false;\n
    \       int month = Convert.ToInt32(elements[0]);\n        int day = Convert.ToInt32(elements[1]);\n
    \       int year = Convert.ToInt32(elements[2]);\n        if (month < 1 || month
    > 12) return false;\n        if (day < 1 || day > 31) return false;\n        if
    (month == 2) {\n            if (day < 1 || day > 29) return false;\n        }
    else if (month % 2 == 0) {\n            if (day < 1 || day > 30) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008904
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int day;\n
    \       int month;\n        int year;\n        if (int.TryParse(date.Substring(0,
    2), out month) && int.TryParse(date.Substring(3, 2), out day) && int.TryParse(date.Substring(6,
    4), out year)) {\n            if (month == 2) {\n                if (day <= 29)
    {\n                    return true;\n                }\n            } else if
    (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month ==
    10 || month == 12) {\n                if (day <= 31) {\n                    return
    true;\n                }\n            } else if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n                if (day <= 30) {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00001] in <37b4159e871b4bde950ddb580bbe0ce8>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <37b4159e871b4bde950ddb580bbe0ce8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.ValidDate (System.String
    date) [0x00001] in <37b4159e871b4bde950ddb580bbe0ce8>:0 \n  at Problem.Main (System.String[]
    args) [0x0006a] in <37b4159e871b4bde950ddb580bbe0ce8>:0 \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        //TODO:
    implement\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3354aeeaad2e46598be1a19943e65686>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3354aeeaad2e46598be1a19943e65686>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    isDayValid = false;\n        bool isMonthValid = false;\n        bool isYearValid
    = false;\n        string[] dateSplitted = date.Split(\"-\");\n        if (dateSplitted.Length
    == 3) {\n            if (int.TryParse(dateSplitted[0], out int month) && int.TryParse(dateSplitted[1],
    out int day) && int.TryParse(dateSplitted[2], out int year)) {\n                if
    (month >= 1 && month <= 12) {\n                    isMonthValid = true;\n                }\n
    \               if (day >= 1 && day <= 31) {\n                    isDayValid =
    true;\n                }\n                if (year > 0) {\n                    isYearValid
    = true;\n                }\n            }\n        }\n        return isDayValid
    && isMonthValid && isYearValid;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5200a21d01094c9eb8f58ede459c114b>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code here\n        try {\n            DateTime dt = DateTime.Parse(date);\n            return
    true;\n        } catch {\n            return false;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dd081d86ff744d89173de4ce9a7fde9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dd081d86ff744d89173de4ce9a7fde9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    ret = false;\n        // TODO: Fix this\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a01c3f3efbae45e6b77f5a4a0243199f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a01c3f3efbae45e6b77f5a4a0243199f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Write
    your code here\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e50995b95476412abf01feac2852b68e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e50995b95476412abf01feac2852b68e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Happy
    Coding ^_^\n        string[] ymd = date.Split('-');\n        if (ymd.Length !=
    3) return false;\n        int y = int.Parse(ymd[2]);\n        int m = int.Parse(ymd[0]);\n
    \       int d = int.Parse(ymd[1]);\n        if (m < 1 || m > 12) return false;\n
    \       if (d < 1) return false;\n        if (d > 31 && (m == 1 || m == 3 || m
    == 5 || m == 7 || m == 8 || m == 10 || m == 12)) return false;\n        if (d
    > 30 && (m == 4 || m == 6 || m == 9 || m == 11)) return false;\n        if (d
    > 29 && m == 2) return false;\n        if (d > 28 && m == 2 && y % 4 != 0) return
    false;\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int d = Convert.ToInt32(parts[0]);\n        int m
    = Convert.ToInt32(parts[1]);\n        int y = Convert.ToInt32(parts[2]);\n        if
    (d < 1 || d > 31) return false;\n        if (m < 1 || m > 12) return false;\n
    \       if (m == 2 && d > 29) return false;\n        if (m == 4 || m == 6 || m
    == 9 || m == 11)\n            if (d > 30) return false;\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f1765b538454645a4b00bb71366439d>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    temp = date.Split('-');\n        if (temp.Length != 3) return false;\n        foreach
    (var part in temp) {\n            if (part.Length > 2) return false;\n        }\n
    \       if (temp[0].Length == 1) temp[0] = \"0\" + temp[0];\n        if (temp[1].Length
    == 1) temp[1] = \"0\" + temp[1];\n        try {\n            DateTime.ParseExact(temp[0]
    + \"/\" + temp[1] + \"/\" + temp[2], \"MM/dd/yyyy\", null);\n        } catch (Exception)
    {\n            return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fde53706bc4408c80a09d030820caad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fde53706bc4408c80a09d030820caad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code here.\n        if (date.Length != 10) return false;\n        if (date[2]
    != '-' || date[5] != '-') return false;\n        int month = date.Substring(0,
    2).ToInt32();\n        int day = date.Substring(3, 2).ToInt32();\n        int
    year = date.Substring(6, 4).ToInt32();\n        if (month < 1 || month > 12) return
    false;\n        if (day < 1 || day > 31) return false;\n        if (month == 2)
    {\n            if (year % 4 == 0) {\n                if (day > 29) return false;\n
    \           } else {\n                if (day > 28) return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day > 30) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph8bdfaww.cs(30,42): error CS1061: ''string'' does not contain a definition
    for ''ToInt32'' and no accessible extension method ''ToInt32'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmph8bdfaww.cs(31,40): error CS1061: ''string'' does not contain a definition
    for ''ToInt32'' and no accessible extension method ''ToInt32'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmph8bdfaww.cs(32,41): error CS1061: ''string'' does not contain a definition
    for ''ToInt32'' and no accessible extension method ''ToInt32'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int day;\n
    \       int month;\n        int year;\n        try {\n            var arr = date.Split('-');\n
    \           day = Convert.ToInt32(arr[0]);\n            month = Convert.ToInt32(arr[1]);\n
    \           year = Convert.ToInt32(arr[2]);\n        } catch {\n            return
    false;\n        }\n        switch (month) {\n            case 1:\n            case
    3:\n            case 5:\n            case 7:\n            case 8:\n            case
    10:\n            case 12:\n                if (day > 31 || day < 1) return false;\n
    \               break;\n            case 4:\n            case 6:\n            case
    9:\n            case 11:\n                if (day > 30 || day < 1) return false;\n
    \               break;\n            case 2:\n                if (day > 29 || day
    < 1) return false;\n                break;\n            default:\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8235bde299dc41219dd40eca6a5cb6e7>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    dateSplit = date.Split('-');\n        int month = int.Parse(dateSplit[0]);\n        int
    day = int.Parse(dateSplit[1]);\n        int year = int.Parse(dateSplit[2]);\n
    \       if(month < 1 || month > 12) {\n            return false;\n        }\n
    \       if(month == 2) {\n            if(day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if(month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if(day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if(day < 1 || day > 31) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <65a28d093c31479d88b301801855bb64>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <65a28d093c31479d88b301801855bb64>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <65a28d093c31479d88b301801855bb64>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <65a28d093c31479d88b301801855bb64>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int month
    = int.Parse(date.Substring(0, 2));\n        int day = int.Parse(date.Substring(3,
    2));\n        int year = int.Parse(date.Substring(6, 4));\n        int[] daysInMonth
    = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n        bool february =
    (month == 2);\n        bool leapYear = ((year % 4 == 0) && (year % 100 != 0))
    || (year % 400 == 0);\n        if (date.Length == 10 && (month > 0 && month <
    13) && (day > 0 && day < daysInMonth[month - 1] + 1) && (day != 30 || (month !=
    2 && month != 4 && month != 6 && month != 9 && month != 11)) && (leapYear && february
    && day < 30)) {\n            return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79a4723c337d46a99802d6b134aacfab>:0
    \n\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00017] in <79a4723c337d46a99802d6b134aacfab>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <79a4723c337d46a99802d6b134aacfab>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  a"
  stdout: ''
  timestamp: 1660008905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    != 10) {\n            return false;\n        }\n        var month = date.Substring(0,
    2);\n        var day = date.Substring(3, 2);\n        var year = date.Substring(6,
    4);\n        var dateSplit = date.Split('-');\n        if (dateSplit.Length !=
    3) {\n            return false;\n        }\n        var months = new List<string>
    { \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\" };\n        if (months.Contains(month))
    {\n            if (int.Parse(day) > 31) {\n                return false;\n            }\n
    \       }\n        else {\n            if (month == \"02\") {\n                if
    (int.Parse(day) > 29) {\n                    return false;\n                }\n
    \           }\n            else {\n                if (int.Parse(day) > 30) {\n
    \                   return false;\n                }\n            }\n        }\n
    \       if (int.Parse(month) > 12) {\n            return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0010a] in <a62293e8690849c8bb89ce0cb4c916ad>:0
    \n  at Problem.Main (System.String[] args) [0x000fc] in <a62293e8690849c8bb89ce0cb4c916ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0010a] in <a62293e8690849c8bb89ce0cb4c916ad>:0
    \n  at Problem.Main (System.String[] args) [0x000fc] in <a62293e8690849c8bb89ce0cb4c916ad>:0
    \n"
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(date.Length
    == 0) {\n            return false;\n        }\n        var s = date.Split('-');\n
    \       if(s.Length != 3) {\n            return false;\n        }\n        var
    m = Int32.Parse(s[0]);\n        var d = Int32.Parse(s[1]);\n        var y = Int32.Parse(s[2]);\n
    \       if(m < 1 || m > 12) {\n            return false;\n        }\n        if(m
    == 2) {\n            if(y % 4 == 0) {\n                if(d < 1 || d > 29) {\n
    \                   return false;\n                }\n            } else {\n                if(d
    < 1 || d > 28) {\n                    return false;\n                }\n            }\n
    \       } else if(m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 ||
    m == 12) {\n            if(d < 1 || d > 31) {\n                return false;\n
    \           }\n        } else {\n            if(d < 1 || d > 30) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    DateTime.TryParse(date, out DateTime dt);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b9ab261ed3a4b81ae93fce35f104974>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b9ab261ed3a4b81ae93fce35f104974>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Do
    your code here\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22bede9898d3421b95663ad8acb75f91>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22bede9898d3421b95663ad8acb75f91>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    new DateTime(int.Parse(date.Substring(6, 4)), int.Parse(date.Substring(0, 2)),
    int.Parse(date.Substring(3, 2))).ToString(\"MM-dd-yyyy\") == date;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Year, Month,
    and Day parameters describe an un-representable DateTime.\n  at System.DateTime.DateToTicks
    (System.Int32 year, System.Int32 month, System.Int32 day) [0x0006c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.DateTime..ctor (System.Int32 year, System.Int32 month, System.Int32
    day) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.ValidDate
    (System.String date) [0x00028] in <313146a99daa4dc5a8358ccb0734d4e4>:0 \n  at
    Problem.Main (System.String[] args) [0x00011] in <313146a99daa4dc5a8358ccb0734d4e4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Year,
    Month, and Day parameters describe an un-representable DateTime.\n  at System.DateTime.DateToTicks
    (System.Int32 year, System.Int32 month, System.Int32 day) [0x0006c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.DateTime..ctor (System.Int32 year, System.Int32 month, System.Int32
    day) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.ValidDate
    (System.String date) [0x00028] in <313146a99daa4dc5a8358ccb0734d4e4>:0 \n  at
    Problem.Main (System.String[] args) [0x00011] in <313146a99daa4dc5a8358ccb0734d4e4>:0
    \n"
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        var split = date.Split('-');\n
    \       if (split.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(split[0]);\n        int day = int.Parse(split[1]);\n        int
    year = int.Parse(split[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)
    {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        if (month == 2) {\n            if (day > 29) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    split = date.Split('-');\n        string month = split[0];\n        string day
    = split[1];\n        string year = split[2];\n        int yr = Int32.Parse(year);\n
    \       int mnth = Int32.Parse(month);\n        int dy = Int32.Parse(day);\n        if
    (mnth == 1 || mnth == 3 || mnth == 5 || mnth == 7 || mnth == 8 || mnth == 10 ||
    mnth == 12) {\n            if (dy > 31 || dy < 1) {\n                return false;\n
    \           }\n        }\n        else if (mnth == 4 || mnth == 6 || mnth == 9
    || mnth == 11) {\n            if (dy > 30 || dy < 1) {\n                return
    false;\n            }\n        }\n        else if (mnth == 2) {\n            if
    (yr % 4 == 0 && yr % 100 != 0 || yr % 400 == 0) {\n                if (dy > 29
    || dy < 1) {\n                    return false;\n                }\n            }\n
    \           else {\n                if (dy > 28 || dy < 1) {\n                    return
    false;\n                }\n            }\n        }\n        else {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0000f]
    in <ee213a3f966d4c21b9c8af2cdbec8e55>:0 \n  at Problem.Main (System.String[] args)
    [0x0006a] in <ee213a3f966d4c21b9c8af2cdbec8e55>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0000f] in <ee213a3f966d4c21b9c8af2cdbec8e55>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <ee213a3f966d4c21b9c8af2cdbec8e55>:0
    \n"
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var array
    = date.Split('-');\n        if (array.Length != 3) {\n            return false;\n
    \       }\n        int month = int.Parse(array[0]);\n        int day = int.Parse(array[1]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1) {\n            return false;\n        }\n        if (month
    == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day > 30) {\n                return false;\n            }\n        }
    else {\n            if (day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(date.Length
    < 10) return false;\n        string[] format = date.Split('-');\n        if(format.Length
    != 3) return false;\n        int month, day, year;\n        if(!int.TryParse(format[0],
    out month) || !int.TryParse(format[1], out day) || !int.TryParse(format[2], out
    year)) return false;\n        if(month < 1 || month > 12) return false;\n        if(day
    < 1 || day > 31) return false;\n        if(month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if(day > 30) return false;\n        }\n        if(month
    == 2) {\n            if(day > 29) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // TODO\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5112b31cf02d419b91257aa621bc9b74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5112b31cf02d419b91257aa621bc9b74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = Int32.Parse(parts[0]);\n        int day
    = Int32.Parse(parts[1]);\n        int year = Int32.Parse(parts[2]);\n        if
    (month < 1 || month > 12) return false;\n        if (month == 2) {\n            if
    (year % 4 == 0) {\n                if (day < 1 || day > 29) return false;\n            }
    else {\n                if (day < 1 || day > 28) return false;\n            }\n
    \       } else if (month % 2 == 0) {\n            if (day < 1 || day > 30) return
    false;\n        } else {\n            if (day < 1 || day > 31) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (String.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month = Int32.Parse(parts[0]);\n        int day = Int32.Parse(parts[1]);\n        int
    year = Int32.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        switch (month) {\n            case 1:\n            case
    3:\n            case 5:\n            case 7:\n            case 8:\n            case
    10:\n            case 12:\n                if (day < 1 || day > 31) {\n                    return
    false;\n                }\n                break;\n            case 4:\n            case
    6:\n            case 9:\n            case 11:\n                if (day < 1 ||
    day > 30) {\n                    return false;\n                }\n                break;\n
    \           case 2:\n                if (day < 1 || day > 29) {\n                    return
    false;\n                }\n                break;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        //\n
    \       // 1. Check if empty or not:\n        if (string.IsNullOrEmpty(date))
    return false;\n        // 2. Number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n        //3. The months should not
    be less than 1 or higher than 12.\n        //4. The date should be in the format:
    mm-dd-yyyy\n        //\n        if (date.Length != 10) return false;\n        int
    month = int.Parse(date.Substring(0, 2));\n        int day = int.Parse(date.Substring(3,
    2));\n        int year = int.Parse(date.Substring(6, 4));\n        //\n        if
    (date[2] != '-' || date[5] != '-') return false;\n        //\n        if (month
    < 1 || month > 12) return false;\n        //\n        if (month == 1 || month
    == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
    {\n            if (day < 1 || day > 31) return false;\n        } else if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||
    day > 30) return false;\n        } else if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        }\n        //\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00044] in <565bd071840a47789f864abaa07660b1>:0
    \n  at Problem.Main (System.String[] args) [0x000fc] in <565bd071840a47789f864abaa07660b1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00044] in <565bd071840a47789f864abaa07660b1>:0
    \n  at Problem.Main (System.String[] args) [0x000fc] in <565bd071840a47789f864abaa07660b1>:0
    \n"
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Do
    your magic here\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60d5504a4c304950b661dc4b5182d4a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60d5504a4c304950b661dc4b5182d4a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d80e977802a74260b72d2e7062949b17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d80e977802a74260b72d2e7062949b17>:0 \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var parts
    = date.Split('-');\n        if (parts.Length != 3) return false;\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (year < 1900 || year > 2100) return false;\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (day > 30 && (month == 4 || month == 6 || month
    == 9 || month == 11)) return false;\n        if (month == 2 && day > 29) return
    false;\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        if (date.Length != 10)
    {\n            return false;\n        }\n        if (date[2] != '-' || date[5]
    != '-') {\n            return false;\n        }\n        var month = int.Parse(date.Substring(0,
    2));\n        var day = int.Parse(date.Substring(3, 2));\n        var year = int.Parse(date.Substring(6,
    4));\n        if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1 || day > 31) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29)
    {\n                    return false;\n                }\n            } else {\n
    \               if (day > 28) {\n                    return false;\n                }\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    != 10) return false;\n        if (date[2] != '-' || date[5] != '-') return false;\n
    \       if (date[0] == '0') return false;\n        if (date[3] == '0') return
    false;\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3,
    2));\n        int y = int.Parse(date.Substring(6, 4));\n        if (m < 1 || m
    > 12) return false;\n        if (d < 1 || d > 31) return false;\n        if (m
    == 2) {\n            if (d > 29) return false;\n            if (d == 29) {\n                if
    (y % 4 != 0) return false;\n                if (y % 100 == 0 && y % 400 != 0)
    return false;\n            }\n        }\n        if (m == 4 || m == 6 || m ==
    9 || m == 11) {\n            if (d > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ae4c45e686e4a54beb18edfb43c7a55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ae4c45e686e4a54beb18edfb43c7a55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Get
    month, day, and year\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) {\n            return false;\n        }\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8
    || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else if (month == 2) {\n            if (day <
    1 || day > 29) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Initialize
    m,d,y\n        int m = 0;\n        int d = 0;\n        int y = 0;\n        string
    [] parts = date.Split('-');\n        // Not 4 parts\n        if (parts.Length
    != 3) {\n            return false;\n        }\n        // Parse m,d,y\n        try
    {\n            m = int.Parse(parts[0]);\n            d = int.Parse(parts[1]);\n
    \           y = int.Parse(parts[2]);\n        } catch {\n            return false;\n
    \       }\n        // Out of range month\n        if (m > 12 || m < 1) {\n            return
    false;\n        }\n        // Out of range date\n        if (d > 31 || d < 1)
    {\n            return false;\n        }\n        // Out of range year\n        if
    (y > 9999 || y < 1) {\n            return false;\n        }\n        // Valid\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42bd6a4fb8a34f588daa2105dd2ae54c>:0
    \n"
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    isValid = true;\n        int year = -1;\n        int month = -1;\n        int
    day = -1;\n        var dateSegments = date.Split('-');\n        if (dateSegments.Length
    == 3) {\n            if (int.TryParse(dateSegments[0], out month) && int.TryParse(dateSegments[1],
    out day) && int.TryParse(dateSegments[2], out year)) {\n                if (year
    >= 0 && year <= 9999) {\n                    if (month >= 1 && month <= 12) {\n
    \                       if (day >= 1 && day <= 31) {\n                            if
    (month == 2) {\n                                if (day <= 29) {\n                                    isValid
    = true;\n                                } else {\n                                    isValid
    = false;\n                                }\n                            } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n                                if
    (day <= 30) {\n                                    isValid = true;\n                                }
    else {\n                                    isValid = false;\n                                }\n
    \                           } else {\n                                isValid
    = true;\n                            }\n                        } else {\n                            isValid
    = false;\n                        }\n                    } else {\n                        isValid
    = false;\n                    }\n                } else {\n                    isValid
    = false;\n                }\n            } else {\n                isValid = false;\n
    \           }\n        } else {\n            isValid = false;\n        }\n        return
    isValid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    res = true;\n        string[] dateSplit = date.Split('-');\n        List<string>
    months = new List<string> { \"\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\",
    \"07\", \"08\", \"09\", \"10\", \"11\", \"12\" };\n        List<string> daysThirtyOne
    = new List<string> { \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\" };\n
    \       List<string> daysThirty = new List<string> { \"04\", \"06\", \"09\", \"11\"
    };\n        List<string> daysTwentyNine = new List<string> { \"02\" };\n        //
    1. The date string is not empty.\n        if (string.IsNullOrEmpty(date)) {\n
    \           res = false;\n        }\n        // 4. The date should be in the format:
    mm-dd-yyyy\n        if (dateSplit.Length != 3) {\n            res = false;\n        }\n
    \       // 3. The months should not be less than 1 or higher than 12.\n        if
    (!months.Contains(dateSplit[0])) {\n            res = false;\n        }\n        //
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.
    And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.
    And, the number of days is not less than 1 or higher than 29 for the month 2.\n
    \       if (res) {\n            if (daysThirtyOne.Contains(dateSplit[0])) {\n
    \               if (Convert.ToInt32(dateSplit[1]) < 1 || Convert.ToInt32(dateSplit[1])
    > 31) {\n                    res = false;\n                }\n            } else
    if (daysThirty.Contains(dateSplit[0])) {\n                if (Convert.ToInt32(dateSplit[1])
    < 1 || Convert.ToInt32(dateSplit[1]) > 30) {\n                    res = false;\n
    \               }\n            } else if (daysTwentyNine.Contains(dateSplit[0]))
    {\n                if (Con\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbzqjkde8.cs(56,24): error CS1026: ) expected

    /tmp/tmpbzqjkde8.cs(56,24): error CS1525: Invalid expression term ''}''

    /tmp/tmpbzqjkde8.cs(56,24): error CS1002: ; expected

    /tmp/tmpbzqjkde8.cs(58,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpbzqjkde8.cs(77,2): error CS1513: } expected

    '
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code here\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bcf84a2a178454297cf3c3124d2a87a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bcf84a2a178454297cf3c3124d2a87a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code here.\n        // If the date is empty, or the month is less than 1 or greater
    than 12, or the days exceed the max for that month, return false.\n        if
    (string.IsNullOrEmpty(date) || date.Length != 10) return false;\n        date
    = date.Replace(\"-\", \"\");\n        string year = date.Substring(4);\n        string
    month = date.Substring(0, 2);\n        string day = date.Substring(2, 2);\n        if
    (Convert.ToInt32(month) < 1 || Convert.ToInt32(month) > 12) return false;\n        if
    (Convert.ToInt32(day) < 1 || Convert.ToInt32(day) > 31) return false;\n        if
    (Convert.ToInt32(month) == 2 && Convert.ToInt32(day) > 29) return false;\n        if
    (Convert.ToInt32(month) == 4 && Convert.ToInt32(day) > 30) return false;\n        if
    (Convert.ToInt32(month) == 6 && Convert.ToInt32(day) > 30) return false;\n        if
    (Convert.ToInt32(month) == 9 && Convert.ToInt32(day) > 30) return false;\n        if
    (Convert.ToInt32(month) == 11 && Convert.ToInt32(day) > 30) return false;\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d80e977802a74260b72d2e7062949b17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d80e977802a74260b72d2e7062949b17>:0 \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    > 10) {\n            return false;\n        }\n        string[] dateArray = date.Split('-');\n
    \       if (dateArray.Length != 3) {\n            return false;\n        }\n        if
    (dateArray[0].Length != 2 || dateArray[1].Length != 2 || dateArray[2].Length !=
    4) {\n            return false;\n        }\n        string month = dateArray[0];\n
    \       string day = dateArray[1];\n        string year = dateArray[2];\n        if
    (int.Parse(month) < 1 || int.Parse(month) > 12) {\n            return false;\n
    \       }\n        if (int.Parse(month) == 1 || int.Parse(month) == 3 || int.Parse(month)
    == 5 || int.Parse(month) == 7 || int.Parse(month) == 8 || int.Parse(month) ==
    10 || int.Parse(month) == 12) {\n            if (int.Parse(day) < 1 || int.Parse(day)
    > 31) {\n                return false;\n            }\n        }\n        if (int.Parse(month)
    == 4 || int.Parse(month) == 6 || int.Parse(month) == 9 || int.Parse(month) ==
    11) {\n            if (int.Parse(day) < 1 || int.Parse(day) > 30) {\n                return
    false;\n            }\n        }\n        if (int.Parse(month) == 2) {\n            if
    (int.Parse(day) < 1 || int.Parse(day) > 29) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        string[] dParts = date.Split('-');\n
    \       if (dParts.Length != 3) {\n            return false;\n        }\n        int
    dYear = int.Parse(dParts[2]);\n        int dMonth = int.Parse(dParts[0]);\n        int
    dDay = int.Parse(dParts[1]);\n        if (dYear < 0 || dMonth < 1 || dMonth >
    12 || dDay < 1) {\n            return false;\n        }\n        if (dMonth ==
    2) {\n            if (dDay > 29) {\n                return false;\n            }\n
    \       } else if (dMonth == 4 || dMonth == 6 || dMonth == 9 || dMonth == 11)
    {\n            if (dDay > 30) {\n                return false;\n            }\n
    \       } else {\n            if (dDay > 31) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        var
    days = int.Parse(parts[1]);\n        var months = int.Parse(parts[0]);\n        var
    years = int.Parse(parts[2]);\n        if (days < 1 || days > 31) {\n            return
    false;\n        }\n        if (months < 1 || months > 12) {\n            return
    false;\n        }\n        if (months == 2) {\n            if (days > 29) {\n
    \               return false;\n            }\n        }\n        if (months ==
    4 || months == 6 || months == 9 || months == 11) {\n            if (days > 30)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008906
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    splitDate = date.Split('-');\n        if (splitDate.Length != 3) {\n            return
    false;\n        }\n        int month = int.Parse(splitDate[0]);\n        int day
    = int.Parse(splitDate[1]);\n        int year = int.Parse(splitDate[2]);\n        int[]
    monthsWith31Days = { 1, 3, 5, 7, 8, 10, 12 };\n        int[] monthsWith30Days
    = { 4, 6, 9, 11 };\n        // 1. The date string is not empty.\n        if (date
    == \"\") {\n            return false;\n        }\n        // 2. The number of
    days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And
    the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.
    And, the number of days is not less than 1 or higher than 29 for the month 2.\n
    \       if (monthsWith31Days.Contains(month)) {\n            if (day > 31 || day
    < 1) {\n                return false;\n            }\n        } else if (monthsWith30Days.Contains(month))
    {\n            if (day > 30 || day < 1) {\n                return false;\n            }\n
    \       } else if (month == 2) {\n            if (day > 29 || day < 1) {\n                return
    false;\n            }\n        }\n        // 3. The months should not be less
    than 1 or higher than 12.\n        if (month > 12 || month < 1) {\n            return
    false;\n        }\n        // 4. The date should be in the format: mm-dd-yyyy\n
    \       if (date.IndexOf('-') != date.LastIndexOf('-')) {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acf1a03f2e6b4780bc80ee4ee5aaca42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acf1a03f2e6b4780bc80ee4ee5aaca42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var parts
    = date.Split('-');\n        if (parts.Length != 3) {\n            return false;\n
    \       }\n        if (!int.TryParse(parts[0], out int month)) {\n            return
    false;\n        }\n        if (!int.TryParse(parts[1], out int day)) {\n            return
    false;\n        }\n        if (!int.TryParse(parts[2], out int year)) {\n            return
    false;\n        }\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2) {\n            if (day < 1 || day >
    29) {\n                return false;\n            }\n        } else if (new[]
    {4, 6, 9, 11}.Contains(month)) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code here\n        if (string.IsNullOrEmpty(date)) return false;\n        if (date.Length
    != 10) return false;\n        if (date[2] != '-' || date[5] != '-') return false;\n
    \       int days = int.Parse(date.Substring(0, 2));\n        int months = int.Parse(date.Substring(3,
    2));\n        int years = int.Parse(date.Substring(6, 4));\n        if (months
    < 1 || months > 12) return false;\n        if (days < 1 || days > 31) return false;\n
    \       if (months == 2) {\n            if (days > 29) return false;\n            if
    (days == 29) {\n                if (years % 4 != 0) return false;\n                if
    (years % 100 == 0 && years % 400 != 0) return false;\n            }\n        }\n
    \       if (months == 4 || months == 6 || months == 9 || months == 11) {\n            if
    (days > 30) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d87d404a532473484f8fefde949e3d6>:0
    \n"
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var parts
    = date.Split('-');\n        if (parts.Length != 3) {\n            return false;\n
    \       }\n        if (!int.TryParse(parts[0], out int mm) ||\n            !int.TryParse(parts[1],
    out int dd) ||\n            !int.TryParse(parts[2], out int yyyy)) {\n            return
    false;\n        }\n        if (mm < 1 || mm > 12) {\n            return false;\n
    \       }\n        if (dd < 1 || dd > 31) {\n            return false;\n        }\n
    \       if (mm == 2) {\n            if (dd > 29) {\n                return false;\n
    \           }\n        } else if (new[] { 4, 6, 9, 11 }.Contains(mm)) {\n            if
    (dd > 30) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // your
    code here\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c96bec10b9d748269a6df99c9e677da9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c96bec10b9d748269a6df99c9e677da9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    split = date.Split('-');\n        if (split.Length != 3) return false;\n        if
    (split[0].Length != 2 || split[1].Length != 2 || split[2].Length != 4) return
    false;\n        try {\n            int m = int.Parse(split[0]);\n            int
    d = int.Parse(split[1]);\n            int y = int.Parse(split[2]);\n            if
    (m > 12 || m < 1) return false;\n            int[] days = {31,28,31,30,31,30,31,31,30,31,30,31};\n
    \           int max_days = days[m-1];\n            if (m == 2 && (y % 4 == 0 &&
    y % 100 != 0 || y % 400 == 0)) {\n                max_days = 29;\n            }\n
    \           if (d > max_days || d < 1) return false;\n            return true;\n
    \       } catch {\n            return false;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (new int[] {1,3,5,7,8,10,12}.Contains(month))
    {\n            if (day < 1 || day > 31) return false;\n        } else {\n            if
    (day < 1 || day > 30) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code here\n        var regex = new System.Text.RegularExpressions.Regex(@\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\");\n
    \       var match = regex.Match(date);\n        if (match.Success == false) {\n
    \           return false;\n        }\n        var month = int.Parse(match.Groups[1].Value);\n
    \       var day = int.Parse(match.Groups[2].Value);\n        var year = int.Parse(match.Groups[3].Value);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1 || day > 31) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)
    {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(string.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        DateTime dt;\n        if(DateTime.TryParse(date,
    out dt)) {\n            return true;\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ecc4d7fde744b9ba590f14115cec5bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ecc4d7fde744b9ba590f14115cec5bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        string[] parts = date.Split(\"-\");\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        string
    year = parts[2];\n        string month = parts[0];\n        string day = parts[1];\n
    \       if (year.Length != 4) {\n            return false;\n        }\n        if
    (month.Length != 2) {\n            return false;\n        }\n        if (day.Length
    != 2) {\n            return false;\n        }\n        int y = Int32.Parse(year);\n
    \       int m = Int32.Parse(month);\n        int d = Int32.Parse(day);\n        if
    (y < 0) {\n            return false;\n        }\n        if (m > 12 || m < 1)
    {\n            return false;\n        }\n        if (d > 31 || d < 1) {\n            return
    false;\n        }\n        if (m == 2) {\n            if (d > 29) {\n                return
    false;\n            }\n        }\n        if (m == 4 || m == 6 || m == 9 || m
    == 11) {\n            if (d > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var parts
    = date.Split('-');\n        int y = Int32.Parse(parts[2]);\n        int m = Int32.Parse(parts[0]);\n
    \       int d = Int32.Parse(parts[1]);\n        int[] monthLengths = {31, 28,
    31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if (m < 1 || m > 12) {\n            return
    false;\n        }\n        if (d < 1 || d > monthLengths[m - 1]) {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0000b]
    in <430fa5a400a04055ad34a3a00909aa28>:0 \n  at Problem.Main (System.String[] args)
    [0x0006a] in <430fa5a400a04055ad34a3a00909aa28>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0000b] in <430fa5a400a04055ad34a3a00909aa28>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <430fa5a400a04055ad34a3a00909aa28>:0
    \n"
  stdout: ''
  timestamp: 1660008907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    dates = date.Split(\"-\");\n        int year = Int32.Parse(dates[2]);\n        int
    month = Int32.Parse(dates[0]);\n        int day = Int32.Parse(dates[1]);\n        //
    You can call IsValidDate to check if a given year, month and day is valid.\n        return
    IsValidDate(year, month, day);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbywx94ru.cs(32,16): error CS0103: The name ''IsValidDate'' does not exist
    in the current context

    '
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        try {\n
    \           var dateParts = date.Split('-');\n            var month = int.Parse(dateParts[0]);\n
    \           var day = int.Parse(dateParts[1]);\n            var year = int.Parse(dateParts[2]);\n
    \           if (month == 0 || day == 0 || year == 0) return false;\n            if
    (month > 12 || month < 1) return false;\n            if (month == 2) {\n                if
    (day > 29 || day < 1) return false;\n            } else if (month == 4 || month
    == 6 || month == 9 || month == 11) {\n                if (day > 30 || day < 1)
    return false;\n            } else {\n                if (day > 31 || day < 1)
    return false;\n            }\n            return true;\n        } catch {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        DateTime
    dateTime;\n        return DateTime.TryParse(date, out dateTime);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57092a808a32433da2c3e4de820838e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57092a808a32433da2c3e4de820838e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(date.Length
    != 10) {\n            return false;\n        }\n        string[] parts = date.Split('-');\n
    \       if(parts.Length != 3) {\n            return false;\n        }\n        int
    d = int.Parse(parts[1]);\n        int m = int.Parse(parts[0]);\n        int y
    = int.Parse(parts[2]);\n        if(d < 1 || d > 31) {\n            return false;\n
    \       }\n        if(m < 1 || m > 12) {\n            return false;\n        }\n
    \       if(m == 2) {\n            if(d > 29) {\n                return false;\n
    \           }\n        }\n        if(m == 4 || m == 6 || m == 9 || m == 11) {\n
    \           if(d > 30) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var v
    = new SortedDictionary<int, int> { { 1, 31 }, { 2, 28 }, { 3, 31 }, { 4, 30 },
    { 5, 31 }, { 6, 30 }, { 7, 31 }, { 8, 31 }, { 9, 30 }, { 10, 31 }, { 11, 30 },
    { 12, 31 } };\n        if (date.Length < 8) return false;\n        var dd = int.Parse(date.Substring(0,
    2));\n        var mm = int.Parse(date.Substring(3, 2));\n        var yyyy = int.Parse(date.Substring(6,
    4));\n        if (mm < 1 || mm > 12) return false;\n        if (dd < 1 || dd >
    v[mm]) return false;\n        if (mm == 2 && dd == 29 && yyyy % 4 != 0) return
    false;\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9f4ea413e2745b39526c3a1919c67ed>:0
    \n\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x000ad] in <d9f4ea413e2745b39526c3a1919c67ed>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <d9f4ea413e2745b39526c3a1919c67ed>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  a"
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    d = date.Split('-');\n        if (d.Length != 3) {\n            return false;\n
    \       }\n        int m = int.Parse(d[0]);\n        int y = int.Parse(d[2]);\n
    \       if (m < 1 || m > 12) {\n            return false;\n        }\n        if
    (y < 1) {\n            return false;\n        }\n        int days = 0;\n        switch
    (m) {\n            case 2:\n                if (y % 4 == 0) {\n                    days
    = 29;\n                } else {\n                    days = 28;\n                }\n
    \               break;\n            case 4:\n            case 6:\n            case
    9:\n            case 11:\n                days = 30;\n                break;\n
    \           default:\n                days = 31;\n                break;\n        }\n
    \       int dd = int.Parse(d[1]);\n        if (dd < 1 || dd > days) {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        //YOUR
    CODE GOES HERE\n        string[] splitDate = date.Split('-');\n        if (splitDate.Length
    != 3) {\n            return false;\n        }\n        int day = Convert.ToInt32(splitDate[1]);\n
    \       int month = Convert.ToInt32(splitDate[0]);\n        int year = Convert.ToInt32(splitDate[2]);\n
    \       if (day < 1 || day > 31) {\n            return false;\n        }\n        if
    (month < 1 || month > 12) {\n            return false;\n        }\n        if
    (year < 0) {\n            return false;\n        }\n        if (month == 2) {\n
    \           if (day > 29) {\n                return false;\n            }\n        }\n
    \       if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day > 30) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    dateSplit = date.Split('-');\n        if (dateSplit.Length != 3) return false;\n
    \       int year = Convert.ToInt32(dateSplit[2]);\n        int month = Convert.ToInt32(dateSplit[0]);\n
    \       int day = Convert.ToInt32(dateSplit[1]);\n        if (month < 1 || month
    > 12) return false;\n        int m = month;\n        if (m == 2) {\n            if
    (day < 1 || day > 29) return false;\n        } else if (m == 4 || m == 6 || m
    == 9 || m == 11) {\n            if (day < 1 || day > 30) return false;\n        }
    else {\n            if (day < 1 || day > 31) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    s = date.Split(\"-\");\n        if (s.Length != 3) return false;\n        return
    ValidDate(s[0], s[1], s[2]);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnjrc_jc2.cs(29,16): error CS1501: No overload for method ''ValidDate''
    takes 3 arguments

    '
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    != 10) return false;\n        char[] dd = new char[2];\n        char[] mm = new
    char[2];\n        char[] yyyy = new char[4];\n        try {\n            dd[0]
    = date[0];\n            dd[1] = date[1];\n            mm[0] = date[3];\n            mm[1]
    = date[4];\n            yyyy[0] = date[6];\n            yyyy[1] = date[7];\n            yyyy[2]
    = date[8];\n            yyyy[3] = date[9];\n        } catch {\n            return
    false;\n        }\n        if (date[2] != '-' || date[5] != '-') return false;\n
    \       int d = int.Parse(new string(dd));\n        int m = int.Parse(new string(mm));\n
    \       int y = int.Parse(new string(yyyy));\n        if (d > 31 || d < 1) return
    false;\n        if (m > 12 || m < 1) return false;\n        if (m == 2 && d >
    29) return false;\n        if (m == 2 && d == 29 && y % 4 != 0) return false;\n
    \       if (m % 2 == 0 && m < 8 && d > 30) return false;\n        if (m % 2 ==
    0 && m > 7 && d > 31) return false;\n        if (m % 2 != 0 && m < 7 && d > 31)
    return false;\n        if (m % 2 != 0 && m > 7 && d > 30) return false;\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <add4caecbb9541d292fb444cdce30030>:0
    \n"
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int iDay
    = 0;\n        int iMonth = 0;\n        int iYear = 0;\n        if (date.Length
    != 10) return false;\n        if (date[2] != '-' || date[5] != '-') return false;\n
    \       iDay = Convert.ToInt32(date.Substring(0, 2));\n        iMonth = Convert.ToInt32(date.Substring(3,
    2));\n        iYear = Convert.ToInt32(date.Substring(6, 4));\n        if (iMonth
    < 1 || iMonth > 12) return false;\n        if (iDay < 1 || iDay > 31) return false;\n
    \       if (iMonth == 2) {\n            if (iDay > 29) return false;\n            if
    (iDay == 29) {\n                if (iYear % 4 != 0) return false;\n                if
    (iYear % 100 == 0 && iYear % 400 != 0) return false;\n            }\n        }\n
    \       if (iMonth == 4 || iMonth == 6 || iMonth == 9 || iMonth == 11) {\n            if
    (iDay > 30) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6359acddebd44559bbb555d864e94213>:0
    \n"
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    isValid = true;\n        bool isLeapYear = false;\n        if (date.Length ==
    0) {\n            isValid = false;\n        }\n        else {\n            string[]
    splitDate = date.Split('-');\n            if (splitDate.Length != 3) {\n                isValid
    = false;\n            }\n            else {\n                if (!int.TryParse(splitDate[0],
    out int month) || !int.TryParse(splitDate[1], out int day) || !int.TryParse(splitDate[2],
    out int year)) {\n                    isValid = false;\n                }\n                else
    {\n                    if (month < 1 || month > 12) {\n                        isValid
    = false;\n                    }\n                    else {\n                        switch
    (month) {\n                            case 1:\n                            case
    3:\n                            case 5:\n                            case 7:\n
    \                           case 8:\n                            case 10:\n                            case
    12:\n                                if (day < 1 || day > 31) {\n                                    isValid
    = false;\n                                }\n                                break;\n
    \                           case 4:\n                            case 6:\n                            case
    9:\n                            case 11:\n                                if (day
    < 1 || day > 30) {\n                                    isValid = false;\n                                }\n
    \                               break;\n                            case 2:\n
    \                               if (year % 4 == 0) {\n                                    isLeapYear
    = true;\n                                }\n                                if
    (day < 1 || day > 29) {\n                                    isValid = false;\n
    \                               }\n                                break;\n                        }\n
    \                   }\n                }\n            }\n        }\n        return
    isValid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008907
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(date.Length
    != 10) {\n            return false;\n        }\n        string[] dateParts = date.Split(\"-\");\n
    \       if(dateParts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(dateParts[0]);\n        int day = int.Parse(dateParts[1]);\n
    \       int year = int.Parse(dateParts[2]);\n        if(month < 1 || month > 12)
    {\n            return false;\n        }\n        if(month == 1 || month == 3 ||
    month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if(day
    < 1 || day > 31) {\n                return false;\n            }\n        }\n
    \       if(month == 4 || month == 6 || month == 9 || month == 11) {\n            if(day
    < 1 || day > 30) {\n                return false;\n            }\n        }\n
    \       if(month == 2) {\n            if(day < 1 || day > 29) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    parts = date.Split('-');\n        if (parts.Length != 3) return false;\n        int[]
    dateParts = parts.Select(x => int.Parse(x)).ToArray();\n        int month = dateParts[0];\n
    \       int day = dateParts[1];\n        int year = dateParts[2];\n        bool
    validYear = year >= 2000 && year <= 2100;\n        bool validMonth = month >=
    1 && month <= 12;\n        bool isLeapYear = year % 4 == 0 && year % 100 != 0
    || year % 400 == 0;\n        bool validDay = day >= 1 && day <= 30 && (month ==
    4 || month == 6 || month == 9 || month == 11) || day >= 1 && day <= 31 && (month
    == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||
    month == 12) || day >= 1 && day <= 28 && month == 2 || day == 29 && month == 2
    && isLeapYear;\n        return validYear && validMonth && validDay;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(date
    == null || date.Length == 0 || date.Length != 10) return false;\n        var daysInMonth
    = new Dictionary<int, int> {\n            { 1, 31 },\n            { 2, 28 },\n
    \           { 3, 31 },\n            { 4, 30 },\n            { 5, 31 },\n            {
    6, 30 },\n            { 7, 31 },\n            { 8, 31 },\n            { 9, 30
    },\n            { 10, 31 },\n            { 11, 30 },\n            { 12, 31 }\n
    \       };\n        int day, month, year;\n        if(!int.TryParse(date.Substring(0,
    2), out month) ||\n            !int.TryParse(date.Substring(3, 2), out day) ||\n
    \           !int.TryParse(date.Substring(6, 4), out year)) return false;\n        if(month
    < 1 || month > 12) return false;\n        if(day < 1 || day > daysInMonth[month])
    return false;\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    parts = date.Split('-');\n        if (parts.Length != 3) return false;\n        int
    yyyy = Int32.Parse(parts[2]);\n        int mm = Int32.Parse(parts[0]);\n        int
    dd = Int32.Parse(parts[1]);\n        if (mm < 1 || mm > 12) return false;\n        if
    (dd < 1) return false;\n        if (mm == 2) {\n            if (yyyy % 4 == 0)
    {\n                if (dd > 29) return false;\n            } else {\n                if
    (dd > 28) return false;\n            }\n        } else if (mm == 4 || mm == 6
    || mm == 9 || mm == 11) {\n            if (dd > 30) return false;\n        } else
    {\n            if (dd > 31) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // your
    code goes here\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d023f7158084d2486430eb07df6cf4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d023f7158084d2486430eb07df6cf4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(date.Length
    < 10 || date.Length > 10) return false;\n        if(date[2] != '-' || date[5]
    != '-') return false;\n        string month = date.Substring(0, 2);\n        string
    day = date.Substring(3, 2);\n        int monthInt = int.Parse(month);\n        int
    dayInt = int.Parse(day);\n        if(monthInt < 1 || monthInt > 12) return false;\n
    \       if(monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 ||
    monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if(dayInt <
    1 || dayInt > 31) return false;\n        }\n        if(monthInt == 4 || monthInt
    == 6 || monthInt == 9 || monthInt == 11) {\n            if(dayInt < 1 || dayInt
    > 30) return false;\n        }\n        if(monthInt == 2) {\n            if(dayInt
    < 1 || dayInt > 29) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    dateParts = date.Split('-');\n        int year = int.Parse(dateParts[2]);\n        int
    month = int.Parse(dateParts[0]);\n        int day = int.Parse(dateParts[1]);\n
    \       return (1 <= month && month <= 12) &&\n                (1 <= day && ((month
    == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||
    month == 12) ? day <= 31 : month == 2 ? day <= 29 : day <= 30));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0000b]
    in <43aab1712a1041e59927d786359c428b>:0 \n  at Problem.Main (System.String[] args)
    [0x0006a] in <43aab1712a1041e59927d786359c428b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0000b] in <43aab1712a1041e59927d786359c428b>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <43aab1712a1041e59927d786359c428b>:0
    \n"
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code goes here\n        string[] splitDate = date.Split('-');\n        if (splitDate.Length
    != 3) {\n            return false;\n        }\n        int month = int.Parse(splitDate[0]);\n
    \       int day = int.Parse(splitDate[1]);\n        int year = int.Parse(splitDate[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1 || day > 31) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        }\n        if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        try {\n
    \           string[] tokens = date.Split('-');\n            DateTime dt = new
    DateTime(int.Parse(tokens[2]), int.Parse(tokens[0]), int.Parse(tokens[1]));\n
    \           return true;\n        } catch {\n            return false;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int day = -1, month = -1, year = -1;\n        if
    (!int.TryParse(parts[0], out month)) return false;\n        if (!int.TryParse(parts[1],
    out day)) return false;\n        if (!int.TryParse(parts[2], out year)) return
    false;\n        if (month < 1 || month > 12) return false;\n        if (day <
    1 || day > 31) return false;\n        if (month == 2) {\n            if (day >
    29) return false;\n        } else if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    parts = date.Split('-');\n        int day, month, year;\n        if (parts.Length
    != 3) return false;\n        if (!int.TryParse(parts[0], out month)) return false;\n
    \       if (!int.TryParse(parts[1], out day)) return false;\n        if (!int.TryParse(parts[2],
    out year)) return false;\n        if (month < 1 || month > 12) return false;\n
    \       if (day < 1 || day > 31) return false;\n        if (month == 2) {\n            if
    (year % 4 == 0) {\n                if (day > 29) return false;\n            }
    else {\n                if (day > 28) return false;\n            }\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (String.IsNullOrEmpty(date))
    return false;\n        if (date.Length != 10) return false;\n        var d = date.Split('-');\n
    \       if (d.Length != 3) return false;\n        int m = Int32.Parse(d[0]);\n
    \       int n = Int32.Parse(d[1]);\n        if (m < 1 || m > 12) return false;\n
    \       if (m == 2) {\n            if (n < 1 || n > 29) return false;\n        }
    else if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12)
    {\n            if (n < 1 || n > 31) return false;\n        } else {\n            if
    (n < 1 || n > 30) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        if
    (!int.TryParse(parts[0], out int month)) {\n            return false;\n        }\n
    \       if (!int.TryParse(parts[1], out int day)) {\n            return false;\n
    \       }\n        if (!int.TryParse(parts[2], out int year)) {\n            return
    false;\n        }\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n
    \       }\n        switch (month) {\n            case 1:\n            case 3:\n
    \           case 5:\n            case 7:\n            case 8:\n            case
    10:\n            case 12:\n                break;\n            case 4:\n            case
    6:\n            case 9:\n            case 11:\n                if (day > 30) {\n
    \                   return false;\n                }\n                break;\n
    \           case 2:\n                if (day > 29) {\n                    return
    false;\n                }\n                break;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    return false;\n        if (date.Length != 10) return false;\n        var dateSplit
    = date.Split('-');\n        if (dateSplit.Length != 3) return false;\n        int
    month, day, year;\n        if (!int.TryParse(dateSplit[0], out month)) return
    false;\n        if (!int.TryParse(dateSplit[1], out day)) return false;\n        if
    (!int.TryParse(dateSplit[2], out year)) return false;\n        if (month < 1 ||
    month > 12) return false;\n        if (month == 2) {\n            if (year % 4
    == 0) {\n                if (day < 1 || day > 29) return false;\n            }
    else {\n                if (day < 1 || day > 28) return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day < 1 || day > 30) return false;\n        } else {\n            if
    (day < 1 || day > 31) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var components
    = date.Split('-');\n        var year = components[2];\n        var month = components[0];\n
    \       var day = components[1];\n        return DateTime.TryParse(date, out DateTime
    _);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0000b]
    in <7e75f8910ad74265b244cdf91472e409>:0 \n  at Problem.Main (System.String[] args)
    [0x0006a] in <7e75f8910ad74265b244cdf91472e409>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0000b] in <7e75f8910ad74265b244cdf91472e409>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <7e75f8910ad74265b244cdf91472e409>:0
    \n"
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    dateArr = date.Split('-');\n        if (dateArr.Length != 3) {\n            return
    false;\n        }\n        try {\n            int month = Int32.Parse(dateArr[0]);\n
    \           int day = Int32.Parse(dateArr[1]);\n            int year = Int32.Parse(dateArr[2]);\n
    \           if (year < 1) {\n                return false;\n            }\n            if
    (month < 1 || month > 12) {\n                return false;\n            }\n            if
    (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month ==
    10 || month == 12) {\n                if (day < 1 || day > 31) {\n                    return
    false;\n                }\n            } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n                if (day < 1 || day > 30) {\n                    return
    false;\n                }\n            } else if (month == 2) {\n                if
    (day < 1 || day > 29) {\n                    return false;\n                }\n
    \           }\n            return true;\n        } catch (Exception e) {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    isValid = true;\n        int days = 0;\n        int m = 0;\n        int y = 0;\n
    \       string[] dateArray = date.Split(\"-\");\n        if (dateArray.Length
    == 3) {\n            if (int.TryParse(dateArray[0], out m) && int.TryParse(dateArray[1],
    out days) && int.TryParse(dateArray[2], out y)) {\n                if (m > 0 &&
    m < 13) {\n                    if (m == 2) {\n                        if (days
    < 1 || days > 29) {\n                            isValid = false;\n                        }\n
    \                   } else if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8
    || m == 10 || m == 12) {\n                        if (days < 1 || days > 31) {\n
    \                           isValid = false;\n                        }\n                    }
    else {\n                        if (days < 1 || days > 30) {\n                            isValid
    = false;\n                        }\n                    }\n                }
    else {\n                    isValid = false;\n                }\n            }
    else {\n                isValid = false;\n            }\n        } else {\n            isValid
    = false;\n        }\n        return isValid;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int[]
    dates = date.Split('-').Select(Int32.Parse).ToArray();\n        int month = dates[0];\n
    \       int day = dates[1];\n        int year = dates[2];\n        if(day < 1)
    return false;\n        if(month < 1 || month > 12) return false;\n        if(year
    < 0) return false;\n        if(day < 1 || day > 31) return false;\n        if(month
    == 2 && day > 29) return false;\n        if(month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if(day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.ValidDate (System.String date) [0x0001b] in <04e63124275d4a7a92560c067c52a2c9>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <04e63124275d4a7a92560c067c52a2c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.ValidDate (System.String date) [0x0001b] in <04e63124275d4a7a92560c067c52a2c9>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <04e63124275d4a7a92560c067c52a2c9>:0
    \n"
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // TODO\n
    \       if (date.Length < 10) return false;\n        if (date[2] != '-' || date[5]
    != '-') return false;\n        int y = int.Parse(date.Substring(6, 4));\n        int
    m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3,
    2));\n        if (m < 1 || m > 12) return false;\n        switch (m) {\n            case
    1:\n            case 3:\n            case 5:\n            case 7:\n            case
    8:\n            case 10:\n            case 12:\n                if (d < 1 || d
    > 31) return false;\n                break;\n            case 4:\n            case
    6:\n            case 9:\n            case 11:\n                if (d < 1 || d
    > 30) return false;\n                break;\n            case 2:\n                if
    (y % 4 == 0) {\n                    if (d < 1 || d > 29) return false;\n                }
    else {\n                    if (d < 1 || d > 28) return false;\n                }\n
    \               break;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int[]
    days = {\n            31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n        };\n
    \       if (date.Length == 0) {\n            return false;\n        }\n        string[]
    dateSlashes = date.Split('-');\n        if (dateSlashes.Length != 3) {\n            return
    false;\n        }\n        if (int.Parse(dateSlashes[0]) < 1 || int.Parse(dateSlashes[0])
    > 12) {\n            return false;\n        }\n        if (int.Parse(dateSlashes[1])
    < 1 || int.Parse(dateSlashes[1]) > days[int.Parse(dateSlashes[0]) - 1]) {\n            return
    false;\n        }\n        if (int.Parse(dateSlashes[2]) < 1) {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int year,
    month, day;\n        if (date.Length == 0) {\n            return false;\n        }\n
    \       if (!Int32.TryParse(date.Substring(0, 2), out month)) {\n            return
    false;\n        }\n        if (!Int32.TryParse(date.Substring(3, 2), out day))
    {\n            return false;\n        }\n        if (!Int32.TryParse(date.Substring(6,
    4), out year)) {\n            return false;\n        }\n        if (month < 1
    || month > 12) {\n            return false;\n        }\n        if (month == 2)
    {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day < 1 || day > 30) {\n                return false;\n            }\n
    \       } else {\n            if (day < 1 || day > 31) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00059] in <ca1dd77e65964b4fbe8250a215d30564>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <ca1dd77e65964b4fbe8250a215d30564>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.ValidDate (System.String
    date) [0x00059] in <ca1dd77e65964b4fbe8250a215d30564>:0 \n  at Problem.Main (System.String[]
    args) [0x000c3] in <ca1dd77e65964b4fbe8250a215d30564>:0 \n"
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if(date.Length
    != 10) return false;\n        string[] d = date.Split('-');\n        if(d.Length
    != 3) return false;\n        int n;\n        for(int i = 0; i < 3; i++) {\n            if(!int.TryParse(d[i],
    out n)) return false;\n        }\n        int month = int.Parse(d[0]);\n        int
    day = int.Parse(d[1]);\n        if(month < 1 || month > 12) return false;\n        switch(month)
    {\n            case 1:\n            case 3:\n            case 5:\n            case
    7:\n            case 8:\n            case 10:\n            case 12:\n                if(day
    < 1 || day > 31) return false;\n                break;\n            case 4:\n
    \           case 6:\n            case 9:\n            case 11:\n                if(day
    < 1 || day > 30) return false;\n                break;\n            case 2:\n
    \               if(day < 1 || day > 29) return false;\n                break;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        string[] items = date.Split('-');\n
    \       if (items.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(items[0]);\n        int day = int.Parse(items[1]);\n        if
    (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 1 || month == 3 || month ==
    5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if
    (day < 1 || day > 31) {\n                return false;\n            }\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day < 1 || day > 30) {\n                return false;\n            }\n        }
    else {\n            return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    return false;\n        if (date.Length != 10) return false;\n        if (date[2]
    != '-' || date[5] != '-') return false;\n        var mm = date.Substring(0, 2);\n
    \       var dd = date.Substring(3, 2);\n        var yyyy = date.Substring(6, 4);\n
    \       if (!dd.All(char.IsDigit) || !mm.All(char.IsDigit) || !yyyy.All(char.IsDigit))
    return false;\n        var month = int.Parse(mm);\n        var day = int.Parse(dd);\n
    \       var year = int.Parse(yyyy);\n        if (year < 1582) return false;\n
    \       if (year % 4 == 0 && year % 100 != 0) {\n            if (month == 2 &&
    day > 29) return false;\n        } else if (month == 2 && day > 28) return false;\n
    \       switch (month) {\n            case 1:\n            case 3:\n            case
    5:\n            case 7:\n            case 8:\n            case 10:\n            case
    12:\n                if (day > 31) return false;\n                break;\n            case
    4:\n            case 6:\n            case 9:\n            case 11:\n                if
    (day > 30) return false;\n                break;\n            default:\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        if (!int.TryParse(parts[0], out int mm)) return false;\n
    \       if (!int.TryParse(parts[1], out int dd)) return false;\n        if (!int.TryParse(parts[2],
    out int yyyy)) return false;\n        if (mm < 1 || mm > 12) return false;\n        switch
    (mm) {\n            case 1:\n            case 3:\n            case 5:\n            case
    7:\n            case 8:\n            case 10:\n            case 12:\n                if
    (dd < 1 || dd > 31) return false;\n                break;\n            case 4:\n
    \           case 6:\n            case 9:\n            case 11:\n                if
    (dd < 1 || dd > 30) return false;\n                break;\n            case 2:\n
    \               if (dd < 1 || dd > 29) return false;\n                break;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // The
    date should be in the format: mm-dd-yyyy\n        if (date.Length != 10) return
    false;\n        var p = date.Split('-');\n        if (p.Length != 3) return false;\n
    \       int month = 0;\n        int day = 0;\n        int year = 0;\n        if
    (!int.TryParse(p[0], out month)) return false;\n        if (!int.TryParse(p[1],
    out day)) return false;\n        if (!int.TryParse(p[2], out year)) return false;\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==
    11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    parts = date.Split('-');\n        int month = Int32.Parse(parts[0]);\n        int
    day = Int32.Parse(parts[1]);\n        int year = Int32.Parse(parts[2]);\n        if(month
    > 12 || month < 1) {\n            return false;\n        }\n        else if((month
    == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||
    month == 12) && (day > 31 || day < 1)) {\n            return false;\n        }\n
    \       else if((month == 4 || month == 6 || month == 9 || month == 11) && (day
    > 30 || day < 1)) {\n            return false;\n        }\n        else if(month
    == 2 && day > 29) {\n            return false;\n        }\n        else if(month
    == 2 && day == 29 && !isLeapYear(year)) {\n            return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9jnrl1iw.cs(43,45): error CS0103: The name ''isLeapYear'' does not exist
    in the current context

    '
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // write
    code here\n        if (String.IsNullOrEmpty(date)) {\n            return false;\n
    \       }\n        string[] time = date.Split('-');\n        if (time.Length !=
    3) {\n            return false;\n        }\n        int year = int.Parse(time[2]);\n
    \       int month = int.Parse(time[0]);\n        int day = int.Parse(time[1]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (year % 4 == 0 && year % 100 != 0 ||
    year % 400 == 0) {\n                if (day < 1 || day > 29) {\n                    return
    false;\n                }\n            } else {\n                if (day < 1 ||
    day > 28) {\n                    return false;\n                }\n            }\n
    \       } else if (month == 1 || month == 3 || month == 5 || month == 7 || month
    == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n
    \               return false;\n            }\n        } else {\n            if
    (day < 1 || day > 30) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (String.IsNullOrEmpty(date))
    return false;\n        string[] date_split = date.Split('-');\n        if (date_split.Length
    != 3) return false;\n        if (date_split[0].Length != 2 || date_split[1].Length
    != 2 || date_split[2].Length != 4) return false;\n        int day = Convert.ToInt32(date_split[0]);\n
    \       int month = Convert.ToInt32(date_split[1]);\n        int year = Convert.ToInt32(date_split[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (year % 4 == 0) {\n                if (day < 1 || day > 29) return
    false;\n            } else {\n                if (day < 1 || day > 28) return
    false;\n            }\n        } else if (month == 1 || month == 3 || month ==
    5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if
    (day < 1 || day > 31) return false;\n        } else {\n            if (day < 1
    || day > 30) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8cc1d32a91b42bbbb889be9d8cdea04>:0
    \n"
  stdout: ''
  timestamp: 1660008909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) return false;\n        var (dd, mm, yyyy) = date.Split(\"-\").Select(x =>
    int.Parse(x)).ToArray();\n        var days = new [] { 0, 31, 29, 31, 30, 31, 30,
    31, 31, 30, 31, 30, 31 };\n        if (dd < 1 || dd > days[mm]) return false;\n
    \       if (mm < 1 || mm > 12) return false;\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppd2z55hb.cs(28,30): error CS1061: ''int[]'' does not contain a definition
    for ''Deconstruct'' and no accessible extension method ''Deconstruct'' accepting
    a first argument of type ''int[]'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmppd2z55hb.cs(28,30): error CS8129: No suitable ''Deconstruct'' instance
    or extension method was found for type ''int[]'', with 3 out parameters and a
    void return type.

    /tmp/tmppd2z55hb.cs(28,14): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''dd''.

    /tmp/tmppd2z55hb.cs(28,18): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''mm''.

    /tmp/tmppd2z55hb.cs(28,22): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''yyyy''.

    '
  timestamp: 1660008909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n\n        var str = date.Split('-');\n
    \       var month = Int32.Parse(str[0]);\n        var day = Int32.Parse(str[1]);\n
    \       var year = Int32.Parse(str[2]);\n\n        if (year < 1900 || year > 2100)
    {\n            return false;\n        }\n\n        if (month < 1 || month > 12)
    {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n
    \           return false;\n        }\n\n        if (day > 30 && (month == 4 ||
    month == 6 || month == 9 || month == 11)) {\n            return false;\n        }\n\n
    \       if (day > 29 && month == 2) {\n            return false;\n        }\n\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0002c]
    in <de661ab90b1d423b95b64c6ea87be7f5>:0 \n  at Problem.Main (System.String[] args)
    [0x000c3] in <de661ab90b1d423b95b64c6ea87be7f5>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0002c] in <de661ab90b1d423b95b64c6ea87be7f5>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <de661ab90b1d423b95b64c6ea87be7f5>:0
    \n"
  stdout: ''
  timestamp: 1660008909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    !(date.Length == 0 ||\n            !date.Split('-').SequenceEqual(date.Split('-').Take(3))
    ||\n            !Int32.TryParse(date.Split('-')[0], out int month) ||\n            !Int32.TryParse(date.Split('-')[1],
    out int day) ||\n            !Int32.TryParse(date.Split('-')[2], out int year)
    ||\n            month < 1 || month > 12 ||\n            (month % 2 == 0 && month
    < 8 && day < 1 || day > 30) ||\n            (month % 2 == 1 && month < 8 && day
    < 1 || day > 31) ||\n            (month % 2 == 0 && month > 7 && day < 1 || day
    > 31) ||\n            (month % 2 == 1 && month > 7 && day < 1 || day > 30) ||\n
    \           (month == 2 && day < 1 || day > 29) ||\n            year < 1);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0004e]
    in <0ec570228de143438d5fb3d758251d95>:0 \n  at Problem.Main (System.String[] args)
    [0x000c3] in <0ec570228de143438d5fb3d758251d95>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0004e] in <0ec570228de143438d5fb3d758251d95>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <0ec570228de143438d5fb3d758251d95>:0
    \n"
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    valid = true;\n        string[] date_split = date.Split('-');\n        if(date_split.Length
    == 3) {\n            int month = Convert.ToInt32(date_split[0]);\n            int
    day = Convert.ToInt32(date_split[1]);\n            int year = Convert.ToInt32(date_split[2]);\n
    \           if(month < 1 || month > 12) {\n                valid = false;\n            }\n
    \           if(day < 1 || day > 31) {\n                valid = false;\n            }\n
    \           if(month == 2) {\n                if(day > 29) {\n                    valid
    = false;\n                }\n            }\n            if(month == 4 || month
    == 6 || month == 9 || month == 11) {\n                if(day > 30) {\n                    valid
    = false;\n                }\n            }\n        } else {\n            valid
    = false;\n        }\n        return valid;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    < 10) return false;\n        if (date[2] != '-' || date[5] != '-') return false;\n
    \       int d = 0, m = 0, y = 0;\n        try {\n            d = int.Parse(date.Substring(0,
    2));\n            m = int.Parse(date.Substring(3, 2));\n            y = int.Parse(date.Substring(6,
    4));\n        } catch (Exception) {\n            return false;\n        }\n        if
    (d < 1 || d > 31) return false;\n        if (m < 1 || m > 12) return false;\n
    \       if (m == 2 && d > 29) return false;\n        if (m == 4 || m == 6 || m
    == 9 || m == 11) {\n            if (d > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <479647b6e491413aa3b446d164562d6c>:0
    \n"
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        //..:\n
    \       bool valid = false;\n        string[] months = { \"01\", \"02\", \"03\",
    \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\" };\n        string[]
    days31 = { \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\" };\n        string[]
    days30 = { \"04\", \"06\", \"09\", \"11\" };\n        string[] days28 = { \"02\"
    };\n        string[] format = date.Split('-');\n        if (format.Length == 3)
    {\n            string day = format[1];\n            string month = format[0];\n
    \           string year = format[2];\n            if (months.Contains(month))
    {\n                if (days31.Contains(month)) {\n                    if (int.Parse(day)
    > 0 && int.Parse(day) < 32) {\n                        valid = true;\n                    }\n
    \               } else if (days30.Contains(month)) {\n                    if (int.Parse(day)
    > 0 && int.Parse(day) < 31) {\n                        valid = true;\n                    }\n
    \               } else if (days28.Contains(month)) {\n                    if (int.Parse(day)
    > 0 && int.Parse(day) < 30) {\n                        valid = true;\n                    }\n
    \               }\n            }\n        }\n        return valid;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    date_split = date.Split('-');\n        // length is 3\n        if (date_split.Length
    != 3) {\n            return false;\n        }\n        // not all empty\n        for
    (int i = 0; i < date_split.Length; i++) {\n            if (date_split[i] == \"\")
    {\n                return false;\n            }\n        }\n        // all digits\n
    \       for (int i = 0; i < date_split.Length; i++) {\n            for (int j
    = 0; j < date_split[i].Length; j++) {\n                if (!Char.IsDigit(date_split[i][j]))
    {\n                    return false;\n                }\n            }\n        }\n
    \       // day\n        int day = Int32.Parse(date_split[1]);\n        if (day
    < 1 || day > 31) {\n            return false;\n        }\n        // month\n        int
    month = Int32.Parse(date_split[0]);\n        if (month < 1 || month > 12) {\n
    \           return false;\n        }\n        if (month == 2) {\n            if
    (day > 29) {\n                return false;\n            }\n        }\n        if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) {\n                return false;\n            }\n        }\n        // year\n
    \       int year = Int32.Parse(date_split[2]);\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var d
    = date.Split(\"-\");\n        if (d.Length != 3) return false;\n        int.TryParse(d[0],
    out int month);\n        int.TryParse(d[1], out int day);\n        int.TryParse(d[2],
    out int year);\n        if (year < 1000 || year > 9999) return false;\n        if
    (month < 1 || month > 12) return false;\n        switch (month) {\n            case
    1:\n            case 3:\n            case 5:\n            case 7:\n            case
    8:\n            case 10:\n            case 12:\n                if (day < 1 ||
    day > 31) return false;\n                break;\n            case 4:\n            case
    6:\n            case 9:\n            case 11:\n                if (day < 1 ||
    day > 30) return false;\n                break;\n            case 2:\n                if
    (year % 4 == 0) {\n                    if (day < 1 || day > 29) return false;\n
    \               } else {\n                    if (day < 1 || day > 28) return
    false;\n                }\n                break;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    ans = true;\n        // Catch condition 4.\n        if (date.Length != 10) { ans
    = false; }\n        string[] dateParts = date.Split('-');\n        // Catch condition
    3.\n        if (dateParts.Length != 3) { ans = false; }\n        int day, month,
    year;\n        // Catch condition 1.\n        if (!int.TryParse(dateParts[0],
    out month)) { ans = false; }\n        if (!int.TryParse(dateParts[1], out day))
    { ans = false; }\n        if (!int.TryParse(dateParts[2], out year)) { ans = false;
    }\n        // Catch condition 2.\n        if (month < 1 || month > 12) { ans =
    false; }\n        if (month == 2) {\n            if (day < 1 || day > 29) { ans
    = false; }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day < 1 || day > 30) { ans = false; }\n        } else
    {\n            if (day < 1 || day > 31) { ans = false; }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0004e]
    in <e37cf9560308473bb4c13633e86278fa>:0 \n  at Problem.Main (System.String[] args)
    [0x0006a] in <e37cf9560308473bb4c13633e86278fa>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0004e] in <e37cf9560308473bb4c13633e86278fa>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <e37cf9560308473bb4c13633e86278fa>:0
    \n"
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    != 10) return false;\n        var p = date.Split('-');\n        if (p.Length !=
    3) return false;\n        int m, d, y;\n        if (!Int32.TryParse(p[0], out
    m)) return false;\n        if (!Int32.TryParse(p[1], out d)) return false;\n        if
    (!Int32.TryParse(p[2], out y)) return false;\n        if (y < 2020) return false;\n
    \       if (m < 1 || m > 12) return false;\n        if (d < 1 || d > 31) return
    false;\n        if (m % 2 == 0 && m < 8) {\n            if (d > 30) return false;\n
    \       } else if (m % 2 == 1 && m > 8) {\n            if (d > 30) return false;\n
    \       } else if (m == 2) {\n            if (d > 29) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <887a017c192b4a6da03d31483c569e4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <887a017c192b4a6da03d31483c569e4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (String.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int.TryParse(parts[0],
    out int month);\n        int.TryParse(parts[1], out int day);\n        int.TryParse(parts[2],
    out int year);\n        if (month < 1 || month > 12) {\n            return false;\n
    \       }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n
    \               return false;\n            }\n        } else if (month == 4 ||
    month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30)
    {\n                return false;\n            }\n        } else {\n            if
    (day < 1 || day > 31) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (String.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        string[] dateSplit = date.Split('-');\n
    \       if (dateSplit.Length != 3) {\n            return false;\n        }\n        //
    if (DateTime.TryParse(date, out DateTime j)) {\n        //     return true;\n
    \       // }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e72c7d36c2947ef927e83257e178709>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e72c7d36c2947ef927e83257e178709>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d80e977802a74260b72d2e7062949b17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d80e977802a74260b72d2e7062949b17>:0 \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code goes here...\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18f4ac76eca9492f8ca721c86a8ec98c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18f4ac76eca9492f8ca721c86a8ec98c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int year
    = 0;\n        int month = 0;\n        int day = 0;\n        if (String.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        var dateSplit = date.Split(\"-\");\n
    \       if (dateSplit.Length != 3) {\n            return false;\n        }\n        month
    = Int32.Parse(dateSplit[0]);\n        day = Int32.Parse(dateSplit[1]);\n        year
    = Int32.Parse(dateSplit[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n
    \       }\n        if (month == 2) {\n            if (day > 29) {\n                return
    false;\n            }\n        }\n        if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    d = date.Split('-');\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5957f5e8625439283fe3126b7eed172>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5957f5e8625439283fe3126b7eed172>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    split = date.Split('-');\n        if (split.Length != 3) {\n            return
    false;\n        }\n        int month = Int32.Parse(split[0]);\n        int day
    = Int32.Parse(split[1]);\n        int year = Int32.Parse(split[2]);\n        if
    (year < 1900 || year > 2100) {\n            return false;\n        }\n        if
    (month < 1 || month > 12) {\n            return false;\n        }\n        if
    (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month ==
    10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else if (month == 2) {\n            if (day <
    1 || day > 29) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) return false;\n        int[] dashLocs = new int[2];\n        int i = 0;\n
    \       for (int c = 0; c < date.Length; c++) {\n            if (date[c] == '-')
    {\n                dashLocs[i] = c;\n                i++;\n            }\n        }\n
    \       string month = date.Substring(0, dashLocs[0]);\n        string day = date.Substring(dashLocs[0]
    + 1, dashLocs[1] - dashLocs[0] - 1);\n        string year = date.Substring(dashLocs[1]
    + 1);\n        if (dashLocs[0] != 2 || dashLocs[1] != 5) return false;\n        if
    (month.Length != 2 || day.Length != 2 || year.Length != 4) return false;\n        int
    dayInt = Int32.Parse(day);\n        int monthInt = Int32.Parse(month);\n        int
    yearInt = Int32.Parse(year);\n        if (monthInt < 1 || monthInt > 12) return
    false;\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29)
    return false;\n        } else if (monthInt == 4 || monthInt == 6 || monthInt ==
    9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) return false;\n
    \       } else {\n            if (dayInt < 1 || dayInt > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot
    be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00066] in <1750cc1ceb764d1a92176271f9213148>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <1750cc1ceb764d1a92176271f9213148>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length
    cannot be less than zero.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00066] in <1750cc1ceb764d1a92176271f9213148>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <1750cc1ceb764d1a92176271f9213148>:0
    \n"
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    fields = date.Split('-');\n        if (fields.Length != 3) return false;\n        int
    year = int.Parse(fields[2]);\n        int month = int.Parse(fields[0]);\n        int
    day = int.Parse(fields[1]);\n        if (month < 1 || month > 12) return false;\n
    \       if (day < 1) return false;\n        if (month == 1 || month == 3 || month
    == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if
    (day > 31) return false;\n        } else if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day > 30) return false;\n        } else
    if (month == 2) {\n            if (day > 29) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        var validDate = DateTime.TryParse(date,
    out var dt);\n        if (!validDate) {\n            return false;\n        }\n
    \       var day = dt.Day;\n        var month = dt.Month;\n        var year = dt.Year;\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1 || day > DateTime.DaysInMonth(year, month)) {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a82848c14ef43cdbb87cf7f1eda2c02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a82848c14ef43cdbb87cf7f1eda2c02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        var d = date.Split(\"-\".ToCharArray());\n
    \       if (d.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(d[0]);\n        int day = int.Parse(d[1]);\n        int year
    = int.Parse(d[2]);\n        if (year < 0) {\n            return false;\n        }\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       switch (month) {\n            case 1:\n            case 3:\n            case
    5:\n            case 7:\n            case 8:\n            case 10:\n            case
    12:\n                if (day < 1 || day > 31) {\n                    return false;\n
    \               }\n                break;\n            case 4:\n            case
    6:\n            case 9:\n            case 11:\n                if (day < 1 ||
    day > 30) {\n                    return false;\n                }\n                break;\n
    \           case 2:\n                if (day < 1 || day > 29) {\n                    return
    false;\n                }\n                break;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    splitDate = date.Split('-');\n        int month = int.Parse(splitDate[0]);\n        int
    day = int.Parse(splitDate[1]);\n        int year = int.Parse(splitDate[2]);\n
    \       bool isLeapYear = false;\n        switch (month) {\n            case 1:\n
    \           case 3:\n            case 5:\n            case 7:\n            case
    8:\n            case 10:\n            case 12:\n                if (day > 31)
    return false;\n                break;\n            case 4:\n            case 6:\n
    \           case 9:\n            case 11:\n                if (day > 30) return
    false;\n                break;\n            case 2:\n                if (year
    % 4 == 0) isLeapYear = true;\n                if (isLeapYear) {\n                    if
    (day > 29) return false;\n                } else {\n                    if (day
    > 28) return false;\n                }\n                break;\n            default:\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14139f68e71b48709f59f69297e919c8>:0
    \n\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <14139f68e71b48709f59f69297e919c8>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <14139f68e71b48709f59f69297e919c8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  a"
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var dateSplit
    = date.Split('-');\n        if (dateSplit.Length != 3) return false;\n        if
    (!int.TryParse(dateSplit[0], out int month)) return false;\n        if (!int.TryParse(dateSplit[1],
    out int day)) return false;\n        if (!int.TryParse(dateSplit[2], out int year))
    return false;\n        if (year < 0) return false;\n        if (month < 1 || month
    > 12) return false;\n        if (day < 1) return false;\n        if (day > 31)
    return false;\n        if (month == 2) {\n            if (day > 29) return false;\n
    \           if (day == 29) {\n                if (year % 4 != 0) return false;\n
    \               if (year % 100 == 0 && year % 400 != 0) return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day > 30) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n
    \       }\n\n        if (month == 2) {\n            if (day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day > 30) {\n                return false;\n
    \           }\n        }\n\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d80e977802a74260b72d2e7062949b17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d80e977802a74260b72d2e7062949b17>:0 \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Write
    code here\n        try {\n            var result = DateTime.ParseExact(date, \"MM-dd-yyyy\",
    null);\n            if (result > DateTime.Today) {\n                return false;\n
    \           } else {\n                return true;\n            }\n        } catch
    (Exception e) {\n            return false;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int[]
    months = {1, 3, 5, 7, 8, 10, 12};\n        if (date.Split('-').Length != 3) {\n
    \           return false;\n        }\n        string[] date_parts = date.Split('-');\n
    \       int day = Convert.ToInt32(date_parts[1]);\n        int month = Convert.ToInt32(date_parts[0]);\n
    \       int year = Convert.ToInt32(date_parts[2]);\n        if (day > 31 || day
    < 1) {\n            return false;\n        }\n        if (months.Contains(month))
    {\n            if (day > 31) {\n                return false;\n            }\n
    \       } else if (month == 2) {\n            if (day > 29) {\n                return
    false;\n            }\n        } else {\n            if (day > 30) {\n                return
    false;\n            }\n        }\n        if (month > 12 || month < 1) {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var parts
    = date.Split('-');\n        if (parts.Length != 3) return false;\n        int
    day = int.Parse(parts[1]);\n        int month = int.Parse(parts[0]);\n        int
    year = int.Parse(parts[2]);\n        if (year < 1753) return false;\n        if
    (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return
    false;\n        switch (month) {\n            case 1:\n            case 3:\n            case
    5:\n            case 7:\n            case 8:\n            case 10:\n            case
    12:\n                break;\n            case 4:\n            case 6:\n            case
    9:\n            case 11:\n                if (day > 30) return false;\n                break;\n
    \           case 2:\n                if (day > 29) return false;\n                break;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        try {\n
    \           DateTime dt = DateTime.Parse(date);\n            return true;\n        }
    catch {\n            return false;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f94785ace57e4c6b9382412ef22a435a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f94785ace57e4c6b9382412ef22a435a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    result = false;\n        int year = 0;\n        int month = 0;\n        int day
    = 0;\n        if (DateTime.TryParse(date, out DateTime d)) {\n            year
    = d.Year;\n            month = d.Month;\n            day = d.Day;\n            if
    (month > 0 && month < 13) {\n                if (month == 1 || month == 3 || month
    == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                    if
    (day > 0 && day < 32) {\n                        result = true;\n                    }\n
    \               } else if (month == 4 || month == 6 || month == 9 || month ==
    11) {\n                    if (day > 0 && day < 31) {\n                        result
    = true;\n                    }\n                } else if (month == 2) {\n                    if
    (day > 0 && day < 30) {\n                        result = true;\n                    }\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb5e2ce55b4b4417bbc31a3e6e1451ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb5e2ce55b4b4417bbc31a3e6e1451ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    != 10) {\n            return false;\n        }\n        for (int i = 0; i < date.Length;
    i++) {\n            if (i == 2 || i == 5) {\n                if (date[i] != '-')
    {\n                    return false;\n                }\n            } else {\n
    \               if (!char.IsDigit(date[i])) {\n                    return false;\n
    \               }\n            }\n        }\n        string[] split = date.Split('-');\n
    \       int month = int.Parse(split[0]);\n        int day = int.Parse(split[1]);\n
    \       int year = int.Parse(split[2]);\n        if (month < 1 || month > 12)
    {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n
    \           return false;\n        }\n        if (month == 2) {\n            if
    (day > 29) {\n                return false;\n            }\n        }\n        if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    parts = date.Split('-');\n        if (parts.Length != 3) {\n            return
    false;\n        }\n        try {\n            int month = int.Parse(parts[0]);\n
    \           int day = int.Parse(parts[1]);\n            int year = int.Parse(parts[2]);\n
    \           if (month < 1 || month > 12) {\n                return false;\n            }\n
    \           if (day < 1 || day > DateTime.DaysInMonth(year, month)) {\n                return
    false;\n            }\n            return true;\n        } catch (Exception) {\n
    \           return false;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d80e977802a74260b72d2e7062949b17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d80e977802a74260b72d2e7062949b17>:0 \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    res = true;\n        try {\n            string format = \"MM-dd-yyyy\";\n            string[]
    dates = date.Split('-');\n            if (dates.Length == 3) {\n                DateTime
    dt = DateTime.ParseExact(date, format, null);\n            } else {\n                return
    false;\n            }\n        } catch (Exception) {\n            res = false;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) return false;\n        var dateArray = date.Split('-');\n        try {\n
    \           int month = int.Parse(dateArray[0]);\n            int day = int.Parse(dateArray[1]);\n
    \           int year = int.Parse(dateArray[2]);\n            if (month > 12 ||
    month < 1) return false;\n            if (month == 1 || month == 3 || month ==
    5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                if
    (day > 31 || day < 1) return false;\n            } else if (month == 4 || month
    == 6 || month == 9 || month == 11) {\n                if (day > 30 || day < 1)
    return false;\n            } else if (month == 2) {\n                if (year
    % 4 == 0) {\n                    if (day > 29 || day < 1) return false;\n                }
    else {\n                    if (day > 28 || day < 1) return false;\n                }\n
    \           }\n            return true;\n        } catch (Exception) {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d80e977802a74260b72d2e7062949b17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d80e977802a74260b72d2e7062949b17>:0 \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        if (date.Length != 10)
    {\n            return false;\n        }\n        if (date[2] != '-' || date[5]
    != '-') {\n            return false;\n        }\n        string month = date.Substring(0,
    2);\n        string day = date.Substring(3, 2);\n        string year = date.Substring(6,
    4);\n        int temp;\n        if (!int.TryParse(month, out temp)) {\n            return
    false;\n        }\n        if (!int.TryParse(day, out temp)) {\n            return
    false;\n        }\n        if (!int.TryParse(year, out temp)) {\n            return
    false;\n        }\n        if (temp < 1 || temp > 12) {\n            return false;\n
    \       }\n        int m = int.Parse(month);\n        if (m == 2) {\n            if
    (int.Parse(day) < 1 || int.Parse(day) > 29) {\n                return false;\n
    \           }\n        } else if (m == 1 || m == 3 || m == 5 || m == 7 || m ==
    8 || m == 10 || m == 12) {\n            if (int.Parse(day) < 1 || int.Parse(day)
    > 31) {\n                return false;\n            }\n        } else {\n            if
    (int.Parse(day) < 1 || int.Parse(day) > 30) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07d051b1c54f4024bc058ead80e5692e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07d051b1c54f4024bc058ead80e5692e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008910
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d80e977802a74260b72d2e7062949b17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d80e977802a74260b72d2e7062949b17>:0 \n"
  stdout: ''
  timestamp: 1660008904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // check
    if it's not empty\n        if (date.Length == 0) {\n            return false;\n
    \       }\n        // check if it's mm-dd-yyyy\n        string[] s = date.Split('-');\n
    \       if (s.Length != 3) {\n            return false;\n        }\n        //
    check if the months is between 1 and 12\n        if (Int32.Parse(s[0]) > 12 ||
    Int32.Parse(s[0]) < 1) {\n            return false;\n        }\n        // check
    if the days is between 1 and 31 and between 1 and 30 and between 1 and 29 depending
    on the month\n        if (Int32.Parse(s[1]) > 31 || Int32.Parse(s[1]) < 1) {\n
    \           return false;\n        }\n        if (Int32.Parse(s[0]) == 4 || Int32.Parse(s[0])
    == 6 || Int32.Parse(s[0]) == 9 || Int32.Parse(s[0]) == 11) {\n            if (Int32.Parse(s[1])
    > 30) {\n                return false;\n            }\n        }\n        if (Int32.Parse(s[0])
    == 2) {\n            if (Int32.Parse(s[1]) > 29) {\n                return false;\n
    \           }\n        }\n        // return true if all the condition is checked\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code goes here.\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59f1b4e383f0479fae6f6ac8fc3ef31f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59f1b4e383f0479fae6f6ac8fc3ef31f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        string[] dt = date.Split('-');\n
    \       if (dt.Length != 3) {\n            return false;\n        }\n        int
    mn = int.Parse(dt[0]);\n        int dy = int.Parse(dt[1]);\n        int yr = int.Parse(dt[2]);\n
    \       if (mn < 1 || mn > 12) {\n            return false;\n        }\n        if
    (mn == 2) {\n            if (dy < 1 || dy > 29) {\n                return false;\n
    \           }\n        } else if (mn == 4 || mn == 6 || mn == 9 || mn == 11) {\n
    \           if (dy < 1 || dy > 30) {\n                return false;\n            }\n
    \       } else {\n            if (dy < 1 || dy > 31) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Good
    luck!\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73a2c59b1d9344de9e7cc3c93bc1c438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73a2c59b1d9344de9e7cc3c93bc1c438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code goes here.\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6238702f4ede4439a05ae633ffc41ff7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6238702f4ede4439a05ae633ffc41ff7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    mdy = date.Split('-');\n        if (mdy.Length != 3) return false;\n        if
    (mdy[0].Length != 2 || mdy[1].Length != 2 || mdy[2].Length != 4) return false;\n
    \       int month, day, year;\n        if (!Int32.TryParse(mdy[0], out month)
    || !Int32.TryParse(mdy[1], out day) || !Int32.TryParse(mdy[2], out year)) return
    false;\n        if (month < 1 || month > 12) return false;\n        if (day <
    1 || day > 31) return false;\n        if (day == 31 && (month == 4 || month ==
    6 || month == 9 || month == 11)) return false;\n        if (month == 2) {\n            if
    (day > 29) return false;\n            if (day == 29 && !(year % 4 == 0 && (year
    % 100 != 0 || year % 400 == 0))) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008910
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    == 0) {\n            return false;\n        }\n        var m = int.Parse(date.Substring(0,
    2));\n        var d = int.Parse(date.Substring(3, 2));\n        var y = int.Parse(date.Substring(6,
    4));\n        var v = DateTime.TryParse(date, out DateTime dt);\n        return
    v;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0002c] in <64fe8e46b09945e987228a24e63b5870>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <64fe8e46b09945e987228a24e63b5870>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0002c] in <64fe8e46b09945e987228a24e63b5870>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <64fe8e46b09945e987228a24e63b5870>:0
    \n"
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code here\n        string[] dateArr = date.Split(\"-\");\n        if (dateArr.Length
    != 3) {\n            return false;\n        }\n        int month = Int32.Parse(dateArr[0]);\n
    \       int day = Int32.Parse(dateArr[1]);\n        int year = Int32.Parse(dateArr[2]);\n
    \       if (month > 12 || month < 1) {\n            return false;\n        }\n
    \       if (day > 31 || day < 1) {\n            return false;\n        }\n        if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) {\n                return false;\n            }\n        }\n        if (month
    == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        if (date.Length != 10) {\n            return
    false;\n        }\n        if (date[2] != '-' || date[5] != '-') {\n            return
    false;\n        }\n        int[] nums = date.Split(new char[] { '-' }).Select(x
    => int.Parse(x)).ToArray();\n        if (nums[0] < 1 || nums[0] > 12) {\n            return
    false;\n        }\n        if (nums[0] == 2) {\n            if (nums[1] < 1 ||
    nums[1] > 29) {\n                return false;\n            }\n        } else
    if (nums[0] == 1 || nums[0] == 3 || nums[0] == 5 || nums[0] == 7 || nums[0] ==
    8 || nums[0] == 10 || nums[0] == 12) {\n            if (nums[1] < 1 || nums[1]
    > 31) {\n                return false;\n            }\n        } else {\n            if
    (nums[1] < 1 || nums[1] > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code goes here\n        var split = date.Split(\"-\");\n        int month, day,
    year;\n        if (split.Length != 3) return false;\n        if (!int.TryParse(split[0],
    out month)) return false;\n        if (!int.TryParse(split[1], out day)) return
    false;\n        if (!int.TryParse(split[2], out year)) return false;\n        if
    (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return
    false;\n        if (month == 2) {\n            if (day > 29) return false;\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    {\n            return false;\n        }\n        int[] separators = new int[2];\n
    \       for (int i = 0; i < date.Length; i++) {\n            if (date[i] == '-')
    {\n                separators[i / 5] = i;\n            }\n        }\n        int
    month = int.Parse(date.Substring(0, separators[0]));\n        int day = int.Parse(date.Substring(separators[0]
    + 1, separators[1] - separators[0] - 1));\n        int year = int.Parse(date.Substring(separators[1]
    + 1));\n        if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day < 1 || day > 28) {\n                return
    false;\n            }\n        } else if (month % 2 == 0) {\n            if (day
    < 1 || day > 30) {\n                return false;\n            }\n        } else
    {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00060] in <3048c3e1a97641399d21f893df202648>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <3048c3e1a97641399d21f893df202648>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x00060] in <3048c3e1a97641399d21f893df202648>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <3048c3e1a97641399d21f893df202648>:0
    \n"
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // write
    your code here\n        if (date.Length == 0) {\n            return false;\n        }\n
    \       var parts = date.Split('-');\n        if (parts.Length != 3) {\n            return
    false;\n        }\n        try {\n            int month = Int32.Parse(parts[0]);\n
    \           int day = Int32.Parse(parts[1]);\n            int year = Int32.Parse(parts[2]);\n
    \           if (month < 1 || month > 12) {\n                return false;\n            }\n
    \           if (month == 2) {\n                if (day < 1 || day > 29) {\n                    return
    false;\n                }\n            } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n                if (day < 1 || day > 30) {\n                    return
    false;\n                }\n            } else {\n                if (day < 1 ||
    day > 31) {\n                    return false;\n                }\n            }\n
    \           return true;\n        } catch (Exception e) {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        bool
    isValid = true;\n        bool haveDelimiter = false;\n        int length = date.Length;\n
    \       if (length == 0) {\n            return false;\n        }\n        if (length
    != 10) {\n            return false;\n        }\n        int day = 0;\n        int
    month = 0;\n        int year = 0;\n        if (date[2] == '-' && date[5] == '-')
    {\n            haveDelimiter = true;\n        }\n        if (!haveDelimiter) {\n
    \           return false;\n        }\n        try {\n            month = int.Parse(date.Substring(0,
    2));\n            day = int.Parse(date.Substring(3, 2));\n            year = int.Parse(date.Substring(6,
    4));\n        } catch (Exception e) {\n            return false;\n        }\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1 || day > 31) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)
    {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        return isValid;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        var valid
    = false;\n        if (!string.IsNullOrEmpty(date)) {\n            if (date.Length
    == 10) {\n                var dateParts = date.Split('-');\n                if
    (dateParts.Length == 3) {\n                    var month = int.Parse(dateParts[0]);\n
    \                   var day = int.Parse(dateParts[1]);\n                    var
    year = int.Parse(dateParts[2]);\n                    if (month >= 1 && month <=
    12) {\n                        if (day >= 1 && day <= 31) {\n                            if
    (day <= 29 && month == 2) {\n                                valid = true;\n                            }
    else if (day <= 30 && (month == 4 || month == 6 || month == 9 || month == 11))
    {\n                                valid = true;\n                            }
    else if (day <= 31 && (month == 1 || month == 3 || month == 5 || month == 7 ||
    month == 8 || month == 10 || month == 12)) {\n                                valid
    = true;\n                            }\n                        }\n                    }\n
    \               }\n            }\n        }\n        return valid;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length
    < 10) return false;\n        string[] data = date.Split('-');\n        if (data.Length
    != 3) return false;\n        int month = int.Parse(data[0]);\n        int day
    = int.Parse(data[1]);\n        int year = int.Parse(data[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day == 31) return false;\n        }\n        if (month == 2) {\n            if
    (day > 29) return false;\n            if (day == 29) {\n                if (year
    % 4 != 0) return false;\n                if (year % 100 == 0 && year % 400 !=
    0) return false;\n            }\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        int dd,
    mm, yyyy;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        if (!int.TryParse(parts[0], out mm)) return false;\n
    \       if (!int.TryParse(parts[1], out dd)) return false;\n        if (!int.TryParse(parts[2],
    out yyyy)) return false;\n        if (mm < 1 || mm > 12) return false;\n        switch
    (mm) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:
    if (dd < 1 || dd > 31) return false; break;\n            case 4: case 6: case
    9: case 11: if (dd < 1 || dd > 30) return false; break;\n            case 2: if
    (dd < 1 || dd > 29) return false; break;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        try {\n
    \           DateTime dt = DateTime.Parse(date);\n            return true;\n        }
    catch (FormatException) {\n            return false;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed3dfe6536b148a88a9259ac4f8248df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed3dfe6536b148a88a9259ac4f8248df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // your
    code here\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c96bec10b9d748269a6df99c9e677da9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c96bec10b9d748269a6df99c9e677da9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef7e2db5f1404cba0a204c671072ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008905
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Your
    code is here...\n        // Splits the input string at the '-' character\n        var
    dates = date.Split('-');\n        // Converts the string input into an int\n        int
    month = int.Parse(dates[0]);\n        int day = int.Parse(dates[1]);\n        int
    year = int.Parse(dates[2]);\n        bool monthValid = false;\n        bool dayValid
    = false;\n        bool yearValid = false;\n        bool dateValid = false;\n        //
    checks if the month is between 1 and 12\n        if (month >= 1 && month <= 12)
    {\n            monthValid = true;\n        }\n        // checks if the day is
    between 1 and 31 and if the month is 1,3,5,7,8,10,12\n        if (day >= 1 &&
    day <= 31 && (month == 1 || month == 3 || month == 5 || month == 7 || month ==
    8 || month == 10 || month == 12)) {\n            dayValid = true;\n        }\n
    \       // checks if the day is between 1 and 30 and if the month is 4,6,9,11\n
    \       if (day >= 1 && day <= 30 && (month == 4 || month == 6 || month == 9 ||
    month == 11)) {\n            dayValid = true;\n        }\n        // checks if
    the day is between 1 and 29 and if the month is 2\n        if (day >= 1 && day
    <= 29 && month == 2) {\n            dayValid = true;\n        }\n        // checks
    if the year is between 1 and 9999\n        if (year >= 1 && year <= 9999) {\n
    \           yearValid = true;\n        }\n        // checks if all of the above
    checks are true\n        if (monthValid == true && dayValid == true && yearValid
    == true) {\n            dateValid = true;\n        }\n        return dateValid;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <bb852a34c2e24dfb82e2ffb671b60f4a>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <bb852a34c2e24dfb82e2ffb671b60f4a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <bb852a34c2e24dfb82e2ffb671b60f4a>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <bb852a34c2e24dfb82e2ffb671b60f4a>:0
    \n"
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        try {\n
    \           string[] strs = date.Split('-');\n            int month = Int32.Parse(strs[0]);\n
    \           int day = Int32.Parse(strs[1]);\n            int year = Int32.Parse(strs[2]);\n
    \           DateTime dt = new DateTime(year, month, day);\n            return
    dt.Year == year && dt.Month == month && dt.Day == day;\n        } catch (Exception)
    {\n            return false;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    parts = date.Split('-');\n        if (parts.Length != 3) {\n            return
    false;\n        }\n        int day = Int32.Parse(parts[1]);\n        int month
    = Int32.Parse(parts[0]);\n        if (day < 1 || day > 31) {\n            return
    false;\n        }\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)
    {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        string[]
    parts = date.Split('-');\n        if (parts.Length != 3) return false;\n        string
    month = parts[0];\n        string day = parts[1];\n        string year = parts[2];\n
    \       if (month.Length != 2 || day.Length != 2 || year.Length != 4) return false;\n
    \       if (!int.TryParse(month, out int m) || !int.TryParse(day, out int d) ||
    !int.TryParse(year, out int y)) return false;\n        if (m < 1 || m > 12) return
    false;\n        if (m == 2) {\n            if (d < 1 || d > 29) return false;\n
    \       } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if (d
    < 1 || d > 30) return false;\n        } else {\n            if (d < 1 || d > 31)
    return false;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185269f7f9914d0e82182efbbc05b0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        try {\n
    \           if (date.Length == 0) return false;\n            var d = DateTime.Parse(date);\n
    \           return true;\n        } catch (Exception) {\n            return false;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75e938b0c9794d41ad59dac18cc7a84e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75e938b0c9794d41ad59dac18cc7a84e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008911
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns true if the date is valid otherwise false.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n
    \   // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    //
    >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n
    \   // (false)\n    public static bool ValidDate(string date) {\n        // Write
    your code here...\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0c64d6d4fba4561bc515f2a02de2e68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0c64d6d4fba4561bc515f2a02de2e68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008911
