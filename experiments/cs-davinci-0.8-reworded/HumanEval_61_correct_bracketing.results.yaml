language: cs
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int numOpen = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') numOpen++;\n \
    \           else if (bracket == ')') numOpen--;\n            if (numOpen < 0)\
    \ return false;\n        }\n        return numOpen == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        foreach (var bracket in brackets) {\n            if (bracket == '(')\
    \ {\n                stack.Push(bracket);\n            } else if (bracket == ')')\
    \ {\n                if (stack.Count == 0) {\n                    return false;\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int length = brackets.Length;\n\
    \        int i = 0;\n        int bracketcount = 0;\n        while (i < length)\
    \ {\n            if (brackets[i] == '(') {\n                bracketcount += 1;\n\
    \            } else if (brackets[i] == ')') {\n                bracketcount -=\
    \ 1;\n            }\n            if (bracketcount < 0) {\n                return\
    \ false;\n            }\n            i += 1;\n        }\n        return bracketcount\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) {\n\
    \            return true;\n        }\n        if (brackets[0] == ')') {\n    \
    \        return false;\n        }\n        int counter = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                counter++;\n            } else {\n                counter--;\n\
    \            }\n            if (counter < 0) {\n                return false;\n\
    \            }\n        }\n        return counter == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool match = true;\n        int\
    \ bracks = 0;\n        foreach (char bracket in brackets) {\n            if (bracket\
    \ == '(') {\n                bracks++;\n            } else if (bracket == ')')\
    \ {\n                bracks--;\n            } else {\n                return false;\n\
    \            }\n            if (bracks < 0) {\n                return false;\n\
    \            }\n        }\n        if (bracks == 0) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') balance += 1;\n          \
    \  else balance -= 1;\n            if (balance < 0) return false;\n        }\n\
    \        return balance == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // your code here!\n        int\
    \ count = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n          \
    \  if (brackets[i] == '(') {\n                count++;\n            } else {\n\
    \                count--;\n            }\n            if (count < 0) {\n     \
    \           return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // \"stack\" is a list of chars\n\
    \        List<char> stack = new List<char>();\n        for (int i = 0; i < brackets.Length;\
    \ i += 1) {\n            if (brackets[i] == '(') {\n                stack.Add('(');\n\
    \            } else if (brackets[i] == ')') {\n                if (stack.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    char c = stack[stack.Count - 1];\n                if (c != '(') {\n     \
    \               return false;\n                }\n                stack.RemoveAt(stack.Count\
    \ - 1);\n            }\n        }\n        return stack.Count == 0;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int bracketsNesting = 0;\n   \
    \     foreach (char c in brackets) {\n            if (c == '(') {\n          \
    \      bracketsNesting++;\n            } else if (c == ')') {\n              \
    \  bracketsNesting--;\n            }\n            if (bracketsNesting < 0) {\n\
    \                return false;\n            }\n        }\n        return bracketsNesting\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int open = 0;\n        int closed\
    \ = 0;\n        foreach (char c in brackets) {\n            if (c == '(') {\n\
    \                open++;\n            } else if (c == ')') {\n               \
    \ closed++;\n            }\n            if (closed > open) {\n               \
    \ return false;\n            }\n        }\n        return open == closed;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int bracketCount = 0;\n      \
    \  for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n\
    \            if (c == '(') {\n                bracketCount++;\n            } else\
    \ if (c == ')') {\n                bracketCount--;\n            }\n          \
    \  if (bracketCount < 0) {\n                return false;\n            }\n   \
    \     }\n        return bracketCount == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                depth++;\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \            if (depth < 0) {\n                return false;\n            }\n\
    \        }\n        return depth == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // keep track of the number of\
    \ opening and closing brackets.\n        int open = 0;\n        int close = 0;\n\
    \        // For each character in the string, if we're an opening bracket, increase\
    \ the number of open brackets.\n        // if we're a closing bracket, increase\
    \ the number of closing brackets. If the number of closing brackets\n        //\
    \ is ever larger than the number of opening brackets, that means a closing bracket\
    \ has no corresponding\n        // opening bracket and therefore the bracketing\
    \ is invalid.\n        foreach (char c in brackets) {\n            if (c == '(')\
    \ {\n                open++;\n            } else if (c == ')') {\n           \
    \     close++;\n            }\n            if (close > open) {\n             \
    \   return false;\n            }\n        }\n        // The brackets are valid\
    \ if and only if the number of opening brackets is equal to the number of closing\
    \ brackets.\n        return open == close;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c6d497e7d23a4fae9aa94642f29b7d29>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c6d497e7d23a4fae9aa94642f29b7d29>:0 \n"
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        var cnt = 0;\n        foreach (var c in brackets) {\n            if (c\
    \ == '(') {\n                stack.Push(c);\n                cnt++;\n        \
    \    } else {\n                if (stack.Count == 0) return false;\n         \
    \       stack.Pop();\n                cnt--;\n            }\n        }\n     \
    \   return cnt == 0;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int counter = 0;\n        foreach\
    \ (char i in brackets) {\n            if (i == '(') {\n                counter++;\n\
    \            } else if (i == ')') {\n                counter--;\n            }\n\
    \            if (counter < 0) {\n                return false;\n            }\n\
    \        }\n        return counter == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length % 2 != 0)\
    \ {\n            return false;\n        }\n        int par_count = 0;\n      \
    \  foreach (char c in brackets) {\n            if (c == '(') {\n             \
    \   par_count++;\n            } else if (c == ')') {\n                par_count--;\n\
    \            }\n            if (par_count < 0) {\n                return false;\n\
    \            }\n        }\n        return par_count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int opened = 0;\n        int closed\
    \ = 0;\n        int bal = 0;\n        for (int i = 0; i < brackets.Length; i++)\
    \ {\n            if (brackets[i] == '(') {\n                opened += 1;\n   \
    \             bal += 1;\n            } else {\n                if (bal > 0) {\n\
    \                    bal -= 1;\n                } else {\n                   \
    \ return false;\n                }\n                closed += 1;\n           \
    \ }\n        }\n        return opened == closed;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int n = brackets.Length;\n   \
    \     if (n % 2 == 1) return false;\n        Stack<int> stack = new Stack<int>();\n\
    \        for (int i = 0; i < n; i++) {\n            if (brackets[i] == '(') stack.Push(i);\n\
    \            else if (stack.Count == 0) return false;\n            else stack.Pop();\n\
    \        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int num_open = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                num_open\
    \ += 1;\n            } else if (c == ')') {\n                num_open -= 1;\n\
    \            }\n            if (num_open < 0) {\n                return false;\n\
    \            }\n        }\n        return num_open == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char ch in brackets) {\n            if (ch == '(') depth++;\n            else\
    \ depth--;\n            if (depth < 0) return false;\n        }\n        return\
    \ depth == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      count++;\n            } else if (bracket == ')') {\n                count--;\n\
    \            }\n            if (count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c6d497e7d23a4fae9aa94642f29b7d29>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c6d497e7d23a4fae9aa94642f29b7d29>:0 \n"
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c6d497e7d23a4fae9aa94642f29b7d29>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c6d497e7d23a4fae9aa94642f29b7d29>:0 \n"
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int n = brackets.Length;\n   \
    \     Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < n; i++)\
    \ {\n            if (brackets[i] == '(') {\n                stack.Push(brackets[i]);\n\
    \            } else {\n                if (stack.Count == 0) {\n             \
    \       return false;\n                }\n                char top = stack.Pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.Count == 0;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char ch in brackets) {\n            if (ch == '(') {\n                count++;\n\
    \            } else if (ch == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets.All(c =>\
    \ c == '(' || c == ')'));\n        var stack = new Stack<char>();\n        foreach\
    \ (var bracket in brackets) {\n            if (bracket == '(') {\n           \
    \     stack.Push(bracket);\n            } else {\n                if (stack.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    stack.Pop();\n            }\n        }\n        return stack.Count == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') count++;\n            else\
    \ count--;\n            if (count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Length % 2 ==\
    \ 0 && brackets.Length == brackets.Replace(\"()\", \"\").Length;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c07f14e9eed74445ad625a83f770bb60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c07f14e9eed74445ad625a83f770bb60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return (!brackets.Contains('(')\
    \ || !brackets.Contains(')')) || brackets.IndexOf('(') < brackets.IndexOf(')');\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c46b4edfbdc94e94885587ac179e18f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c46b4edfbdc94e94885587ac179e18f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int bal = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') bal++;\n            else bal--;\n\
    \            if (bal < 0) return false;\n        }\n        return bal == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                count++;\n            } else {\n                count--;\n  \
    \          }\n            if (count < 0) {\n                return false;\n  \
    \          }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            count += brackets[i] == '('\
    \ ? 1 : -1;\n            if (count < 0) {\n                return false;\n   \
    \         }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openCount = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\
    \ {\n                openCount++;\n            } else {\n                openCount--;\n\
    \            }\n            if (openCount < 0) {\n                return false;\n\
    \            }\n        }\n        return openCount == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\
    \ {\n                counter++;\n            } else {\n                counter--;\n\
    \            }\n            if (counter < 0) return false;\n        }\n      \
    \  return counter == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int cnt = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') cnt += 1;\n            else\
    \ if (c == ')') cnt -= 1;\n            if (cnt < 0) return false;\n        }\n\
    \        return cnt == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int check = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                check +=\
    \ 1;\n            } else if (c == ')') {\n                check -= 1;\n      \
    \      }\n            if (check < 0) {\n                return false;\n      \
    \      }\n        }\n        return check == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c6d497e7d23a4fae9aa94642f29b7d29>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c6d497e7d23a4fae9aa94642f29b7d29>:0 \n"
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int unmatched = 0;\n        foreach\
    \ (char b in brackets) {\n            if (b == '(') {\n                unmatched\
    \ += 1;\n            } else if (b == ')') {\n                unmatched -= 1;\n\
    \            }\n            if (unmatched < 0) {\n                return false;\n\
    \            }\n        }\n        return unmatched == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int nbOpen = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') nbOpen++;\n            else\
    \ if (c == ')') nbOpen--;\n            if (nbOpen < 0) return false;\n       \
    \ }\n        return nbOpen == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int remaining = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                remaining\
    \ += 1;\n            } else if (c == ')') {\n                remaining -= 1;\n\
    \            }\n            if (remaining < 0) {\n                return false;\n\
    \            }\n        }\n        return remaining == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int r=0;\n        foreach(char\
    \ c in brackets) {\n            if(c=='(') {\n                r++;\n         \
    \   } else {\n                r--;\n            }\n            if(r<0) {\n   \
    \             return false;\n            }\n        }\n        return r==0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int n = brackets.Length;\n   \
    \     int balance = 0;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (brackets[i] == '(') {\n                balance += 1;\n            } else {\n\
    \                balance -= 1;\n            }\n            if (balance < 0) {\n\
    \                return false;\n            }\n        }\n        return balance\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> s = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         s.Push(c);\n            } else if (c == ')') {\n                if (s.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    s.Pop();\n            }\n        }\n        return s.Count == 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int len = brackets.Length;\n \
    \       int count = 0;\n        for (int i = 0; i < len; i++) {\n            if\
    \ (brackets[i] == '(') {\n                count++;\n            } else {\n   \
    \             count--;\n            }\n            if (count < 0) {\n        \
    \        return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // TODO: Your code here\n    \
    \    int balance = 0;\n        foreach (char bracket in brackets) {\n        \
    \    if (bracket == '(') {\n                balance += 1;\n            } else\
    \ if (bracket == ')') {\n                balance -= 1;\n            }\n      \
    \      if (balance < 0) {\n                return false;\n            }\n    \
    \    }\n        return balance == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        foreach (var c in brackets) {\n            if (c == '(') {\n        \
    \        stack.Push(c);\n            } else if (c == ')') {\n                if\
    \ (stack.Count == 0) {\n                    return false;\n                }\n\
    \                var b = stack.Pop();\n                if (b != '(') {\n     \
    \               return false;\n                }\n            } else {\n     \
    \           throw new ArgumentException();\n            }\n        }\n       \
    \ return stack.Count == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int i = 0;\n        foreach (char\
    \ c in brackets) {\n            if (c == '(') {\n                i++;\n      \
    \      } else {\n                i--;\n            }\n            if (i < 0) {\n\
    \                return false;\n            }\n        }\n        return i ==\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int numberOfOpens = 0;\n     \
    \   foreach (char character in brackets) {\n            if (character == '(')\
    \ {\n                numberOfOpens += 1;\n            } else if (character ==\
    \ ')') {\n                numberOfOpens -= 1;\n            }\n            if (numberOfOpens\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ numberOfOpens == 0;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int N = brackets.Length;\n   \
    \     int numOpen = 0;\n        int numClose = 0;\n        for (int i = 0; i <\
    \ N; i++) {\n            if (brackets[i] == '(') numOpen++;\n            else\
    \ if (brackets[i] == ')') numClose++;\n            if (numClose > numOpen) return\
    \ false;\n        }\n        return numOpen == numClose;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int c = 0;\n        foreach (char\
    \ ch in brackets) {\n            if (ch == '(') c++;\n            else if (ch\
    \ == ')') c--;\n            if (c < 0) return false;\n        }\n        return\
    \ c == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openCount = 0;\n        int\
    \ closeCount = 0;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '(') {\n                openCount += 1;\n            } else if (c == ')') {\n\
    \                closeCount += 1;\n            }\n            if (closeCount >\
    \ openCount) {\n                return false;\n            }\n        }\n    \
    \    return openCount == closeCount;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int counter = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      counter++;\n            } else if (bracket == ')') {\n                counter--;\n\
    \            }\n            if (counter < 0) {\n                return false;\n\
    \            }\n        }\n        return counter == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // YOUR CODE HERE\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24b6fdbc7b664cccadf9309db2841786>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24b6fdbc7b664cccadf9309db2841786>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int c = 0;\n        foreach (char\
    \ b in brackets) {\n            if (b == '(') c++;\n            else if (b ==\
    \ ')') c--;\n            if (c < 0) return false;\n        }\n        return c\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                count += 1;\n            } else {\n                count -= 1;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // fill in your code here\n  \
    \      if (brackets.Length % 2 != 0) {\n            return false;\n        }\n\
    \        int count = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n\
    \            if (brackets[i] == '(') {\n                count++;\n           \
    \ } else {\n                count--;\n            }\n            if (count < 0)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e331d09d411e4b26912968e24ee17acc>:0 \n"
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int l = 0;\n        int r = 0;\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                l++;\n            } else {\n                r++;\n\
    \            }\n            if (r > l) {\n                return false;\n    \
    \        }\n        }\n        return l == r;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') count++;\n\
    \            else if (brackets[i] == ')') count--;\n            if (count < 0)\
    \ return false;\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> st = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         st.Push(c);\n            } else if (c == ')') {\n                if\
    \ (st.Count == 0) return false;\n                st.Pop();\n            }\n  \
    \      }\n        return st.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      balance += 1;\n            } else if (bracket == ')') {\n             \
    \   balance -= 1;\n            } else {\n                throw new Exception(\"\
    Invalid character\");\n            }\n            if (balance < 0) {\n       \
    \         return false;\n            }\n        }\n        return balance == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openCount = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n\
    \            if (c == '(') {\n                openCount++;\n            } else\
    \ if (c == ')') {\n                openCount--;\n            }\n            if\
    \ (openCount < 0) {\n                return false;\n            }\n        }\n\
    \        return openCount == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openCount = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            switch (brackets[i]) {\n\
    \                case '(':\n                    openCount++;\n               \
    \     break;\n                case ')':\n                    openCount--;\n  \
    \                  break;\n            }\n            if (openCount < 0) {\n \
    \               return false;\n            }\n        }\n        return openCount\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      depth++;\n            } else if (bracket == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                return false;\n\
    \            }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // TODO: return true if and only\
    \ if the string is correctly bracketed\n        // (0 points)\n        // Hint:\
    \ Use a while loop, a counter, and return false when you see\n        // an unmatched\
    \ closing bracket.\n        throw new NotImplementedException();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <9fba48cfd0b0446fb97bf692ae4a3289>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <9fba48cfd0b0446fb97bf692ae4a3289>:0 \n"
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                depth++;\n            } else {\n                depth--;\n  \
    \          }\n            if (depth < 0) {\n                return false;\n  \
    \          }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBrackets = 0;\n      \
    \  foreach (char c in brackets) {\n            if (c == '(') {\n             \
    \   openBrackets += 1;\n            } else if (c == ')') {\n                openBrackets\
    \ -= 1;\n            }\n            if (openBrackets < 0) {\n                return\
    \ false;\n            }\n        }\n        return openBrackets == 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return\
    \ true;\n        int depth = 0;\n        for (int i = 0; i < brackets.Length;\
    \ i++) {\n            if (brackets[i] == '(') depth++;\n            else if (brackets[i]\
    \ == ')') depth--;\n            if (depth < 0) return false;\n        }\n    \
    \    return depth == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // balance is a variable that\
    \ maintains a running count of the number of opening brackets minus the number\
    \ of closing brackets.\n        // if balance is ever negative, the string has\
    \ more closing brackets than opening brackets, so it must be false.\n        //\
    \ if balance is ever non-zero at the end of the string, the string has more opening\
    \ brackets than closing brackets, so it must be false.\n        int balance =\
    \ 0;\n        foreach (char c in brackets) {\n            if (c == '(') {\n  \
    \              balance++;\n            } else if (c == ')') {\n              \
    \  balance--;\n            }\n            if (balance < 0) {\n               \
    \ return false;\n            }\n        }\n        return balance == 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBrackets = 0;\n   \
    \     int closingBrackets = 0;\n        foreach (char c in brackets) {\n     \
    \       if (c == '(') {\n                openingBrackets += 1;\n            }\
    \ else if (c == ')') {\n                closingBrackets += 1;\n            }\n\
    \            if (closingBrackets > openingBrackets) {\n                return\
    \ false;\n            }\n        }\n        return openingBrackets == closingBrackets;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int open = 0;\n        foreach\
    \ (char br in brackets) {\n            if (br == '(') {\n                open++;\n\
    \            } else if (br == ')') {\n                open--;\n            }\n\
    \            if (open < 0) {\n                return false;\n            }\n \
    \       }\n        return open == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Your code goes here.\n    \
    \    // You can change the return statement to whatever you like.\n        int\
    \ length = brackets.Length;\n        int counter = 0;\n        for (int i = 0;\
    \ i < length; i++) {\n            if (brackets[i] == '(') {\n                counter++;\n\
    \            } else if (brackets[i] == ')') {\n                counter--;\n  \
    \          } else {\n                return false;\n            }\n          \
    \  if (counter < 0) {\n                return false;\n            }\n        }\n\
    \        if (counter != 0) {\n            return false;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int sum = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      sum += 1;\n            } else if (bracket == ')') {\n                sum\
    \ -= 1;\n            }\n            if (sum < 0) {\n                return false;\n\
    \            }\n        }\n        return sum == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Hint: a stack is a data structure\
    \ that lets you push and pop items.\n        // You can use List<T> as a stack\
    \ by calling brackets.Push() and brackets.Pop().\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <266daea1a83d4fa387c754b9d38973c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <266daea1a83d4fa387c754b9d38973c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                depth++;\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \            if (depth < 0) {\n                return false;\n            }\n\
    \        }\n        return depth == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int cnt = 0;\n        foreach\
    \ (char ch in brackets) {\n            if (ch == '(') {\n                cnt++;\n\
    \            } else {\n                cnt--;\n            }\n            if (cnt\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ cnt == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Count(c => c ==\
    \ '(') == brackets.Count(c => c == ')');\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da78219f22514ce1b94e513f987c550a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da78219f22514ce1b94e513f987c550a>:0 \n"
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Length == 0 ||\
    \ brackets.Count(x => x == '(') == brackets.Count(x => x == ')');\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c6b3cb1eb244b0884b61f24dbd47178>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c6b3cb1eb244b0884b61f24dbd47178>:0 \n"
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int open = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                open++;\n\
    \            } else if (c == ')') {\n                open--;\n            }\n\
    \            if (open < 0) {\n                return false;\n            }\n \
    \       }\n        return open == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                balance\
    \ += 1;\n            } else if (c == ')') {\n                balance -= 1;\n \
    \           }\n            if (balance < 0) {\n                return false;\n\
    \            }\n        }\n        return balance == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool ok = true;\n        int open\
    \ = 0;\n        foreach (char c in brackets) {\n            if (c == '(') {\n\
    \                open += 1;\n            } else if (c == ')') {\n            \
    \    open -= 1;\n            }\n            if (open < 0) {\n                ok\
    \ = false;\n                break;\n            }\n        }\n        return ok\
    \ && open == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char i in brackets) {\n            if (i == '(') {\n                count++;\n\
    \            } else if (i == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length % 2 != 0)\
    \ {\n            return false;\n        }\n        Stack<char> working = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         working.Push(c);\n            } else {\n                if (working.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    working.Pop();\n            }\n        }\n        return working.Count ==\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\
    \ counter++;\n            else counter--;\n            if (counter < 0) return\
    \ false;\n        }\n        return counter == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int pos = 0;\n        int max\
    \ = 0;\n        int open = 0;\n        foreach (char c in brackets) {\n      \
    \      if (c == '(')\n                open++;\n            else\n            \
    \    open--;\n            if (open > max) {\n                max = open;\n   \
    \             pos = brackets.IndexOf(c);\n            }\n        }\n        return\
    \ open == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d7dc960015e414e923309c36518e661>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d7dc960015e414e923309c36518e661>:0 \n"
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBrackets = 0;\n      \
    \  foreach (char c in brackets) {\n            if (c == '(') {\n             \
    \   openBrackets++;\n            } else if (c == ')') {\n                openBrackets--;\n\
    \            }\n            if (openBrackets < 0) {\n                return false;\n\
    \            }\n        }\n        return openBrackets == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a10b5e36b1a34b159cfed4ad23a197ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a10b5e36b1a34b159cfed4ad23a197ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                balance++;\n\
    \            } else if (c == ')') {\n                balance--;\n            }\n\
    \            if (balance < 0) {\n                return false;\n            }\n\
    \        }\n        return balance == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a10b5e36b1a34b159cfed4ad23a197ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a10b5e36b1a34b159cfed4ad23a197ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') balance += 1;\n          \
    \  else balance -= 1;\n            if (balance < 0) return false;\n        }\n\
    \        return balance == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      depth++;\n            } else if (bracket == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                return false;\n\
    \            }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int len = brackets.Length;\n \
    \       int count = 0;\n        for (int i = 0; i < len; i++) {\n            if\
    \ (brackets[i] == '(') {\n                count++;\n            } else {\n   \
    \             count--;\n            }\n            if (count < 0) {\n        \
    \        return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                depth +=\
    \ 1;\n            } else if (c == ')') {\n                depth -= 1;\n      \
    \      }\n            if (depth < 0) {\n                return false;\n      \
    \      }\n        }\n        return depth == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') balance += 1;\n          \
    \  else balance -= 1;\n            if (balance < 0) return false;\n        }\n\
    \        return balance == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var level = 0;\n        foreach\
    \ (var c in brackets) {\n            if (c == '(') {\n                level +=\
    \ 1;\n            } else if (c == ')') {\n                level -= 1;\n      \
    \      }\n            if (level < 0) {\n                return false;\n      \
    \      }\n        }\n        return level == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // your solution here\n      \
    \  int count = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n     \
    \       if (brackets[i] == '(') {\n                count += 1;\n            }\
    \ else {\n                count -= 1;\n            }\n            if (count <\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var depth = 0;\n        foreach\
    \ (var ch in brackets) {\n            if (ch == '(') {\n                depth\
    \ += 1;\n            } else if (ch == ')') {\n                depth -= 1;\n  \
    \          }\n            if (depth < 0) {\n                return false;\n  \
    \          }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var count = 0;\n        foreach\
    \ (var ch in brackets) {\n            if (ch == '(') {\n                count++;\n\
    \            } else if (ch == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                count++;\n            } else {\n                count--;\n  \
    \          }\n            if (count < 0) {\n                return false;\n  \
    \          }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == \"\") {\n    \
    \        return true;\n        }\n        int count = 0;\n        foreach (char\
    \ c in brackets) {\n            if (c == '(') {\n                count++;\n  \
    \          } else if (c == ')') {\n                count--;\n            }\n \
    \           if (count < 0) {\n                return false;\n            }\n \
    \       }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // -2 < n < 2 \n        int balance\
    \ = 0;\n        foreach (char ch in brackets) {\n            if (ch == '(') {\n\
    \                balance++;\n            } else {\n                balance--;\n\
    \            }\n            if (balance < 0) {\n                return false;\n\
    \            }\n        }\n        return balance == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // write your code here\n    \
    \    return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <646e5794a62a4e3bb5588179b572e3e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <646e5794a62a4e3bb5588179b572e3e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openCount = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                openCount++;\n\
    \            } else if (c == ')') {\n                openCount--;\n          \
    \  }\n            if (openCount < 0) {\n                return false;\n      \
    \      }\n        }\n        return openCount == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) {\n\
    \            return true;\n        }\n        if (brackets[0] == ')') {\n    \
    \        return false;\n        }\n        int depth = 0;\n        for (int i\
    \ = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n  \
    \              depth++;\n            } else {\n                depth--;\n    \
    \        }\n            if (depth < 0) {\n                return false;\n    \
    \        }\n        }\n        return depth == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Initialize stack\n        List<char>\
    \ stack = new List<char>();\n        // Loop through string\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            // Check if it's an opening\
    \ bracket\n            if (brackets[i] == '(') {\n                // If so, add\
    \ to stack\n                stack.Add(brackets[i]);\n            } else {\n  \
    \              // Check if the stack is empty\n                if (stack.Count\
    \ == 0) {\n                    // If so, return false\n                    return\
    \ false;\n                } else {\n                    // If not, remove the\
    \ last thing in the stack\n                    stack.RemoveAt(stack.Count - 1);\n\
    \                }\n            }\n        }\n        // Check if the stack is\
    \ empty\n        if (stack.Count == 0) {\n            // If so, return true\n\
    \            return true;\n        } else {\n            // If not, return false\n\
    \            return false;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // i is the number of opening\
    \ brackets\n        // that we have encountered but haven't\n        // matched\
    \ with a closing bracket.\n        // we have matched with a closing bracket.\n\
    \        int i = 0;\n        foreach (char c in brackets) {\n            if (c\
    \ == '(') {\n                i += 1;\n            } else if (c == ')') {\n   \
    \             i -= 1;\n            }\n            if (i < 0) {\n             \
    \   return false;\n            }\n        }\n        return i == 0;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                count++;\n            } else {\n                count--;\n  \
    \          }\n            if (count < 0) {\n                return false;\n  \
    \          }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                depth++;\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \            if (depth < 0) {\n                return false;\n            }\n\
    \        }\n        return depth == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // For now, return true if brackets\
    \ has an even number of characters.\n        return brackets.Length % 2 == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <422e190ab7bd41b2a59bf80b6e47c156>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <422e190ab7bd41b2a59bf80b6e47c156>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int l = 0;\n        int r = 0;\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') {\n                l++;\n            } else {\n                r++;\n\
    \            }\n            if (r > l) {\n                return false;\n    \
    \        }\n        }\n        return l == r;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') balance++;\n            else\
    \ if (c == ')') balance--;\n            if (balance < 0) return false;\n     \
    \   }\n        return balance == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                depth++;\n            } else {\n                depth--;\n  \
    \          }\n            if (depth < 0) {\n                return false;\n  \
    \          }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char ch in brackets) {\n            if (ch == '(') {\n                depth++;\n\
    \            } else if (ch == ')') {\n                depth--;\n            }\n\
    \            if (depth < 0) {\n                return false;\n            }\n\
    \        }\n        return depth == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      count += 1;\n            } else if (bracket == ')') {\n               \
    \ count -= 1;\n            }\n            if (count < 0) {\n                return\
    \ false;\n            }\n        }\n        return count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var opens = 0;\n        foreach\
    \ (var bracket in brackets) {\n            if (bracket == '(') {\n           \
    \     opens++;\n            } else if (bracket == ')') {\n                opens--;\n\
    \            }\n            if (opens < 0) {\n                return false;\n\
    \            }\n        }\n        return opens == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int n = brackets.Length;\n   \
    \     int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets[i]\
    \ == '(') {\n                cnt++;\n            } else {\n                cnt--;\n\
    \            }\n            if (cnt < 0) {\n                return false;\n  \
    \          }\n        }\n        return cnt == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int len = brackets.Length;\n \
    \       if (len == 0) {\n            return true;\n        }\n        int count\
    \ = 0;\n        foreach (char c in brackets) {\n            if (c == '(') {\n\
    \                count += 1;\n            } else if (c == ')') {\n           \
    \     count -= 1;\n            }\n            if (count < 0) {\n             \
    \   return false;\n            }\n        }\n        return count == 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(')\n                stack.Push('(');\n            else {\n            \
    \    if (stack.Count > 0)\n                    stack.Pop();\n                else\n\
    \                    return false;\n            }\n        }\n        return stack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int parenCount = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\
    \ {\n                parenCount++;\n            } else if (brackets[i] == ')')\
    \ {\n                parenCount--;\n            }\n            if (parenCount\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ parenCount == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int open = 0;\n        foreach\
    \ (char ch in brackets) {\n            if (ch == '(') open++;\n            else\
    \ if (ch == ')') open--;\n            if (open < 0) return false;\n        }\n\
    \        return open == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> bStack = new Stack<char>();\n\
    \        foreach (char ch in brackets) {\n            if (ch == '(') {\n     \
    \           bStack.Push(ch);\n            } else if (ch == ')') {\n          \
    \      if (bStack.Count == 0) {\n                    return false;\n         \
    \       }\n                bStack.Pop();\n            }\n        }\n        return\
    \ bStack.Count == 0;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int counter = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                counter++;\n\
    \            } else if (c == ')') {\n                counter--;\n            }\n\
    \            if (counter < 0) {\n                return false;\n            }\n\
    \        }\n        return counter == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int open = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                open +=\
    \ 1;\n            } else if (c == ')') {\n                open -= 1;\n       \
    \     }\n            if (open < 0) {\n                return false;\n        \
    \    }\n        }\n        return open == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int n = brackets.Length;\n   \
    \     int balance = 0;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (brackets[i] == '(') {\n                balance += 1;\n            } else {\n\
    \                balance -= 1;\n            }\n            if (balance < 0) {\n\
    \                return false;\n            }\n        }\n        return balance\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      count++;\n            } else if (bracket == ')') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int level = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n            }\n\
    \            if (level < 0) {\n                return false;\n            }\n\
    \        }\n        return level == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        foreach (var c in brackets) {\n            if (c == '(')\n          \
    \      stack.Push(c);\n            else {\n                if (stack.Count ==\
    \ 0)\n                    return false;\n                stack.Pop();\n      \
    \      }\n        }\n        return stack.Count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        foreach (var ch in brackets) {\n            if (ch == '(') {\n      \
    \          stack.Push(ch);\n            } else if (ch == ')') {\n            \
    \    if (stack.Count == 0) {\n                    return false;\n            \
    \    }\n                stack.Pop();\n            }\n        }\n        return\
    \ stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openCount = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') openCount++;\n           \
    \ else if (c == ')') openCount--;\n            if (openCount < 0) return false;\n\
    \        }\n        return openCount == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int n = brackets.Length;\n   \
    \     int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets[i]\
    \ == '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // TODO\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9220ead622a54c69af9e064ae939b543>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9220ead622a54c69af9e064ae939b543>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) {\n\
    \            return true;\n        }\n        int bracketCount = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\
    \ {\n                bracketCount++;\n            } else if (brackets[i] == ')')\
    \ {\n                bracketCount--;\n            }\n            if (bracketCount\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ bracketCount == 0;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int bracketCount = 0;\n      \
    \  foreach (char bracket in brackets) {\n            if (bracket == '(') {\n \
    \               bracketCount++;\n            } else if (bracket == ')') {\n  \
    \              bracketCount--;\n            }\n            if (bracketCount <\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ bracketCount == 0;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> opens = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            char b = brackets[i];\n\
    \            if (b == '(') opens.Push(b);\n            else if (b == ')') {\n\
    \                if (opens.Count == 0) return false;\n                opens.Pop();\n\
    \            }\n        }\n        return opens.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                count++;\n            } else {\n                count--;\n  \
    \          }\n            if (count < 0) {\n                return false;\n  \
    \          }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int c = 0;\n        foreach (char\
    \ b in brackets) {\n            if (b == '(') c++;\n            else if (b ==\
    \ ')') c--;\n            if (c < 0) return false;\n        }\n        return c\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') {\n          \
    \      count++;\n            } else if (bracket == ')') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008743
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var count = 0;\n        foreach\
    \ (var bracket in brackets) {\n            if (bracket == '(') {\n           \
    \     count++;\n            } else if (bracket == ')') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n\
    \            if (c == '(')\n                stack.Push(c);\n            else if\
    \ (c == ')') {\n                if (stack.Count == 0)\n                    return\
    \ false;\n                stack.Pop();\n            }\n        }\n        return\
    \ stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char b in brackets) {\n            if (b == '(') {\n                count +=\
    \ 1;\n            } else if (b == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int bracketCount = 0;\n      \
    \  foreach (char bracket in brackets) {\n            if (bracket == '(') {\n \
    \               bracketCount++;\n            } else if (bracket == ')') {\n  \
    \              bracketCount--;\n            } else {\n                return false;\n\
    \            }\n            if (bracketCount < 0) {\n                return false;\n\
    \            }\n        }\n        return bracketCount == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') count++;\n            else\
    \ if (c == ')') count--;\n            if (count < 0) return false;\n        }\n\
    \        return count == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                depth++;\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \            if (depth < 0) return false;\n        }\n        return depth ==\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                depth++;\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \            if (depth < 0) {\n                return false;\n            }\n\
    \        }\n        return depth == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int n = brackets.Length;\n   \
    \     int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets[i]\
    \ == '(') count++;\n            else count--;\n            if (count < 0) return\
    \ false;\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                balance\
    \ += 1;\n            } else if (c == ')') {\n                balance -= 1;\n \
    \           }\n            if (balance < 0) {\n                return false;\n\
    \            }\n        }\n        return balance == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') depth++;\n            else\
    \ depth--;\n            if (depth < 0) return false;\n        }\n        return\
    \ depth == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int t = 0;\n        for (int i\
    \ = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n  \
    \              t++;\n            } else {\n                t--;\n            }\n\
    \            if (t < 0) {\n                return false;\n            }\n    \
    \    }\n        return t == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') depth++;\n            else\
    \ if (c == ')') depth--;\n            if (depth < 0) return false;\n        }\n\
    \        return depth == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var count = 0;\n        foreach\
    \ (var bracket in brackets) {\n            count += bracket == '(' ? 1 : -1;\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\
    \ {\n                counter++;\n            } else {\n                counter--;\n\
    \            }\n            if (counter < 0) {\n                return false;\n\
    \            }\n        }\n        return counter == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return\
    \ true;\n        Stack<char> stack = new Stack<char>();\n        char[] open =\
    \ {'(', '{', '['};\n        char[] close = {')', '}', ']'};\n        foreach (char\
    \ c in brackets) {\n            if (open.Contains(c)) {\n                stack.Push(c);\n\
    \            } else if (close.Contains(c)) {\n                if (stack.Count\
    \ == 0) return false;\n                char d = stack.Pop();\n               \
    \ if (open.IndexOf(d) != close.IndexOf(c)) return false;\n            }\n    \
    \    }\n        return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6osjp7p8.cs(30,26): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp6osjp7p8.cs(30,46): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) return false;\n        }\n        return count ==\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\
    \ {\n                counter += 1;\n            } else {\n                counter\
    \ -= 1;\n            }\n            if (counter < 0) {\n                return\
    \ false;\n            }\n        }\n        return counter == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> bracketStack = new\
    \ Stack<char>();\n        foreach (char c in brackets) {\n            if (c ==\
    \ '(') {\n                bracketStack.Push(c);\n            } else if (c == ')')\
    \ {\n                if (bracketStack.Count == 0) {\n                    return\
    \ false;\n                }\n                bracketStack.Pop();\n           \
    \ }\n        }\n        return bracketStack.Count == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int brackets_level = 0;\n    \
    \    for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '(') brackets_level++;\n            else if (brackets[i] == ')') brackets_level--;\n\
    \            if (brackets_level < 0) return false;\n        }\n        return\
    \ brackets_level == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int N = brackets.Length;\n   \
    \     // State is int numOpen = number of open (s\n        // State is closed\
    \ if numOpen < 0\n        int numOpen = 0;\n        for (int i = 0; i < N; i++)\
    \ {\n            char bracket = brackets[i];\n            if (bracket == '(')\
    \ {\n                numOpen++;\n            } else if (bracket == ')') {\n  \
    \              numOpen--;\n            } else {\n                throw new Exception(\"\
    Incorrect character: \" + bracket);\n            }\n            if (numOpen <\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ numOpen == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openCount = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\
    \ {\n                openCount++;\n            } else {\n                openCount--;\n\
    \            }\n            if (openCount < 0) return false;\n        }\n    \
    \    return openCount == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char ch in brackets) {\n            if (ch == '(') {\n                count++;\n\
    \            } else if (ch == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int b = 0;\n        foreach (char\
    \ c in brackets) {\n            if (c == '(') b++;\n            else b--;\n  \
    \          if (b < 0) return false;\n        }\n        return b == 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                depth++;\n            } else {\n                depth--;\n  \
    \          }\n            if (depth < 0) {\n                return false;\n  \
    \          }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets != null);\n\
    \        Stack<char> pStack = new Stack<char>();\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                pStack.Push(c);\n          \
    \  } else if (c == ')') {\n                if (pStack.Count == 0) {\n        \
    \            return false;\n                }\n                pStack.Pop();\n\
    \            } else {\n                throw new Exception(\"Bad bracketing\"\
    );\n            }\n        }\n        return pStack.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9097a9f3a4c04840afdb7363127754bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9097a9f3a4c04840afdb7363127754bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int brackets_level = 0;\n    \
    \    foreach (char bracket in brackets) {\n            if (bracket == '(') {\n\
    \                brackets_level += 1;\n            } else if (bracket == ')')\
    \ {\n                brackets_level -= 1;\n            }\n            if (brackets_level\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ brackets_level == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int c = 0;\n        foreach (char\
    \ b in brackets) {\n            if (b == '(') c++;\n            else if (b ==\
    \ ')') c--;\n            if (c < 0) return false;\n        }\n        return c\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008741
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int open_count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                open_count\
    \ += 1;\n            } else if (c == ')') {\n                open_count -= 1;\n\
    \            }\n            if (open_count < 0) {\n                return false;\n\
    \            }\n        }\n        return open_count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // todo\n        int n = brackets.Length;\n\
    \        bool correct = true;\n        int a = 0;\n        int b = 0;\n      \
    \  foreach (char c in brackets) {\n            if (c == '(') {\n             \
    \   a += 1;\n            } else {\n                b += 1;\n            }\n  \
    \          if (b > a) {\n                correct = false;\n            }\n   \
    \     }\n        if (a != b) {\n            correct = false;\n        }\n    \
    \    return correct;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // stack records the positions\
    \ of opening brackets (without their associated closing brackets)\n        var\
    \ stack = new Stack<int>();\n        foreach (char c in brackets) {\n        \
    \    if (c == '(') {\n                stack.Push(0);\n            } else if (c\
    \ == ')') {\n                if (stack.Count == 0) {\n                    return\
    \ false;\n                }\n                stack.Pop();\n            } else\
    \ {\n                // programming error\n                throw new ArgumentException(\"\
    brackets must only contain '(' and ')'\");\n            }\n        }\n       \
    \ return stack.Count == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int open = 0;\n        foreach\
    \ (char bracket in brackets) {\n            if (bracket == '(') open++;\n    \
    \        else if (bracket == ')') open--;\n            if (open < 0) return false;\n\
    \        }\n        return open == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // keep track of the number of\
    \ opening brackets minus the number of closing brackets\n        int balance =\
    \ 0;\n        foreach (char c in brackets) {\n            if (c == '(') {\n  \
    \              balance++;\n            } else if (c == ')') {\n              \
    \  balance--;\n            } else {\n                throw new ArgumentException(\"\
    brackets must only contain '(' and ')'\");\n            }\n            if (balance\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ balance == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                depth +=\
    \ 1;\n            } else if (c == ')') {\n                depth -= 1;\n      \
    \      }\n            if (depth < 0) {\n                return false;\n      \
    \      }\n        }\n        return depth == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008742
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // remove all the pairs and check\
    \ that there is nothing left\n        while (brackets.Contains(\"()\")) {\n  \
    \          brackets = brackets.Replace(\"()\", \"\");\n        }\n        return\
    \ brackets.Length == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    (()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    (()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    ()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                count++;\n            } else {\n                count--;\n  \
    \          }\n            if (count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008745
