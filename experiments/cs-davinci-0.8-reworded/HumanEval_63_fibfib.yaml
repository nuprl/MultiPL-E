name: HumanEval_63_fibfib
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==\
  \ 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  \    // Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n\
  \    // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long\
  \ n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))\
  \ == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))\
  \ == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))\
  \ == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))\
  \ == (927L));\n    }\n\n}\n"
completions: ["        if (n == 0) return 0;\n        if (n == 1) return 0;\n    \
    \    if (n == 2) return 1;\n        if (n == 3) return 1;\n        return Fibfib(n\
    \ - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        if (n < 0) throw new ArgumentOutOfRangeException();\n\
    \        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 1;\n        if (n == 3) return 1;\n        var m = (n % 3);\n    \
    \    long a = 1;\n        long b = 1;\n        long c = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            c = a + b + c;\n            a = b;\n       \
    \     b = c;\n        }\n        return c;", "        if (n < 3) return n - 1;\n\
    \        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        int[]\
    \ a = new int[n + 1];\n        a[0] = 0;\n        a[1] = 0;\n        a[2] = 1;\n\
    \        for (int i = 3; i <= n; i++) {\n            a[i] = a[i - 1] + a[i - 2]\
    \ + a[i - 3];\n        }\n        return a[n];", "        if (n < 2) return 0;\n\
    \        if (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) +\
    \ Fibfib(n - 3);", "        // TODO:\n        return 0;", '        return n;',
  "        // If n <= 2, use the base cases\n        if (n <= 2) {\n            return\
    \ n - 1;\n        }\n\n        // Initialize all other values to 1, this\n   \
    \     // ensures the first iteration will use the correct\n        // value\n\
    \        long last2 = 0;\n        long last1 = 1;\n        long current = 1;\n\
    \n        // Iterate n-2 times, since 2 values are\n        // already initialized\n\
    \        for (int i = 2; i < n; i++) {\n            // Next value is the sum of\
    \ the three\n            // previous values\n            current = last2 + last1\
    \ + current;\n\n            // The previous value of last2 is now\n          \
    \  // the value of last1\n            last2 = last1;\n\n            // The previous\
    \ value of last1 is now\n            // the value of current\n            last1\
    \ = current;\n        }\n\n        // Return the final value of current\n    \
    \    return current;", "        // The idea is to save the last computed value\
    \ from the 3 previous values.\n        // That way, we can compute fibfib(n) by\
    \ adding the last three numbers.\n        long prev = 0;\n        long curr =\
    \ 0;\n        long next = 1;\n        for (long i = 0; i < n; i++) {\n       \
    \     prev = curr;\n            curr = next;\n            next = prev + curr +\
    \ (i >= 2 ? next : 0);\n        }\n        return prev;", "        if (n == 0)\
    \ return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n  \
    \      var a = 0L;\n        var b = 0L;\n        var c = 1L;\n        for (var\
    \ i = 3; i <= n; i++) {\n            var d = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = d;\n        }\n        return c;", "    \
    \    // return FibfibImpl(n).Item1;\n        return FibfibImpl(n).Item1;", " \
    \       var a = 0L;\n        var b = 0L;\n        var c = 1L;\n        for (var\
    \ i = 0; i < n; i++) {\n            a = b;\n            b = c;\n            c\
    \ = a + b + c;\n        }\n        return a;", "        if (n == 0 || n == 1)\
    \ {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 1;\n        }\n        long b1 = 0;\n        long b2 = 0;\n        long b3 =\
    \ 1;\n        long result = 0;\n        for (long i = 3; i <= n; i++) {\n    \
    \        result = b1 + b2 + b3;\n            b1 = b2;\n            b2 = b3;\n\
    \            b3 = result;\n        }\n        return result;", '        throw
    new NotImplementedException();', "        //throw new NotImplementedException();\n\
    \        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 1;\n        long Fminus3 = 0;\n        long Fminus2 = 0;\n       \
    \ long Fminus1 = 1;\n        long F = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            F = Fminus1 + Fminus2 + Fminus3;\n            Fminus3 = Fminus2;\n\
    \            Fminus2 = Fminus1;\n            Fminus1 = F;\n        }\n       \
    \ return F;", "        long[] f = new long[n + 1];\n        f[0] = 0;\n      \
    \  f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n    \
    \        f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n        }\n        return f[n];",
  "        // ...\n        throw new NotImplementedException();", "        BigInteger\
    \ a = 0;\n        BigInteger b = 0;\n        BigInteger c = 1;\n        BigInteger\
    \ temp = 0;\n        for (long i = 0; i < n; i++) {\n            temp = a;\n \
    \           a = b;\n            b = c;\n            c = temp + b + c;\n      \
    \  }\n        return (long)c;", "        // ...\n        return 0;", "       \
    \ if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 1;\n        long[] seq = new long[n];\n        seq[0] = 0;\n        seq[1] =\
    \ 0;\n        seq[2] = 1;\n        for (int i = 3; i < n; i++) {\n           \
    \ seq[i] = seq[i - 1] + seq[i - 2] + seq[i - 3];\n        }\n        return seq[n\
    \ - 1];", "        // TODO: Implement this function\n        throw new NotImplementedException();",
  "        BigInteger[] f = new BigInteger[(int)n + 1];\n        f[0] = 0;\n     \
    \   f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n   \
    \         f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n        }\n        return (long)f[n];",
  "        if (n < 0) throw new ArgumentOutOfRangeException(\"n\");\n        long\
    \ a = 0, b = 0, c = 1;\n        for (int i = 1; i < n; i++) {\n            long\
    \ d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n\
    \        }\n        return c;", '        return -1;', "        //using dynamic\
    \ programming\n        //return FibfibHelper(n, new Dictionary<long, long>());\n\
    \        //using matrix exponentiation\n        var m = new List<long>();\n  \
    \      m.Add(1);\n        m.Add(1);\n        m.Add(1);\n        var matrix = new\
    \ List<List<long>>();\n        matrix.Add(m);\n        matrix.Add(m);\n      \
    \  matrix.Add(m);\n        var powerMatrix = FastPower(matrix, n - 2);\n     \
    \   return PowerMatrixTransform(powerMatrix, 1);", "        long[] fibs = new\
    \ long[(int)n + 1];\n        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2]\
    \ = 1;\n        for (int i = 3; i <= n; i++) {\n            fibs[i] = fibs[i -\
    \ 1] + fibs[i - 2] + fibs[i - 3];\n        }\n        return fibs[(int)n];", " \
    \       if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 1;\n        var fib = Fibonacci();\n        var fibfib = new List<long>\
    \ { 0, 0, 1 };\n        for (int i = 2; i < n; i++) {\n            fibfib.Add(fibfib[i\
    \ - 1] + fibfib[i - 2] + fibfib[i - 3]);\n        }\n        return fibfib[(int)n\
    \ - 1];", "        long[] fib = new long[n + 1];\n        fib[0] = 0;\n      \
    \  fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n\
    \            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n     \
    \   return fib[n];", "        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        var s = new BigInteger[n];\n    \
    \    s[0] = 0;\n        s[1] = 0;\n        s[2] = 1;\n        for (var i = 3;\
    \ i < n; i++) {\n            s[i] = s[i - 1] + s[i - 2] + s[i - 3];\n        }\n\
    \        return (long)s[n - 1];", "        long a = 0, b = 0, c = 1;\n       \
    \ for (long i = 0; i < n; i++) {\n            c = a + b + c;\n            a =\
    \ b;\n            b = c - a - b;\n        }\n        return a;", '        throw
    new NotImplementedException();', "        long a = 0;\n        long b = 0;\n \
    \       long c = 1;\n        long res = 0;\n        for (long i = 3; i <= n; i++)\
    \ {\n            res = a + b + c;\n            a = b;\n            b = c;\n  \
    \          c = res;\n        }\n        return res;", "        if (n < 2) {\n\
    \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", " \
    \       if (n < 2) return 0;\n        if (n == 2) return 1;\n        var v0 =\
    \ new BigInteger(0);\n        var v1 = new BigInteger(0);\n        var v2 = new\
    \ BigInteger(1);\n        for (var i = 3; i <= n; i++) {\n            var v3 =\
    \ v2 + v1 + v0;\n            v0 = v1;\n            v1 = v2;\n            v2 =\
    \ v3;\n        }\n        return (long)v2;", "        if (n == 0) {\n        \
    \    return 0;\n        }\n        if (n == 1) {\n            return 0;\n    \
    \    }\n        if (n == 2) {\n            return 1;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 1;\n        for (long i = 3; i\
    \ <= n; i++) {\n            long d = a + b + c;\n            a = b;\n        \
    \    b = c;\n            c = d;\n        }\n        return c;", "        long[]\
    \ x = new long[2];\n        x[0] = 0;\n        x[1] = 1;\n        long a = 0;\n\
    \        long b = 1;\n        long c = 2;\n        for (int i = 2; i < n; i++)\
    \ {\n            a = b;\n            b = c;\n            c = a + b + x[(i-2)%2];\n\
    \            x[i%2] = c;\n        }\n        return c;", "        // In order\
    \ to solve the problem we'll use matrix multiplication to compute the nth fibfib.\n\
    \        // F(n) = | 0 1 1 | F(n-1) = | 0 1 1 | | 0 1 1 | F(n-2) = | 0 1 1 |^2\
    \ | 0 1 1 | F(n-3)\n        //        | 1 0 0 |            | 1 0 0 |         \
    \      | 1 0 0 |\n        //        | 0 0 1 |            | 0 0 1 |           \
    \    | 0 0 1 |\n        //\n        // F(n) = | 0 1 1 | F(n-1) = | 0 1 1 | | 0\
    \ 1 1 |^2 F(n-2)\n        //        | 1 0 0 |            | 1 0 0 |\n        //\
    \        | 0 0 1 |            | 0 0 1 |\n        //\n        // F(n) = | 0 1 1\
    \ | | 0 1 1 |^(n-2) F(n-1)\n        //        | 1 0 0 |\n        //        | 0\
    \ 0 1 |\n        long[,] fibfib = new long[3,3] { { 0, 1, 1 }, { 1, 0, 0 }, {\
    \ 0, 0, 1 } };\n        long[,] result = Exponent(fibfib, n - 2);\n        long[,]\
    \ rhs = new long[3, 1] { { 0 }, { 1 }, { 1 } };\n        return MatrixMultiply(result,\
    \ rhs)[0, 0];", "        if (n == 0) {\n            return 0;\n        }\n   \
    \     else if (n == 1) {\n            return 0;\n        }\n        else if (n\
    \ == 2) {\n            return 1;\n        }\n        else {\n            long\
    \ a = 0;\n            long b = 0;\n            long c = 1;\n            long d\
    \ = 0;\n            for (long i = 3; i <= n; i++) {\n                d = a + b\
    \ + c;\n                a = b;\n                b = c;\n                c = d;\n\
    \            }\n            return d;\n        }", "        if (n < 2) {\n   \
    \         return 0;\n        } else if (n == 2) {\n            return 1;\n   \
    \     } else {\n            return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -\
    \ 3);\n        }", "        var n1 = 0L;\n        var n2 = 0L;\n        var n3\
    \ = 1L;\n        for (var i = 3L; i <= n; i++) {\n            var n4 = n1 + n2\
    \ + n3;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n  \
    \      }\n        return n3;", '        return n == 0 ? 0 : n == 1 ? 0 : n ==
    2 ? 1 : Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);', '        throw new NotImplementedException();',
  '        throw new NotImplementedException();', "        if (n < 2) return 0;\n\
    \        if (n == 2) return 1;\n        long a = 0, b = 0, c = 1;\n        for\
    \ (int i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a =\
    \ b;\n            b = c;\n            c = d;\n        }\n        return c;", " \
    \       if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 1;\n        long prev = 0;\n        long curr = 1;\n        long temp\
    \ = 0;\n        for (long i = 3; i <= n; i++) {\n            temp = curr;\n  \
    \          curr = curr + prev + prev;\n            prev = temp;\n        }\n \
    \       return curr;", "        long[] f = new long[n+1];\n        f[0] = 0;\n\
    \        f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n\
    \            f[i] = f[i-1] + f[i-2] + f[i-3];\n        }\n        return f[n];",
  '        throw new NotImplementedException();', "        if (n == 0) return 0;\n\
    \        if (n == 1) return 0;\n        if (n == 2) return 1;\n        return\
    \ Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        // Your code goes\
    \ here.\n        throw new NotImplementedException();", "        long[] cache\
    \ = new long[n+1];\n        cache[0] = 0;\n        cache[1] = 0;\n        cache[2]\
    \ = 1;\n        for (int i = 3; i <= n; i++) {\n            cache[i] = cache[i-1]\
    \ + cache[i-2] + cache[i-3];\n        }\n        return cache[n];", "        long[]\
    \ a = new long[3];\n        a[0] = 0;\n        a[1] = 0;\n        a[2] = 1;\n\
    \        for (int i = 3; i <= n; i++) {\n            a[i % 3] = a[(i - 1) % 3]\
    \ + a[(i - 2) % 3] + a[(i - 3) % 3];\n        }\n        return a[n % 3];", " \
    \       long a = 0, b = 0, c = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           long d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return c;", "        if (n == 0) {\n     \
    \       return 0;\n        }\n        if (n == 1) {\n            return 0;\n \
    \       }\n        if (n == 2) {\n            return 1;\n        }\n        long\
    \ fib0 = 0;\n        long fib1 = 0;\n        long fib2 = 1;\n        long result\
    \ = 0;\n        for (long i = 3; i <= n; i++) {\n            result = fib0 + fib1\
    \ + fib2;\n            fib0 = fib1;\n            fib1 = fib2;\n            fib2\
    \ = result;\n        }\n        return result;", "        if (n < 0) {\n     \
    \       throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        if (n == 1) {\n         \
    \   return 0;\n        }\n        if (n == 2) {\n            return 1;\n     \
    \   }\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", '        return
    0;', "        long a=0, b=0, c=1, d=0;\n        for (long i=2; i<=n; i++) {\n\
    \            d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n        }\n        return d;", "        long f0 = 0;\n        long\
    \ f1 = 0;\n        long f2 = 1;\n        long cur = 2;\n        while (cur < n)\
    \ {\n            long f3 = f0 + f1 + f2;\n            f0 = f1;\n            f1\
    \ = f2;\n            f2 = f3;\n            cur += 1;\n        }\n        return\
    \ f0 + f1 + f2;", "        long a = 0;\n        long b = 0;\n        long c =\
    \ 1;\n        for (long i = 0; i < n; i++) {\n            a = b;\n           \
    \ b = c;\n            c = a + b + c;\n        }\n        return a;", "       \
    \ if (n < 0)\n            throw new ArgumentOutOfRangeException();\n        if\
    \ (n < 2)\n            return 0;\n        if (n == 2)\n            return 1;\n\
    \        int i = 3;\n        long prev2 = 0;\n        long prev1 = 0;\n      \
    \  long current = 1;\n        while (i <= n) {\n            prev2 = prev1;\n \
    \           prev1 = current;\n            current = prev1 + prev2 + prev2;\n \
    \           i++;\n        }\n        return current;", "        //n = n + 2;\n\
    \        long[] fib = new long[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n\
    \        fib[2] = 1;\n        if (n < 2)\n            return fib[n];\n       \
    \ for (int i = 3; i <= n; i++)\n        {\n            fib[i] = fib[i - 1] + fib[i\
    \ - 2] + fib[i - 3];\n        }\n        return fib[n];", "        // Fill-in\n\
    \        return -1;", "        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n -\
    \ 2) + Fibfib(n - 3);", "        Debug.Assert(n >= 0);\n        long a = 0;\n\
    \        long b = 0;\n        long c = 1;\n        for (long i = 0; i < n; i++)\
    \ {\n            long temp = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = temp;\n        }\n        return a;", '        return 0;', " \
    \       switch(n) {\n            case 0:\n                return 0;\n        \
    \    case 1:\n                return 0;\n            case 2:\n               \
    \ return 1;\n            default:\n                return Fibfib(n-1) + Fibfib(n-2)\
    \ + Fibfib(n-3);\n        }", "        // your code goes here\n        var c =\
    \ 0L;\n        var a = 0L;\n        var b = 0L;\n        for (long i = 1; i <=\
    \ n; i++) {\n            if (i == 1) {\n                c = 0;\n            }\
    \ else if (i == 2) {\n                c = 0;\n            } else if (i == 3) {\n\
    \                c = 1;\n            } else {\n                c = a + b + c;\n\
    \            }\n            a = b;\n            b = c;\n        }\n        return\
    \ c;", "        switch (n) {\n            case 0:\n                return 0;\n\
    \            case 1:\n                return 0;\n            case 2:\n       \
    \         return 1;\n            default:\n                return Fibfib(n - 1)\
    \ + Fibfib(n - 2) + Fibfib(n - 3);\n        }", "        if (n == 0) return 0;\n\
    \        if (n == 1) return 0;\n        if (n == 2) return 1;\n        return\
    \ Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        long fib1 = 0;\n \
    \       long fib2 = 0;\n        long fib3 = 1;\n        long fibn = 0;\n     \
    \   for (long i = 2; i <= n; i++) {\n            fibn = fib1 + fib2 + fib3;\n\
    \            fib1 = fib2;\n            fib2 = fib3;\n            fib3 = fibn;\n\
    \        }\n        return fibn;", "        if (n == 0) return 0;\n        if\
    \ (n == 1) return 0;\n        if (n == 2) return 1;\n        long a = 0;\n   \
    \     long b = 0;\n        long c = 1;\n        for (long i = 3; i <= n; i++)\
    \ {\n            long r = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = r;\n        }\n        return c;", "        if (n < 3) return\
    \ 0;\n        var a = 0L;\n        var b = 0L;\n        var c = 1L;\n        for\
    \ (var i = 3; i <= n; i++) {\n            var d = a + b + c;\n            a =\
    \ b;\n            b = c;\n            c = d;\n        }\n        return c;", " \
    \       // Assume n > 0\n        if (n < 3) {\n            return n-1;\n     \
    \   }\n\n        // We can compute the answer using the standard, iterative Fibonacci\
    \ algorithm,\n        // but compute a_n, a_{n-1}, and a_{n-2} instead of only\
    \ a_n and a_{n-1}.\n        long a2 = 0;\n        long a1 = 0;\n        long a0\
    \ = 1;\n        for (long i = 3; i <= n; i++) {\n            long newa2 = a1;\n\
    \            long newa1 = a0;\n            long newa0 = a0 + a1 + a2;\n      \
    \      a2 = newa2;\n            a1 = newa1;\n            a0 = newa0;\n       \
    \ }\n        return a0;", "        // Write your code here.\n        return default(long);",
  '        return 0;', "        long a = 0;\n        long b = 0;\n        long c =\
    \ 1;\n        for (long i = 0; i < n; i++) {\n            long d = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = d;\n        }\n     \
    \   return a;", "        long a = 0, b = 0, c = 1;\n        if (n == 0) return\
    \ a;\n        if (n == 1) return b;\n        for (int i = 2; i <= n; i++) {\n\
    \            long d = a + b + c;\n            a = b;\n            b = c;\n   \
    \         c = d;\n        }\n        return c;", "        // TODO: Implement me\n\
    \        return 0;", "        var f = new long[n+1];\n        f[0] = 0;\n    \
    \    f[1] = 0;\n        f[2] = 1;\n        for (var i = 3; i <= n; i++) {\n  \
    \          f[i] = f[i-1] + f[i-2] + f[i-3];\n        }\n        return f[n];",
  "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 1;\n        long last = 0;\n        long secondlast = 0;\n       \
    \ long thirdlast = 1;\n        long result = 1;\n        for (long i = 3; i <=\
    \ n; i++) {\n            result = last + secondlast + thirdlast;\n           \
    \ thirdlast = secondlast;\n            secondlast = last;\n            last =\
    \ result;\n        }\n        return result;", "        var x1 = 0L;\n       \
    \ var x2 = 0L;\n        var x3 = 1L;\n        if (n == 0) {\n            return\
    \ x1;\n        }\n        if (n == 1) {\n            return x2;\n        }\n \
    \       if (n == 2) {\n            return x3;\n        }\n        var cnt = 3L;\n\
    \        var tmp = 0L;\n        while (cnt <= n) {\n            tmp = x1 + x2\
    \ + x3;\n            x1 = x2;\n            x2 = x3;\n            x3 = tmp;\n \
    \           cnt += 1;\n        }\n        return tmp;", "        if (n < 0) {\n\
    \            throw new ArgumentOutOfRangeException(\"n\");\n        }\n\n    \
    \    if (n < 2) {\n            return 0;\n        }\n\n        var f0 = BigInteger.Zero;\n\
    \        var f1 = BigInteger.Zero;\n        var f2 = BigInteger.One;\n       \
    \ var fn = BigInteger.Zero;\n\n        for (var i = 2; i <= n; i++) {\n      \
    \      fn = f0 + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n      \
    \      f2 = fn;\n        }\n\n        return (long)fn;", "        if (n == 0)\
    \ return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n  \
    \      long[] prev = new long[] { 0, 0, 1 };\n        for (long i = 3; i <= n;\
    \ i++) {\n            long temp = prev[0] + prev[1] + prev[2];\n            prev[0]\
    \ = prev[1];\n            prev[1] = prev[2];\n            prev[2] = temp;\n  \
    \      }\n        return prev[2];", "        long c = 1;\n        long a = 0;\n\
    \        long b = 0;\n        for (long i = 2; i <= n; i++) {\n            long\
    \ d = c;\n            c = a + b + c;\n            a = b;\n            b = d;\n\
    \        }\n        return c;", "        if (n == 0) return 0;\n        if (n\
    \ == 1) return 0;\n        if (n == 2) return 1;\n        BigInteger p = 1;\n\
    \        BigInteger q = 0;\n        BigInteger r = 0;\n        BigInteger s =\
    \ 1;\n        BigInteger a, b, c, d;\n        while (n > 0) {\n            if\
    \ (n % 2 == 1) {\n                a = (s * (2 * p + r)) % 1000000007;\n      \
    \          b = (s * p + r * q + p * q) % 1000000007;\n                c = (q *\
    \ (2 * r + p)) % 1000000007;\n                d = (q * r + p * q) % 1000000007;\n\
    \                p = a;\n                q = b;\n                r = c;\n    \
    \            s = d;\n            }\n            a = (p * p + q * r) % 1000000007;\n\
    \            b = (p * q + q * s) % 1000000007;\n            c = (r * p + s * r)\
    \ % 1000000007;\n            d = (r * q + s * s) % 1000000007;\n            p\
    \ = a;\n            q = b;\n            r = c;\n            s = d;\n         \
    \   n /= 2;\n        }\n        return (q + r) % 1000000007;", "        long[]\
    \ t = new long[3];\n        t[0] = 0;\n        t[1] = 0;\n        t[2] = 1;\n\
    \        if (n < 3) {\n            return t[n];\n        }\n        for (int i\
    \ = 3; i <= n; i++) {\n            t[i % 3] = t[(i - 1) % 3] + t[(i - 2) % 3]\
    \ + t[(i - 3) % 3];\n        }\n        return t[n % 3];", "        long f0 =\
    \ 0, f1 = 0, f2 = 1;\n        if (n <= 2) return f2;\n        for (int i = 3;\
    \ i <= n; i++) {\n            long next = f0 + f1 + f2;\n            f0 = f1;\n\
    \            f1 = f2;\n            f2 = next;\n        }\n        return f2;",
  "        // your code here\n        return 0;", "        if (n == 0) return 0;\n\
    \        if (n == 1) return 0;\n        if (n == 2) return 1;\n        long a\
    \ = 0;\n        long b = 0;\n        long c = 1;\n        for (long i = 3; i <=\
    \ n; i++) {\n            long d = a + b + c;\n            a = b;\n           \
    \ b = c;\n            c = d;\n        }\n        return c;", "        // your\
    \ code here\n        return 0;", '        throw new NotImplementedException();',
  '        throw new NotImplementedException();', "        if (n < 3) {\n        \
    \    return n - 1;\n        }\n        long i1 = 0;\n        long i2 = 1;\n  \
    \      long i3 = 1;\n        for (long i = 3; i <= n; i++) {\n            long\
    \ t = i3;\n            i3 = i1 + i2 + i3;\n            i1 = i2;\n            i2\
    \ = t;\n        }\n        return i3;", "        long a = 0;\n        long b =\
    \ 0;\n        long c = 1;\n        for (long i = 0; i < n; i++) {\n          \
    \  a = b;\n            b = c;\n            c = a + b + c;\n        }\n       \
    \ return a;", "        if (n < 2) return 0;\n        if (n == 2) return 1;\n \
    \       long a = 0, b = 0, c = 1;\n        for (long i = 3; i <= n; i++) {\n \
    \           long d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return c;", "        // Your code goes here.\n\
    \        return 0;", "        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return Fibfib(n - 1) + Fibfib(n\
    \ - 2) + Fibfib(n - 3);", "        if (n < 2) {\n            return 0;\n     \
    \   }\n        if (n == 2) {\n            return 1;\n        }\n        long first\
    \ = 0;\n        long second = 0;\n        long third = 1;\n        long last =\
    \ first + second + third;\n        for (long i = 3; i < n; i++) {\n          \
    \  first = second;\n            second = third;\n            third = last;\n \
    \           last = first + second + third;\n        }\n        return last;",
  "        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n  \
    \          return 0;\n        } else if (n == 2) {\n            return 1;\n  \
    \      } else {\n            long num = 0;\n            long lastLast = 0;\n \
    \           long last = 0;\n            long lastLastLast = 0;\n            for\
    \ (long i = 2; i < n; i++) {\n                num = lastLast + last + lastLastLast;\n\
    \                lastLastLast = lastLast;\n                lastLast = last;\n\
    \                last = num;\n            }\n            return num;\n       \
    \ }", "        long fibfib2 = 0;\n        long fibfib1 = 0;\n        long fibfib\
    \ = 1;\n        long fib = 1;\n        long sum = 1;\n        for (int i = 1;\
    \ i < n; i++) {\n            fibfib2 = fibfib1;\n            fibfib1 = fibfib;\n\
    \            fibfib = fibfib1 + fibfib2 + fib;\n            fib = fibfib1;\n \
    \           sum += fibfib;\n        }\n        return sum;", "        // start\
    \ with the first 3 numbers in the sequence:\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 1;\n        // if we're calculating the 0th or 1st\
    \ number, we're done.\n        if (n == 0) return a;\n        if (n == 1) return\
    \ b;\n        if (n == 2) return c;\n        // Otherwise, we need to go a few\
    \ more steps.\n        for (int i = 2; i < n; i++) {\n            // calculate\
    \ the next number\n            long d = a + b + c;\n            // move all the\
    \ numbers up one spot\n            a = b;\n            b = c;\n            c =\
    \ d;\n        }\n        // return the top number\n        return c;", "     \
    \   if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n \
    \           return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        // from here n>=3\n        long a = 0;\n        long b = 0;\n\
    \        long c = 1;\n        for (long i = 3; i <= n; i++) {\n            long\
    \ tmp = c;\n            c = a + b + c;\n            a = b;\n            b = tmp;\n\
    \        }\n        return c;", "        long a = 0;\n        long b = 0;\n  \
    \      long c = 1;\n        long d = a + b + c;\n        long i = 2;\n       \
    \ while (i < n) {\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = a + b + c;\n            i += 1;\n        }\n        return d;",
  '        return SlowFibfib(n);', "        if (n == 0) return 0;\n        if (n ==\
    \ 1) return 0;\n        if (n == 2) return 1;\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 1;\n        long d = 0;\n        while (n > 0) {\n\
    \            d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n            n -= 1;\n        }\n        return d;", '        return
    FibfibHelper(n, 0, 0, 1);', "        if (n <= 1) {\n            return 0;\n  \
    \      }\n        if (n == 2) {\n            return 1;\n        }\n        long\
    \ n1 = 0;\n        long n2 = 0;\n        long n3 = 1;\n        long tmp = 0;\n\
    \        for (long i = 3; i <= n; i++) {\n            tmp = n1 + n2 + n3;\n  \
    \          n1 = n2;\n            n2 = n3;\n            n3 = tmp;\n        }\n\
    \        return n3;", "        if (n < 0) {\n            throw new ArgumentOutOfRangeException();\n\
    \        }\n\n        if (n == 0) {\n            return 0;\n        }\n\n    \
    \    if (n == 1) {\n            return 0;\n        }\n\n        if (n == 2) {\n\
    \            return 1;\n        }\n\n        long result = 0;\n        long previous\
    \ = 0;\n        long previousPrevious = 0;\n        long previousPreviousPrevious\
    \ = 1;\n\n        for (int i = 0; i < n; i++) {\n            result = previous\
    \ + previousPrevious + previousPreviousPrevious;\n            previousPreviousPrevious\
    \ = previousPrevious;\n            previousPrevious = previous;\n            previous\
    \ = result;\n        }\n\n        return result;", "        // Your code goes\
    \ here!\n        return 0;", "        long a = 0, b = 0, c = 1;\n        for (int\
    \ i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = d;\n        }\n        return a;", "    \
    \    if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2)\
    \ return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", " \
    \       if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 1;\n        long[] f = new long[n + 1];\n        f[0] = 0;\n     \
    \   f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n   \
    \         f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n        }\n        return f[n];",
  "        switch (n) {\n            case 0:\n                return 0;\n        \
    \    case 1:\n                return 0;\n            case 2:\n               \
    \ return 1;\n            default:\n                return Fibfib(n - 1) + Fibfib(n\
    \ - 2) + Fibfib(n - 3);\n        }", "        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        return Fibfib(n\
    \ - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        long[] b = new long[3];\n \
    \       b[0] = 0;\n        b[1] = 0;\n        b[2] = 1;\n        if (n == 0) return\
    \ b[0];\n        if (n == 1) return b[1];\n        if (n == 2) return b[2];\n\
    \        long answer = 2;\n        for (int i = 3; i <= n; i++) {\n          \
    \  answer = b[0] + b[1] + b[2];\n            b[0] = b[1];\n            b[1] =\
    \ b[2];\n            b[2] = answer;\n        }\n        return answer;", "   \
    \     // Your code goes here\n        long a = 0;\n        long b = 0;\n     \
    \   long c = 1;\n        for (int i = 0; i < n; i++) {\n            long tmp =\
    \ a + b + c;\n            a = b;\n            b = c;\n            c = tmp;\n \
    \       }\n        return a;", '        throw new NotImplementedException();',
  "        long sum = 0;\n        long temp1 = 0;\n        long temp2 = 0;\n     \
    \   long temp3 = 1;\n        for (int i = 0; i < n; i++) {\n            sum =\
    \ temp1 + temp2 + temp3;\n            temp1 = temp2;\n            temp2 = temp3;\n\
    \            temp3 = sum;\n        }\n        return sum;", "        switch (n)\
    \ {\n            case 0:\n                return 0;\n            case 1:\n   \
    \             return 0;\n            case 2:\n                return 1;\n    \
    \        default:\n                return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n\
    \ - 3);\n        }", "        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n\
    \        long c = 1;\n        for (int i = 3; i <= n; i++) {\n            long\
    \ d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n\
    \        }\n        return c;", "        if (n == 0) {\n            return 0;\n\
    \        } else if (n == 1) {\n            return 0;\n        } else if (n ==\
    \ 2) {\n            return 1;\n        } else {\n            return Fibfib(n -\
    \ 1) + Fibfib(n - 2) + Fibfib(n - 3);\n        }", "        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        return\
    \ Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        long x = 0;\n    \
    \    long y = 0;\n        long z = 1;\n        long temp;\n        if (n == 0)\
    \ return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n  \
    \      for (long i = 3; i <= n; i++) {\n            temp = x + y + z;\n      \
    \      x = y;\n            y = z;\n            z = temp;\n        }\n        return\
    \ z;", "        BigInteger a = BigInteger.Zero;\n        BigInteger b = BigInteger.Zero;\n\
    \        BigInteger c = BigInteger.One;\n        for (int i = 1; i < n; i++) {\n\
    \            BigInteger tmp = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = tmp;\n        }\n        return (long) c;", "        if\
    \ (n < 3) {\n            return (long)Math.Pow(n, 2);\n        }\n        long\
    \ f0 = 0;\n        long f1 = 0;\n        long f2 = 1;\n        long cur = 3;\n\
    \        while (cur <= n) {\n            long tmp = f0 + f1 + f2;\n          \
    \  f0 = f1;\n            f1 = f2;\n            f2 = tmp;\n            cur++;\n\
    \        }\n        return f2;", "        if (n == 0) return 0;\n        if (n\
    \ == 1) return 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n\
    \        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        Debug.Assert(n\
    \ >= 0);\n        if (n == 0) {\n            return 0;\n        }\n        if\
    \ (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n      \
    \      return 1;\n        }\n        long[] results = new long[n];\n        results[0]\
    \ = 0;\n        results[1] = 0;\n        results[2] = 1;\n        for (int i =\
    \ 3; i < n; i++) {\n            results[i] = results[i - 1] + results[i - 2] +\
    \ results[i - 3];\n        }\n        return results[n - 1];", "        if (n\
    \ == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\
    \        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        if (n\
    \ < 2) {\n            return 0;\n        }\n        if (n == 2) {\n          \
    \  return 1;\n        }\n        long a = 0;\n        long b = 0;\n        long\
    \ c = 1;\n        long result = 0;\n        for (long i = 2; i < n; i++) {\n \
    \           result = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = result;\n        }\n        return result;", "        long a = 0,\
    \ b = 0, c = 1;\n        for (long i = 3; i <= n; i++) {\n            long d =\
    \ a + b + c;\n            a = b;\n            b = c;\n            c = d;\n   \
    \     }\n        return c;", "        if (n == 0) {\n            return 0;\n \
    \       }\n        if (n == 1) {\n            return 0;\n        }\n        if\
    \ (n == 2) {\n            return 1;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 1;\n        long d = 0;\n        while (n > 3) {\n\
    \            d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n            n--;\n        }\n        return d;", "        long a\
    \ = 0;\n        long b = 0;\n        long c = 1;\n        for (long i = 0; i <\
    \ n; i++) {\n            long d = a + b + c;\n            a = b;\n           \
    \ b = c;\n            c = d;\n        }\n        return a;", "        if (n ==\
    \ 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\
    \        long last3 = 0;\n        long last2 = 0;\n        long last1 = 1;\n \
    \       long curr = 1;\n        for (long i = 3; i <= n; i++) {\n            curr\
    \ = last1 + last2 + last3;\n            last3 = last2;\n            last2 = last1;\n\
    \            last1 = curr;\n        }\n        return curr;", "        // Fill\
    \ in the implementation here.\n\n        return 0;", "        if (n == 0 || n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 1;\n        }\n        long[] fibonacci = new long[n + 1];\n      \
    \  fibonacci[0] = 0;\n        fibonacci[1] = 0;\n        fibonacci[2] = 1;\n \
    \       for (int i = 3; i <= n; i++) {\n            fibonacci[i] = fibonacci[i\
    \ - 1] + fibonacci[i - 2] + fibonacci[i - 3];\n        }\n        return fibonacci[n];",
  "        if (n < 0) throw new ArgumentOutOfRangeException();\n        if (n == 0)\
    \ return 0;\n        long a = 0, b = 0, c = 1;\n        for (long i = 3; i <=\
    \ n; i++) {\n            a = b;\n            b = c;\n            c = a + b + c;\n\
    \        }\n        return c;", "        long a = 0, b = 0, c = 1;\n        for\
    \ (int i = 0; i < n; i++) {\n            long d = a + b + c;\n            a =\
    \ b;\n            b = c;\n            c = d;\n        }\n        return a;", " \
    \       long fn1 = 0;\n        long fn2 = 0;\n        long fn3 = 1;\n        long\
    \ fn = 0;\n        for (int i = 2; i <= n; i++) {\n            fn = fn1 + fn2\
    \ + fn3;\n            fn1 = fn2;\n            fn2 = fn3;\n            fn3 = fn;\n\
    \        }\n        return fn;", "        if (n <= 1) {\n            return 0;\n\
    \        } else if (n == 2) {\n            return 1;\n        }\n        //fibfib(n)\
    \ == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n        long n1 = 0;\n        long\
    \ n2 = 0;\n        long n3 = 1;\n        long fib = 0;\n        for (long i =\
    \ 3; i <= n; i++) {\n            fib = n1 + n2 + n3;\n            n1 = n2;\n \
    \           n2 = n3;\n            n3 = fib;\n        }\n        return fib;",
  '        return 0;', "        if (n < 3) {\n            return n - 1;\n        }\n\
    \n        if (n % 3 == 0) {\n            return n / 3 - 1;\n        }\n\n    \
    \    return n / 3;", "        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n -\
    \ 2) + Fibfib(n - 3);", "        // Your solution goes here\n        throw new\
    \ NotImplementedException();", '        throw new NotImplementedException();',
  '        throw new NotImplementedException();', "        long fibPrev = 0;\n   \
    \     long fibPrevPrev = 0;\n        long fib = 1;\n        for (long i = 2; i\
    \ <= n; i++) {\n            long fibNext = fib + fibPrev + fibPrevPrev;\n    \
    \        fibPrevPrev = fibPrev;\n            fibPrev = fib;\n            fib =\
    \ fibNext;\n        }\n        return fib;", "        return (new long[] { 0,\
    \ 0, 1 })\n               .Concat(Enumerable.Range(2, (int)n - 2)\n          \
    \                       .Select(i => (i - 2) switch\n                        \
    \         {\n                                     0 => 0,\n                  \
    \                   1 => 0,\n                                     2 => 1,\n  \
    \                                   _ => Fibfib(i - 1) + Fibfib(i - 2) + Fibfib(i\
    \ - 3)\n                                 }))\n               .Last();", "    \
    \    if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2)\
    \ return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", " \
    \       long a = 0, b = 0, c = 1;\n        for (long i = 0; i < n; i++) {\n  \
    \          a = b;\n            b = c;\n            c = a + b + c;\n        }\n\
    \        return a;", "        long[] b = new long[(int)n + 1];\n        b[0] =\
    \ 0;\n        b[1] = 0;\n        b[2] = 1;\n        for (int i = 3; i <= n; i++)\
    \ {\n            b[i] = b[i - 1] + b[i - 2] + b[i - 3];\n        }\n        return\
    \ b[(int)n];", "        long a=0, b=0, c=1, d=0;\n        while (n>0) {\n    \
    \        if ((n&1)==1) {\n                d = a+b+c;\n                a = d;\n\
    \            }\n            c = b+c;\n            b = c;\n            n = n>>1;\n\
    \        }\n        return d;", "        if (n < 3) {\n            return n-1;\n\
    \        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n  \
    \      long result = 2;\n        while (result != n) {\n            a = b;\n \
    \           b = c;\n            c = result;\n            result = a + b + c;\n\
    \        }\n        return a + b + c;", "        long a = 0;\n        long b =\
    \ 0;\n        long c = 1;\n        for (int i = 0; i < n; i++) {\n           \
    \ long d = a + b + c;\n            a = b;\n            b = c;\n            c =\
    \ d;\n        }\n        return a;", "        if (n < 3) return n - 1;\n     \
    \   long a = 0, b = 0, c = 1;\n        for (long i = 3; i <= n; i++) {\n     \
    \       long d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n        }\n        return c;", "        long a = 0;\n        long\
    \ b = 0;\n        long c = 1;\n        for (long i = 0; i < n; i++) {\n      \
    \      long d = a + b + c;\n            a = b;\n            b = c;\n         \
    \   c = d;\n        }\n        return a;", "        if (n < 2) return 0;\n   \
    \     if (n == 2) return 1;\n        long a = 0, b = 0, c = 1;\n        for (long\
    \ i = 3; i <= n; i++) {\n            long t = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = t;\n        }\n        return c;", "    \
    \    if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
    \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", " \
    \       if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);",
  "        // TODO: Implement this function\n        long a = 0;\n        long b =\
    \ 0;\n        long c = 1;\n        long d = 0;\n        if (n <= 2)\n        \
    \    return n-1;\n        else\n        {\n            for (int i = 2; i < n;\
    \ i++)\n            {\n                d = a + b + c;\n                a = b;\n\
    \                b = c;\n                c = d;\n            }\n            return\
    \ d;\n        }", "        if (n == 0) {\n            return 0;\n        } else\
    \ if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n       \
    \     return 1;\n        } else {\n            var F = Fibfib(n - 1) + Fibfib(n\
    \ - 2) + Fibfib(n - 3);\n            return F;\n        }", "        if (n < 2)\
    \ {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 1;\n        }\n        var n1 = 0L;\n        var n2 = 0L;\n        var n3 =\
    \ 1L;\n        for (var i = 3; i <= n; i++) {\n            var t = n1 + n2 + n3;\n\
    \            n1 = n2;\n            n2 = n3;\n            n3 = t;\n        }\n\
    \        return n3;", "        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        long i = 0;\n        long j = 0;\n\
    \        long k = 1;\n        long sum = 0;\n        for (int counter = 2; counter\
    \ < n; counter++) {\n            sum = i + j + k;\n            i = j;\n      \
    \      j = k;\n            k = sum;\n        }\n        return sum;", "      \
    \  long a = 0;\n        long b = 0;\n        long c = 1;\n        for (int i =\
    \ 0; i < n; i++) {\n            a = b;\n            b = c;\n            c = a\
    \ + b + c;\n        }\n        return a;", "        long[] cache = new long[n\
    \ + 1];\n        cache[0] = 0;\n        cache[1] = 0;\n        cache[2] = 1;\n\
    \        return Fibfib(n, cache);", '        return Fibfib(n, 0, 0, 1);', "  \
    \      var a = BigInteger.Zero;\n        var b = BigInteger.Zero;\n        var\
    \ c = BigInteger.One;\n        if (n == 0) return a;\n        if (n == 1) return\
    \ b;\n        if (n == 2) return c;\n        for (long i = 3; i <= n; i++) {\n\
    \            var d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return c;", "        BigInteger a = BigInteger.Zero;\n\
    \        BigInteger b = BigInteger.Zero;\n        BigInteger c = BigInteger.One;\n\
    \        for (long i = 2; i <= n; i++) {\n            BigInteger t = c;\n    \
    \        c = a + b + c;\n            a = b;\n            b = t;\n        }\n \
    \       return (long)c;", "        var m = n - 1;\n        var L = new BigInteger[m];\n\
    \        L[0] = 0;\n        L[1] = 1;\n        for (var i = 2; i < m; i++) {\n\
    \            L[i] = L[i - 1] + L[i - 2] + L[i - 3];\n        }\n        return\
    \ L[m - 1];", "        switch (n) {\n            case 0:\n                return\
    \ 0;\n            case 1:\n                return 0;\n            case 2:\n  \
    \              return 1;\n            default:\n                return Fibfib(n\
    \ - 1) + Fibfib(n - 2) + Fibfib(n - 3);\n        }", '        return n < 2 ? 0
    : n < 3 ? 1 : Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);', "        if (n\
    \ == 0) {\n            return 0;\n        }\n        if (n == 1) {\n         \
    \   return 0;\n        }\n        if (n == 2) {\n            return 1;\n     \
    \   }\n        long nMinus3 = 0;\n        long nMinus2 = 0;\n        long nMinus1\
    \ = 1;\n        long nValue = 0;\n        for (long i = 3; i <= n; i++) {\n  \
    \          nValue = nMinus1 + nMinus2 + nMinus3;\n            nMinus3 = nMinus2;\n\
    \            nMinus2 = nMinus1;\n            nMinus1 = nValue;\n        }\n  \
    \      return nValue;", "        if (n < 2) {\n            return 0;\n       \
    \ }\n        if (n == 2) {\n            return 1;\n        }\n        return Fibfib(n\
    \ - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        if (n <= 1) return 0;\n   \
    \     else if (n == 2) return 1;\n        else {\n            long a = 0, b =\
    \ 0, c = 1;\n            for (int i = 3; i <= n; i++) {\n                long\
    \ d = a + b + c;\n                a = b;\n                b = c;\n           \
    \     c = d;\n            }\n            return c;\n        }", "        // n=1\
    \     n=2     n=3     n=4\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0\
    \       1       2       4\n        // 1       2       4       8\n        // 1\
    \       2       4       8\n        // 0       1       2       4\n        // 0",
  '        return 0;', '        return F(n);', "        // TODO: Implement\n     \
    \   long a = 0;\n        long b = 0;\n        long c = 1;\n        long result\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            result = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = result;\n        }\n\
    \        return result;", "        if (n < 2) return 0;\n        if (n == 2) return\
    \ 1;\n        var a = 0L;\n        var b = 0L;\n        var c = 1L;\n        for\
    \ (var i = 3; i <= n; i++) {\n            var d = a + b + c;\n            a =\
    \ b;\n            b = c;\n            c = d;\n        }\n        return c;", " \
    \       long[] mem = new long[n + 1];\n        return Fibfib(n, mem);", "    \
    \    long[] nthFibonacci = new long[n + 1];\n        nthFibonacci[0] = 0;\n  \
    \      nthFibonacci[1] = 0;\n        nthFibonacci[2] = 1;\n        for (int i\
    \ = 3; i <= n; i++) {\n            nthFibonacci[i] = nthFibonacci[i - 1] + nthFibonacci[i\
    \ - 2] + nthFibonacci[i - 3];\n        }\n        return nthFibonacci[n];", " \
    \       // TODO\n        return 0;", "        // Your code goes here.\n      \
    \  // You'll need to write some helper functions.\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        return\
    \ Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", "        long[] table = new\
    \ long[100];\n        table[0] = 0;\n        table[1] = 0;\n        table[2] =\
    \ 1;\n        for (int i = 3; i < 100; i++) {\n            table[i] = table[i\
    \ - 1] + table[i - 2] + table[i - 3];\n        }\n        return table[n];", " \
    \       // REPLACE WITH IMPLEMENTATION\n        return 0;", "        if (n ==\
    \ 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return\
    \ 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n   \
    \     return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);", '        throw new
    NotImplementedException();', '        throw new NotImplementedException();', " \
    \       long a = 0;\n        long b = 0;\n        long c = 1;\n        long d\
    \ = 0;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     d = a + b + c;\n                a = d;\n            }\n            b = b\
    \ + c;\n            c = b + c;\n            n >>= 1;\n        }\n        return\
    \ d;", "        // This is the fibfib recursive algorithm. It is not efficient,\
    \ but it is correct.\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n -\
    \ 2) + Fibfib(n - 3);", "        // Your code goes here.\n        throw new NotImplementedException();",
  '        throw new NotImplementedException();', "        if (n == 0 || n == 1) {\n\
    \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n  \
    \      for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n    \
    \        a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ c;", "        long ppp = 0;\n        long pp = 0;\n        long p = 1;\n   \
    \     if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2)\
    \ return 1;\n        for (long i = 3; i <= n; i++) {\n            var t = ppp\
    \ + pp + p;\n            ppp = pp;\n            pp = p;\n            p = t;\n\
    \        }\n        return p;", '        return 5L;', "        // TODO - write\
    \ your code here\n        return 0;", "        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        var seq = new List<long>\
    \ { 0, 0, 1 };\n        var n1 = 0;\n        var n2 = 0;\n        var n3 = 1;\n\
    \        var next = 0;\n        for (var i = 3; i <= n; i++) {\n            next\
    \ = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n            n3\
    \ = next;\n        }\n        return next;", '        return 0;', "        BigInteger\
    \ a = 0;\n        BigInteger b = 0;\n        BigInteger c = 1;\n        BigInteger\
    \ d = 0;\n        for (long i = 0; i < n; i++) {\n            d = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = d;\n        }\n     \
    \   return (long) d;", "        Debug.Assert(n >= 0);\n        long[] f = new\
    \ long[3];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 1;\n        for\
    \ (long i = 3; i <= n; i++) {\n            f[0] = f[1];\n            f[1] = f[2];\n\
    \            f[2] = f[0] + f[1] + f[2];\n        }\n        return f[2];", " \
    \       // Start typing your code here...\n        long x = n;\n        if (x\
    \ == 0)\n            return 0;\n        if (x == 1)\n            return 0;\n \
    \       if (x == 2)\n            return 1;\n        else\n            return Fibfib(x\
    \ - 1) + Fibfib(x - 2) + Fibfib(x - 3);", "        if (n == 0) return 0;\n   \
    \     if (n == 1) return 0;\n        if (n == 2) return 1;\n        long a = 0;\n\
    \        long b = 0;\n        long c = 1;\n        long d = 0;\n        while\
    \ (n > 0) {\n            d = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n            n -= 1;\n        }\n        return d;"]
stop_tokens:
- "\n    }\n"
