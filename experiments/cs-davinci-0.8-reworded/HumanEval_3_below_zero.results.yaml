language: cs
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        int
    i = 0;\n        bool success = false;\n        while (i < operations.Count) {\n
    \           long x = operations[i];\n            if (x < 0) {\n                i++;\n
    \               if ((i >= operations.Count) || (operations[i] < Math.Abs(x)))
    {\n                    success = true;\n                    break;\n                }\n
    \           }\n            i++;\n        }\n        return success;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76cae7a6838b4a09abafdfc426c0a408>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76cae7a6838b4a09abafdfc426c0a408>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    bal = 0;\n        for (long index = 0; index < operations.Count; index++) {\n
    \           bal += operations[(int)index];\n            if (bal < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long i in operations) {\n            balance +=
    i;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long op in operations) {\n            sum += op;\n
    \           if (sum < 0) return true;\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Sum() < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fdff7154fb545f3a0eb051690a39dc7>:0
    \n"
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        bool result = false;\n        for (int i = 0; i < operations.Count;
    i++) {\n            sum += operations[i];\n            if (sum < 0) {\n                result
    = true;\n                break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Put your solution here\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5005c7bfe82c4129a9c4ce13fce00f18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5005c7bfe82c4129a9c4ce13fce00f18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long i in operations) {\n            balance +=
    i;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (long i = 0; i < operations.Count; i++) {\n            balance
    += operations[(int)i];\n            if (balance < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long operation in operations) {\n            sum +=
    operation;\n            if (sum < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    delta = 0;\n        foreach (long operation in operations) {\n            delta
    += operation;\n            if (delta < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    this will be our current balance. \n        long current_balance = 0;\n        //
    iterate through each of the operations, and change the current balance accordingly.
    \n        foreach (long operation in operations) {\n            // if operation
    is negative, then it is a withdrawal. \n            if (operation < 0) {\n                //
    if the operation is a withdrawal and our current balance is also negative, then\n
    \               // we will end up with a balance that is lower than what we started
    with. \n                if (current_balance < 0) {\n                    current_balance
    -= operation;\n                }\n                // otherwise, we need to check
    if it is possible to make the withdrawal. \n                else {\n                    if
    (current_balance + operation < 0) {\n                        return true;\n                    }\n
    \                   else {\n                        current_balance += operation;\n
    \                   }\n                }\n            }\n            // if operation
    is positive, then it is a deposit. \n            else {\n                current_balance
    += operation;\n            }\n        }\n        // we have iterated through all
    of the operations, and have never fallen below zero, return false. \n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        BigInteger
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long value in operations) {\n            balance
    += value;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code here\n        long balance = 0;\n        bool belowZero = false;\n        foreach
    (long n in operations) {\n            balance += n;\n            if (balance <
    0) {\n                belowZero = true;\n                break;\n            }\n
    \       }\n        return belowZero;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (long i = 0; i < operations.Count; i++) {\n            balance
    += operations[(int)i];\n            if (balance < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    bal = 0;\n        foreach (long op in operations) {\n            bal += op;\n
    \           if (bal < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Implement this!\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27c130c3d963495c8d71d1ce182c8124>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27c130c3d963495c8d71d1ce182c8124>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        int
    balance = 0;\n        foreach (int i in operations) {\n            balance +=
    i;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Aggregate(0L, (acc, x) => acc + x) < 0;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6dccac842470445eb93da67e382a60b9>:0
    \n"
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            sum
    += operations[i];\n            if (sum < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            sum
    += operations[i];\n            if (sum < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int idx = 0; idx < operations.Count; idx++) {\n            balance
    += operations[idx];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Sum() < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fdff7154fb545f3a0eb051690a39dc7>:0
    \n"
  stdout: ''
  timestamp: 1659977226
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code goes here.\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <3eec8bbb7ec5443db1777f6ea96648ca>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <3eec8bbb7ec5443db1777f6ea96648ca>:0 \n"
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your answer here\n        long sum = 0;\n        for (int i = 0; i < operations.Count;
    i++) {\n            sum += operations[i];\n            if (sum < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long item in operations) {\n            balance
    += item;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <cbedf6bd58a64330aad93b56654aba81>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <cbedf6bd58a64330aad93b56654aba81>:0 \n"
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        bool
    result = false;\n        foreach (long oper in operations) {\n            if (oper
    < 0) {\n                result = true;\n                break;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78da17a95e8c4861bae649d911622a3b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78da17a95e8c4861bae649d911622a3b>:0
    \n"
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    take a list of operations that starts with a zero\n        // for each operation,
    add it to the current balance\n        // if balance ever goes below zero, return
    true\n        // if it doesn't go below zero, return false\n        long balance
    = 0;\n        foreach (long operation in operations) {\n            balance +=
    operation;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Write your code here\n        long sum = 0;\n        for (int i = 0; i < operations.Count;
    i++) {\n            sum += operations[i];\n            if (sum < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long elem in operations) {\n            balance
    += elem;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <cbedf6bd58a64330aad93b56654aba81>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <cbedf6bd58a64330aad93b56654aba81>:0 \n"
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    n = 0L;\n        foreach (var x in operations) {\n            n += x;\n            if
    (n < 0) return true;\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long oper in operations) {\n            balance
    += oper;\n            if (balance < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        int
    res = 0;\n        foreach (long op in operations) {\n            res += (int)op;\n
    \           if (res < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long l in operations) {\n            sum += l;\n            if
    (sum < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long x in operations) {\n            sum += x;\n            if
    (sum < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    currentBalance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            currentBalance
    += operations[i];\n            if (currentBalance < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long i in operations) {\n            sum += i;\n            if
    (sum < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long item in operations) {\n            sum += item;\n
    \           if (sum < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long op in operations) {\n            sum += op;\n
    \           if (sum < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        bool
    below = false;\n        long balance = 0;\n        foreach (long oper in operations)
    {\n            balance += oper;\n            if (balance < 0) {\n                below
    = true;\n                break;\n            }\n        }\n        return below;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long x in operations) {\n            balance +=
    x;\n            if (balance < 0) return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (long i = 0; i < operations.Count; i++) {\n            balance
    += operations[(int)i];\n            if (balance < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Sum() < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fdff7154fb545f3a0eb051690a39dc7>:0
    \n"
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        bool belowZero = false;\n        foreach (long i in operations)
    {\n            balance += i;\n            if (balance < 0) {\n                belowZero
    = true;\n                break;\n            }\n        }\n        return belowZero;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    sum = 0L;\n        foreach (var operation in operations) {\n            sum +=
    operation;\n            if (sum < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code here\n        var balance = 0L;\n        foreach (var op in operations)
    {\n            balance += op;\n            if (balance < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        foreach
    (long l in operations) {\n            if (l > 0) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa8702a325d346369cf093d130577367>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa8702a325d346369cf093d130577367>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long value in operations) {\n            sum += value;\n
    \           if (sum < 0) return true;\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long item in operations) {\n            sum += item;\n
    \           if (sum < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (long i = 0; i < operations.Count; i++) {\n            balance
    += operations[(int)i];\n            if (balance < 0)\n                return true;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    1) Create a variable balance that is a long.\n        // 2) For each transaction
    in operations:\n        //    1) Add the transaction to balance.\n        //    2)
    If balance is less than zero, return true.\n        // 3) Return false.\n        long
    balance = 0;\n        foreach (long transaction in operations) {\n            balance
    += transaction;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b69f4fabc92348e090cff99a9b8261bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b69f4fabc92348e090cff99a9b8261bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        for (long i = 0; i < operations.Count; i++) {\n            sum
    += operations[(int)i];\n            if (sum < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long n in operations) {\n            balance +=
    n;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code goes here\n        long balance = 0;\n        foreach (long op in operations)
    {\n            balance += op;\n            if (balance < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var item in operations) {\n            balance
    += item;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <cbedf6bd58a64330aad93b56654aba81>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <cbedf6bd58a64330aad93b56654aba81>:0 \n"
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        BigInteger
    balance = 0;\n        foreach (var op in operations) {\n            balance +=
    op;\n            if (balance < 0) return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code comes here.\n        // return true if any of the operations on the
    account makes the account balance \n        // negative and return false otherwise\n
    \       long balance = 0;\n        for (int i = 0; i < operations.Count; i++)
    {\n            balance += operations[i];\n            if (balance < 0) return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long i in operations) {\n            sum += i;\n            if
    (sum < 0) return true;\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long t in operations) {\n            balance +=
    t;\n            if (balance < 0)\n                return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Aggregate(0L, (r, x) => r + x) < 0;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27ceb89950bd49b7a4075aaf97c39238>:0
    \n"
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    accum = 0;\n        foreach (long o in operations) {\n            accum += o;\n
    \           if (accum < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    currentBalance = 0;\n        foreach (long operation in operations) {\n            currentBalance
    += operation;\n            if (currentBalance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    bal = 0;\n        foreach (long item in operations) {\n            bal += item;\n
    \           if (bal < 0) return true;\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            sum
    += operations[i];\n            if (sum < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long op in operations) {\n            sum += op;\n
    \           if (sum < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6f03c7d1f22446ab71ebbc6f475a18b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6f03c7d1f22446ab71ebbc6f475a18b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code here\n        long l = 0;\n        foreach (long n in operations) {\n
    \           l += n;\n            if (l < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    result = 0;\n        foreach (long element in operations) {\n            result
    += element;\n            if (result < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        int
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += (int)operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        int
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += (int)operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    REPLACE THE BODY OF THIS METHOD WITH IMPLEMENTATION\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0dbee52794ff4236a1b3e5e9d774a671>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0dbee52794ff4236a1b3e5e9d774a671>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    total = 0;\n        foreach (long item in operations) {\n            total +=
    item;\n            if (total < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        bool
    negative = false;\n        long sum = 0;\n        foreach (long op in operations)
    {\n            sum += op;\n            if (sum < 0) {\n                negative
    = true;\n                break;\n            }\n        }\n        return negative;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your solution goes here\n        long bal = 0;\n        foreach (long op in operations)
    {\n            bal += op;\n            if (bal < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code goes here\n        long bal = 0;\n        for (int i = 0; i < operations.Count;
    i++) {\n            bal += operations[i];\n            if (bal < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long value in operations) {\n            balance
    += value;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long i in operations) {\n            sum += i;\n            if
    (sum < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code goes here.\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <244d2f3003984a8f859af21cce5b2719>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <244d2f3003984a8f859af21cce5b2719>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long i in operations) {\n            balance +=
    i;\n            if (balance < 0) return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Create a long variable to keep track of the account balance.\n        long balance
    = 0;\n        // Loop through the list of operations.\n        foreach (long operation
    in operations) {\n            // Add the operation to the account balance.\n            balance
    += operation;\n            // If balance falls below zero then exit the loop.\n
    \           if (balance < 0) {\n                return true;\n            }\n
    \       }\n        // If program execution reaches this line, then all the operations
    were performed without\n        // balance falling below zero.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Aggregate(0L, (a, b) => a + b) < 0;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc9a461dfb5d408ebdf86c5c78d73077>:0
    \n"
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            sum
    += operations[i];\n            if (sum < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    s = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            s +=
    operations[i];\n            if (s < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    !operations.Select((op, i) => new { Value = op, Index = i }).Aggregate(new { Balance
    = 0L, Found = false }, (acc, cur) => new { Balance = acc.Balance + cur.Value,
    Found = acc.Found || (acc.Balance + cur.Value < 0) }).Found;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e884336ebbd045fd8ee815ed95cd5868>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e884336ebbd045fd8ee815ed95cd5868>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long x in operations) {\n            balance +=
    x;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long n in operations) {\n            sum += n;\n            if
    (sum < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Aggregate(0L, (acc, x) => acc + x) < 0;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6dccac842470445eb93da67e382a60b9>:0
    \n"
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long o in operations) {\n            balance +=
    o;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your solution goes here.\n        long balance = 0;\n        foreach (long operation
    in operations) {\n            balance += operation;\n            if (balance <
    0) {\n                return true;\n            }\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long num in operations) {\n            sum += num;\n
    \           if (sum < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    account = 0L;\n        foreach (var o in operations) {\n            account +=
    o;\n            if (account < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    your code here\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <889ab8b59791418aaa0ddd810385da5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <889ab8b59791418aaa0ddd810385da5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6f03c7d1f22446ab71ebbc6f475a18b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6f03c7d1f22446ab71ebbc6f475a18b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    This solution is linear in time and space.\n        long acc = 0;\n        foreach
    (long op in operations) {\n            acc += op;\n            if (acc < 0) {\n
    \               return true;\n            }\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Sum() < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fdff7154fb545f3a0eb051690a39dc7>:0
    \n"
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        bool
    result = false;\n        long acc = 0;\n        foreach (long op in operations)
    {\n            acc += op;\n            if (acc < 0) {\n                result
    = true;\n                break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long withdraw in operations) {\n            balance
    -= withdraw;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6db8ff291e64d9aaafadd1c4f9d1fc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6db8ff291e64d9aaafadd1c4f9d1fc1>:0
    \n"
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long x in operations) {\n            balance +=
    x;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    total = 0;\n        bool isBelowZero = false;\n        foreach (long operation
    in operations) {\n            total += operation;\n            if (total < 0)
    {\n                isBelowZero = true;\n                break;\n            }\n
    \       }\n        return isBelowZero;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var v in operations) {\n            balance +=
    v;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code here\n        long sum = 0;\n        foreach (long op in operations)
    {\n            sum += op;\n            if (sum < 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var op in operations) {\n            balance +=
    op;\n            if (balance < 0) return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        int
    len = operations.Count;\n        long[] dp = new long[len + 1];\n        for (int
    i = 0; i < len; i++) {\n            dp[i + 1] = dp[i] + operations[i];\n            if
    (dp[i + 1] < 0) return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long x in operations) {\n            balance +=
    x;\n            if (balance < 0) return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977228
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        bool res = false;\n        foreach (long operation in operations)
    {\n            balance += operation;\n            if (balance < 0) {\n                res
    = true;\n                break;\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    acc = 0;\n        foreach (long op in operations) {\n            acc += op;\n
    \           if (acc < 0) return true;\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            sum
    += operations[i];\n            if (sum < 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    bal = 0;\n        foreach (long i in operations) {\n            bal += i;\n            if
    (bal < 0) return true;\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==
    (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    balance = 0L;\n        foreach (var op in operations) {\n            balance +=
    op;\n            if (balance < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    TODO: Your algorithm here.\n        long balance = 0;\n        for (int i = 0;
    i < operations.Count; i++) {\n            balance += operations[i];\n            if
    (balance < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long op in operations) {\n            sum += op;\n
    \           if (sum < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977227
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code goes here.\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <244d2f3003984a8f859af21cce5b2719>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <244d2f3003984a8f859af21cce5b2719>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n        //
    (false)\n        // >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)-4L, (long)5L})))\n        // (true)\n        long balance = 0;\n        foreach
    (long value in operations) {\n            balance += value;\n            if (balance
    < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    cur = 0;\n        foreach (long op in operations) {\n            cur += op;\n
    \           if (cur < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Write your code here\n        int totalBalance = 0;\n        foreach (long operation
    in operations) {\n            totalBalance += (int)operation;\n            if
    (totalBalance < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    assume that operations is non-empty\n        long current = 0;\n        for (int
    i = 0; i < operations.Count; i++) {\n            long op = operations[i];\n            current
    += op;\n            if (current < 0) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    bal = 0;\n        bool low = false;\n        foreach (long money in operations)
    {\n            bal += money;\n            if (bal < 0) {\n                low
    = true;\n                break;\n            }\n        }\n        return low;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        var
    count = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            count
    += operations[i];\n            if (count < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1upud1g1.cs(19,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        foreach (long operation in operations) {\n            balance
    += operation;\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your solution goes here.\n        // Feel free to define additional functions
    if needed.\n        long balance = 0;\n        int negative = 0;\n        for
    (int i = 0; i < operations.Count; i++) {\n            balance += operations[i];\n
    \           if (balance < 0) {\n                negative++;\n            }\n        }\n
    \       if (negative > 0) {\n            return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    acc = 0;\n        foreach (long op in operations) {\n            acc += op;\n
    \           if (acc < 0) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        bool belowZero = false;\n        foreach (long operation
    in operations) {\n            balance += operation;\n            if (balance <
    0) {\n                belowZero = true;\n                break;\n            }\n
    \       }\n        return belowZero;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    acc = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            acc
    += operations[i];\n            if (acc < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long t in operations) {\n            sum += t;\n            if
    (sum < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    balance = 0;\n        for (int i = 0; i < operations.Count; i++) {\n            balance
    += operations[i];\n            if (balance < 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,
    (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        return
    operations.Sum() < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fdff7154fb545f3a0eb051690a39dc7>:0
    \n"
  stdout: ''
  timestamp: 1659977226
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //TODO:
    Implement your solution\n        long total = 0;\n        foreach (long op in
    operations) {\n            total += op;\n            if (total < 0) return true;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        //
    Your code here!\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))
    == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new
    long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,
    (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) ==
    (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <186949195e284400b5afd3d7aa55fce8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <186949195e284400b5afd3d7aa55fce8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You're given a list of deposit and withdrawal operations on
    a bank account that starts with\n    // zero balance. Your task is to detect if
    at any point the balance of account fallls below zero, and\n    // at that point
    function should return true. Otherwise it should return false.\n    // >>> BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //
    >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n
    \   // (true)\n    public static bool BelowZero(List<long> operations) {\n        long
    sum = 0;\n        foreach (long n in operations) {\n            sum += n;\n            if
    (sum < 0) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new
    List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,
    (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==
    (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,
    (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n
    \   Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,
    (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new
    List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,
    (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977229
