name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
  \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
  \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
  \    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ['      return null;', "        // The solution from the reference is\
    \ a lot better!\n        // https://github.com/DAdrian/Google-HashCode-2016/blob/master/2016/source/program.cs#L32\n\
    \        nums.Sort((long a, long b) =>\n        {\n            long x = DigitSum(a);\n\
    \            long y = DigitSum(b);\n            if (x == y)\n            {\n \
    \               return nums.IndexOf(a).CompareTo(nums.IndexOf(b));\n         \
    \   }\n            return x.CompareTo(y);\n        });\n        return nums;",
  "        // Your code goes here\n        return nums;", "        List<long> res\
    \ = new List<long>();\n        List<(long sum, long index)> sums = new List<(long\
    \ sum, long index)>();\n        for (long i = 0; i < nums.Count; i++) {\n    \
    \        long n = nums[(int)i];\n            long sum = 0;\n            while\
    \ (n != 0) {\n                sum += n % 10;\n                n /= 10;\n     \
    \       }\n            sums.Add((sum, i));\n        }\n        sums.Sort();\n\
    \        for (long i = 0; i < sums.Count; i++) {\n            res.Add(nums[(int)sums[(int)i].index]);\n\
    \        }\n        return res;", "        // rF(nums)\n        var sum = nums.Sum(n\
    \ => Math.Abs(n));\n        var l = nums.OrderBy(n => sum - Math.Abs(n)).ThenBy(n\
    \ => n).ToList();\n        return l;", "        // Your code here\n        return\
    \ null;", "        for (int i = 1; i < nums.Count; i++) {\n            for (int\
    \ j = i; j > 0; j--) {\n                if (sumOfDigits(nums[j]) < sumOfDigits(nums[j\
    \ - 1])) {\n                    long tmp = nums[j];\n                    nums[j]\
    \ = nums[j - 1];\n                    nums[j - 1] = tmp;\n                }\n\
    \            }\n        }\n        return nums;", '        return new List<long>();',
  "        var sums = new List<long>();\n        var sum = 0L;\n        for (var i\
    \ = 0; i < nums.Count; i++) {\n            var n = nums[i];\n            while\
    \ (n != 0) {\n                sum += n % 10;\n                n /= 10;\n     \
    \       }\n            sums.Add(sum);\n            sum = 0;\n        }\n     \
    \   var order = new List<long>();\n        for (var i = 0; i < nums.Count; i++)\
    \ {\n            var m = 0L;\n            var index = 0;\n            for (var\
    \ j = 0; j < sums.Count; j++) {\n                if (sums[j] < m) {\n        \
    \            m = sums[j];\n                    index = j;\n                }\n\
    \            }\n            order.Add(nums[index]);\n            sums[index] =\
    \ long.MaxValue;\n        }\n        return order;", "        // Put your code\
    \ here\n        nums.Sort((x, y) =>\n        {\n            int num1Sum = GetSumOfDigits(x);\n\
    \            int num2Sum = GetSumOfDigits(y);\n            return num1Sum == num2Sum\
    \ ? x.CompareTo(y) : num1Sum.CompareTo(num2Sum);\n        });\n        return\
    \ nums;", "        // Your answer goes here\n        return nums;", "        //\
    \ implement me\n        return null;", '        return nums.OrderBy(n => calc(n)).ToList();',
  "        List<long> result = new List<long>();\n        // Write your code here!\n\
    \        return result;", "        // TODO\n        return nums;", '        return
    nums.Select((x, y) => new Tuple<long, int>(x, y)).Select(x => new Tuple<long,
    int, long>(x.Item1, x.Item2, x.Item1.ToString().Select(z => long.Parse(z.ToString())).Sum())).OrderBy(x
    => x.Item3).ThenBy(x => x.Item2).Select(x => x.Item1).ToList();', '        throw
    new NotImplementedException();', "        // Write your code here\n        Dictionary<long,\
    \ long> dict = new Dictionary<long, long>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            BigInteger n = BigInteger.Abs(nums[i]);\n            BigInteger\
    \ total = 0;\n            while (n > 0) {\n                total += n % 10;\n\
    \                n /= 10;\n            }\n            dict.Add(i, (long)total);\n\
    \        }\n        List<long> ret = new List<long>();\n        foreach (var kvp\
    \ in dict.OrderBy(kvp => kvp.Value)) {\n            ret.Add(nums[kvp.Key]);\n\
    \        }\n        return ret;", "        var list = new List<int>();\n     \
    \   foreach (var item in nums) {\n            list.Add(item.ToString().Sum(x =>\
    \ x - '0'));\n        }\n        return nums.OrderBy(x => list[nums.IndexOf(x)]).ToList();",
  "        // Write your code here\n        var lookup = new Dictionary<long, List<long>>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var n = Math.Abs(nums[i]);\n\
    \            var s = 0L;\n            while (n > 0) {\n                s += n\
    \ % 10;\n                n /= 10;\n            }\n            if (!lookup.ContainsKey(s))\n\
    \                lookup[s] = new List<long>();\n            lookup[s].Add(nums[i]);\n\
    \        }\n        var res = new List<long>();\n        foreach (var kv in lookup.OrderBy(x\
    \ => x.Key)) {\n            res.AddRange(kv.Value);\n        }\n        return\
    \ res;", "        // your code here\n        return null;", "        var dict\
    \ = new Dictionary<long, int>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            var key = SumDigits(nums[i]);\n            if (!dict.ContainsKey(key))\
    \ {\n                dict[key] = i;\n            }\n        }\n        var nums_indices\
    \ = new Dictionary<long, int>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            nums_indices[nums[i]] = i;\n        }\n        var sorted_nums\
    \ = nums.OrderBy(e => SumDigits(e)).ToList();\n        var sorted_indices = new\
    \ List<int>();\n        foreach (var e in sorted_nums) {\n            sorted_indices.Add(nums_indices[e]);\n\
    \        }\n        var ret = new List<long>();\n        for (int i = 0; i < sorted_indices.Count;\
    \ i++) {\n            ret.Add(nums[sorted_indices[i]]);\n        }\n        return\
    \ ret;", "        if (nums.Count == 0)\n            return nums;\n        // step\
    \ 1: convert to dictionary of int (value) and list of ints (indexes)\n       \
    \ Dictionary<int, List<int>> points = new Dictionary<int, List<int>>();\n    \
    \    for (int i = 0; i < nums.Count; i++) {\n            int point = (int) NumeralSystem.Solve(nums[i]);\n\
    \            if (!points.ContainsKey(point))\n                points[point] =\
    \ new List<int>();\n            points[point].Add(i);\n        }\n        // step\
    \ 2: sort\n        var pointList = points.Keys.ToList();\n        pointList.Sort();\n\
    \        // step 3: update value\n        List<long> res = new List<long>();\n\
    \        foreach (int point in pointList) {\n            List<int> indexes = points[point];\n\
    \            indexes.Sort();\n            foreach (int index in indexes)\n   \
    \             res.Add(nums[index]);\n        }\n        return res;", "      \
    \  var list = new List<Tuple<long, int>>();\n        var idx = 0;\n        foreach\
    \ (var item in nums) {\n            list.Add(new Tuple<long, int>(item, idx));\n\
    \            idx++;\n        }\n        list.Sort((x, y) => {\n            var\
    \ a = x.Item1 < 0L ? -x.Item1 : x.Item1;\n            var b = y.Item1 < 0L ? -y.Item1\
    \ : y.Item1;\n            var sumX = 0L;\n            var sumY = 0L;\n       \
    \     while (a > 0L) {\n                sumX += a % 10L;\n                a /=\
    \ 10L;\n            }\n            while (b > 0L) {\n                sumY += b\
    \ % 10L;\n                b /= 10L;\n            }\n            var cmp = sumX.CompareTo(sumY);\n\
    \            if (cmp == 0) {\n                return x.Item2.CompareTo(y.Item2);\n\
    \            }\n            return cmp;\n        });\n        var ordered = new\
    \ List<long>();\n        foreach (var item in list) {\n            ordered.Add(item.Item1);\n\
    \        }\n        return ordered;", "        List<long> r = new List<long>();\n\
    \        r.AddRange(nums);\n        for (int i = 0; i < r.Count - 1; i++) {\n\
    \            for (int j = i + 1; j < r.Count; j++) {\n                string si\
    \ = r[i].ToString();\n                string sj = r[j].ToString();\n         \
    \       long siSum = 0, sjSum = 0;\n                for (int k = 0; k < si.Length;\
    \ k++) {\n                    siSum += (long)Convert.ToInt64(si[k].ToString());\n\
    \                }\n                for (int k = 0; k < sj.Length; k++) {\n  \
    \                  sjSum += (long)Convert.ToInt64(sj[k].ToString());\n       \
    \         }\n                if (siSum > sjSum) {\n                    long temp\
    \ = r[i];\n                    r[i] = r[j];\n                    r[j] = temp;\n\
    \                }\n            }\n        }\n        return r;", '        throw
    new NotImplementedException();', "        //\n        // Your solution goes here\n\
    \        //\n        if (nums.Count < 2) {\n            return nums;\n       \
    \ }\n        int[] sums = new int[nums.Count];\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            sums[i] = Sum(nums[i]);\n        }\n        bool[] visited\
    \ = new bool[nums.Count];\n        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < nums.Count; i++) {\n            int min = 100000;\n\
    \            int min_index = -1;\n            for (int j = 0; j < nums.Count;\
    \ j++) {\n                if (!visited[j] && sums[j] < min) {\n              \
    \      min = sums[j];\n                    min_index = j;\n                }\n\
    \            }\n            result.Add(nums[min_index]);\n            visited[min_index]\
    \ = true;\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        Dictionary<long, long> sums = new Dictionary<long, long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            if (sums.ContainsKey(nums[i]))\
    \ {\n                sums[nums[i]] += nums[i];\n            } else {\n       \
    \         sums.Add(nums[i], nums[i]);\n            }\n        }\n        foreach\
    \ (KeyValuePair<long, long> sum in sums.OrderBy(x => x.Value)) {\n           \
    \ result.Add(sum.Key);\n        }\n        return result;", "        var result\
    \ = nums.OrderBy(n => n.ToString().Select(c => c - '0').Sum()).ToList();\n   \
    \     return result;", "        // your code here\n        List<int> indexs =\
    \ new List<int>();\n        for (int i = 0; i < nums.Count; i++) {\n         \
    \   long n = nums[i];\n            if (n < 0) {\n                n = -n;\n   \
    \         }\n            int sum = 0;\n            while (n > 0) {\n         \
    \       sum += (int)(n % 10);\n                n /= 10;\n            }\n     \
    \       indexs.Add(sum);\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            int min = indexs.Min();\n\
    \            int min_index = indexs.IndexOf(min);\n            indexs.RemoveAt(min_index);\n\
    \            result.Add(nums[min_index]);\n        }\n        return result;",
  "        if (nums.Count == 0) {\n            return nums;\n        }\n        else\
    \ {\n            List<long> list = new List<long>();\n            foreach (long\
    \ num in nums) {\n                list.Add(num);\n            }\n            for\
    \ (int i = 0; i < list.Count; i++) {\n                long temp = list[i];\n \
    \               while (temp > 0) {\n                    temp /= 10;\n        \
    \            if (temp < 10) {\n                        list[i] = temp;\n     \
    \                   break;\n                    }\n                }\n       \
    \     }\n            return list;\n        }", "        if (nums.Count < 1) {\n\
    \            return nums;\n        }\n        List<long> result = new List<long>();\n\
    \        // your code goes here\n        // List<long> nums = new List<long>();\n\
    \        // nums.Add((long)1L);\n        // nums.Add((long)11L);\n        // nums.Add((long)-1L);\n\
    \        // nums.Add((long)-11L);\n        // nums.Add((long)-12L);\n        //\
    \ long sum = 0;\n        // long tmp = 1;\n        // long max = 0;\n        //\
    \ long min = 0;\n        // for (int i = 0; i < nums.Count; i++) {\n        //\
    \     tmp = nums[i];\n        //     // tmp = (long)Math.Abs(tmp);\n        //\
    \     sum = 0;\n        //     while (tmp > 0) {\n        //         sum += tmp\
    \ % 10;\n        //         tmp /= 10;\n        //     }\n        //     nums[i]\
    \ = sum;\n        //     // Console.WriteLine(nums[i]);\n        // }\n      \
    \  // for (int i = 0; i < nums.Count; i++) {\n        //     if (nums[i] < min)\
    \ {\n        //         min = nums[i];\n        //     }\n        //     if (nums[i]\
    \ > max) {\n        //         max = nums[i];\n        //     }\n        // }\n\
    \        // List<long> tmpList = new List<long>();\n        // for (int i = 0;\
    \ i < nums.Count; i++) {\n        //     tmpList.Add(nums[i]);\n        // }\n\
    \        // // Console.WriteLine(min);\n        // // Console.WriteLine(max);\n\
    \        // result.Add(nums[0]);\n        // tmpList.RemoveAt(0);\n        //\
    \ for (int i = 0; i < nums.Count - 1; i++) {\n        //     tmp = result[i];\n\
    \        //     tmp = (long)Math.Abs(tmp);\n        //    ", "        // Return\
    \ a list of nums, sorted by number of digits\n        List<long> result = new\
    \ List<long>();\n        long[] digitCount = new long[nums.Count];\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            string numStr = nums[i].ToString();\n\
    \            for (int j = 0; j < numStr.Length; j++) {\n                digitCount[i]\
    \ += Convert.ToInt64(numStr[j].ToString());\n            }\n        }\n      \
    \  List<long> numsCopy = new List<long>(nums);\n        numsCopy.Sort(delegate(long\
    \ a, long b) {\n            int aIndex = nums.IndexOf(a);\n            int bIndex\
    \ = nums.IndexOf(b);\n            if (digitCount[aIndex] == digitCount[bIndex])\
    \ {\n                return aIndex.CompareTo(bIndex);\n            }\n       \
    \     return digitCount[aIndex].CompareTo(digitCount[bIndex]);\n        });\n\
    \        return numsCopy;", "        nums.Sort((x, y) => {\n            long x_sum\
    \ = x.ToString().Select(c => int.Parse(c.ToString())).Sum();\n            long\
    \ y_sum = y.ToString().Select(c => int.Parse(c.ToString())).Sum();\n         \
    \   return x_sum == y_sum ? (x > y ? 1 : -1) : (x_sum > y_sum ? 1 : -1);\n   \
    \     });\n        return nums;", "        var result = new List<long>();\n  \
    \      var sort = new SortedDictionary<long, List<long>>();\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            long sum = 0;\n            long number\
    \ = nums[i];\n            if (number < 0) {\n                number = number *\
    \ -1;\n            }\n            do {\n                sum += number % 10;\n\
    \                number = number / 10;\n            } while (number > 0);\n  \
    \          if (!sort.ContainsKey(sum)) {\n                sort.Add(sum, new List<long>());\n\
    \            }\n            sort[sum].Add(nums[i]);\n        }\n        foreach\
    \ (var item in sort) {\n            item.Value.Sort();\n            result.AddRange(item.Value);\n\
    \        }\n        return result;", '        return nums.OrderBy(x => new DigitSum(x)).ToList();',
  "        List<long> result = new List<long>();\n        List<long>[] sum_nums =\
    \ new List<long>[200];\n        for (int i = 0; i < 200; i++) {\n            sum_nums[i]\
    \ = new List<long>();\n        }\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            long sum = 0;\n            long num = nums[i];\n            while\
    \ (num != 0) {\n                sum += num % 10;\n                num /= 10;\n\
    \            }\n            sum_nums[sum].Add(nums[i]);\n        }\n        for\
    \ (int i = 0; i < 200; i++) {\n            foreach (long n in sum_nums[i]) {\n\
    \                result.Add(n);\n            }\n        }\n        return result;",
  "        nums.Sort((a, b) => {\n            //cout << \"a = \" << a << \", b = \"\
    \ << b << \", a % 10 = \" << a % 10 << endl;\n            if (a == b) {\n    \
    \            return 0;\n            }\n            if (a < 0 && b > 0) {\n   \
    \             return -1;\n            }\n            if (a > 0 && b < 0) {\n \
    \               return 1;\n            }\n            int sa = 0;\n          \
    \  int sb = 0;\n            for (int i = 0; i < 100; i++) {\n                int\
    \ am = (int)(a % 10);\n                int bm = (int)(b % 10);\n             \
    \   sa += am;\n                sb += bm;\n                a /= 10;\n         \
    \       b /= 10;\n                if (a == 0 && b == 0) {\n                  \
    \  break;\n                }\n            }\n            if (sa < sb) {\n    \
    \            return -1;\n            }\n            if (sa > sb) {\n         \
    \       return 1;\n            }\n            return 0;\n        });\n       \
    \ return nums;", "        var result = new List<long>();\n        var points =\
    \ new List<KeyValuePair<long, int>>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            var num = nums[i];\n            var point = GetDigitSum(num);\n\
    \            points.Add(new KeyValuePair<long, int>(point, i));\n        }\n \
    \       var orderedPoints = points.OrderBy(x => x.Key).ThenBy(x => x.Value);\n\
    \        foreach (var p in orderedPoints) {\n            result.Add(nums[p.Value]);\n\
    \        }\n        return result;", "        Dictionary<long, List<long>> sums\
    \ = new Dictionary<long, List<long>>();\n        foreach (long a in nums) {\n\
    \            long sum = 0;\n            long tmp = a;\n            while (tmp\
    \ != 0) {\n                sum += tmp % 10;\n                tmp /= 10;\n    \
    \        }\n            if (!sums.ContainsKey(sum)) {\n                sums[sum]\
    \ = new List<long>();\n            }\n            sums[sum].Add(a);\n        }\n\
    \        List<long> sorted = new List<long>();\n        foreach (var entry in\
    \ sums.OrderBy(a => a.Key)) {\n            sorted.AddRange(entry.Value);\n   \
    \     }\n        return sorted;", "        if (nums.Count == 0) {\n          \
    \  return nums;\n        }\n        // Create a new list of the same size as nums\n\
    \        List<long> result = new List<long>(nums.Count);\n        // Initialize\
    \ it with the values in nums\n        result.AddRange(nums);\n        // Create\
    \ a new list of the same size as nums\n        List<Tuple<long, long>> points\
    \ = new List<Tuple<long, long>>(nums.Count);\n        foreach (long num in nums)\
    \ {\n            // Add the num to points\n            long sum = 0;\n       \
    \     while (num != 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            points.Add(new Tuple<long, long>(sum, num));\n\
    \        }\n        // Sort the points list\n        points.Sort((a, b) => {\n\
    \            if (a.Item1 == b.Item1) {\n                return (int)(a.Item2 -\
    \ b.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n   \
    \     });\n        // Copy the points into result\n        for (int i = 0; i <\
    \ nums.Count; i++) {\n            result[i] = points[i].Item2;\n        }\n  \
    \      return result;", "        var items = new List<(long, long)>();\n     \
    \   for (int i = 0; i < nums.Count; i++) {\n            var sum = GetDigitsSum(nums[i]);\n\
    \            items.Add((sum, nums[i]));\n        }\n        items.Sort((a, b)\
    \ => a.Item1.CompareTo(b.Item1));\n        var res = new List<long>();\n     \
    \   foreach (var item in items) {\n            res.Add(item.Item2);\n        }\n\
    \        return res;", '        return null;', "        List<Tuple<int, int>>\
    \ numPoints = new List<Tuple<int, int>>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            long num = nums[i];\n            int sumOfDigits = 0;\n\
    \            while (num != 0) {\n                sumOfDigits += (int)(num % 10);\n\
    \                num /= 10;\n            }\n            numPoints.Add(new Tuple<int,\
    \ int>(i, sumOfDigits));\n        }\n        numPoints.Sort((a, b) => {\n    \
    \        if (a.Item2 == b.Item2)\n                return a.Item1.CompareTo(b.Item1);\n\
    \            return a.Item2.CompareTo(b.Item2);\n        });\n        List<long>\
    \ result = new List<long>();\n        foreach (var tup in numPoints) {\n     \
    \       result.Add(nums[tup.Item1]);\n        }\n        return result;", "  \
    \      if (nums.Count == 0)\n            return nums;\n        int[] sums = new\
    \ int[nums.Count];\n        for (int i = 0; i < nums.Count; i++) {\n         \
    \   long n = nums[i];\n            int sum = 0;\n            while (n != 0) {\n\
    \                sum += (int)(n % 10);\n                n /= 10;\n           \
    \ }\n            sums[i] = sum;\n        }\n        List<long> r = new List<long>();\n\
    \        while (r.Count < nums.Count) {\n            int min_sum = 1000000;\n\
    \            int min_index = -1;\n            for (int i = 0; i < nums.Count;\
    \ i++) {\n                if (sums[i] != -1 && sums[i] < min_sum) {\n        \
    \            min_sum = sums[i];\n                    min_index = i;\n        \
    \        }\n            }\n            sums[min_index] = -1;\n            r.Add(nums[min_index]);\n\
    \        }\n        return r;", "        // Implement this function.\n       \
    \ if (nums.Count == 0) {\n            return nums;\n        }\n        List<long>\
    \ final = new List<long>();\n        var vals = new Dictionary<long, long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var n = nums[i];\n\
    \            long s = 0;\n            while (n != 0) {\n                s += n\
    \ % 10;\n                n /= 10;\n            }\n            if (!vals.ContainsKey(s))\
    \ {\n                vals[s] = i;\n            }\n        }\n        var keys\
    \ = vals.Keys.ToList();\n        keys.Sort();\n        for (int i = 0; i < keys.Count;\
    \ i++) {\n            final.Add(nums[vals[keys[i]]]);\n        }\n        return\
    \ final;", "      // YOUR CODE HERE\n      return nums;", "        // Write your\
    \ code here!\n        return nums;", '        return nums.OrderBy(x => (x >= 0
    ? 1 : -1) * ComputeSumOfDigits(x)).ThenBy(x => nums.IndexOf(x)).ToList();', '        return
    nums.Select((num, index) => new { num, index }).OrderBy(x => x.num.ToString().Select(y
    => (long)char.GetNumericValue(y)).Sum()).ThenBy(x => x.index).Select(x => x.num).ToList();',
  '        // Write your code here', "        var a = new List<long>();\n        long\
    \ temp = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            temp\
    \ = 0;\n            while (nums[i] > 0) {\n                temp += nums[i] % 10;\n\
    \                nums[i] /= 10;\n            }\n            a.Add(temp);\n   \
    \     }\n        //return a;\n        long[] res = new long[nums.Count];\n   \
    \     List<long> res2 = new List<long>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            res[i] = nums[a.IndexOf(a.Min())];\n            a[a.IndexOf(a.Min())]\
    \ = long.MaxValue;\n        }\n        for (int i = 0; i < nums.Count; i++) {\n\
    \            res2.Add(res[i]);\n        }\n        return res2;", "        return\
    \ nums.Select((v,i) => new {Value = v, Index = i})\n                   .OrderBy(e\
    \ => e.Value < 0 ? -e.Value : e.Value)\n                   .ThenBy(e => e.Index)\n\
    \                   .Select(e => e.Value)\n                   .ToList();", " \
    \       var sumDict = new Dictionary<long, long>();\n        var current = 0;\n\
    \        foreach (var num in nums) {\n            var sum = SumDigits(num);\n\
    \            sumDict[num] = sum;\n            current += 1;\n        }\n     \
    \   var ordered = sumDict.OrderBy(kv => kv.Value).ToList();\n        var ret =\
    \ new List<long>();\n        foreach (var kv in ordered) {\n            ret.Add(kv.Key);\n\
    \        }\n        return ret;", "        // Write your code here\n        return\
    \ nums;", '        // Write your code here', "        // List<long> s = nums.ToList();\n\
    \        // s.Sort((a, b) => {\n        //     long sumA = 0;\n        //    \
    \ foreach (char c in a.ToString()) {\n        //         sumA += c - '0';\n  \
    \      //     }\n        //     long sumB = 0;\n        //     foreach (char c\
    \ in b.ToString()) {\n        //         sumB += c - '0';\n        //     }\n\
    \        //     return sumA - sumB;\n        // });\n        // return s;\n  \
    \      List<long> s = nums.ToList();\n        List<long> sums = new List<long>();\n\
    \        for (int i = 0; i < s.Count; i++) {\n            sums.Add(s[i].ToString().Select(x\
    \ => Convert.ToInt64(x.ToString())).Sum());\n        }\n        for (int i = 0;\
    \ i < s.Count; i++) {\n            for (int j = i + 1; j < s.Count; j++) {\n \
    \               if (sums[i] > sums[j]) {\n                    long temp = s[i];\n\
    \                    s[i] = s[j];\n                    s[j] = temp;\n        \
    \            long temp2 = sums[i];\n                    sums[i] = sums[j];\n \
    \                   sums[j] = temp2;\n                }\n            }\n     \
    \   }\n        return s;", "        nums.Sort((x, y) => x.ToString().Sum(c =>\
    \ c - '0') < y.ToString().Sum(c => c - '0') ? -1 : 1);\n        return nums;",
  '        throw new NotImplementedException();', '        throw new NotImplementedException();',
  '        return new List<long>();', "        List<Tuple<long, long>> Points = new\
    \ List<Tuple<long, long>>();\n        for (int i = 0; i < nums.Count; i++) {\n\
    \            long Sum = 0;\n            long Temp = nums[i];\n            while\
    \ (Temp != 0) {\n                Sum += Temp % 10;\n                Temp /= 10;\n\
    \            }\n            Points.Add(new Tuple<long, long>(Sum, i));\n     \
    \   }\n        Points.Sort();\n        List<long> Result = new List<long>();\n\
    \        for (int i = 0; i < Points.Count; i++) {\n            Result.Add(nums[Points[i].Item2]);\n\
    \        }\n        return Result;", "        // Your solution here\n        return\
    \ null;", "        var tmp = nums.Select((number, index) => new { number, index\
    \ })\n                      .OrderBy(x => x.number.ToString().Sum(c => c - '0'))\n\
    \                      .ThenBy(x => x.index)\n                      .Select(x\
    \ => x.number);\n        return tmp.ToList();", "        int[] points = new int[nums.Count];\n\
    \        List<long> idxs = new List<long>();\n        List<long> nums_copy = new\
    \ List<long>(nums);\n        int idx = 0;\n        foreach (long val in nums)\
    \ {\n            int sum = 0;\n            foreach (char ch in val.ToString())\
    \ {\n                sum += ch - '0';\n            }\n            points[idx]\
    \ = sum;\n            idxs.Add(idx);\n            idx++;\n        }\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            for (int j = 0; j < nums.Count\
    \ - 1; j++) {\n                if (points[j] > points[j + 1]) {\n            \
    \        int tmp = points[j];\n                    points[j] = points[j + 1];\n\
    \                    points[j + 1] = tmp;\n                    long tmp1 = idxs[j];\n\
    \                    idxs[j] = idxs[j + 1];\n                    idxs[j + 1] =\
    \ tmp1;\n                }\n            }\n        }\n        nums.Clear();\n\
    \        foreach (long idx_copy in idxs) {\n            nums.Add(nums_copy[(int)idx_copy]);\n\
    \        }\n        return nums;", '        return nums.OrderBy(i => SumDigits(i)).ThenBy(i
    => nums.IndexOf(i)).ToList();', "        if (nums.Count == 0)\n            return\
    \ nums;\n        var newlist = new List<long>();\n        foreach (var num in\
    \ nums) {\n            var sum = 0;\n            foreach (var x in num.ToString())\
    \ {\n                sum += int.Parse(x.ToString());\n            }\n        \
    \    newlist.Add(sum * num);\n        }\n        return newlist.OrderBy(x => x).Select(x\
    \ => x / Math.Abs(x)).ToList();", "        nums.Sort(((long a, long b) => {\n\
    \            long sumA = SumDigits(a);\n            long sumB = SumDigits(b);\n\
    \            if (sumA == sumB) {\n                return (a).CompareTo(b);\n \
    \           } else {\n                return (sumA).CompareTo(sumB);\n       \
    \     }\n        }));\n        return nums;", "        for (int i = 0; i < nums.Count;\
    \ i++) {\n            for (int j = i + 1; j < nums.Count; j++) {\n           \
    \     if (GetSum(nums[i]) > GetSum(nums[j])) {\n                    long tmp =\
    \ nums[i];\n                    nums[i] = nums[j];\n                    nums[j]\
    \ = tmp;\n                }\n            }\n        }\n        return nums;",
  "        // TODO: implement this function\n        // and return the correct result\n\
    \        return nums;", "        var numsCopy = new List<long>(nums);\n      \
    \  numsCopy.Sort(delegate(long a, long b) {\n            var aSum = 0L;\n    \
    \        var bSum = 0L;\n            var x = a;\n            while (x != 0) {\n\
    \                aSum += x % 10;\n                x /= 10;\n            }\n  \
    \          x = b;\n            while (x != 0) {\n                bSum += x % 10;\n\
    \                x /= 10;\n            }\n            if (aSum != bSum) {\n  \
    \              return aSum.CompareTo(bSum);\n            }\n            return\
    \ nums.IndexOf(a).CompareTo(nums.IndexOf(b));\n        });\n        return numsCopy;",
  "        var dict = new Dictionary<long, List<long>>();\n        foreach (var num\
    \ in nums) {\n            var sum = DigitSum(num);\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(num);\n        }\n        var sorted = dict.Keys.ToList();\n\
    \        sorted.Sort();\n        var result = new List<long>();\n        foreach\
    \ (var key in sorted) {\n            result.AddRange(dict[key]);\n        }\n\
    \        return result;", "        var list = nums;\n        var items = new List<Tuple<long,\
    \ long>>();\n        foreach (var num in list) {\n            items.Add(new Tuple<long,\
    \ long>(num, GetSumOfDigits(num)));\n        }\n        var sorted = items.OrderBy(n\
    \ => n.Item2).ThenBy(n => n.Item1).ToList();\n        return sorted.Select(n =>\
    \ n.Item1).ToList();", "        long[] points = new long[nums.Count];\n      \
    \  for (int i = 0; i < nums.Count; i++) {\n            var num = nums[i];\n  \
    \          while (num > 0) {\n                points[i] += num % 10;\n       \
    \         num /= 10;\n            }\n        }\n        var pointnums = nums.Zip(points,\
    \ (k, v) => new { k, v }).OrderBy(x => x.v).ThenBy(x => x.k).ToList();\n     \
    \   List<long> result = new List<long>();\n        foreach (var item in pointnums)\
    \ {\n            result.Add(item.k);\n        }\n        return result;", "  \
    \      List<long> list = new List<long>();\n        for (long i = 0; i < nums.Count;\
    \ i++) {\n            long a = nums[(int)i];\n            long sum = 0;\n    \
    \        while (a != 0) {\n                sum += a % 10;\n                a /=\
    \ 10;\n            }\n            list.Add(sum);\n        }\n        list.Sort();\n\
    \        List<long> n = new List<long>();\n        for (long i = 0; i < list.Count;\
    \ i++) {\n            long a = list[(int)i];\n            for (long j = 0; j <\
    \ nums.Count; j++) {\n                long b = nums[(int)j];\n               \
    \ long sum = 0;\n                while (b != 0) {\n                    sum +=\
    \ b % 10;\n                    b /= 10;\n                }\n                if\
    \ (sum == a) {\n                    if (!n.Contains(nums[(int)j])) {\n       \
    \                 n.Add(nums[(int)j]);\n                    }\n              \
    \  }\n            }\n        }\n        return n;", "        if (nums.Count ==\
    \ 0) {\n            return nums;\n        }\n        else {\n            List<long>\
    \ result = new List<long>();\n            while (nums.Count > 0) {\n         \
    \       long min_sum = nums[0];\n                foreach (long n in nums) {\n\
    \                    if (GetSum(n) < GetSum(min_sum)) {\n                    \
    \    min_sum = n;\n                    }\n                }\n                result.Add(min_sum);\n\
    \                nums.Remove(min_sum);\n            }\n            return result;\n\
    \        }", "        if (nums.Count == 0) {\n            return nums;\n     \
    \   }\n        var numsDict = new Dictionary<long, long>();\n        for (long\
    \ i = 0; i < nums.Count; i++) {\n            var digitSum = DigitSum(nums[(int)i]);\n\
    \            if (numsDict.ContainsKey(digitSum)) {\n                numsDict[digitSum]\
    \ = (numsDict[digitSum] * 100) + i;\n            } else {\n                numsDict[digitSum]\
    \ = i;\n            }\n        }\n        var dicItems = numsDict.ToList();\n\
    \        dicItems.Sort((pair1, pair2) => pair1.Key.CompareTo(pair2.Key));\n  \
    \      var result = new List<long>();\n        foreach (var item in dicItems)\
    \ {\n            var originalIndex = item.Value;\n            if (originalIndex\
    \ >= 100) {\n                var lastIndex = originalIndex % 100;\n          \
    \      originalIndex = originalIndex / 100;\n                result.Add(nums[(int)lastIndex]);\n\
    \            }\n            result.Add(nums[(int)originalIndex]);\n        }\n\
    \        return result;", "        var result = nums.Select((c, i) => new { Item\
    \ = c, Index = i }).OrderBy(o => SumOfDigits(o.Item)).Select(o => new { Item =\
    \ o.Item, Index = o.Index }).OrderBy(o => o.Index).Select(o => o.Item).ToList();\n\
    \        return result;", "        // TODO: implement this function\n        return\
    \ null;", "        List<Tuple<long, long>> pairs = new List<Tuple<long, long>>();\n\
    \        for (long i = 0; i < nums.Count; i++) {\n            long s = SumDigits(nums[(int)i]);\n\
    \            pairs.Add(new Tuple<long, long>(i, s));\n        }\n        pairs.Sort((x,\
    \ y) => (x.Item2 - y.Item2));\n        List<long> ret = new List<long>();\n  \
    \      for (long i = 0; i < pairs.Count; i++) {\n            ret.Add(nums[(int)pairs[(int)i].Item1]);\n\
    \        }\n        return ret;", "        var result = nums.Select((x, i) =>\
    \ new { sum = SumOfDigits(x), val = x, idx = i })\n                         .OrderBy(x\
    \ => x.sum)\n                         .ThenBy(x => x.idx)\n                  \
    \       .Select(x => x.val)\n                         .ToList();\n        return\
    \ result;", "        var indexed = new List<Tuple<long,int>>();\n        var dict\
    \ = new Dictionary<long,List<long>>();\n        var sumed = new List<long>();\n\
    \        int i = 0;\n        foreach(var item in nums) {\n            var digits\
    \ = GetDigits(item);\n            var sum = SumDigits(digits);\n            indexed.Add(new\
    \ Tuple<long,int>(item,i));\n            if (!dict.ContainsKey(sum)) {\n     \
    \           dict[sum] = new List<long>();\n            }\n            dict[sum].Add(item);\n\
    \            i++;\n        }\n        var sortedBySum = indexed.OrderBy(tuple\
    \ => tuple.Item2).ToList();\n        foreach(var tuple in sortedBySum) {\n   \
    \         var digits = GetDigits(tuple.Item1);\n            var sum = SumDigits(digits);\n\
    \            if (!sumed.Contains(sum)) {\n                sumed.Add(sum);\n  \
    \          }\n        }\n        sumed.Sort();\n        var sorted = new List<long>();\n\
    \        foreach(var sum in sumed) {\n            var sortedBySum1 = dict[sum].OrderBy(tuple\
    \ => tuple).ToList();\n            foreach(var item in sortedBySum1) {\n     \
    \           sorted.Add(item);\n            }\n        }\n        return sorted;",
  '        return nums.Select((num, idx) => new Tuple<long, int>(num, idx)).OrderBy(it
    => digitsSum(it.Item1)).ThenBy(it => it.Item2).Select(it => it.Item1).ToList();',
  "        // Write your code here.\n        List<long> ordered = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            ordered.Add(nums[i]);\n\
    \        }\n        ordered.Sort((a, b) => {\n            long sumA = 0;\n   \
    \         long sumB = 0;\n            long aTmp = a;\n            long bTmp =\
    \ b;\n            while (aTmp != 0) {\n                sumA += aTmp % 10;\n  \
    \              aTmp /= 10;\n            }\n            while (bTmp != 0) {\n \
    \               sumB += bTmp % 10;\n                bTmp /= 10;\n            }\n\
    \            if (sumA < sumB) {\n                return -1;\n            } else\
    \ if (sumA > sumB) {\n                return 1;\n            } else {\n      \
    \          return 0;\n            }\n        });\n        return ordered;", '        return
    nums;', "        return nums.Select((x, index) => (x, index))\n            .OrderBy(t\
    \ => t.Item1.ToString().Sum(c => c - '0'))\n            .ThenBy(t => t.Item2)\n\
    \            .Select(t => t.Item1)\n            .ToList();", "        // TODO:\
    \ implement this function\n        return null;", "        List<long> tmp = new\
    \ List<long>();\n        foreach (long n in nums)\n            tmp.Add(n);\n \
    \       tmp.Sort(new DigitComparator());\n        return tmp;", "        List<long>\
    \ result = new List<long>();\n        foreach (long num in nums) {\n         \
    \   result.Add(num);\n        }\n        result.Sort(new Compare(nums));\n   \
    \     return result;", "        // Implement your solution here\n        if (nums.Count\
    \ == 0)\n            return nums;\n        List<List<long>> answer = new List<List<long>>();\n\
    \        for (int i = 0; i < nums.Count; i++)\n        {\n            if (answer.Count\
    \ == 0)\n            {\n                answer.Add(new List<long>());\n      \
    \          answer[0].Add(nums[i]);\n            }\n            else\n        \
    \    {\n                int j = 0;\n                while (j < answer.Count)\n\
    \                {\n                    if (answer[j].Sum(x => Math.Abs(x) % 10)\
    \ + (Math.Abs(nums[i]) % 10) <= answer[j].Sum(x => Math.Abs(x) / 10) + (Math.Abs(nums[i])\
    \ / 10))\n                    {\n                        answer[j].Add(nums[i]);\n\
    \                        break;\n                    }\n                    j++;\n\
    \                }\n                if (j == answer.Count)\n                {\n\
    \                    answer.Add(new List<long>());\n                    answer[j].Add(nums[i]);\n\
    \                }\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < answer.Count; i++)\n        {\n \
    \           answer[i].Sort();\n            for (int j = 0; j < answer[i].Count;\
    \ j++)\n            {\n                result.Add(answer[i][j]);\n           \
    \ }\n        }\n        return result;", "        // Write your code here.\n \
    \       var list = nums.Select((n, i) => (n, i)).OrderBy(o => o.Item1.ToString().Sum(c\
    \ => c - '0')).ThenBy(o => o.Item2).Select(o => o.Item1).ToList();\n        return\
    \ list;", "        // your code here\n        return new List<long>();", '        return
    nums;', '        return nums.Select((item, index) => new KeyValuePair<long, long>(item,
    index)).OrderBy(item => item.Key.ToString().Sum(ch => (int)ch - 48)).Select(item
    => item.Key).ToList();', "        // Implement the function here\n        // For\
    \ example, the following code sorts the numbers in descending order:\n       \
    \ var result = nums.OrderByDescending(x => x).ToList();\n        return result;",
  '        return nums;', "        // your code here\n        var res = new List<long>();\n\
    \        var points = new List<long>();\n        var points0 = new List<long>();\n\
    \        for (var i = 0; i < nums.Count; i++) {\n            var el = nums[i];\n\
    \            var elabs = Math.Abs(el);\n            var sum = 0L;\n          \
    \  while (elabs > 0) {\n                sum += elabs % 10;\n                elabs\
    \ /= 10;\n            }\n            points.Add(sum);\n            points0.Add(sum);\n\
    \        }\n        var psorted = new List<long>(points0.OrderBy(p => p));\n \
    \       foreach (var p in psorted) {\n            var idx = points.IndexOf(p);\n\
    \            res.Add(nums[idx]);\n            points[idx] = -1;\n        }\n \
    \       return res;", "        // This is the place where you write your solution\n\
    \        return null;", "        if (nums.Count == 0)\n            return nums;\n\
    \        var dict = new Dictionary<long, List<long>>();\n        var sum = new\
    \ Func<long, long>((num) => {\n            long s = 0;\n            while (num\
    \ != 0) {\n                s += num % 10;\n                num /= 10;\n      \
    \      }\n            return s;\n        });\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            long key = sum(nums[i]);\n            if (!dict.ContainsKey(key))\n\
    \                dict[key] = new List<long>();\n            dict[key].Add(nums[i]);\n\
    \        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n   \
    \     var ret = new List<long>();\n        foreach (var key in keys) {\n     \
    \       ret.AddRange(dict[key]);\n        }\n        return ret;", "        return\
    \ nums.OrderBy(n => n.ToString().Sum(c => c - '0')).ThenBy(n => nums.IndexOf(n)).ToList();",
  "        int[] points = new int[nums.Count];\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            int num = (int)nums[i];\n            points[i] = 0;\n  \
    \          do {\n                points[i] += num % 10;\n                num /=\
    \ 10;\n            } while (num != 0);\n        }\n        return SortedList(nums,\
    \ points);", "        var result = new List<long>();\n        while (nums.Count\
    \ > 0) {\n            long min = -1;\n            int minIndex = -1;\n       \
    \     for (int i = 0; i < nums.Count; i++) {\n                long s = SumOfDigits(nums[i]);\n\
    \                if (min == -1 || s < min) {\n                    min = s;\n \
    \                   minIndex = i;\n                }\n            }\n        \
    \    result.Add(nums[minIndex]);\n            nums.RemoveAt(minIndex);\n     \
    \   }\n        return result;", "        // Write your code here\n        return\
    \ nums;", "        var result = new List<long>();\n        var hashedNums = new\
    \ Dictionary<long, long>();\n        // Your code here\n        for (int i = 0;\
    \ i < nums.Count; i++) {\n            var key = nums[i];\n            if (hashedNums.ContainsKey(key))\
    \ {\n                hashedNums[key] = GetDigitSum(key);\n            } else {\n\
    \                hashedNums.Add(key, GetDigitSum(key));\n            }\n     \
    \   }\n        var list = hashedNums.OrderBy(x => x.Value).ThenBy(y => y.Key).ToList();\n\
    \        foreach (var item in list) {\n            result.Add(item.Key);\n   \
    \     }\n        return result;", "        return nums.Select((x, i) => new {\
    \ Digits = x.ToString().Select(c => c - '0').Sum(), Number = x, Index = i })\n\
    \                   .OrderBy(t => t.Digits)\n                   .ThenBy(t => t.Index)\n\
    \                   .Select(t => t.Number)\n                   .ToList();", '        return
    nums;', '        throw new NotImplementedException();', "      var orderedNumbers\
    \ = nums.OrderBy(x => x.ToString().Sum(c => (int)Char.GetNumericValue(c))).ToList();\n\
    \      orderedNumbers.AddRange(nums.Where(x => !orderedNumbers.Contains(x)));\n\
    \      return orderedNumbers;", "        if (nums.Count == 0) {\n            return\
    \ nums;\n        }\n\n        var numsSum = new List<(long, int)>();\n       \
    \ for (int i = 0; i < nums.Count; i++) {\n            numsSum.Add((nums[i], i));\n\
    \        }\n\n        var res = numsSum.OrderBy(e => GetSum(e.Item1)).ThenBy(e\
    \ => e.Item2).Select(e => e.Item1).ToList();\n        return res;", "        if\
    \ (nums.Count < 2) {\n            return nums;\n        }\n        var result\
    \ = new List<Tuple<int, long>>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            var sum = nums[i].ToString().Select(d => (long)Char.GetNumericValue(d)).Sum();\n\
    \            result.Add(new Tuple<int, long>(i, sum));\n        }\n        result\
    \ = result.OrderBy(t => t.Item2).ThenBy(t => t.Item1).ToList();\n        var result2\
    \ = new List<long>();\n        foreach (var t in result) {\n            result2.Add(nums[t.Item1]);\n\
    \        }\n        return result2;", "        // your code here\n        if (nums.Count\
    \ == 0) {\n            return nums;\n        }\n        Dictionary<int, List<long>>\
    \ dict = new Dictionary<int, List<long>>();\n        foreach (var i in nums) {\n\
    \            int j = 0;\n            if (i < 0) {\n                j = i * -1;\n\
    \            } else {\n                j = i;\n            }\n            int\
    \ sum = 0;\n            while (j > 0) {\n                sum += j % 10;\n    \
    \            j /= 10;\n            }\n            if (dict.ContainsKey(sum)) {\n\
    \                dict[sum].Add(i);\n            } else {\n                dict.Add(sum,\
    \ new List<long> { i });\n            }\n        }\n        var result = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var item = dict.OrderBy(n\
    \ => n.Key).Select(n => n.Value).FirstOrDefault(n => n.Contains(nums[i]));\n \
    \           if (item != null) {\n                int ind = item.IndexOf(nums[i]);\n\
    \                result.Add(item[ind]);\n                item.RemoveAt(ind);\n\
    \            }\n        }\n        return result;", '        throw new NotImplementedException();',
  "        List<long> res = new List<long>();\n        if (nums.Count == 0) {\n  \
    \          return res;\n        }\n        Dictionary<long, List<long>> d = new\
    \ Dictionary<long, List<long>>();\n        long[] ps = nums.Select(n => DigitSum(n)).Distinct().ToArray();\n\
    \        foreach (long p in ps) {\n            d[p] = new List<long>();\n    \
    \    }\n        for (int i = 0; i < nums.Count; i++) {\n            d[DigitSum(nums[i])].Add(nums[i]);\n\
    \        }\n        foreach (long p in ps) {\n            res.AddRange(d[p]);\n\
    \        }\n        return res;", "        var sorted = nums.Select((val, idx)\
    \ => new { val, sum = Math.Abs(val).ToString().Sum(c => c - '0'), idx })\n   \
    \         .OrderBy(x => x.sum)\n            .ThenBy(x => x.idx)\n            .Select(x\
    \ => x.val)\n            .ToList();\n        return sorted;", '        return
    nums.OrderBy(x => x.ToString().Sum(c => int.Parse(c.ToString()))).ThenBy(x =>
    nums.IndexOf(x)).ToList();', '        return nums.OrderBy(x => SumDigits(x)).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // Write your code here\n        long\
    \ i = 0;\n        Dictionary<long, long> order = new Dictionary<long, long>();\n\
    \        List<long> newNums = new List<long>();\n        foreach (long item in\
    \ nums) {\n            // Console.WriteLine(item);\n            long sum = 0;\n\
    \            string toS = item.ToString();\n            for (int j = 0; j < toS.Length;\
    \ j++) {\n                // Console.WriteLine(toS[j]);\n                if (toS[j]\
    \ == '-') {\n                    continue;\n                }\n              \
    \  sum += (long)long.Parse(toS[j].ToString());\n            }\n            //\
    \ Console.WriteLine(sum);\n            order.Add(i, sum);\n            i++;\n\
    \        }\n        // foreach (KeyValuePair<long, long> item in order) {\n  \
    \      //     Console.WriteLine(item.Key + \": \" + item.Value);\n        // }\n\
    \        order = order.OrderBy(kvp => kvp.Value).ToDictionary(kvp => kvp.Key,\
    \ kvp => kvp.Value);\n        // foreach (KeyValuePair<long, long> item in order)\
    \ {\n        //     Console.WriteLine(item.Key + \": \" + item.Value);\n     \
    \   // }\n        foreach (KeyValuePair<long, long> item in order) {\n       \
    \     newNums.Add(nums[(int)item.Key]);\n        }\n        // foreach (long item\
    \ in newNums) {\n        //     Console.WriteLine(item);\n        // }\n     \
    \   return newNums;", "        var dict = new Dictionary<int, List<long>>();\n\
    \        var sum = 0;\n        foreach (var n in nums) {\n            foreach\
    \ (var d in n.ToString()) {\n                sum += int.Parse(d.ToString());\n\
    \            }\n            if (!dict.ContainsKey(sum))\n                dict.Add(sum,\
    \ new List<long>());\n            dict[sum].Add(n);\n            sum = 0;\n  \
    \      }\n        var list = new List<long>();\n        foreach (var a in dict.OrderBy(x\
    \ => x.Key)) {\n            foreach (var b in a.Value) {\n                list.Add(b);\n\
    \            }\n        }\n        return list;", '        return nums;', "  \
    \      // Your code here!\n        return nums;", "        return nums.Select((x,\
    \ y) => new {\n            number = x,\n            index = y,\n            sum\
    \ = x.ToString().Select(c => int.Parse(c.ToString())).Sum()\n        }).OrderBy(x\
    \ => x.sum).ThenBy(x => x.index).Select(x => x.number).ToList();", "        var\
    \ result = new List<long>();\n        var dict = new Dictionary<int, List<long>>();\n\
    \        foreach (var num in nums) {\n            var sum = num.ToString().Select(c\
    \ => (int)Char.GetNumericValue(c)).Sum();\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(num);\n        }\n        var keys = dict.Keys.ToList();\n  \
    \      keys.Sort();\n        foreach (var key in keys) {\n            dict[key].Sort();\n\
    \            result.AddRange(dict[key]);\n        }\n        return result;",
  '        return nums;', "        // YOUR CODE HERE\n        return null;", '        return
    nums.OrderBy(x => x.ToString().Select(c => int.Parse(c.ToString())).Sum()).ToList();',
  '        throw new NotImplementedException();', "        // Write your code here\n\
    \        return nums;", "        // TODO: Your task here\n        if (nums.Count\
    \ == 0) {\n            return nums;\n        }\n\n        var sortedDict = new\
    \ SortedDictionary<long, long>();\n        foreach (var n in nums) {\n       \
    \     var digits = n.ToString().ToCharArray();\n            var sum = 0L;\n  \
    \          foreach (var digit in digits) {\n                sum += long.Parse(digit.ToString());\n\
    \            }\n            sortedDict.Add(sum, n);\n        }\n\n        var\
    \ res = new List<long>();\n        foreach (var n in sortedDict.Values) {\n  \
    \          res.Add(n);\n        }\n        return res;", '        return nums.OrderBy(n
    => SumDigits(n)).ThenBy(n => nums.IndexOf(n)).ToList();', '      return new List<long>();',
  "        if (nums.Count == 0)\n            return nums;\n        var k = new List<KeyValuePair<long,\
    \ long>>();\n        foreach (var v in nums) {\n            var sum = 0L;\n  \
    \          while (v != 0) {\n                sum += v % 10;\n                v\
    \ /= 10;\n            }\n            k.Add(new KeyValuePair<long, long>(sum, v));\n\
    \        }\n        k.Sort(\n            (a, b) => {\n                if (a.Key\
    \ == b.Key)\n                    return a.Value.CompareTo(b.Value);\n        \
    \        return a.Key.CompareTo(b.Key);\n            }\n        );\n        var\
    \ result = new List<long>();\n        foreach (var v in k)\n            result.Add(v.Value);\n\
    \        return result;", "        // Your code here!\n        return null;",
  "        return nums.Select((_x,_i) => (new {Sum = _x.ToString().Sum(d => d - '0'),\
    \ Index = _i, Value = _x}))\n                   .OrderBy(t => t.Sum)\n       \
    \            .ThenBy(t => t.Index)\n                   .Select(t => t.Value)\n\
    \                   .ToList();", "        var copy = new List<long>(nums);\n \
    \       var key = new Dictionary<long, int>();\n        for (var i = 0; i < nums.Count;\
    \ i++) {\n            key[nums[i]] = i;\n        }\n        copy.Sort((a, b) =>\
    \ {\n            var sa = a.ToString().Select(c => Int32.Parse(c.ToString())).Sum();\n\
    \            var sb = b.ToString().Select(c => Int32.Parse(c.ToString())).Sum();\n\
    \            if (sa == sb) {\n                return key[a] - key[b];\n      \
    \      }\n            return sa - sb;\n        });\n        return copy;", '        return
    nums.Select((number, index) => Tuple.Create(number, index)).OrderBy(t => SumDigits(t.Item1)).Select(t
    => t.Item1).ToList();', "        // your code here\n        return null;", " \
    \       // First, let's create a mapping from each element to the sum of its digits.\n\
    \        var sums = new Dictionary<long, long>();\n        foreach (var num in\
    \ nums) {\n            // We use the following fact:\n            //    num %\
    \ 9 == sum(num) % 9, where sum(num) is the sum of digits of num.\n           \
    \ // So we calculate sum(num) as num % 9.\n            // See https://en.wikipedia.org/wiki/Digital_root\n\
    \            var sum = num % 9;\n            // If num has multiple digits and\
    \ the sum of digits is less than 9,\n            // we add 9 to the sum, so that\
    \ small numbers with large sums of digits\n            // are larger than large\
    \ numbers with small sums of digits.\n            if (sum < 9 && num > 9) {\n\
    \                sum += 9;\n            }\n            sums[num] = sum;\n    \
    \    }\n        // Then, sort by sum of digits.\n        return nums.OrderBy(num\
    \ => sums[num]).ToList();", "        nums.Sort((a, b) => {\n            int s\
    \ = sumDigits(a).CompareTo(sumDigits(b));\n            if (s == 0)\n         \
    \       return nums.IndexOf(a).CompareTo(nums.IndexOf(b));\n            return\
    \ s;\n        });\n        return nums;", "        // Write code here!\n     \
    \   return null;", "        List<long> res = new List<long>();\n        Dictionary<long,\
    \ List<long>> d = new Dictionary<long, List<long>>();\n        for (int i = 0;\
    \ i < nums.Count; i++) {\n            long sum = 0;\n            for (int j =\
    \ 0; j < nums[i].ToString().Length; j++) {\n                sum += nums[i].ToString()[j]\
    \ - '0';\n            }\n            if (!d.ContainsKey(sum)) {\n            \
    \    d.Add(sum, new List<long>());\n            }\n            d[sum].Add(nums[i]);\n\
    \        }\n        long min = d.Keys.Min();\n        while (min <= d.Keys.Max())\
    \ {\n            if (d.ContainsKey(min)) {\n                for (int i = 0; i\
    \ < d[min].Count; i++) {\n                    res.Add(d[min][i]);\n          \
    \      }\n            }\n            min++;\n        }\n        return res;",
  "        var list = new List<long>();\n        var dict = new Dictionary<int, int>();\n\
    \        foreach (var element in nums) {\n            var sum = 0;\n         \
    \   var tmp = Math.Abs(element);\n            while (tmp > 0) {\n            \
    \    sum += tmp % 10;\n                tmp /= 10;\n            }\n           \
    \ if (!dict.ContainsKey(sum))\n                dict[sum] = 0;\n            dict[sum]\
    \ += 1;\n            list.Add(element);\n        }\n        var keys = dict.Keys.ToList();\n\
    \        keys.Sort();\n        var res = new List<long>();\n        foreach (var\
    \ key in keys) {\n            for (var i = 0; i < dict[key]; i++) {\n        \
    \        foreach (var element in list) {\n                    var sum = 0;\n \
    \                   var tmp = Math.Abs(element);\n                    while (tmp\
    \ > 0) {\n                        sum += tmp % 10;\n                        tmp\
    \ /= 10;\n                    }\n                    if (sum == key) {\n     \
    \                   res.Add(element);\n                        list.Remove(element);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return res;", "        // Write your code here\n\
    \        return nums;", "        List<long> result = new List<long>();\n     \
    \   if (nums.Count == 0) {\n            return result;\n        }\n        var\
    \ sortList = nums.Select((num, index) => new Tuple<long, int>(num, index)).ToList();\n\
    \        sortList.Sort((x, y) => {\n            var xsum = SumOfDigits(x.Item1);\n\
    \            var ysum = SumOfDigits(y.Item1);\n            if (xsum != ysum) {\n\
    \                return (int)(xsum - ysum);\n            }\n            return\
    \ x.Item2 - y.Item2;\n        });\n        result = sortList.Select(x => x.Item1).ToList();\n\
    \        return result;", "        var x = nums.Select((num, idx) => new { num,\
    \ idx });\n        var y = x.OrderBy(x => x.num.ToString().Select(c => c - '0').Sum()).ThenBy(a\
    \ => a.idx);\n        return y.Select(a => a.num).ToList();", '        return
    nums.OrderBy(x => string.Join("", x.ToString().Select(c => int.Parse(c.ToString())))).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        List<long> ret = new List<long>();\n\
    \        Dictionary<long, List<long>> points = new Dictionary<long, List<long>>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            long sum = 0;\n \
    \           var n = nums[i];\n            if (n < 0) {\n                n = -n;\n\
    \            }\n            while (n > 0) {\n                sum += n % 10;\n\
    \                n /= 10;\n            }\n            if (!points.ContainsKey(sum))\
    \ {\n                points[sum] = new List<long>();\n            }\n        \
    \    points[sum].Add(nums[i]);\n        }\n        foreach (var k in points.Keys.OrderBy(a\
    \ => a)) {\n            var ns = points[k];\n            ns.Sort();\n        \
    \    ret.AddRange(ns);\n        }\n        return ret;", "        var res = nums.Select((val,\
    \ idx) => (val, idx)).OrderBy(x => x.val).ThenBy(x => SumOfDigits(x.val));\n \
    \       return res.Select(x => x.val).ToList();", "        return nums.Select((x,\
    \ i) => new { Index = i, Value = x })\n                   .OrderBy(x => SumDigits(x.Value))\n\
    \                   .ThenBy(x => x.Index)\n                   .Select(x => x.Value)\n\
    \                   .ToList();", "        // Write your code here\n        //\
    \ It can print output to STDOUT or return a list of longs.\n        var sorted\
    \ = nums.OrderBy(x => GetSumOfDigits(x)).ToList();\n        return sorted;", '        throw
    new NotImplementedException();', '        return null;', "        return nums.OrderBy(num\
    \ => num.ToString().Select(x => x - '0').Sum()).ThenBy(num => nums.IndexOf(num)).ToList();",
  '        // your code goes here', "        List<long> result = new List<long>();\n\
    \        // your code here\n        return result;", "        return nums.Select((n,\
    \ i) => new {\n            key = Math.Abs(n).ToString().Sum(c => (long)char.GetNumericValue(c)),\n\
    \            n,\n            i\n        }).OrderBy(x => x.key).ThenBy(x => x.i).Select(x\
    \ => x.n).ToList();", "        nums.Sort((x, y) =>\n        {\n            if\
    \ (x.ToString().Sum(n => int.Parse(n.ToString())) == y.ToString().Sum(n => int.Parse(n.ToString())))\n\
    \                return x.CompareTo(y);\n            return x.ToString().Sum(n\
    \ => int.Parse(n.ToString())).CompareTo(y.ToString().Sum(n => int.Parse(n.ToString())));\n\
    \        });\n        return nums;", "        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ long sum = 0;\n            long n = nums[i];\n            if (n < 0) {\n   \
    \             n = -n;\n            }\n            while (n > 0) {\n          \
    \      sum += n % 10;\n                n /= 10;\n            }\n            if\
    \ (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(nums[i]);\n        }\n        var res\
    \ = new List<long>();\n        foreach (var k in dict.Keys.OrderBy(x => x)) {\n\
    \            res.AddRange(dict[k]);\n        }\n        return res;", '        return
    nums.OrderBy(n => n).OrderBy(n => n.ToString().Sum(c => int.Parse(c.ToString()))).ToList();',
  '        return nums.OrderBy(i => new { Point = i.ToString().Select(j => int.Parse(j.ToString())).Sum(),
    Index = nums.IndexOf(i) }).Select(i => i).ToList();', "        var nums1 = (from\
    \ p in nums\n                     let s = p.ToString()\n                     let\
    \ sum = s.Sum(d => d - '0')\n                     orderby sum, nums.IndexOf(p)\n\
    \                     select p).ToList();\n        return nums1;", '        return
    nums.OrderBy(x => SumDigits(x)).ToList();', "        Dictionary<int, List<long>>\
    \ sums = new Dictionary<int, List<long>>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            int s = 0;\n            long x = nums[i];\n            while\
    \ (x != 0) {\n                s += (int)(x % 10);\n                x /= 10;\n\
    \            }\n            if (!sums.ContainsKey(s)) {\n                sums[s]\
    \ = new List<long>();\n            }\n            sums[s].Add(nums[i]);\n    \
    \    }\n        int[] ks = sums.Keys.ToArray();\n        Array.Sort(ks);\n   \
    \     List<long> res = new List<long>();\n        foreach (int k in ks) {\n  \
    \          res.AddRange(sums[k]);\n        }\n        return res;", "        //\
    \ use a dictionary to store the result so that it is easier to access by index\n\
    \        Dictionary<long, long> result = new Dictionary<long, long>();\n     \
    \   // use a list to store the values of each key of the dictionary\n        List<long>\
    \ vals = new List<long>();\n        // use a list to store the values of each\
    \ key of the dictionary, but in ascending order\n        List<long> vals_asc =\
    \ new List<long>();\n        // initialize the list to store the values of each\
    \ key of the dictionary\n        for (int i = 0; i < nums.Count; i++) {\n    \
    \        vals.Add(0);\n        }\n        // initialize the dictionary\n     \
    \   for (int i = 0; i < nums.Count; i++) {\n            result.Add(i, 0);\n  \
    \      }\n        // calculate the sums of the digits\n        for (int i = 0;\
    \ i < nums.Count; i++) {\n            long n = nums[i];\n            while (n\
    \ != 0) {\n                vals[i] += n % 10;\n                n /= 10;\n    \
    \        }\n        }\n        // sort the values in vals_asc\n        vals_asc\
    \ = vals.ToList();\n        vals_asc.Sort();\n        // use the sorted list to\
    \ put the values in the dictionary\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            result[i] = vals_asc[i];\n        }\n        // use the dictionary\
    \ to make the final output list\n        List<long> output = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            output.Add(nums[Array.IndexOf(vals.ToArray(),\
    \ result[i])]);\n        }\n        return output;", '        return nums.OrderBy(x
    => SumOfDigits(x)).ToList();', "        nums.Sort((n1, n2) =>\n        {\n   \
    \         int s1 = GetSum(n1);\n            int s2 = GetSum(n2);\n           \
    \ if (s1 == s2)\n                return 0;\n            else if (s1 > s2)\n  \
    \              return 1;\n            else\n                return -1;\n     \
    \   });\n        return nums;", "        var ordered = nums.Select((x, i) => new\
    \ { Index = i, SumOfDigits = (long)x.Digits().Sum() }).OrderBy(x => x.SumOfDigits).ThenBy(x\
    \ => x.Index).Select(x => nums[x.Index]).ToList();\n        return ordered;",
  "        // Your code here\n        return null;", "        List<long> order = new\
    \ List<long>();\n        if (nums.Count == 0)\n            return order;\n   \
    \     int n = nums.Count;\n        int[] sum = new int[n];\n        Dictionary<int,\
    \ List<int>> dict = new Dictionary<int, List<int>>();\n        for (int i = 0;\
    \ i < n; i++) {\n            int s = 0;\n            long num = nums[i];\n   \
    \         if (num < 0)\n                num = -num;\n            while (num >\
    \ 0) {\n                s += (int)(num % 10);\n                num /= 10;\n  \
    \          }\n            sum[i] = s;\n            if (!dict.ContainsKey(s))\n\
    \                dict[s] = new List<int>();\n            dict[s].Add(i);\n   \
    \     }\n        for (int i = 0; i < n; i++) {\n            int min = int.MaxValue;\n\
    \            foreach (var key in dict.Keys) {\n                if (key < min)\n\
    \                    min = key;\n            }\n            List<int> l = dict[min];\n\
    \            foreach (var j in l) {\n                order.Add(nums[j]);\n   \
    \         }\n            dict.Remove(min);\n        }\n        return order;",
  '        return null;', '        return nums.Select((i, index) => new { Number =
    i, Index = index }).OrderBy(x => GetSumOfDigits(x.Number)).ThenBy(x => x.Index).Select(x
    => x.Number).ToList();', "        // Implement this function.\n        Dictionary<long,\
    \ int> map = new Dictionary<long, int>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            map.Add(nums[i], nums[i].ToString().Select(c => (int)c -\
    \ (int)'0').Sum());\n        }\n        nums.Sort((n1, n2) => map[n1] == map[n2]\
    \ ? nums.IndexOf(n1) - nums.IndexOf(n2) : map[n1] - map[n2]);\n        return\
    \ nums;", '        return null;', '        throw new NotImplementedException();',
  "        List<long> result = new List<long>();\n        List<long> positive = new\
    \ List<long>();\n        List<long> negative = new List<long>();\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            if (nums[i] >= 0) {\n      \
    \          positive.Add(nums[i]);\n            } else {\n                negative.Add(nums[i]);\n\
    \            }\n        }\n        positive.Sort(delegate(long a, long b) {\n\
    \            int sum1 = 0;\n            int sum2 = 0;\n            while (a >\
    \ 0) {\n                sum1 += (int)(a % 10);\n                a /= 10;\n   \
    \         }\n            while (b > 0) {\n                sum2 += (int)(b % 10);\n\
    \                b /= 10;\n            }\n            return sum1 - sum2;\n  \
    \      });\n        negative.Sort(delegate(long a, long b) {\n            int\
    \ sum1 = 0;\n            int sum2 = 0;\n            while (a < 0) {\n        \
    \        sum1 += (int)(-a % 10);\n                a /= 10;\n            }\n  \
    \          while (b < 0) {\n                sum2 += (int)(-b % 10);\n        \
    \        b /= 10;\n            }\n            return sum1 - sum2;\n        });\n\
    \        for (int i = 0; i < negative.Count; i++) {\n            result.Add(negative[i]);\n\
    \        }\n        for (int i = 0; i < positive.Count; i++) {\n            result.Add(positive[i]);\n\
    \        }\n        return result;", '        return nums.Select((item, index)
    => (item, index)).OrderBy(t => SumDigits(t.item)).ThenBy(t => t.index).Select(t
    => t.item).ToList();', '        return nums;', "        List<long> ans = new List<long>();\n\
    \        foreach (long n in nums) {\n            int d = DigitSum(n);\n      \
    \      ans.Add(d * 100000000 + n);\n        }\n        ans.Sort();\n        for\
    \ (int i = 0; i < ans.Count; i++) {\n            ans[i] = ans[i] % 100000000;\n\
    \        }\n        return ans;", "        // TODO: implement this function\n\
    \        return null;", "        var res = new List<long>();\n        var dic\
    \ = new Dictionary<long, long>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            long tmp = 0;\n            foreach (char c in nums[i].ToString())\n\
    \                tmp += (long)c - 48;\n            dic.Add(nums[i], tmp);\n  \
    \      }\n        foreach (var v in dic.OrderBy(x => x.Value).ThenBy(x => x.Key))\n\
    \            res.Add(v.Key);\n        return res;", "        List<long> n = new\
    \ List<long>();\n        n.AddRange(nums);\n        n.Sort((a, b) => {\n     \
    \       int aa = (int)Math.Abs(a);\n            int bb = (int)Math.Abs(b);\n \
    \           int aaa = 0;\n            int bbb = 0;\n            while (aa > 0)\
    \ {\n                aaa += aa % 10;\n                aa /= 10;\n            }\n\
    \            while (bb > 0) {\n                bbb += bb % 10;\n             \
    \   bb /= 10;\n            }\n            if (aaa != bbb) {\n                return\
    \ aaa - bbb;\n            }\n            int i = nums.IndexOf(a);\n          \
    \  int j = nums.IndexOf(b);\n            return i - j;\n        });\n        return\
    \ n;", "        // Put your code here\n        List<long> temp = new List<long>();\n\
    \        Dictionary<int, int> dic = new Dictionary<int, int>();\n        foreach\
    \ (var item in nums)\n        {\n            int count = 0;\n            long\
    \ num = item;\n            if (num < 0)\n            {\n                num =\
    \ -num;\n            }\n            while (num > 0)\n            {\n         \
    \       count += (int)(num % 10);\n                num /= 10;\n            }\n\
    \            dic.Add(count, (int)item);\n        }\n        var result = dic.OrderBy(x\
    \ => x.Key).ToList();\n        foreach (var item in result)\n        {\n     \
    \       temp.Add(item.Value);\n        }\n        return temp;", "        return\
    \ (new List<long>(\n                nums.Select((num, i) => new Tuple<long, long,\
    \ long>(num, Math.Abs(num), i))\n                .OrderBy(t => t.Item2)\n    \
    \            .ThenBy(t => t.Item3)\n                .Select(t => t.Item1)\n  \
    \      ));", "        var list = new List<long>();\n        var indexList = new\
    \ List<int>();\n        var length = nums.Count;\n        for (int i = 0; i <\
    \ length; i++) {\n            long number = nums[i];\n            int sum = 0;\n\
    \            while (number != 0) {\n                sum += (int)(number % 10);\n\
    \                number /= 10;\n            }\n            if (list.Count == 0)\
    \ {\n                list.Add(sum);\n                indexList.Add(i);\n     \
    \       } else {\n                bool inserted = false;\n                for\
    \ (int j = 0; j < list.Count; j++) {\n                    if (sum < list[j]) {\n\
    \                        list.Insert(j, sum);\n                        indexList.Insert(j,\
    \ i);\n                        inserted = true;\n                        break;\n\
    \                    }\n                }\n                if (!inserted) {\n\
    \                    list.Add(sum);\n                    indexList.Add(i);\n \
    \               }\n            }\n        }\n        var ans = new List<long>();\n\
    \        for (int i = 0; i < length; i++) {\n            ans.Add(nums[indexList[i]]);\n\
    \        }\n        return ans;", "        // TODO: Implement\n        //\n  \
    \      // Hint:\n        // - You can create a new list (without modifying the\
    \ original)\n        //   by adding items one by one, e.g.:\n        //   (new\
    \ List<int>(new int[]{(int)1L, (int)2L}))\n        //   will create a list with\
    \ elements 1 and 2.\n        return null;", '        return nums;', "        //\
    \ your code goes here\n        return nums;", '        return new List<long>();',
  "        List<long> result = new List<long>();\n        while (nums.Count != 0)\
    \ {\n            long current = nums[0];\n            long currentSum = 0;\n \
    \           for (int i = 0; i < nums.Count; i++) {\n                long sum =\
    \ 0;\n                long current2 = nums[i];\n                while (current2\
    \ != 0) {\n                    sum += current2 % 10;\n                    current2\
    \ /= 10;\n                }\n                if (sum < currentSum) {\n       \
    \             current = nums[i];\n                    currentSum = sum;\n    \
    \            }\n            }\n            result.Add(current);\n            nums.Remove(current);\n\
    \        }\n        return result;", "        // This is a placeholder for the\
    \ solution. After\n        // the placeholder is replaced with the actual\n  \
    \      // solution, the unit tests will start passing.\n        long sum = 0;\n\
    \        nums.Sort((a, b) => {\n            long sum1 = 0;\n            long sum2\
    \ = 0;\n            long a1 = Math.Abs(a);\n            long b1 = Math.Abs(b);\n\
    \            while (a1 > 0) {\n                sum1 += a1 % 10;\n            \
    \    a1 /= 10;\n            }\n            while (b1 > 0) {\n                sum2\
    \ += b1 % 10;\n                b1 /= 10;\n            }\n            return sum1.CompareTo(sum2);\n\
    \        });\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        nums.Sort((left,\
    \ right) => {\n            int sumLeft = 0;\n            int sumRight = 0;\n \
    \           int pos = 0;\n            while(left > 0) {\n                sumLeft\
    \ += (int)(left % 10);\n                left /= 10;\n                pos++;\n\
    \            }\n            while(right > 0) {\n                sumRight += (int)(right\
    \ % 10);\n                right /= 10;\n                pos++;\n            }\n\
    \            if(sumLeft == sumRight) {\n                return 0;\n          \
    \  }\n            return sumLeft > sumRight ? 1 : -1;\n        });\n        return\
    \ nums;", "        return nums.Select((item, index) => new { item, index })\n\
    \                   .OrderBy(item => Enumerable.Range(0, (int)item.item.ToString().Length)\n\
    \                                              .Sum(digit => item.item.ToString()[digit]\
    \ - '0'))\n                   .ThenBy(item => item.index)\n                  \
    \ .Select(item => item.item)\n                   .ToList();", "        // Enter\
    \ your code here\n        var list = new List<long>();\n        var dict = new\
    \ Dictionary<long, long>();\n        var keys = new List<long>();\n        var\
    \ sumlist = new List<long>();\n        foreach (var item in nums)\n        {\n\
    \            long sum = 0;\n            var arr = item.ToString().ToCharArray();\n\
    \            foreach (var i in arr)\n            {\n                sum += long.Parse(i.ToString());\n\
    \            }\n            if (!dict.ContainsKey(sum))\n            {\n     \
    \           dict.Add(sum, item);\n                keys.Add(sum);\n           \
    \ }\n            else\n            {\n                dict[sum] = item;\n    \
    \        }\n        }\n        var key = keys.OrderBy(x => x).ToList();\n    \
    \    foreach (var item in key)\n        {\n            list.Add(dict[item]);\n\
    \        }\n        return list;", "        var sortedNums = new List<long>();\n\
    \        var newNums = new List<long>();\n        var oldNums = new List<long>();\n\
    \        var sortedDict = new Dictionary<long, List<long>>();\n        foreach\
    \ (var num in nums) {\n            if (sortedDict.ContainsKey(GetSumOfDigits(num)))\
    \ {\n                sortedDict[GetSumOfDigits(num)].Add(num);\n            }\
    \ else {\n                sortedDict[GetSumOfDigits(num)] = new List<long> { num\
    \ };\n            }\n        }\n        var keyList = sortedDict.Keys.ToList();\n\
    \        keyList.Sort();\n        foreach (var key in keyList) {\n           \
    \ newNums = sortedDict[key];\n            if (newNums.Count > 1) {\n         \
    \       oldNums = new List<long>(newNums);\n                newNums.Sort();\n\
    \                for (int i = 0; i < newNums.Count; i++) {\n                 \
    \   sortedNums.Add(oldNums.IndexOf(newNums[i]));\n                }\n        \
    \    } else {\n                sortedNums.Add(newNums[0]);\n            }\n  \
    \      }\n        return sortedNums;", "        List<long> ret = new List<long>();\n\
    \        var sums = new Dictionary<long, int>();\n        foreach (var i in nums)\
    \ {\n            long sum = i < 0 ? -i : i;\n            while (sum > 0) {\n \
    \               sums[i] += sum % 10;\n                sum /= 10;\n           \
    \ }\n        }\n        var sorted = nums.OrderBy(x => sums[x]).ThenBy(x => nums.IndexOf(x));\n\
    \        foreach (var i in sorted) {\n            ret.Add(i);\n        }\n   \
    \     return ret;", "        // Your code goes here\n        return nums;", " \
    \       var result = new List<long>();\n        var map = new Dictionary<long,\
    \ List<long>>();\n        for (var i = 0; i < nums.Count; i++) {\n           \
    \ var sum = GetSumOfDigits(nums[i]);\n            if (!map.ContainsKey(sum)) {\n\
    \                map[sum] = new List<long>();\n            }\n            map[sum].Add(nums[i]);\n\
    \        }\n        foreach (var kvp in map.OrderBy(item => item.Key)) {\n   \
    \         foreach (var num in kvp.Value) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;", '        throw new NotImplementedException();',
  "        List<long> sorted = new List<long>();\n        // if list is empty\n  \
    \      if (nums.Count == 0) {\n            return sorted;\n        }\n       \
    \ var temp = nums.Select((x,i) => new { Value = x, Index = i })\n            \
    \           .OrderBy(x => x.Value.ToString().Sum(c => Math.Abs(c - '0')))\n  \
    \                     .ThenBy(x => x.Index);\n        sorted = temp.Select(x =>\
    \ x.Value).ToList();\n        return sorted;", "        var points = new Dictionary<long,\
    \ int>();\n        foreach (var n in nums) {\n            var p = GetPoints(n);\n\
    \            if (!points.ContainsKey(p)) {\n                points[p] = new List<long>();\n\
    \            }\n            points[p].Add(n);\n        }\n        var res = new\
    \ List<long>();\n        foreach (var p in points.Keys.OrderBy(x => x)) {\n  \
    \          res.AddRange(points[p].OrderBy(x => x));\n        }\n        return\
    \ res;"]
stop_tokens:
- "\n    }\n"
