name: HumanEval_151_double_the_difference
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
  \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new List<float>(new\
  \ long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n    // >>> DoubleTheDifference((new\
  \ List<float>(new long[]{(long)9L, (long)-2L})))\n    // (81L)\n    // >>> DoubleTheDifference((new\
  \ List<float>(new long[]{(long)0L})))\n    // (0L)\n    // If the input list is\
  \ empty, return 0.\n    public static long DoubleTheDifference(List<float> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
  \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
  \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
  \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
  \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
  \ == (165L));\n    }\n\n}\n"
completions: ["        // Declare a local variable to store the sum of squares of\
    \ all odd\n        // numbers in the input list. Assign it the value 0.\n    \
    \    long oddSquaresSum = 0;\n        // Iterate over each element in the input\
    \ list.\n        foreach (var val in lst) {\n            // Check if this element\
    \ is positive integer.\n            if (val > 0 && (long)val == val) {\n     \
    \           // Check if this element is odd.\n                if ((long)val %\
    \ 2 != 0) {\n                    // Square this element and add the square to\
    \ the variable storing\n                    // the sum of squares of all odd numbers.\n\
    \                    oddSquaresSum += (long)val * (long)val;\n               \
    \ }\n            }\n        }\n        // Return the sum of squares of all odd\
    \ numbers in the input list.\n        return oddSquaresSum;", "        long sum\
    \ = 0;\n        foreach (float f in lst) {\n            if (f - (long)f == 0 &&\
    \ f > 0) {\n                sum += (long)f * (long)f;\n            }\n       \
    \ }\n        return sum;", '        return 0;', "        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        BigInteger sum = BigInteger.Zero;\n\
    \        foreach (float x in lst) {\n            if (Math.Abs(x) == (long)Math.Abs(x)\
    \ && Math.Abs(x) % 2 == 1) {\n                sum += (long)x * (long)x;\n    \
    \        }\n        }\n        return (long)sum * 2L;", "        long sum = 0;\n\
    \        foreach (float x in lst) {\n            if (x % 2 == 1 && x > 0) {\n\
    \                sum += (long)x * (long)x;\n            }\n        }\n       \
    \ return sum;", '        return 0;', "        // insert your code here\n     \
    \   int sumOfOddSquares = 0;\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            if (lst[i] % 2 == 1 && lst[i] > 0) {\n                sumOfOddSquares\
    \ += (int)lst[i] * (int)lst[i];\n            }\n        }\n        return sumOfOddSquares;",
  "        long sum = 0;\n        long count = 0;\n        foreach (float x in lst)\
    \ {\n            if (x < 0) {\n                continue;\n            }\n    \
    \        if (x % 1 != 0) {\n                continue;\n            }\n       \
    \     sum += (long)x;\n            count += 1;\n        }\n        if (count ==\
    \ 0) {\n            return 0;\n        }\n        return sum / count;", '        throw
    new NotImplementedException();', "        var sum = (new List<long>(new long[]{(long)0L}));\n\
    \        foreach (var x in lst) {\n            if ((((x % (long)1L) == (long)0L)\
    \ && (x > (long)0L))) {\n                sum = (new List<long>(new long[]{(sum[(int)(0L)]\
    \ + (((long)x * (long)x)))}));\n            }\n        }\n        return (sum[(int)(0L)]);",
  "        var r = 0L;\n        foreach (var v in lst) {\n            if (v > 0 &&\
    \ v % 2 == 1) {\n                r += (long)v * (long)v;\n            }\n    \
    \    }\n        return 2 * r;", "        long res = 0;\n        foreach (float\
    \ i in lst) {\n            if (i >= 0 && Math.Floor(i) == i) {\n             \
    \   if (i % 2 != 0) {\n                    res += (long)Math.Pow(i, 2);\n    \
    \            }\n            }\n        }\n        return res;", "        long\
    \ oddSum = 0;\n        long evenSum = 0;\n        foreach (float i in lst) {\n\
    \            if (i % 2 == 0) {\n                evenSum += i * i;\n          \
    \  } else {\n                oddSum += i * i;\n            }\n        }\n    \
    \    return 2 * (oddSum - evenSum);", "        List<long> lst2 = new List<long>();\n\
    \        foreach (var i in lst) {\n            if (i > 0 && i == (long)i) {\n\
    \                lst2.Add((long)i);\n            }\n        }\n        long max\
    \ = 0;\n        long min = 0;\n        foreach (var i in lst2) {\n           \
    \ if (i % 2 == 1) {\n                max += i * i;\n            }\n          \
    \  else {\n                min += i * i;\n            }\n        }\n        return\
    \ 2 * (max - min);", "        // >>> DoubleTheDifference = lambda lst: (sum(((i*i)\
    \ for i in lst if (((i>=0) and (i==int(i))) and (i%2==1)))))*2\n        // https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations\n\
    \        return lst.Where(x => x >= 0 && x == (long)x && x % 2 == 1).Select(x\
    \ => x * x).Sum() * 2;", '        return SumOfSquaresOfOdd(lst) - SquareOfSumOfOdd(lst);',
  "        // return ListFns.Sum(ListFns.Map(((Func<long, long>)(x => x * x)), ListFns.Filter(((Func<long,\
    \ bool>)(x => x % 2L == 1L)), ListFns.Map(((Func<float, long>)(x => x >= 0L &&\
    \ (x - (long)x) == 0L ? (long)x : 0L)), lst))));\n        return ListFns.Sum(ListFns.Map(((Func<long,\
    \ long>)(x => x * x)), ListFns.Filter(((Func<long, bool>)(x => x % 2L == 1L)),\
    \ ListFns.Map(((Func<float, long>)(x => x >= 0L && (x - (long)x) == 0L ? (long)x\
    \ : 0L)), lst))));", "        long acc = (long)0L;\n        foreach (float n in\
    \ lst) {\n            if (n % (long)2L == (long)1L && n >= (long)0L) {\n     \
    \           long nn = (long)n;\n                acc += nn * nn;\n            }\n\
    \        }\n        return acc;", "        // Replace the following line with\
    \ your code\n        long sum = 0;\n        foreach (float i in lst) {\n     \
    \       if (i % 2 == 1) {\n                sum += (long)i * (long)i;\n       \
    \     }\n        }\n        return sum;", "        long ret = 0;\n        foreach\
    \ (float i in lst) {\n            if (i > 0 && (int)i % 2 == 1) {\n          \
    \      ret += (long)i * (long)i;\n            }\n        }\n        return ret;",
  "      List<long> lst1 = lst.Where(x => x % 1 == 0).Where(x => x >= 0).Select(x\
    \ => (long)x).ToList();\n      long sum = 0;\n      long sum_even = 0;\n     \
    \ long sum_odd = 0;\n      foreach (long x in lst1) {\n        sum = sum + x;\n\
    \        if (x % 2 == 0) {\n          sum_even = sum_even + x;\n        } else\
    \ {\n          sum_odd = sum_odd + x;\n        }\n      }\n      long square_sum_even\
    \ = sum_even * sum_even;\n      long square_sum_odd = sum_odd * sum_odd;\n   \
    \   long diff = square_sum_even - square_sum_odd;\n      long result = diff *\
    \ 2;\n      return result;", "        long sum = 0;\n        foreach (float n\
    \ in lst) {\n            if (n % 2 == 1 && n > 0) {\n                sum += (long)\
    \ (n * n);\n            }\n        }\n        return sum;", "        long result\
    \ = 0;\n        // ...\n        return result;", '        return 0;', '        return
    0;', "        long sum = 0;\n        foreach (float num in lst) {\n          \
    \  if (num % 2 == 1) {\n                sum += num * num;\n            }\n   \
    \     }\n        return sum;", "        Debug.Assert(lst != null);\n        return\
    \ 0;", "        long difference = 0;\n        foreach (float item in lst) {\n\
    \            if (item == (long)item && item >= 0 && item % 2 != 0) {\n       \
    \         difference += (long)Math.Pow(item, 2);\n            }\n        }\n \
    \       return difference * 2;", "        long ret = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            float v = lst[i];\n            if (v >=\
    \ 0) {\n                int v2 = (int)v;\n                if (v2 == v) {\n   \
    \                 if (v2 % 2 == 1) {\n                        ret += v2 * v2;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ret;", "        // >>> from collections import Counter\n        // >>> c=Counter([1,1,2,2,2,2,3,3,3,4,4,4,4,4,5,5,5,5,5,5])\n\
    \        // >>> print(c)\n        // Counter({4: 5, 5: 6, 2: 4, 3: 3, 1: 2})\n\
    \        // >>> print(c.values())\n        // dict_values([2, 4, 3, 5, 6])\n \
    \       // >>> print(c.keys())\n        // dict_keys([1, 2, 3, 4, 5])\n      \
    \  // >>> print(c.most_common(3))\n        // [(4, 5), (5, 6), (2, 4)]\n     \
    \   // >>> sum(x**2 for x in lst if x%2==1)\n        // --- press CTRL+C to exit\
    \ ---\n        // >>> sum(x**2 for x in lst if x%2==1)\n        // --- press CTRL+C\
    \ to exit ---\n        // >>> sum(x**2 for x in lst if x%2==1)\n        // ---\
    \ press CTRL+C to exit ---\n        // >>> sum(x**2 for x in lst if x%2==1)\n\
    \        // --- press CTRL+C to exit ---\n        // >>> sum(x**2 for x in lst\
    \ if x%2==1)\n        // --- press CTRL+C to exit ---\n        // >>> sum(x**2\
    \ for x in lst if x%2==1)\n        // --- press CTRL+C to exit ---\n        //\
    \ >>> sum(x**2 for x in lst if x%2==1)\n        // --- press CTRL+C to exit ---\n\
    \        // >>> sum(x**2 for x in lst if x%2==1)\n        // --- press CTRL+C\
    \ to exit ---\n        // >>> sum(x**2 for x in lst if x%2==1)\n        // ---\
    \ press CTRL+C to exit ---\n        // >>> sum(x**2 for x in lst if x%2==1)\n\
    \        // --- press CTRL+C to exit ---\n        // >>> sum(x**2 for x in lst\
    \ if x%", "        long sumOfOddSquares = 0;\n        int i = 0;\n        while\
    \ (i < lst.Count) {\n            float elem = lst[i];\n            if (((elem\
    \ % 2L) == 0L) || (elem < 0L)) {\n                lst.RemoveAt(i);\n         \
    \   } else {\n                sumOfOddSquares += (long)(elem * elem);\n      \
    \          i += 1;\n            }\n        }\n        return 2L * sumOfOddSquares;",
  '        return (long)0L;', '        return (long)lst.Where(x => x % 2 == 1).Sum(x
    => x * x);', "        // Your code goes here\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (var\
    \ e in lst) {\n            if (e % 2 == 1) {\n                sum += (long)e *\
    \ (long)e;\n            }\n        }\n        return sum * 2;", '        return
    lst.Sum(n => (long)Math.Pow(n, 2)) ;', '        return 0;', '        return (long)lst.Where(x
    => (x % 2 == 1) && (x > 0) && (x % 1 == 0)).Select(x => x * x).Sum();', "    \
    \    long sum = 0;\n        bool first = true;\n        foreach (var num in lst)\
    \ {\n            if (num < 0 || num % 1 != 0) {\n                continue;\n \
    \           }\n            var n = (long)num;\n            if (n % 2 == 0) {\n\
    \                if (first) {\n                    sum = 0;\n                \
    \    first = false;\n                }\n                sum = sum - n * n;\n \
    \           } else {\n                sum = sum + n * n;\n            }\n    \
    \    }\n        return sum * 2;", '        return (long) (2 * lst.Where(e => e
    % 2 == 1).Select(e => e * e).Sum());', "        // Your code goes here.\n    \
    \    return (long)0L;", "        long sum = 0;\n        long sumOfSquares = 0;\n\
    \        foreach (float num in lst) {\n            if (num < 0) {\n          \
    \      continue;\n            }\n            long numAsLong = (long)num;\n   \
    \         if (numAsLong == num) {\n                sum += numAsLong;\n       \
    \         sumOfSquares += numAsLong * numAsLong;\n            }\n        }\n \
    \       return sumOfSquares - sum * sum;", '        return 42L;', "        var\
    \ oddSquares = lst.Select(e => e)\n                            .Where(e => e %\
    \ 2 == 1 || e % 2 == -1)\n                            .Select(e => (long)e * (long)e);\n\
    \        var evenSquares = lst.Select(e => e)\n                             .Where(e\
    \ => e % 2 == 0)\n                             .Select(e => (long)e * (long)e);\n\
    \        return Enumerable.Sum(oddSquares) - Enumerable.Sum(evenSquares);", " \
    \       long t1 = 0;\n        long t2 = 0;\n        long t3 = 0;\n        long\
    \ t4 = 0;\n        long t5 = 0;\n        long t6 = 0;\n        long t7 = 0;\n\
    \        long t8 = 0;\n        long t9 = 0;\n        long t10 = 0;\n        long\
    \ t11 = 0;\n        long t12 = 0;\n        long t13 = 0;\n        long t14 = 0;\n\
    \        long t15 = 0;\n        long t16 = 0;\n        long t17 = 0;\n       \
    \ long t18 = 0;\n        long t19 = 0;\n        long t20 = 0;\n        long t21\
    \ = 0;\n        long t22 = 0;\n        long t23 = 0;\n        long t24 = 0;\n\
    \        long t25 = 0;\n        long t26 = 0;\n        long t27 = 0;\n       \
    \ long t28 = 0;\n        long t29 = 0;\n        long t30 = 0;\n        long t31\
    \ = 0;\n        long t32 = 0;\n        long t33 = 0;\n        long t34 = 0;\n\
    \        long t35 = 0;\n        long t36 = 0;\n        long t37 = 0;\n       \
    \ long t38 = 0;\n        long t39 = 0;\n        long t40 = 0;\n        long t41\
    \ = 0;\n        long t42 = 0;\n        long t43 = 0;\n        long t44 = 0;\n\
    \        long t45 = 0;\n        long t46 = 0;\n        long t47 = 0;\n       \
    \ long t48 = 0;\n        long t49 = 0;\n        long t50 = 0;\n        long t51\
    \ = 0;\n        long t52 = 0;\n        long t53 = 0;\n        long t54 = 0;\n\
    \        long t55 = 0;\n        long t56 = 0;\n        long t57 = 0;\n       \
    \ long t58 = 0;\n        long t59 = 0;\n        long t60 = 0;\n        long t61\
    \ = 0;\n        long t62 = 0;\n        long t63 = 0;\n        long t64 = 0;",
  "        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n        \
    \    if (((int)lst[i]) % 2 == 1) {\n                sum += (((int)lst[i]) * ((int)lst[i]));\n\
    \            }\n        }\n        return sum;", "        long sum_of_odd_squares\
    \ = 0;\n        foreach (float elt in lst) {\n            if (elt == (float)Math.Floor(elt)\
    \ && elt >= 0 && elt % 2 == 1) {\n                sum_of_odd_squares += (long)Math.Pow(elt,\
    \ 2);\n            }\n        }\n        return 2 * sum_of_odd_squares;", '        return
    (long)lst.Where(item => item > 0 && (long)item % 2 == 1).Sum(item => Math.Pow(item,
    2));', "        // Insert your code here. Read input using 'Console.ReadLine()'\
    \ and print output using 'Console.WriteLine()'.\n        throw new NotImplementedException();",
  '        return 1;', '        return (from float v in lst where v > 0 && v == (long)v
    && v % 2 == 1 select v * v).Sum();', "        long result = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > 0 && i % 2 == 1) {\n                result\
    \ += i * i;\n            }\n        }\n        return result;", "        if (lst.Count\
    \ == 0) {\n            return 0;\n        }\n        else {\n            long\
    \ OddTotal = 0;\n            long EvenTotal = 0;\n            for (int i = 0;\
    \ i < lst.Count; i++) {\n                if (lst[i] % 2 == 0) {\n            \
    \        EvenTotal += (long) lst[i] * (long) lst[i];\n                }\n    \
    \            else {\n                    OddTotal += (long) lst[i] * (long) lst[i];\n\
    \                }\n            }\n            return OddTotal * 2 - EvenTotal;\n\
    \        }", "        List<float> new_lst = new List<float>();\n        foreach\
    \ (float e in lst) {\n            if (e > 0 && Math.Floor(e) == e) {\n       \
    \         new_lst.Add(e);\n            }\n        }\n        int count = 0;\n\
    \        foreach (float e in new_lst) {\n            if (e % 2 == 1) {\n     \
    \           count += 1;\n            }\n        }\n        return count;", " \
    \       int sum = 0;\n        foreach (int i in lst) {\n            if (i % 2\
    \ == 1) {\n                sum += i * i;\n            }\n        }\n        return\
    \ sum * 2;", "        if (lst.Count < 1) {\n            return 0L;\n        }\
    \ else {\n            long sumSquaresOfOddNumbers = 0L;\n            foreach (var\
    \ number in lst) {\n                if (number >= 0L && number % 2L == 1L) {\n\
    \                    sumSquaresOfOddNumbers += number * number;\n            \
    \    }\n            }\n            return sumSquaresOfOddNumbers * 2L;\n     \
    \   }", '        throw new NotImplementedException();', "        // return 0;\n\
    \        long sumOfEvenSquares = 0;\n        long sumOfOddSquares = 0;\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] % 2 == 0) {\n\
    \                sumOfEvenSquares += (long)Math.Pow(lst[i], 2);\n            }\
    \ else {\n                sumOfOddSquares += (long)Math.Pow(lst[i], 2);\n    \
    \        }\n        }\n        return 2 * (sumOfOddSquares - sumOfEvenSquares);",
  "        return lst.Select(e => e * e)\n                  .Where(e => e % 2 == 1)\n\
    \                  .Sum();", "        //TODO: Implement your solution here\n \
    \       return 0;", "        var tempList = new List<float>();\n        foreach\
    \ (var num in lst) {\n            if (IsInt(num) && IsOdd(num) && IsPositive(num))\
    \ {\n                tempList.Add(num);\n            }\n        }\n        var\
    \ sumOfSquares = tempList.Sum(x => x * x);\n        return sumOfSquares;", " \
    \       if ((lst == null)) {\n            throw new ArgumentNullException(\"lst\"\
    );\n        }\n        float temp = 0;\n        for (int i = 0; (i) < (lst.Count);\
    \ i++) {\n            if (((lst[i]) % (2L)) == (1L)) {\n                temp =\
    \ ((temp) + ((lst[i]) * (lst[i])));\n            }\n        }\n        return\
    \ ((long)(temp));", "        var squares = lst.Select(x => x * x).Where(x => x\
    \ > 0 && (int)x == x).ToList();\n        long sumOfSquares = squares.Sum();\n\
    \        long difference = squares.Count() * (squares.Count() - 1);\n        return\
    \ 2 * difference * sumOfSquares;", "        //return Enumerable.Range(0, lst.Count).Select((i)\
    \ => {\n        //    return (long)Math.Pow(lst[i], 2);\n        //}).Sum();\n\
    \        return lst.Select((i) => {\n            return Math.Pow(i, 2);\n    \
    \    }).Sum();", "        long counter = 0;\n        foreach (var v in lst) {\n\
    \            if (v % 1 == 0 && v > 0) {\n                counter += (long)v *\
    \ (long)v;\n            }\n        }\n        return counter;", '        return
    0;', "        Func<float, long> square = (num) => {\n            return (long)(num\
    \ * num);\n        };\n        Func<float, long> doubleIfOdd = (num) => {\n  \
    \          return (num % 2) == 0 ? square(num) : 2 * square(num);\n        };\n\
    \        Func<long, long, long> add = (a, b) => {\n            return a + b;\n\
    \        };\n        return lst.Where(num => num % 1 == 0 && num >= 0).Select(doubleIfOdd).Aggregate(add);",
  '        throw new Exception("Not implemented");', '        return 0;', "      \
    \  int i = 0;\n        long sum = 0;\n        while ((i < lst.Count)) {\n    \
    \        float f = lst[i];\n            float f_squared = (f * f);\n         \
    \   if (((!((f < 0L)) && ((f % 1L) == 0L)) && ((f % 2L) == 1L))) {\n         \
    \       sum = (sum + ((long)f_squared));\n            }\n            i = (i +\
    \ 1);\n        }\n        return (sum * 2L);", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.Count; i++) {\n            if (IsOdd((long)lst[i]))\
    \ {\n                sum += (long)Math.Pow(lst[i], 2);\n            }\n      \
    \  }\n        return sum;", '        throw new NotImplementedException();', " \
    \       if (lst.Count == 0) {\n            return 0L;\n        }\n        lst\
    \ = lst.Select(x => x >= 0f ? x : 0f).ToList();\n        return lst.Select(x =>\
    \ (int)x).Sum(x => x * x);", '        throw new NotImplementedException();', " \
    \       long total = 0;\n        for (long i = 0; i < lst.Count; i++) {\n    \
    \        float item = lst[(int)i];\n            if (((item % 2L) == 0L) && (item\
    \ > 0L)) {\n                total = (total + ((long)item * (long)item));\n   \
    \         }\n        }\n        return total;", "        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long diff = 0L;\n        long sum\
    \ = 0L;\n        foreach (var item in lst) {\n            long x = (long)item;\n\
    \            if (x > 0L && x % 2L == 1L) {\n                diff += x * x;\n \
    \           }\n            sum += x;\n        }\n        return diff * 2L - sum\
    \ * sum;", "        // Your code goes here.\n        float Sum = 0f;\n       \
    \ float Sumofsquares = 0f;\n        foreach (float i in lst) {\n            if\
    \ (i < 0 || !i.Equals((long)i)) {\n                continue;\n            } else\
    \ {\n                if (i % 2 == 0) {\n                    Sum += i;\n      \
    \          } else {\n                    Sumofsquares += (i * i);\n          \
    \      }\n            }\n        }\n        return (long)(2 * (Sumofsquares -\
    \ Sum));", "        long result = 0;\n        foreach (float num in lst) {\n \
    \           if (num >= (long)0L && num == (long)num) {\n                var x\
    \ = num % (long)2L;\n                if (x == (long)1L) {\n                  \
    \  long squared = (long)num * (long)num;\n                    result = result\
    \ + squared;\n                }\n            }\n        }\n        return result;",
  "        long res = 0L;\n        long sumPos = 0L;\n        long sumNeg = 0L;\n\
    \        foreach (var x in lst) {\n            if (x > 0.0f) {\n             \
    \   sumPos += (long)x;\n            }\n            else if (x < 0.0f) {\n    \
    \            sumNeg += (long)x;\n            }\n        }\n        res = sumPos\
    \ - sumNeg;\n        return res * 2L;", "        long diff = 0;\n        foreach\
    \ (float num in lst) {\n            if (num < 0) {\n                continue;\n\
    \            }\n            if (num % 1 != 0) {\n                continue;\n \
    \           }\n            if (num % 2 == 0) {\n                continue;\n  \
    \          }\n            diff += (long) Math.Pow(num, 2);\n        }\n      \
    \  return diff * 2;", "        List<float> lst1 = lst.Where(v => v % 1 == 0 &&\
    \ v > 0).ToList();\n        long a = lst1.Where(v => v % 2 == 0).Sum(v => (long)v\
    \ * (long)v);\n        long b = lst1.Where(v => v % 2 == 1).Sum(v => (long)v *\
    \ (long)v);\n        return (a - b) * 2;", '        return 0;', "        long\
    \ ret = 0;\n        foreach (var n in lst) {\n            if (n%2 == 1) {\n  \
    \              ret += (long)n*(long)n;\n            }\n        }\n        return\
    \ ret*2;", "        // return 2*sum(sq(x) for x in lst if x not in [-2, -1, 0,\
    \ 1])\n        // return 2*sum(sq(x) for x in lst if x in [2, 3])\n        return\
    \ 2*lst.Select(x => x > 2 ? (long)Math.Pow(x, 2) : 0).Sum();", "        long x\
    \ = 0L;\n        long y = 0L;\n        foreach (var element in lst) {\n      \
    \      if (element % 2L == 1L) {\n                y += element * element;\n  \
    \          }\n            else {\n                x += element * element;\n  \
    \          }\n        }\n        return 2L * (y - x);", "        long s = 0L;\n\
    \        for (long i = 0L; i < lst.Count; i++) {\n            long elem = (long)lst[(int)i];\n\
    \            if (elem == 0L) {\n                continue;\n            }\n   \
    \         else if (elem % 2L == 0L) {\n                s -= elem * elem;\n   \
    \         }\n            else {\n                s += elem * elem;\n         \
    \   }\n        }\n        return s;", "        // replace this line with your\
    \ code\n        long result = 0;\n        foreach (float i in lst) {\n       \
    \     if (i % 2 == 1 && i > 0) {\n                result += (long)Math.Pow(i,\
    \ 2);\n            }\n        }\n        return result;", "        // Your code\
    \ goes here.\n        return (long)0L;", "        var list = lst.Select(x => Math.Abs(x)).Where(x\
    \ => Math.Floor(x) == x).Select(x => (long)x).ToList();\n        var odd = list.Where(x\
    \ => x % 2 != 0).ToList();\n        var even = list.Where(x => x % 2 == 0).ToList();\n\
    \        var result = odd.Sum(x => x * x) - even.Sum(x => x * x);\n        return\
    \ result * 2;", "        long sqsum = 0;\n        foreach (float x in lst) {\n\
    \            if (x >= 0 && x % 1 == 0 && x % 2 == 1) {\n                sqsum\
    \ += (long)x * (long)x;\n            }\n        }\n        return 2 * sqsum;",
  "        long ret = 0;\n        foreach (float f in lst) {\n            if (f <\
    \ 0) {\n                continue;\n            }\n            if (f % 1 != 0)\
    \ {\n                continue;\n            }\n            ret += (long)f * (long)f;\n\
    \        }\n        return ret;", "        // Write your code here!\n        return\
    \ 0;", "        long __retres = 0;\n        if (lst.Count != 0) {\n          \
    \  int __counter = 0;\n            float p = 0f;\n            float q = 0f;\n\
    \            float r = 0f;\n            foreach (float v in lst) {\n         \
    \       __counter += 1;\n                p = v;\n                if (((__counter\
    \ % 2) == 0)) {\n                    q = p;\n                    if (((((((p -\
    \ (long)p) == 0.0f) && (p > 0f)) && (p <= 10f)) && ((q - (long)q) == 0.0f)) &&\
    \ (q > 0f))) {\n                        r = ((q - p) * (q - p));\n           \
    \             __retres += (long)r;\n                    }\n                }\n\
    \            }\n        }\n        return __retres;", "        long total=0;\n\
    \        foreach(float num in lst) {\n            if(num>=0) {\n             \
    \   total += num*num;\n            }\n        }\n        return total;", "   \
    \     BigInteger sum = 0;\n        foreach (float f in lst) {\n            int\
    \ i = (int)f;\n            if (i % 2 == 1) {\n                sum += (BigInteger)i\
    \ * i;\n            }\n        }\n        return (long)sum * 2;", "        //\
    \ Time complexity: O(n), where n is the length of lst\n        // Space complexity:\
    \ O(1)\n        long res = 0;\n        foreach (float num in lst) {\n        \
    \    if (num > 0 && num % 1 == 0 && num % 2 == 1) {\n                res += (long)num\
    \ * (long)num;\n            }\n        }\n        return res;", "        var sumOfSquares\
    \ = (long) 0L;\n        foreach (var item in lst) {\n            if (item != (long)\
    \ 0L && (item % (long) 2L) == (long) 1L) {\n                sumOfSquares += (long)\
    \ (item * item);\n            }\n        }\n        return sumOfSquares;", " \
    \       List<long> lst_1 = new List<long>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            long __lst_1_v__ = 0;\n            if (lst[i] > 0) {\n \
    \               __lst_1_v__ = (long)lst[i];\n            }\n            else {\n\
    \                __lst_1_v__ = 0;\n            }\n            if (__lst_1_v__\
    \ % 2 == 1) {\n                lst_1.Add(__lst_1_v__);\n            }\n      \
    \  }\n        long sum = 0;\n        for (int i = 0; i < lst_1.Count; i++) {\n\
    \            sum = sum + lst_1[i] * lst_1[i];\n        }\n        return 2 * sum;",
  "        long sum = 0;\n        for (long i = 0; i < lst.Count; i++) {\n       \
    \     float x = lst[(int)i];\n            if ((x % 1) == 0 && x > 0) {\n     \
    \           sum += (long)x * (long)x;\n            }\n        }\n        return\
    \ sum;", "        List<float> negativeNumbers = new List<float>();\n        List<float>\
    \ evenNumbers = new List<float>();\n        foreach (float num in lst) {\n   \
    \         if (num < 0) {\n                negativeNumbers.Add(num);\n        \
    \    }\n            if (num % 2 == 0) {\n                evenNumbers.Add(num);\n\
    \            }\n        }\n        if (negativeNumbers.Count == 0 && evenNumbers.Count\
    \ == 0) {\n            return 0;\n        }\n        return (long)(2 * (SumOfSquares(evenNumbers)\
    \ - SumOfSquares(negativeNumbers)));", "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i] % 2 == 1) {\n         \
    \       sum += (long)lst[i] * (long)lst[i];\n            }\n        }\n      \
    \  return 2 * sum;", "        // Insert your code here.\n        return 0L;",
  '        return lst.Where(num => num % 2 != 0).Sum(num => num * num);', '        return
    (long)0L;', "        if (lst.Count() == 0) {\n            return 0;\n        }\n\
    \        else {\n            var x = lst.Where(e => (e > 0 && e % 2 == 1 && e\
    \ == Math.Floor(e))).ToList();\n            var y = lst.Where(e => (e < 0 && e\
    \ % 2 == 1 && e == Math.Floor(e))).ToList();\n            return 2 * (x.Sum(i\
    \ => (long)i * (long)i) - y.Sum(i => (long)i * (long)i));\n        }", '        throw
    new NotImplementedException();', "        long ret = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (lst[i] < 0) {\n                continue;\n\
    \            }\n            if (lst[i] % 1 != 0) {\n                continue;\n\
    \            }\n            if (lst[i] % 2 == 0) {\n                continue;\n\
    \            }\n            ret += (long)Math.Pow(lst[i], 2);\n        }\n   \
    \     return ret;", "        // insert your code here...\n        int[] o = new\
    \ int[lst.Count];\n        int[] e = new int[lst.Count];\n        int i,j,p;\n\
    \        long sum=0;\n        for(i=0;i<lst.Count;i++)\n        {\n          \
    \  if(lst[i]<0)\n            {\n                lst[i]=0;\n            }\n   \
    \         if(lst[i]%2==0)\n            {\n                e[i]=(int)lst[i];\n\
    \            }\n            else\n            {\n                o[i]=(int)lst[i];\n\
    \            }\n        }\n        for(j=0;j<o.Length;j++)\n        {\n      \
    \      if(o[j]!=0)\n            {\n                sum+=o[j]*o[j];\n         \
    \   }\n        }\n        return sum;", '        return 0;', '        throw new
    NotImplementedException();', "        if (lst.Count == 0) {\n            return\
    \ 0L;\n        }\n        long diff = 0L;\n        foreach (var item in lst) {\n\
    \            long cur = 0L;\n            long next = 0L;\n            long tmp\
    \ = 0L;\n            long tmp1 = 0L;\n            long tmp2 = 0L;\n          \
    \  cur = (long)Math.Floor((double)item);\n            if (cur != item) {\n   \
    \             continue;\n            }\n            if (cur < 0L) {\n        \
    \        continue;\n            }\n            next = (long)Math.Floor((double)item);\n\
    \            if (next != item) {\n                continue;\n            }\n \
    \           if (next < 0L) {\n                continue;\n            }\n     \
    \       tmp = cur;\n            if (tmp % 2L == 0L) {\n                goto continue_label;\n\
    \            }\n            tmp1 = cur;\n            tmp2 = cur;\n           \
    \ diff = diff + (tmp1 * tmp2);\n            continue_label:;\n        }\n    \
    \    return diff * 2L;", '        return (long)Reduce((double)0L, 0, lst.Count,
    lst);', "        // Fill in your code here to return the correct value\n     \
    \   long total=0;\n        foreach(var num in lst){\n            int i = Convert.ToInt32(num);\n\
    \            if(i >= 0){\n                if(i % 2 != 0){\n                  \
    \  total += (i * i);\n                }\n            }\n        }\n        return\
    \ total * 2;", "        return lst.Aggregate(0, (acc, x) => {\n            if\
    \ (x % 1 == 0 && x >= 0) {\n                if (x % 2 == 1)\n                \
    \    return acc + (long)x * (long)x;\n                else\n                 \
    \   return acc;\n            }\n            else\n                return acc;\n\
    \        });", '        throw new NotImplementedException();', "        int sum\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (((((lst[i]\
    \ - (((int)lst[i]) + 0.5F)) < 0.001F) && ((lst[i] - (((int)lst[i]) - 0.5F)) >\
    \ -0.001F)) && (lst[i] >= 0))) {\n                if (((int)lst[i]) % 2 != 0)\
    \ {\n                    sum += ((int)lst[i]) * ((int)lst[i]);\n             \
    \   }\n            }\n        }\n        return ((long)sum);", "        long oddSq\
    \ = 0;\n        foreach (float i in lst) {\n            if (i % 2 == 1 && i >\
    \ 0) {\n                oddSq += (long)i * (long)i;\n            }\n        }\n\
    \        return oddSq * 2;", '        throw new Exception("not implemented");',
  "        long res = 0;\n        foreach (var item in lst) {\n            var temp\
    \ = (long)item;\n            if (temp % 2 == 1 && temp >= 0) {\n             \
    \   res += temp * temp;\n            }\n        }\n        return res;", "   \
    \     if (lst.Count == 0) {\n            return 0L;\n        }\n        return\
    \ 2L * lst.Select(e => new {V = e, Odd = (e % 2L) == 1L}).Where(x => x.Odd).Select(e\
    \ => e.V).Sum();", "        var ans = (long)0L;\n        foreach (var v in lst)\
    \ {\n            if (v % 2L == 1L) {\n                ans += (long)(v * v);\n\
    \            }\n        }\n        return ans;", "        long result = 0;\n \
    \       for (int i = 0; i < lst.Count; i++) {\n            float n = lst[i];\n\
    \            long n2 = (long) n;\n            if (n == n2 && n >= 0L) {\n    \
    \            if (n2 % 2L == 1L) {\n                    long n3 = n2 * n2;\n  \
    \                  result = result + n3;\n                }\n            }\n \
    \       }\n        return result;", "        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f % 2 == 1 && f > 0) {\n                sum +=\
    \ (long)Math.Pow(f, 2);\n            }\n        }\n        return sum;", "   \
    \     // Insert your code here\n        return 0;", "        int sum = 0;\n  \
    \      for (int i = 0; i < lst.Count; i++) {\n            if ((lst[i] % 2 == 1)\
    \ && (lst[i] > 0)) {\n                sum += (int)Math.Pow(lst[i], 2);\n     \
    \       }\n        }\n        return sum * 2;", "        long result = 0;\n  \
    \      foreach (float elem in lst) {\n            if (elem >= (long)0L && elem\
    \ % (long)1L == (long)0L) {\n                long square = (long)elem * (long)elem;\n\
    \                if (square % (long)2L == (long)1L) {\n                    result\
    \ += square;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        int i = -1;\n        while (i < (lst.Count -\
    \ 1)) {\n            i = i + 1;\n            bool isOdd = false;\n           \
    \ if ((lst[i] % 2) == 1) {\n                isOdd = true;\n            }\n   \
    \         if (((lst[i] % 2) == 0) && ((lst[i] % 1) != 0)) {\n                isOdd\
    \ = true;\n            }\n            if (isOdd) {\n                result = result\
    \ + ((long)Math.Pow(lst[i], 2));\n            }\n        }\n        return result;",
  '        throw new NotImplementedException();', "        long L = 0L;\n        foreach\
    \ (var elem in lst) {\n            if (elem > 0 && elem == (long)elem) {\n   \
    \             L += (long)elem * (long)elem;\n            }\n        }\n      \
    \  return 2L * L;", "        long result = 0;\n        foreach (var x in lst)\
    \ {\n            var a = ((int)x);\n            if (a % 2 == 1) {\n          \
    \      result += a * a;\n            }\n        }\n        return result;", " \
    \       long sum = 0;\n        foreach (float num in lst) {\n            if (num\
    \ >= 0) {\n                long num_int = (long)num;\n                if (num\
    \ == num_int) {\n                    if (num_int % 2 == 1) {\n               \
    \         sum += num_int * num_int;\n                    }\n                }\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    foreach (var item in lst) {\n            if (Math.Ceiling(item) != item)\
    \ {\n                continue;\n            }\n            if (item < 0) {\n \
    \               continue;\n            }\n            if (item % 2 == 0) {\n \
    \               continue;\n            }\n            sum += (long)item * (long)item;\n\
    \        }\n        return sum;", '        return lst.Where(x => (((x - (long)x)
    == (long)0L) && (x >= (long)0L))).Where(x => (((long)x % (long)2L) == (long)1L)).Select(x
    => ((long)x * (long)x)).Sum();', "        var sum = 0;\n        foreach (var item\
    \ in lst) {\n            if (item % 2 == 1) {\n                sum += (int) item\
    \ * (int) item;\n            }\n        }\n        return sum;", "        // Find\
    \ the difference between the sum of all the integers and the sum of all\n    \
    \    // the squares of the integers\n        // Sum each element in the list to\
    \ find the total\n        int total = 0;\n        // Sum the squares of each element\
    \ in the list to find the square total\n        int square_total = 0;\n      \
    \  for (int i = 0; i < lst.Count; i++) {\n            // If the element is an\
    \ integer and greater than or equal to 0...\n            if (lst[i] % 1 == 0 &&\
    \ lst[i] >= 0) {\n                // Add it to the total\n                total\
    \ += (int)lst[i];\n                // Add the square of it to the square total\n\
    \                square_total += (int)Math.Pow(lst[i], 2);\n            }\n  \
    \      }\n        // Find the difference between the sum of all the integers and\
    \ the sum of all\n        // the squares of the integers\n        int difference\
    \ = total - square_total;\n        // Double the difference\n        int doubled_difference\
    \ = difference * 2;\n        // Return the result\n        return doubled_difference;",
  "        // your code here\n        long res = 0;\n        foreach (long i in lst)\
    \ {\n            if (i % 2 == 1) {\n                res += i * i;\n          \
    \  }\n        }\n        return res;", "        var filtered = lst.Where(e =>\
    \ e > 0 && e == Math.Floor(e));\n        var squares = filtered.Select(e => (long)Math.Pow(e,\
    \ 2));\n        return squares.Sum();", "        // YOUR CODE HERE\n        return\
    \ 0;", "        long ret = 0;\n        foreach (float el in lst) {\n         \
    \   if ((el % 2) == 1) {\n                ret += ((long)el * (long)el);\n    \
    \        }\n        }\n        return ret;", "        var __r = doubleTheDifferenceImpl(lst);\n\
    \        return __r;", "        long Result = 0L;\n        foreach (long __foreach_var_0\
    \ in lst) {\n            var i = __foreach_var_0;\n            var x = ((long)Math.Ceiling((double)i));\n\
    \            if (((i - x) == 0L) && ((i % 2L) == 1L)) {\n                Result\
    \ = (Result + (x * x));\n            }\n        }\n        return Result;", '        return
    (long)lst.Where(x => x % 1 == 0 && x > 0).Select(x => x * x).Sum();', '        throw
    new NotImplementedException();', '        return lst.Where(n => n == (int)n &&
    n > 0).Select(n => (int)n).Sum(n => n * n);', "        int i = 0;\n        long\
    \ r = 0;\n        for (int j = 0; j < lst.Count; j++) {\n            float f =\
    \ lst[j];\n            int i2 = (int)f;\n            if (i2 < 0) {\n         \
    \       continue;\n            }\n            if (i2 != f) {\n               \
    \ continue;\n            }\n            i2 = i2 % 2;\n            if (i2 == 0)\
    \ {\n                continue;\n            }\n            r = r + (i2 * i2);\n\
    \            i = i + 1;\n        }\n        r = r * 2;\n        return r;", " \
    \       var result = 0L;\n        foreach (var number in lst) {\n            if\
    \ (number > 0 && Math.Floor(number) == number) {\n                result += number\
    \ % 2 == 0 ? number * number : number * number * 2;\n            }\n        }\n\
    \        return result;", '        return 0;', "        long sum_odd_squares =\
    \ 0;\n        foreach (float item in lst) {\n            if (item > 0 && item\
    \ == Math.Floor(item)) {\n                if (item % 2 > 0) {\n              \
    \      sum_odd_squares += (long)Math.Pow(item, 2);\n                }\n      \
    \      }\n        }\n        return sum_odd_squares * 2;", '        return 0;',
  "        // Fill in the missing code here.\n        long tempSum = 0;\n        long\
    \ doubleSum = 0;\n        foreach (float number in lst)\n        {\n         \
    \   if (number % 2 == 1)\n            {\n                tempSum += (long)number\
    \ * (long)number;\n            }\n        }\n        doubleSum = tempSum * 2;\n\
    \        return doubleSum;", "        List<long> _lst = new List<long>();\n  \
    \      foreach (var _float in lst) {\n            if (_float >= 0) {\n       \
    \         long intVal = (long) _float;\n                if (intVal == _float)\
    \ {\n                    _lst.Add(intVal);\n                }\n            }\n\
    \        }\n        if (_lst.Count == 0) {\n            return 0;\n        } else\
    \ {\n            long oddSum = 0;\n            long evenSum = 0;\n           \
    \ foreach (var elem in _lst) {\n                if (elem % 2 == 0) {\n       \
    \             evenSum += elem * elem;\n                } else {\n            \
    \        oddSum += elem * elem;\n                }\n            }\n          \
    \  return (oddSum - evenSum) * 2;\n        }", '        // your code here', " \
    \       long sum = 0;\n        foreach (long i in lst) {\n            if (i %\
    \ 2 == 1) {\n                sum += i * i;\n            }\n        }\n       \
    \ return sum;", "        long result = 0;\n        foreach (float x in lst) {\n\
    \            if ((x % 2) == 0) {\n                result += (long)(Math.Pow(x,\
    \ 2));\n            }\n        }\n        return (result * 2);", "        long\
    \ res = 0;\n        for (long i = 0; i < lst.Count; i++) {\n            if (lst[(int)i]\
    \ < 0L) {\n                continue;\n            }\n            if (lst[(int)i]\
    \ % 1L != 0L) {\n                continue;\n            }\n            if (lst[(int)i]\
    \ % 2L == 0L) {\n                continue;\n            }\n            res +=\
    \ (long)Math.Pow(lst[(int)i], 2L);\n        }\n        return 2L * res;", "  \
    \      // Your code goes here\n        long sum = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (lst[i] > 0 && lst[i] % 1 == 0 && lst[i]\
    \ % 2 == 1) {\n                sum += (long)Math.Pow(lst[i], 2);\n           \
    \ }\n        }\n        return sum;", "        int n = 0;\n        foreach (var\
    \ item in lst) {\n            if ((item % 2) == 1) {\n                n = n +\
    \ ((int)Math.Pow(item, 2));\n            }\n        }\n        return (n * 2);",
  "        long result = 0;\n        foreach (float x in lst) {\n            if (x\
    \ > 0 && (long)x == x) {\n                if (x % 2 != 0) {\n                \
    \    result += (long)x * (long)x;\n                }\n            }\n        }\n\
    \        return result * 2;", '        return 0;', "        long sum = 0;\n  \
    \      foreach (float x in lst) {\n            if (x < 0 || Math.Floor(x) != x)\n\
    \                continue;\n            if (x % 2 != 0)\n                sum +=\
    \ x * x;\n        }\n        return sum;", '        return (long)lst.Where(x =>
    x % 2 == 1 && x > 0 && x == (int)x).Sum(x => Math.Pow(x, 2));', "        var s\
    \ = 0L;\n        foreach (var i in lst) {\n            if (i % 1 == 0 && i > 0)\
    \ {\n                s += (long)Math.Pow(i, 2);\n            }\n        }\n  \
    \      return s;", "        long sum = 0;\n        foreach (float num in lst)\
    \ {\n            if (num % 2 == 1 && num > 0) {\n                sum += (long)Math.Pow(num,\
    \ 2);\n            }\n        }\n        return sum;", '        return lst.Select(x
    => (long)x).Where(x => x % 2 == 1 && x >= 0).Select(x => x * x).Sum();', '        return
    0;', '        return (from x in lst select x).Sum();', "        long sum = 0;\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] % 2 ==\
    \ 1) {\n                sum += lst[i] * lst[i];\n            }\n        }\n  \
    \      return sum;", "        long result = 0;\n        foreach (float x in lst)\
    \ {\n            if (x >= 0 && Math.Floor(x) == x) {\n                if (x %\
    \ 2 != 0) {\n                    result += (long)Math.Pow(x, 2);\n           \
    \     }\n            }\n        }\n        return 2 * result;", "        float\
    \ sum = 0;\n        foreach (var num in lst) {\n            if (num >= 0 && num\
    \ % 1 == 0 && num % 2 == 1) {\n                sum += (float)Math.Pow(num, 2);\n\
    \            }\n        }\n        return 2 * (long)sum;", '        return 0;',
  "        long sum = 0;\n        foreach (float n in lst) {\n            if (n >\
    \ 0) {\n                sum += (long)n * (long)n;\n            }\n        }\n\
    \        return sum;", "        long o = 0;\n        foreach (var x in lst) {\n\
    \            if (x >= 0) {\n                var x1 = (long)x;\n              \
    \  if (x1 == x) {\n                    if (x1 % 2 == 1) {\n                  \
    \      o += x1 * x1;\n                    }\n                }\n            }\n\
    \        }\n        return o * 2;", "        long sum = 0;\n        long odd =\
    \ 0;\n        long even = 0;\n        // iterate through the list and check if\
    \ the number is odd\n        // if it is odd, increment count\n        // add\
    \ the square of number to sum\n        foreach (float num in lst) {\n        \
    \    if (num % 2 == 0) {\n                even += 1;\n            } else {\n \
    \               odd += 1;\n            }\n            if (num > 0) {\n       \
    \         sum += (long)Math.Pow(num, 2);\n            }\n        }\n        return\
    \ sum + (odd * even);", '        return (long)Enumerable.Sum(Enumerable.Where(Enumerable.Select<float,
    Tuple<float, float>>(lst, x => Tuple.Create<float, float>(x, x * x)), x => (x.Item1
    % 2L) == (long)1L));', "        long sum_odd_squares = 0;\n        foreach (float\
    \ el in lst) {\n            if (el % 2 == 1) {\n                sum_odd_squares\
    \ += (long)Math.Pow(el, 2);\n            }\n        }\n        return 2 * sum_odd_squares;",
  "        long sumofsquareofodds = 0L;\n        foreach (var item in lst) {\n   \
    \         var number = (long)item;\n            if (number < 0L) {\n         \
    \       continue;\n            }\n            if (number != item) {\n        \
    \        continue;\n            }\n            if (number % 2L == 0L) {\n    \
    \            continue;\n            }\n            sumofsquareofodds += number\
    \ * number;\n        }\n        return 2L * sumofsquareofodds;", "        lst\
    \ = new List<float>(lst);\n        lst.RemoveAll(x => x < 0);\n        lst.RemoveAll(x\
    \ => x != Math.Floor(x));\n        long sum = 0;\n        foreach (var x in lst)\
    \ {\n            sum += ((long)Math.Pow(x, (double)2));\n        }\n        return\
    \ sum;", '        return lst.Select(x => x).Where(x => ((!(x < (long)0L)) && (Math.Floor(x)
    == x))).Select(x => x).Where(x => ((x % (long)2L) == (long)1L)).Select(x => x).Aggregate(((long)0L),
    (acc, x) => (acc + ((long)Math.Pow(x, (long)2L))));', "        long sum = 0;\n\
    \        List<long> odd = new List<long>();\n        foreach (var num in lst)\
    \ {\n            if (num % 2 == 1 && num > 0) {\n                odd.Add((long)num);\n\
    \            }\n        }\n        if (odd.Count > 0) {\n            sum = (long)Math.Pow(odd.First(),\
    \ 2);\n            foreach (var num in odd) {\n                if (num != odd.First())\
    \ {\n                    sum -= (long)Math.Pow(num, 2);\n                }\n \
    \           }\n        }\n        return sum;", '        return SumOfSquaresOfOdd(lst);',
  "        int doubleTheDifferenceVar0 = 0;\n        float doubleTheDifferenceVar1\
    \ = 0;\n        float doubleTheDifferenceVar2 = 0;\n        float doubleTheDifferenceVar3\
    \ = 0;\n        float doubleTheDifferenceVar4 = 0;\n        float doubleTheDifferenceVar5\
    \ = 0;\n        float doubleTheDifferenceVar6 = 0;\n        float doubleTheDifferenceVar7\
    \ = 0;\n        float doubleTheDifferenceVar8 = 0;\n        float doubleTheDifferenceVar9\
    \ = 0;\n        float doubleTheDifferenceVar10 = 0;\n        int doubleTheDifferenceVar11\
    \ = 0;\n        float doubleTheDifferenceVar12 = 0;\n        float doubleTheDifferenceVar13\
    \ = 0;\n        float doubleTheDifferenceVar14 = 0;\n        float doubleTheDifferenceVar15\
    \ = 0;\n        float doubleTheDifferenceVar16 = 0;\n        float doubleTheDifferenceVar17\
    \ = 0;\n        long doubleTheDifferenceVar18 = 0;\n        long doubleTheDifferenceVar19\
    \ = 0;\n        long doubleTheDifferenceVar20 = 0;\n        long doubleTheDifferenceVar21\
    \ = 0;\n        int doubleTheDifferenceVar22 = 0;\n        int doubleTheDifferenceVar23\
    \ = 0;\n        int doubleTheDifferenceVar24 = 0;\n        long doubleTheDifferenceVar25\
    \ = 0;\n        int doubleTheDifferenceVar26 = 0;\n        int doubleTheDifferenceVar27\
    \ = 0;\n        long doubleTheDifferenceVar28 = 0;\n        long doubleTheDifferenceVar29\
    \ = 0;\n        long doubleTheDifferenceVar30 = 0;\n        long doubleTheDifferenceVar31\
    \ = 0;\n        long doubleTheDifferenceVar32 = 0;\n        int doubleTheDifferenceVar33\
    \ = 0;\n        long doubleTheDifferenceVar34 = 0;\n        long doubleTheDifferenceVar35\
    \ = 0;\n        long doubleTheDifferenceVar36 = 0;\n        long doubleTheDifferenceVar37\
    \ = 0;\n        long doubleTheDifferenceVar38 = 0;\n        long doubleTheDifferenceVar39\
    \ = 0;\n        long doubleTheDifferenceVar40 = 0;\n        long doubleTheDifferenceVar41\
    \ = 0;\n        long doubleTheDifferenceVar", "        long sum = 0;\n       \
    \ foreach (float num in lst) {\n            if (num % 2 != 0 && num >= 0) {\n\
    \                sum += (long)num * (long)num;\n            }\n        }\n   \
    \     return sum;", '        return ((new List<long>(SumOfSquaresOfOddNumbers(lst))).Where(((long
    number) => number % (long)2L == (long)1L)).Select(((long number) => number * number)).Sum()
    * (long)2L);', "        long answer = 0;\n        foreach (float num in lst) {\n\
    \            if (IsOdd(num) && !IsNegative(num)) {\n                answer +=\
    \ (long)Math.Pow(num, 2);\n            }\n        }\n        return answer;",
  "        List<float> lst_odds = new List<float>();\n        foreach (var i in lst)\
    \ {\n            if ((((i == Math.Floor(i)) && (!Double.IsInfinity(i))) && (i\
    \ >= 0L))) {\n                if ((i % 2L) == 1L) {\n                    lst_odds.Add(i);\n\
    \                }\n            }\n        }\n        return SumOfSquares(lst_odds);",
  "        long temp = 0L;\n        long temp_1 = 0L;\n        foreach (var item in\
    \ lst) {\n            if ((float.IsNaN(item) || ((item < (long)0L) || (float.IsInfinity(item)\
    \ || !(item == Math.Truncate(item)))))) {\n            }\n            else {\n\
    \                if ((((long)item) % (long)2L) == (long)0L) {\n              \
    \      temp = ((temp * (long)2L) + ((long)item * (long)item));\n             \
    \   }\n                else {\n                    temp_1 = ((temp_1 * (long)2L)\
    \ + ((long)item * (long)item));\n                }\n            }\n        }\n\
    \        return ((temp_1 * (long)2L) - temp);", "        if (lst.Count == 0)\n\
    \            return 0;\n        int sum = 0;\n        foreach (float item in lst)\
    \ {\n            // TODO: implement\n        }\n        return 2 * sum;", "  \
    \      // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)0L})))\n        // (10L)\n        long __return__ = 0L;\n  \
    \      // DoubleTheDifference((new List<float>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)0L})))\n        long DoubleTheDifference(List<float> lst) {\n\
    \            long ssq = 0L;\n            foreach (float num in lst) {\n      \
    \          if (num == (long)num && num > 0L) {\n                    ssq += (long)num\
    \ * (long)num;\n                }\n            }\n            return 2L * ssq;\n\
    \        }\n        return __return__;", "        long ret = 0;\n        foreach\
    \ (float item in lst) {\n            if (item > 0 && (long)item == item) {\n \
    \               if (item % 2 != 0) {\n                    ret += (long)item *\
    \ (long)item;\n                }\n            }\n        }\n        return ret\
    \ * 2;", "        // Implement me\n        return 0;", '        return (long)0L;',
  "        long count = 0;\n        long n = 0;\n        while ((n < lst.Count)) {\n\
    \            {\n                long i = n;\n                n = n + 1;\n    \
    \            float item = lst[(int)i];\n                if ((item > 0L)) {\n \
    \                   {\n                        var x = (long)item;\n         \
    \               if ((x % 2L) == 1L) {\n                            count = count\
    \ + (x * x);\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        return count;", "        //long cnt =\
    \ 0;\n        //long sum = 0;\n        //long i = 0;\n        //long j = 1;\n\
    \        //long n = 0;\n        //long x = 0;\n        //while ((i) < (lst.Count))\
    \ {\n        //    x = (long)lst[(int)i];\n        //    if ((j) % (2L) == (1L))\
    \ {\n        //        sum = (sum) + ((x) * (x));\n        //    }\n        //\
    \    j = (j) + (1L);\n        //    i = (i) + (1L);\n        //}\n        //return\
    \ sum;\n        return 0;", '        throw new NotImplementedException();', " \
    \       long result = 0;\n        long sum = 0;\n        foreach (float x in lst)\
    \ {\n            if (x >= 0 && (long)x == x) {\n                sum += (long)x;\n\
    \                if ((long)x % 2 != 0) {\n                    result += (long)x\
    \ * (long)x;\n                }\n            }\n        }\n        if (sum !=\
    \ 0) {\n            result *= 2;\n        }\n        return result;", "      \
    \  long l = (long)0L;\n        long r = (long)0L;\n        foreach (var x in lst)\n\
    \        {\n            if (x > (long)0L && x == (long)x)\n            {\n   \
    \             if (x % (long)2L == (long)1L)\n                {\n             \
    \       l += (long)x * (long)x;\n                }\n                else\n   \
    \             {\n                    r += (long)x * (long)x;\n               \
    \ }\n\n            }\n\n        }\n        return l - r;\n", "        Func<double,\
    \ double> PositiveSquare = (input) => input * input;\n        Func<double, bool>\
    \ PositiveOdd = (input) => (input > 0) && (input % 2 == 1);\n        Func<long,\
    \ bool> Negative = (input) => input < 0;\n        List<double> Output = new List<double>();\n\
    \        for (long i = 0; i < lst.Count; i++) {\n            if (PositiveOdd(lst[(int)i]))\
    \ {\n                Output.Add(PositiveSquare(lst[(int)i]));\n            }\n\
    \        }\n        return (long)Output.Sum();", "        long result = 0;\n \
    \       foreach (var e in lst) {\n            if (e > 0 && (long)e == e) {\n \
    \               if (e % 2 == 1) {\n                    result += e * e;\n    \
    \            }\n            }\n        }\n        return result * 2;", "     \
    \   //return \n        //return new BigInteger(0);\n        //long i = 0;\n  \
    \      //while (i < lst.Count()) {\n        //    i = i + 1L;\n        //}\n \
    \       return (long)0;", '        throw new NotImplementedException();', "  \
    \      long res = 0;\n        if (lst.Count > 0) {\n            res = (long) (lst[0]\
    \ * lst[0]);\n            lst.RemoveAt(0);\n            if (lst.Count > 0) {\n\
    \                res -= (long) (lst[0] * lst[0]);\n                lst.RemoveAt(0);\n\
    \            }\n        }\n        return 2 * res;"]
stop_tokens:
- "\n    }\n"
