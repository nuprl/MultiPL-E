name: HumanEval_117_select_words
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns a list of all words from string\
  \ s that contain exactly \n    // n consonants, in order these words appear in the\
  \ string s.\n    // If the string s is empty then the function should return an\
  \ empty list.\n    // Note: you may assume the input string contains only letters\
  \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
  ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>\
  \ SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
  \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
  \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
  Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n\
  \    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"\
  Uncle\"}))\n    public static List<string> SelectWords(string s, long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
  Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
  little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
  \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
  simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
  Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
  \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
  \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
  \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
  \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
  f\"}))));\n    }\n\n}\n"
completions: ["        List<string> res = new List<string>();\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        List<string> words = s.Split(new char[]\
    \ { ' ' }).ToList();\n        foreach (string word in words) {\n            if\
    \ (word.Count(x => vowels.Contains(x)) == n) {\n                res.Add(word);\n\
    \            }\n        }\n        return res;", "        // TODO: Implement this\
    \ function\n        return new List<string>();", '        return null;', "   \
    \     var list = new List<string>();\n        var words = s.Split(' ');\n    \
    \    foreach (var word in words) {\n            if (CountConsonants(word) == n)\
    \ {\n                list.Add(word);\n            }\n        }\n        return\
    \ list;", '        return new List<string>();', "        var vowels = new HashSet<char>(\"\
    aeiouAEIOU\");\n        var words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var list = new List<string>();\n        foreach (var word in words) {\n\
    \            var chars = word.ToCharArray();\n            var consonants = chars.Count(c\
    \ => !vowels.Contains(c));\n            if (consonants == n)\n               \
    \ list.Add(word);\n        }\n        return list;", "        var result = new\
    \ List<string>();\n        var words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (var word in words) {\n            var count = 0;\n         \
    \   foreach (var ch in word) {\n                if (Char.IsLetter(ch) && ch !=\
    \ 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u')\n                 \
    \   count++;\n            }\n            if (count == n)\n                result.Add(word);\n\
    \        }\n        return result;", "        return s.Split(new char[] { ' '\
    \ }, StringSplitOptions.RemoveEmptyEntries)\n            .Where(x => x.Count(c\
    \ => \"aeiou\".Contains(c)) == n)\n            .ToList();", "        List<string>\
    \ words = new List<string>();\n        long vowels = 0;\n        long consonants\
    \ = 0;\n        long i = 0;\n        while (i < s.Length) {\n            if (s[(int)i]\
    \ == ' ') {\n                if (consonants == n) {\n                    words.Add(s.Substring((int)(i\
    \ - consonants - vowels), (int)(consonants + vowels)));\n                }\n \
    \               vowels = 0;\n                consonants = 0;\n            } else\
    \ if (s[(int)i] == 'a' || s[(int)i] == 'e' || s[(int)i] == 'i' || s[(int)i] ==\
    \ 'o' || s[(int)i] == 'u') {\n                vowels = vowels + 1;\n         \
    \   } else {\n                consonants = consonants + 1;\n            }\n  \
    \          i = i + 1;\n        }\n        if (consonants == n) {\n           \
    \ words.Add(s.Substring((int)(i - consonants - vowels), (int)(consonants + vowels)));\n\
    \        }\n        return words;", "        var result = new List<string>();\n\
    \        var vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u' };\n     \
    \   var splits = s.Split(' ');\n        foreach (var word in splits) {\n     \
    \       if (word.Length == 0) {\n                continue;\n            }\n  \
    \          var count = 0;\n            foreach (var c in word) {\n           \
    \     if (!vowels.Contains(c)) {\n                    count++;\n             \
    \   }\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        List<string> output\
    \ = new List<string>();\n        string[] words = s.Split(new char[] { ' ' });\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (ConsonantCount(words[i])\
    \ == n) {\n                output.Add(words[i]);\n            }\n        }\n \
    \       return output;", "        var words = s.Split(' ');\n        var res =\
    \ new List<string>();\n        foreach (var word in words) {\n            var\
    \ cons = 0;\n            foreach (var l in word) {\n                if (\"bcdfghjklmnpqrstvwxyz\"\
    .Contains(l)) {\n                    cons++;\n                }\n            }\n\
    \            if (cons == n) {\n                res.Add(word);\n            }\n\
    \        }\n        return res;", "        List<string> result = new List<string>();\n\
    \        if(string.IsNullOrEmpty(s)) return result;\n        string word = \"\"\
    ;\n        for(int i = 0; i < s.Length; i++) {\n            if(s[i] == ' ') {\n\
    \                if(consonantsCount(word) == n) result.Add(word);\n          \
    \      word = \"\";\n            } else {\n                word += s[i];\n   \
    \         }\n        }\n        if(consonantsCount(word) == n) result.Add(word);\n\
    \        return result;", "        var myList = new List<string>();\n        var\
    \ words = s.Split(' ');\n        var vowels = new string[] { \"a\", \"e\", \"\
    i\", \"o\", \"u\" };\n        foreach (var word in words) {\n            var counter\
    \ = 0;\n            foreach (var letter in word) {\n                if (!vowels.Contains(letter.ToString().ToLower()))\
    \ {\n                    counter++;\n                }\n            }\n      \
    \      if (counter == n) {\n                myList.Add(word);\n            }\n\
    \        }\n        return myList;", "        List<string> list = new List<string>();\n\
    \        int length = s.Length;\n        if (length == 0) return list;\n     \
    \   string[] words = s.Split(' ');\n        for (int i = 0; i < words.Length;\
    \ i++) {\n            if (words[i].Length > 2) {\n                if (CountConsonants(words[i])\
    \ == n) {\n                    list.Add(words[i]);\n                }\n      \
    \      }\n        }\n        return list;", "        if (s.Length == 0) {\n  \
    \          return new List<string>();\n        }\n        string[] words = s.Split('\
    \ ');\n        List<string> result = new List<string>();\n        foreach (string\
    \ word in words) {\n            // check how many words are in the word\n    \
    \        int consonants = 0;\n            foreach (char c in word) {\n       \
    \         if (\"bcdfghjklmnpqrstvwxyz\".Contains(c)) {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;",
  '        return new List<string>();', "        string[] splitted = s.Split(' ');\n\
    \        var list = new List<string>();\n        foreach (string word in splitted)\
    \ {\n            int count = 0;\n            for (int i = 0; i < word.Length;\
    \ i++) {\n                if (!char.IsVowel(word[i]))\n                    count++;\n\
    \            }\n            if (count == n)\n                list.Add(word);\n\
    \        }\n        return list;", "        // TODO: Implement your code here\n\
    \        return null;", '        return null;', "        List<string> words =\
    \ new List<string>();\n        bool check = false;\n        for (int i = 0; i\
    \ < s.Length; i++) {\n            if (s[i] == ' ') {\n                check =\
    \ true;\n            }\n            if (check) {\n                if (s[i] ==\
    \ ' ') {\n                    words.Add(s.Substring(i+1, s.Length-i-1));\n   \
    \                 break;\n                }\n            }\n        }\n      \
    \  if (check) {\n            long num = 0;\n            foreach (char c in words[0])\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') {\n                    num++;\n                }\n            }\n     \
    \       if (num == n) {\n                return words;\n            }\n      \
    \      else {\n                return new List<string>();\n            }\n   \
    \     }\n        else {\n            long num = 0;\n            foreach (char\
    \ c in s) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') {\n                    num++;\n                }\n            }\n\
    \            if (num == n) {\n                words.Add(s);\n                return\
    \ words;\n            }\n            else {\n                return new List<string>();\n\
    \            }\n        }", "        var consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Length == 0) continue;\n\
    \            var cnt = 0;\n            foreach (var ch in word) {\n          \
    \      if (consonants.Contains(char.ToLower(ch)))\n                    cnt++;\n\
    \            }\n            if (cnt == n)\n                result.Add(word);\n\
    \        }\n        return result;", "        // -- INSERT CODE HERE --\n    \
    \    return new List<string>();", "        var words = s.Split(' ');\n       \
    \ var res = new List<string>();\n        foreach (var word in words) {\n     \
    \       int cnt = 0;\n            foreach (var c in word) {\n                if\
    \ (!IsVowel(c)) {\n                    cnt++;\n                }\n           \
    \ }\n            if (cnt == n) {\n                res.Add(word);\n           \
    \ }\n        }\n        return res;", '        return s.Split().Where(x => x.Count(y
    => "bcdfghjklmnpqrstvwxz".Contains(y)) == n).ToList();', "        var words =\
    \ s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n      \
    \  var result = new List<string>();\n        foreach (var word in words) {\n \
    \           if (HasConsonants(word, n)) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        if (s == \"\") return result;\n        string[]\
    \ words = s.Split(' ');\n        for (int i = 0; i < words.Length; i++) {\n  \
    \          if (Consonants(words[i]) == n) {\n                result.Add(words[i]);\n\
    \            }\n        }\n        return result;", "        if (n <= 0L) return\
    \ new List<string>();\n        if (s.Length <= 0) return new List<string>();\n\
    \        var words = s.Split(' ');\n        List<string> ret = new List<string>();\n\
    \        foreach (var word in words) {\n            var vowels = 0L;\n       \
    \     var consonants = 0L;\n            foreach (var c in word) {\n          \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \               vowels += 1L;\n                } else {\n                    consonants\
    \ += 1L;\n                }\n            }\n            if (consonants == n) {\n\
    \                ret.Add(word);\n            }\n        }\n        return ret;",
  "        var words = s.Split();\n        var ans = new List<string>();\n       \
    \ foreach (var word in words) {\n            var count = CountConsonants(word);\n\
    \            if (count == n) ans.Add(word);\n        }\n        return ans;",
  "        var words = s.Split(' ');\n        var result = new List<string>();\n \
    \       foreach (var word in words) {\n            if (ConsonantsCount(word) ==\
    \ n) {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (Consonants(word) == n)\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        // TODO implement me\n        return null;", '        return
    new List<string>();', "        var words = s.Split(' ');\n        var result =\
    \ new List<string>();\n        foreach (var word in words) {\n            var\
    \ consonants = 0;\n            foreach (var ch in word) {\n                if\
    \ (!\"aeiouAEIOU\".Contains(ch)) consonants++;\n            }\n            if\
    \ (consonants == n) result.Add(word);\n        }\n        return result;", " \
    \       var words = s.Split(' ');\n        return words.Where(w => countConsonants(w)\
    \ == n).ToList();", "        int consonants = 0;\n        List<string> result\
    \ = new List<string>();\n        StringBuilder sb = new StringBuilder();\n   \
    \     foreach (char c in s) {\n            if (isConsonant(c)) {\n           \
    \     consonants++;\n            }\n            if (c == ' ') {\n            \
    \    if (consonants == n) {\n                    result.Add(sb.ToString());\n\
    \                }\n                consonants = 0;\n                sb.Clear();\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        if (consonants == n) {\n            result.Add(sb.ToString());\n    \
    \    }\n        return result;", "        var words = s.Split(' ');\n        var\
    \ selectedWords = new List<string>();\n        foreach (var word in words) {\n\
    \            if (CountConsonants(word) == n) {\n                selectedWords.Add(word);\n\
    \            }\n        }\n        return selectedWords;", "        // your code\
    \ goes here\n        return new List<string>();", "        var words = s.Split('\
    \ ');\n        List<string> result = new List<string>();\n        for (var i =\
    \ 0; i < words.Length; i++) {\n            var word = words[i];\n            var\
    \ consonants = word.Count(ch => ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o'\
    \ && ch != 'u');\n            if (consonants == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        string[] words =\
    \ s.Split();\n        var res = new List<string>();\n        int consonants =\
    \ 0;\n        for (int i = 0; i < words.Length; i++) {\n            consonants\
    \ = 0;\n            for (int j = 0; j < words[i].Length; j++) {\n            \
    \    switch (words[i][j]) {\n                    case 'a':\n                 \
    \   case 'e':\n                    case 'i':\n                    case 'o':\n\
    \                    case 'u':\n                    case 'y':\n              \
    \          break;\n                    default:\n                        consonants++;\n\
    \                        break;\n                }\n            }\n          \
    \  if (consonants == n) {\n                res.Add(words[i]);\n            }\n\
    \        }\n        return res;", "        var res = new List<string>();\n   \
    \     var buffer = new StringBuilder();\n        var count = 0L;\n        for\
    \ (var i = 0; i < s.Length; i++) {\n            if (s[i] == ' ') {\n         \
    \       if (count == n) {\n                    res.Add(buffer.ToString());\n \
    \               }\n                buffer.Clear();\n                count = 0;\n\
    \            } else if (!IsVowel(s[i])) {\n                count++;\n        \
    \        buffer.Append(s[i]);\n            } else {\n                buffer.Append(s[i]);\n\
    \            }\n        }\n        if (count == n) {\n            res.Add(buffer.ToString());\n\
    \        }\n        return res;", "        var words = s.Split(' ');\n       \
    \ var vowelSet = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var result\
    \ = new List<string>();\n        foreach (var word in words) {\n            var\
    \ count = 0;\n            foreach (var c in word) {\n                if (!vowelSet.Contains(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.Add(word);\n            }\n   \
    \     }\n        return result;", "        List<string> l = new List<string>();\n\
    \        var words = s.Split(' ');\n        for (int i = 0; i < words.Length;\
    \ i++) {\n            var word = words[i];\n            var cons = 0;\n      \
    \      for (int j = 0; j < word.Length; j++) {\n                var c = word[j];\n\
    \                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ {\n                    cons++;\n                }\n            }\n         \
    \   if (cons == n) {\n                l.Add(word);\n            }\n        }\n\
    \        return l;", "        // the list of words that we will return\n     \
    \   List<string> wordList = new List<string>();\n        // this is the count\
    \ of consonants that we have seen in the current word\n        long consonantCount\
    \ = 0L;\n        // this is the current word that we are processing\n        string\
    \ currentWord = \"\";\n        // loop through each character in the string\n\
    \        for (int i = 0; i < s.Length; i++) {\n            // if we have seen\
    \ a space then we are on to the next word\n            if (s[i] == ' ') {\n  \
    \              // if we have seen the right number of consonants then add to our\
    \ list\n                if (consonantCount == n) {\n                    wordList.Add(currentWord);\n\
    \                }\n                // start again with the new word\n       \
    \         consonantCount = 0L;\n                currentWord = \"\";\n        \
    \    } else {\n                // append the character to the current word\n \
    \               currentWord += s[i];\n                // if the character is a\
    \ consonant then increment the consonant count\n                if (!\"aeiou\"\
    .Contains(s[i])) {\n                    consonantCount++;\n                }\n\
    \            }\n        }\n        // if we have seen the right number of consonants\
    \ then add to our list\n        if (consonantCount == n) {\n            wordList.Add(currentWord);\n\
    \        }\n        // return the list of words\n        return wordList;", '        return
    new List<string>();', "        List<string> result = new List<string>();\n   \
    \     int consonants = 0;\n        string word = \"\";\n        bool previousIsLetter\
    \ = false;\n        foreach (char c in s) {\n            bool isLetter = char.IsLetter(c);\n\
    \            if (isLetter) {\n                word += c;\n                if (!IsVowel(c))\
    \ {\n                    consonants++;\n                }\n            } else\
    \ {\n                if (consonants == n) {\n                    result.Add(word);\n\
    \                }\n                word = \"\";\n                consonants =\
    \ 0;\n            }\n            previousIsLetter = isLetter;\n        }\n   \
    \     if (consonants == n) {\n            result.Add(word);\n        }\n     \
    \   return result;", "        // SOLUTION-1: \n        // We first split string\
    \ s into words in two steps.\n        // The first step is to split the string\
    \ s into substrings \n        // which consist of only the letters or the spaces.\n\
    \        // This is done by calling the \"Split\" method of string s\n       \
    \ // providing the regular expression \"[^a-zA-Z ]\" as a parameter.\n       \
    \ // The regular expression \"[^a-zA-Z ]\" represents a negated\n        // character\
    \ class that matches any character that is not\n        // in the range a-z, A-Z,\
    \ or the space character.\n        // The output of this first step is stored\
    \ in the \"words\" variable.\n        var words = s.Split(new string[] { \"[^a-zA-Z\
    \ ]\" }, StringSplitOptions.None);\n        // The second step is to split each\
    \ word into one or more letters.\n        // This is done by calling the \"Select\"\
    \ method of \"words\", which\n        // applies a lambda function to each element\
    \ of \"words\" and returns\n        // the output in an IEnumerable<string> interface.\
    \ The lambda function\n        // splits the current word into letters using the\
    \ \"ToCharArray\" method\n        // of string. The output of this second step\
    \ is stored in the \n        // \"wordLetters\" variable.\n        var wordLetters\
    \ = words.Select(x => x.ToCharArray());\n        // We then apply a filter on\
    \ the output of the previous step,\n        // and return only the words for which\
    \ the lambda function returns\n        // true. The lambda function checks if\
    \ the number of consonants in\n        // the current word is equal to n. The\
    \ \"IsConsonant\" function is used\n        // to check whether the current letter\
    \ is a consonant or not.\n        // The output of this step is stored in the\
    \ \"wordsWithNConsonants\"\n        // variable.\n        var wordsWithNConsonants\
    \ = wordLetters.Where(x => x.Count(c => IsConsonant(c)) == n);\n        // Finally,\
    \ we concatenate all the letters in the words that passed\n        // the filter\
    \ into a single string, and return a list of the words\n        // which passed\
    \ the filter.\n        return wordsWithNConson", "        List<string> res = new\
    \ List<string>();\n        List<string> words = s.Split(' ').ToList();\n     \
    \   int count = 0;\n        for (int i = 0; i < words.Count; i++) {\n        \
    \    for (int j = 0; j < words[i].Length; j++) {\n                if (!IsVowel(words[i][j]))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                res.Add(words[i]);\n            }\n  \
    \          count = 0;\n        }\n        return res;", "        // your code\
    \ goes here\n        return null;", '        return null;', "        // Implement\
    \ this function.\n        // Explanation: [https://docs.google.com/document/d/1Wzs_KNmoo9Xzs1Z8mNCYGwT0Q2ejTcT-TkfWOoluFhE/edit?usp=sharing]\n\
    \        // Runtime Complexity: O(n)\n        // Space Complexity: O(n)\n    \
    \    HashSet<char> isConsonant = new HashSet<char>() {\n            'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'z'\n        };\n        List<string> result = new List<string>();\n  \
    \      StringBuilder word = new StringBuilder();\n        int consonantCount =\
    \ 0;\n        foreach (char c in s) {\n            if (c == ' ') {\n         \
    \       if (consonantCount == n) {\n                    result.Add(word.ToString());\n\
    \                }\n                word.Clear();\n                consonantCount\
    \ = 0;\n            } else {\n                if (isConsonant.Contains(c)) {\n\
    \                    consonantCount++;\n                }\n                word.Append(c);\n\
    \            }\n        }\n        if (consonantCount == n) {\n            result.Add(word.ToString());\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        char[] vowel = { 'a', 'e', 'i', 'o', 'u' };\n        string[] split =\
    \ s.Split(' ');\n        for (int i = 0; i < split.Length; i++) {\n          \
    \  long count = 0;\n            for (int j = 0; j < split[i].Length; j++) {\n\
    \                if (!vowel.Contains(split[i][j])) {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     result.Add(split[i]);\n            }\n        }\n        return result;",
  "        List<string> words = new List<string>();\n        long count = 0;\n   \
    \     for (int i = 0; i < s.Length; i++) {\n            if (IsConsonant(s[i]))\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            words.Add(s);\n        }\n        return words;", "      \
    \  // Implement your solution here\n        return null;", "        // your code\
    \ goes here\n        // Consonants are all the letters from the English alphabet\
    \ that are not vowels.\n        // A vowel is any of the following: 'a', 'e',\
    \ 'i', 'o', 'u', 'y'\n        var wordList = new List<string>();\n        var\
    \ words = s.Split(new char[] { ' ' });\n        foreach (var word in words) {\n\
    \            var consonantCount = 0;\n            foreach (var letter in word)\
    \ {\n                switch (letter) {\n                    case 'a':\n      \
    \              case 'e':\n                    case 'i':\n                    case\
    \ 'o':\n                    case 'u':\n                    case 'y':\n       \
    \                 break;\n                    default:\n                     \
    \   consonantCount++;\n                        break;\n                }\n   \
    \         }\n            if (consonantCount == n) {\n                wordList.Add(word);\n\
    \            }\n        }\n        return wordList;", "        var result = new\
    \ List<string>();\n        if (s.Length == 0) {\n            return result;\n\
    \        }\n        var words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (var word in words) {\n            if (CountConsonants(word)\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;", "        List<string> words = new List<string>();\n     \
    \   string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        string[] wordsS =\
    \ s.Split(' ');\n        foreach (string w in wordsS) {\n            int c = 0;\n\
    \            foreach (char a in w) {\n                foreach (char b in consonants)\
    \ {\n                    if (a == b) {\n                        c++;\n       \
    \             }\n                }\n            }\n            if (c == n) {\n\
    \                words.Add(w);\n            }\n        }\n        return words;",
  '        return null;', "        var result = new List<string>();\n        var words\
    \ = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n    \
    \    foreach (var word in words) {\n            var consonants = 0;\n        \
    \    foreach (var c in word) {\n                if (IsConsonant(c)) {\n      \
    \              consonants++;\n                }\n            }\n            if\
    \ (consonants == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;", "        // Your code goes here!\n        return\
    \ null;", "        if (n > 3)\n            return new List<string>();\n      \
    \  return null;", "        List<string> result = new List<string>();\n       \
    \ string[] words = s.Split(' ');\n        for (int i = 0; i < words.Length; i++)\
    \ {\n            if (CountConsonants(words[i]) == n)\n                result.Add(words[i]);\n\
    \        }\n        return result;", "        var words = s.Split(' ');\n    \
    \    var result = new List<string>();\n        foreach (var word in words) {\n\
    \            if (word.ToCharArray().Count(c => !isConsonant(c)) == n) {\n    \
    \            result.Add(word);\n            }\n        }\n        return result;",
  "        var list = new List<string>();\n        var words = s.Split(' ');\n   \
    \     var vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u' };\n        foreach\
    \ (var word in words) {\n            var consonants = 0;\n            foreach\
    \ (var c in word) {\n                if (!vowels.Contains(c)) consonants++;\n\
    \            }\n            if (consonants == n) list.Add(word);\n        }\n\
    \        return list;", "        // Write your code here!\n        return null;",
  "        // The list of words to return\n        List<string> ret = new List<string>();\n\
    \        // The number of consonants seen so far in the current word\n       \
    \ long count = 0L;\n        // The current word being processed\n        string\
    \ curr = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            // If\
    \ we have seen a space, then it is a word boundary\n            if (s[i] == '\
    \ ') {\n                // If we have exactly n consonants, then add the current\
    \ word to\n                // the return list\n                if (count == n)\
    \ {\n                    ret.Add(curr);\n                }\n                //\
    \ Reset the current word and the consonant count\n                curr = \"\"\
    ;\n                count = 0L;\n            } else {\n                // If it's\
    \ a consonant, increment the consonant count\n                if (s[i] != 'a'\
    \ && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n           \
    \         count++;\n                }\n                // Add this character to\
    \ the current word\n                curr += s[i];\n            }\n        }\n\
    \        // The last word may not have had a space at the end, so process it here\n\
    \        if (count == n) {\n            ret.Add(curr);\n        }\n        return\
    \ ret;", "        return s.Split(' ').Where(c => c.Count(x => \"aeiouAEIOU\".Contains(x))\
    \ == n).ToList();", '        throw new NotImplementedException();', "        List<string>\
    \ words = new List<string>();\n        var consonants = new string[] { \"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" };\n        foreach (var\
    \ word in s.Split(' ')) {\n            if (word.Count(c => consonants.Contains(c.ToString().ToLower()))\
    \ == n) {\n                words.Add(word);\n            }\n        }\n      \
    \  return words;", "        List<string> answer = new List<string>();\n      \
    \  foreach (string word in s.Split(' ')) {\n            int count = 0;\n     \
    \       foreach (char c in word) {\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    count++;\n        \
    \        }\n            }\n            if (count == n) {\n                answer.Add(word);\n\
    \            }\n        }\n        return answer;", "        var words = s.Split('\
    \ ');\n        List<string> result = new List<string>();\n        foreach (var\
    \ word in words) {\n            if (NumConsonants(word) == n) {\n            \
    \    result.Add(word);\n            }\n        }\n        return result;", '        return
    s.Split().Where(w => w.Count(c => !"aeiou".Contains(c)) == n).ToList();', '        return
    null;', "        var vowel = new HashSet<char>() {'a', 'e', 'i', 'o', 'u'};\n\
    \        var words = new List<string>();\n        var sb = new StringBuilder();\n\
    \        var consonantCount = 0L;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            if (char.IsLetter(s[i])) {\n                if (vowel.Contains(char.ToLower(s[i])))\
    \ {\n                    consonantCount = 0;\n                } else {\n     \
    \               consonantCount++;\n                }\n                sb.Append(s[i]);\n\
    \            } else {\n                if (consonantCount == n) {\n          \
    \          words.Add(sb.ToString());\n                }\n                sb.Clear();\n\
    \                consonantCount = 0;\n            }\n        }\n        if (consonantCount\
    \ == n) {\n            words.Add(sb.ToString());\n        }\n        return words;",
  "        List<string> result = new List<string>();\n        string[] words = s.Split('\
    \ ');\n        foreach (string word in words) {\n            if (CountConsonants(word)\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;", "        // Implement this function\n        return null;",
  '        return new List<string>();', "        List<string> result = new List<string>();\n\
    \        int Consonants = 0;\n        int start = 0;\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            if (s[i] == ' ') {\n                string\
    \ word = s.Substring(start, i - start);\n                for (int x = 0; x < word.Length;\
    \ x++) {\n                    if (word[x] != 'a' && word[x] != 'e' && word[x]\
    \ != 'i' && word[x] != 'o' && word[x] != 'u') {\n                        Consonants++;\n\
    \                    }\n                }\n                if (Consonants == n)\
    \ {\n                    result.Add(word);\n                }\n              \
    \  Consonants = 0;\n                start = i + 1;\n            }\n        }\n\
    \        return result;", "        //----------------------------------------------------------------------------------------------------\n\
    \        // The skeleton of the implementation is given to you\n        // This\
    \ function should satisfy the specification given above.\n        // It should\
    \ be non-destructive, i.e. the input string must not be modified.\n        //----------------------------------------------------------------------------------------------------\n\
    \        var consonants = new HashSet<char>();\n        consonants.Add('b');\n\
    \        consonants.Add('c');\n        consonants.Add('d');\n        consonants.Add('f');\n\
    \        consonants.Add('g');\n        consonants.Add('h');\n        consonants.Add('j');\n\
    \        consonants.Add('k');\n        consonants.Add('l');\n        consonants.Add('m');\n\
    \        consonants.Add('n');\n        consonants.Add('p');\n        consonants.Add('q');\n\
    \        consonants.Add('r');\n        consonants.Add('s');\n        consonants.Add('t');\n\
    \        consonants.Add('v');\n        consonants.Add('w');\n        consonants.Add('x');\n\
    \        consonants.Add('y');\n        consonants.Add('z');\n        var target\
    \ = new List<string>();\n        var words = s.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (var word in words) {\n            var count = 0;\n         \
    \   foreach (var c in word) {\n                if (consonants.Contains(c)) {\n\
    \                    count += 1;\n                }\n            }\n         \
    \   if (count == n) {\n                target.Add(word);\n            }\n    \
    \    }\n        return target;", "        var ret = new List<string>();\n    \
    \    var words = s.Split(' ');\n        for (var i = 0; i < words.Length; i++)\
    \ {\n            var cur = words[i];\n            var curConsonants = 0;\n   \
    \         for (var j = 0; j < cur.Length; j++) {\n                if (!IsVowel(cur[j]))\
    \ {\n                    curConsonants++;\n                }\n            }\n\
    \            if (curConsonants == n) {\n                ret.Add(cur);\n      \
    \      }\n        }\n        return ret;", "        List<string> res = new List<string>();\n\
    \        string[] ss = s.Split(' ');\n        for (int i = 0; i < ss.Length; i++)\
    \ {\n            int l = ss[i].Length;\n            int cc = 0;\n            for\
    \ (int j = 0; j < l; j++) {\n                if (IsConsonant(ss[i][j])) cc++;\n\
    \            }\n            if (cc == n) res.Add(ss[i]);\n        }\n        return\
    \ res;", "        var words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        return words.Where(word => GetNumConsonants(word) == n).ToList();", " \
    \       List<string> list = new List<string>();\n        string[] words = s.Split(new\
    \ char[] { ' ' });\n        int length = words.Length;\n        for (int i = 0;\
    \ i < length; i++) {\n            string word = words[i];\n            int numConsonants\
    \ = GetNumConsonants(word);\n            if (numConsonants == n) {\n         \
    \       list.Add(word);\n            }\n        }\n        return list;", "  \
    \      // YOUR CODE HERE\n        throw new NotImplementedException();", '        return
    new List<string>();', "        var res = new List<string>();\n        var words\
    \ = s.Split(' ');\n        var consonants = new HashSet<char>(\"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    );\n        for (int i = 0; i < words.Length; i++) {\n            var count =\
    \ 0;\n            for (int j = 0; j < words[i].Length; j++) {\n              \
    \  if (consonants.Contains(words[i][j])) {\n                    count++;\n   \
    \             }\n            }\n            if (count == n) {\n              \
    \  res.Add(words[i]);\n            }\n        }\n        return res;", "     \
    \   List<string> result = new List<string>();\n        string[] words = s.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        for (int i\
    \ = 0; i < words.Length; i++) {\n            long count = 0;\n            for\
    \ (int j = 0; j < words[i].Length; j++) {\n                if (!\"aeiou\".Contains(words[i][j]))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.Add(words[i]);\n            }\n\
    \        }\n        return result;", "        var words = s.Split(' ');\n    \
    \    var result = new List<string>();\n        foreach (var word in words) {\n\
    \            if (WordHasNConsonants(word, n)) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        // IMPLEMENT ME\n\
    \        return new List<string>();", "        // TODO: Implement your solution\
    \ here\n        return null;", "        // Implement your solution here\n    \
    \    return null;", "        var result = new List<string>();\n        var words\
    \ = s.Split(' ');\n        var consonants = new List<char>() { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'z' };\n        foreach (var word in words) {\n            var count = 0;\n\
    \            foreach (var letter in word) {\n                if (consonants.Contains(letter))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.Add(word);\n            }\n   \
    \     }\n        return result;", '        return new List<string>();', "    \
    \    List<string> L = new List<string>();\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            int j = i;\n            while (i < s.Length && s[i] != '\
    \ ') {\n                i++;\n            }\n            string ss = s.Substring(j,\
    \ i - j);\n            if (count_consonants(ss) == n) {\n                L.Add(ss);\n\
    \            }\n        }\n        return L;", "        List<string> result =\
    \ new List<string>();\n        string[] words = s.Split(' ');\n        for (int\
    \ i = 0; i < words.Length; i++) {\n            int count = 0;\n            for\
    \ (int j = 0; j < words[i].Length; j++) {\n                if (!IsVowel(words[i][j]))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.Add(words[i]);\n            }\n\
    \        }\n        return result;", "        if (s.Length == 0) {\n         \
    \   return new List<string>();\n        }\n        List<string> words = new List<string>();\n\
    \        foreach (string w in s.Split(' ')) {\n            if (w.Length >= n)\
    \ {\n                bool hasVowel = false;\n                for (int i = 0; i\
    \ < w.Length; i++) {\n                    string c = w.Substring(i, 1);\n    \
    \                if (c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c\
    \ == \"u\") {\n                        hasVowel = true;\n                    \
    \    break;\n                    }\n                }\n                if (!hasVowel)\
    \ {\n                    continue;\n                }\n                int con\
    \ = 0;\n                for (int i = 0; i < w.Length; i++) {\n               \
    \     string c = w.Substring(i, 1);\n                    if (c != \"a\" && c !=\
    \ \"e\" && c != \"i\" && c != \"o\" && c != \"u\") {\n                       \
    \ con++;\n                    }\n                }\n                if (con ==\
    \ n) {\n                    words.Add(w);\n                }\n            }\n\
    \        }\n        return words;", "        List<string> words = new List<string>();\n\
    \        int wordStart = 0;\n        int wordEnd = 0;\n        int wordIndex =\
    \ 0;\n        long wordConsonants = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (s[i] == ' ') {\n                wordEnd = i;\n     \
    \           if (wordConsonants == n) {\n                    words.Add(s.Substring(wordStart,\
    \ wordEnd - wordStart));\n                }\n                wordStart = i + 1;\n\
    \                wordConsonants = 0;\n            } else if (IsConsonant(s[i]))\
    \ {\n                wordConsonants++;\n            }\n        }\n        if (wordConsonants\
    \ == n) {\n            words.Add(s.Substring(wordStart, s.Length - wordStart));\n\
    \        }\n        return words;", "        // TODO\n        return new List<string>();",
  "        if (s.Length == 0) return new List<string>();\n        List<string> res\
    \ = new List<string>();\n        string[] arr = s.Split(' ');\n        for (int\
    \ i = 0; i < arr.Length; i++) {\n            if (getConst(arr[i]) == n) res.Add(arr[i]);\n\
    \        }\n        return res;", "        var words = s.Split(' ');\n       \
    \ List<string> selectedWords = new List<string>();\n        for (int i = 0; i\
    \ < words.Length; i++) {\n            int consonants = 0;\n            string\
    \ word = words[i];\n            for (int j = 0; j < word.Length; j++) {\n    \
    \            if (!word[j].Equals('a') && !word[j].Equals('e') && !word[j].Equals('i')\
    \ && !word[j].Equals('o') && !word[j].Equals('u')) {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          selectedWords.Add(word);\n            }\n        }\n        return\
    \ selectedWords;", "        // Implement\n        return new List<string>();",
  "        // IMPLEMENT ME!\n        return new List<string>();", "        // TODO:\
    \ implement this function\n        return null;", "        return s.Split(' ').Where(word\
    \ => word.ToCharArray().Count(c => !IsVowel(c)) == n).ToList();", "        //\
    \ Implement this function\n        return null;", "        long numberOfConsonants(string\
    \ str) {\n            long count = 0;\n            for (int i = 0; i < str.Length;\
    \ i++) {\n                switch (str[i]) {\n                    case 'B':\n \
    \                   case 'C':\n                    case 'D':\n               \
    \     case 'F':\n                    case 'G':\n                    case 'H':\n\
    \                    case 'J':\n                    case 'K':\n              \
    \      case 'L':\n                    case 'M':\n                    case 'N':\n\
    \                    case 'P':\n                    case 'Q':\n              \
    \      case 'R':\n                    case 'S':\n                    case 'T':\n\
    \                    case 'V':\n                    case 'W':\n              \
    \      case 'X':\n                    case 'Y':\n                    case 'Z':\n\
    \                    case 'b':\n                    case 'c':\n              \
    \      case 'd':\n                    case 'f':\n                    case 'g':\n\
    \                    case 'h':\n                    case 'j':\n              \
    \      case 'k':\n                    case 'l':\n                    case 'm':\n\
    \                    case 'n':\n                    case 'p':\n              \
    \      case 'q':\n                    case 'r':\n                    case 's':\n\
    \                    case 't':\n                    case 'v':\n              \
    \      case 'w':\n                    case 'x':\n                    case 'y':\n\
    \                    case 'z':\n                        count++;\n           \
    \             break;\n                }\n            }\n            return count;\n\
    \        }\n        List<string> words = new List<string>();\n        if (s.Length\
    \ == 0) {\n            return words;\n        }\n        string word = \"\";\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == ' ') {\n\
    \                if (numberOfConsonants(word) == n) {\n                    words.Add(word);\n\
    \                }\n                word = \"\";\n            } else {\n     \
    \           word += s[i];\n            }\n        }\n        if (numberOfConsonants(word)\
    \ == n) {\n            words.Add(word);\n        }\n        return words;", " \
    \       if (string.IsNullOrEmpty(s)) return new List<string>();\n        List<string>\
    \ result = new List<string>();\n        int count = 0;\n        bool inWord =\
    \ false;\n        string currentWord = \"\";\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (s[i] == ' ') {\n                if (inWord) {\n    \
    \                if (count == n) {\n                        result.Add(currentWord);\n\
    \                    }\n                    inWord = false;\n                \
    \    currentWord = \"\";\n                    count = 0;\n                }\n\
    \            } else {\n                inWord = true;\n                currentWord\
    \ += s[i];\n                if (\"aeiou\".Contains(s[i])) count++;\n         \
    \   }\n        }\n        if (inWord) {\n            if (count == n) {\n     \
    \           result.Add(currentWord);\n            }\n        }\n        return\
    \ result;", '        return new List<string>();', "        return s.Split(' ').Where(x\
    \ => CountConsonants(x) == n).ToList();", "        var ret = new List<string>();\n\
    \        foreach (var w in s.Split(' ')) {\n            if (w.Where(c => !isVowel(c)).Count()\
    \ == n) {\n                ret.Add(w);\n            }\n        }\n        return\
    \ ret;", "        // Your code goes here!\n        return new List<string>();",
  "        // Replace this implementation with the correct implementation.\n     \
    \   return new List<string>();", "        var words = s.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var consonants = new[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z' };\n        var results\
    \ = new List<string>();\n        foreach (var word in words) {\n            var\
    \ count = 0;\n            foreach (var letter in word) {\n                if (consonants.Contains(letter))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                results.Add(word);\n            }\n  \
    \      }\n        return results;", "        // Declare and populate an array\
    \ of strings with the words in s\n        string[] words = s.Split();\n      \
    \  // Populate an empty list of strings\n        List<string> wordsWithNConsonants\
    \ = new List<string>();\n        // Iterate over the array of strings\n      \
    \  foreach (string word in words) {\n            // Declare and initialize a long\
    \ to 0\n            long numConsonants = 0;\n            // Iterate over the current\
    \ word, which is a string\n            foreach (char c in word) {\n          \
    \      // If the current character is a consonant then increment numConsonants\n\
    \                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ {\n                    numConsonants++;\n                }\n            }\n\
    \            // If numConsonants == n then add the current word to the list of\
    \ strings\n            if (numConsonants == n) {\n                wordsWithNConsonants.Add(word);\n\
    \            }\n        }\n        // Return the list of strings\n        return\
    \ wordsWithNConsonants;", "        // Implementation code here\n        var result\
    \ = new List<string>();\n        var words = s.Split(' ');\n        foreach (var\
    \ word in words) {\n            if (CountConsonants(word) == n) {\n          \
    \      result.Add(word);\n            }\n        }\n        return result;", '        return
    null;', '        return new List<string>();', "        if (n == 0) {\n       \
    \     return new List<string>();\n        }\n        string[] words = s.Split('\
    \ ');\n        List<string> output = new List<string>();\n        for (int i =\
    \ 0; i < words.Length; i++) {\n            string word = words[i];\n         \
    \   int count = 0;\n            for (int j = 0; j < word.Length; j++) {\n    \
    \            if (isConsonant(word[j])) {\n                    count++;\n     \
    \           }\n            }\n            if (count == n) {\n                output.Add(word);\n\
    \            }\n        }\n        return output;", '        return new List<string>();',
  "        List<string> result = new List<string>();\n        string[] words = s.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach (string\
    \ word in words) {\n            if (word.Count(p => !(\"aeiou\".Contains(p)))\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;", "        var words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var consonants = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z' };\n        var selectedWords\
    \ = new List<string>();\n        foreach (var word in words) {\n            var\
    \ consonantCount = 0;\n            for (var i = 0; i < word.Length; i++) {\n \
    \               if (consonants.Contains(word[i])) {\n                    consonantCount++;\n\
    \                }\n            }\n            if (consonantCount == n) {\n  \
    \              selectedWords.Add(word);\n            }\n        }\n        return\
    \ selectedWords;", "        // Replace the body of this function with your own\
    \ implementation.\n        return new List<string>();", "        var result =\
    \ new List<string>();\n        var words = s.Split(' ');\n        foreach (var\
    \ word in words) {\n            var consonants = new HashSet<char>(\"bcdfghjklmnpqrstvwxyz\"\
    );\n            if (word.ToCharArray().Count(x => consonants.Contains(x)) == n)\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        List<string> result = new List<string>();\n        var words\
    \ = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n    \
    \    foreach (var word in words) {\n            var consonants = 0;\n        \
    \    foreach (var c in word) {\n                if (!\"AEIOUaeiou\".Contains(c))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                result.Add(word);\n        \
    \    }\n        }\n        return result;", "        List<string> out_ = new List<string>();\n\
    \        if (s.Length == 0) {\n            return out_;\n        }\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            int idx = i;\n            string\
    \ word = \"\";\n            while (idx < s.Length && s[idx] != ' ') {\n      \
    \          word += s[idx];\n                idx++;\n            }\n          \
    \  i = idx;\n            bool flag = true;\n            int sum = 0;\n       \
    \     foreach (char c in word) {\n                if (\"aeiou\".Contains(c.ToString()))\
    \ {\n                    flag = false;\n                    break;\n         \
    \       }\n                sum++;\n            }\n            if (flag && sum\
    \ == n) {\n                out_.Add(word);\n            }\n        }\n       \
    \ return out_;", "        List<string> words = new List<string>();\n        string[]\
    \ ws = s.Split(' ');\n        int consonants = 0;\n        for (int i = 0; i <\
    \ ws.Length; i++) {\n            consonants = 0;\n            for (int j = 0;\
    \ j < ws[i].Length; j++) {\n                if (\"aeiou\".IndexOf(ws[i][j]) ==\
    \ -1) {\n                    consonants++;\n                }\n            }\n\
    \            if (consonants == n) {\n                words.Add(ws[i]);\n     \
    \       }\n        }\n        return words;", '        return null;', "      \
    \  var result = new List<string>();\n        var words = s.Split(' ');\n     \
    \   foreach (var word in words) {\n            if (word.ToCharArray().Count(c\
    \ => !isVowel(c)) == n) {\n                result.Add(word);\n            }\n\
    \        }\n        return result;", "        var result = new List<string>();\n\
    \        var words = s.Split(' ');\n        foreach (var word in words) {\n  \
    \          if (Consonants(word) == n) {\n                result.Add(word);\n \
    \           }\n        }\n        return result;", "        // Implement this\
    \ placeholder.\n        return null;", "        List<string> res = new List<string>();\n\
    \        if (s.Length == 0) {\n            return res;\n        }\n        string[]\
    \ words = s.Split(' ');\n        int cnt = 0;\n        foreach (string word in\
    \ words) {\n            foreach (char c in word) {\n                if (!IsVowel(c))\
    \ {\n                    cnt++;\n                }\n            }\n          \
    \  if (cnt == n) {\n                res.Add(word);\n            }\n          \
    \  cnt = 0;\n        }\n        return res;", "        int len = s.Length;\n \
    \       int index = 0;\n        int cons = 0;\n        bool inWord = false;\n\
    \        var words = new List<string>();\n        while (index < len) {\n    \
    \        if (Char.IsLetter(s[index])) {\n                if (!inWord) {\n    \
    \                inWord = true;\n                    cons = 0;\n             \
    \   }\n                if (!Char.IsVowel(s[index])) {\n                    cons++;\n\
    \                }\n            } else {\n                if (inWord) {\n    \
    \                inWord = false;\n                    if (cons == n) {\n     \
    \                   words.Add(s.Substring(index - cons, cons));\n            \
    \        }\n                }\n            }\n            index++;\n        }\n\
    \        if (inWord && cons == n) {\n            words.Add(s.Substring(index -\
    \ cons - 1, cons));\n        }\n        return words;", "        // Insert your\
    \ code here.\n        return null;", "        var result = new List<string>();\n\
    \        var words = s.Split(' ');\n        foreach (var word in words) {\n  \
    \          var consonants = 0;\n            for (var i = 0; i < word.Length; i++)\
    \ {\n                if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' &&\
    \ word[i] != 'o' && word[i] != 'u') {\n                    consonants++;\n   \
    \             }\n            }\n            if (consonants == n) {\n         \
    \       result.Add(word);\n            }\n        }\n        return result;",
  "        var result = new List<string>();\n        var words = s.Split(new char[]\
    \ { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach (var word\
    \ in words) {\n            if (word.Length < n) {\n                continue;\n\
    \            }\n            int consonants = 0;\n            foreach (var c in\
    \ word) {\n                if (!IsVowel(c)) {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;",
  "        if (string.IsNullOrEmpty(s)) {\n            return new List<string>();\n\
    \        }\n\n        // List of consonants\n        char[] consonants = { 'B',\
    \ 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V',\
    \ 'W', 'X', 'Z' };\n\n        List<string> words = new List<string>();\n     \
    \   string[] wordsInString = s.Split(' ');\n\n        foreach (string word in\
    \ wordsInString) {\n            long count = 0;\n            foreach (char letter\
    \ in word) {\n                if (consonants.Contains(letter)) {\n           \
    \         count++;\n                }\n            }\n\n            if (count\
    \ == n) {\n                words.Add(word);\n            }\n        }\n\n    \
    \    return words;", "        var result = new List<string>();\n        // Your\
    \ code goes here.\n        var arr = s.Split(' ');\n        foreach (var word\
    \ in arr) {\n            if (ConsonantsCount(word) == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", '        throw new NotImplementedException();',
  "        List<string> result = new List<string>();\n        // TODO: implement your\
    \ solution here\n        int cnt = 0;\n        foreach (char c in s) {\n     \
    \       if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \            cnt++;\n            }\n        }\n        if (cnt == n) {\n     \
    \       result.Add(s);\n        }\n        return result;", "        List<string>\
    \ ans = new List<string>();\n        string word = \"\";\n        for (int i =\
    \ 0; i < s.Length; i++) {\n            if (s[i] == ' ') {\n                if\
    \ (CountConsonants(word) == n) {\n                    ans.Add(word);\n       \
    \         }\n                word = \"\";\n            } else {\n            \
    \    word += s[i];\n            }\n        }\n        if (CountConsonants(word)\
    \ == n) {\n            ans.Add(word);\n        }\n        return ans;", "    \
    \    // Implementation goes here\n        throw new NotImplementedException();",
  "        //TODO: implement code here\n        throw new NotImplementedException();",
  "        string text = s;\n        List<string> words = new List<string>();\n  \
    \      bool isWord = false;\n        string tmp = \"\";\n        int count = 0;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ' || text[i] == '\\t' || text[i] == '\\n') {\n                if (isWord) {\n\
    \                    if (count == n)\n                        words.Add(tmp);\n\
    \                    isWord = false;\n                    tmp = \"\";\n      \
    \              count = 0;\n                }\n            } else {\n         \
    \       isWord = true;\n                if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u')\n                    count++;\n\
    \                tmp += text[i];\n            }\n        }\n        if (isWord)\
    \ {\n            if (count == n)\n                words.Add(tmp);\n        }\n\
    \        return words;", "        var words = s.Split(' ');\n        var vowels\
    \ = new HashSet<char>(\"aeiouAEIOU\");\n        var words_with_n_consonants =\
    \ new List<string>();\n        foreach (var word in words) {\n            var\
    \ consonants = 0;\n            foreach (var c in word) {\n                if (!vowels.Contains(c))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                words_with_n_consonants.Add(word);\n\
    \            }\n        }\n        return words_with_n_consonants;", "       \
    \ var lst = new List<string>();\n        int l = 0;\n        int r = 0;\n    \
    \    while (r < s.Length) {\n            if (s[r] == ' ') {\n                lst.Add(s.Substring(l,\
    \ r - l));\n                l = r + 1;\n            }\n            r++;\n    \
    \    }\n        lst.Add(s.Substring(l, r - l));\n        // filter by n\n    \
    \    lst = lst.Where(x => CountConsonants(x) == n).ToList();\n        return lst;",
  "        if (s.Length == 0) {\n            return new List<string>();\n        }\n\
    \        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsConsonant(word, n))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        List<string> res = new List<string>();\n        String[]\
    \ ss = s.Split(' ');\n        for (int i = 0; i < ss.Length; i++) {\n        \
    \    long count = 0;\n            for (int j = 0; j < ss[i].Length; j++) {\n \
    \               if (ss[i][j] != 'a' && ss[i][j] != 'e' && ss[i][j] != 'i' && ss[i][j]\
    \ != 'o' && ss[i][j] != 'u') {\n                    count++;\n               \
    \ }\n            }\n            if (count == n) {\n                res.Add(ss[i]);\n\
    \            }\n        }\n        return res;", "        // Implement your function\
    \ here\n        return null;", '        return new List<string>();', "       \
    \ // Your code here\n        return new List<string>();", "        var result\
    \ = new List<string>();\n        var input = s.Split(' ');\n        for (var i\
    \ = 0; i < input.Length; i++) {\n            var word = input[i];\n          \
    \  var wordlen = word.Length;\n            var consonants = 0;\n            for\
    \ (var j = 0; j < wordlen; j++) {\n                if (!((word[j] == 'a') || (word[j]\
    \ == 'e') || (word[j] == 'i') || (word[j] == 'o') || (word[j] == 'u'))) {\n  \
    \                  consonants = consonants + 1;\n                }\n         \
    \   }\n            if (consonants == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        // implemented in\
    \ python because it is easier to use regex with\n        return new List<string>();",
  "        string [] words = s.Split(new char[] {' '});\n        List<string> result\
    \ = new List<string>();\n        foreach (string word in words) {\n          \
    \  if (word.Length == 0) {\n                continue;\n            }\n       \
    \     if (word.Length > 3) {\n                int numConsonants = 0;\n       \
    \         foreach (char c in word) {\n                    if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        numConsonants++;\n\
    \                    }\n                }\n                if (numConsonants ==\
    \ n) {\n                    result.Add(word);\n                }\n           \
    \ }\n        }\n        return result;", "        List<string> words = new List<string>();\n\
    \        string tempWord = \"\";\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (s[i] == ' ') {\n                if (CountConsonants(tempWord)\
    \ == n) {\n                    words.Add(tempWord);\n                }\n     \
    \           tempWord = \"\";\n            } else {\n                tempWord +=\
    \ s[i];\n            }\n        }\n        if (CountConsonants(tempWord) == n)\
    \ {\n            words.Add(tempWord);\n        }\n        return words;", "  \
    \      List<string> ret = new List<string>();\n        var words = s.Split(' ');\n\
    \        foreach (var word in words) {\n            int nCns = 0;\n          \
    \  foreach (var letter in word) {\n                if (!((letter == 'a') || (letter\
    \ == 'e') || (letter == 'i') || (letter == 'o') || (letter == 'u'))) {\n     \
    \               nCns++;\n                }\n            }\n            if (nCns\
    \ == n) {\n                ret.Add(word);\n            }\n        }\n        return\
    \ ret;", "        List<string> result = new List<string>();\n        if (s.Length\
    \ == 0) {\n            return result;\n        }\n        string word = \"\";\n\
    \        long consonants = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (s[i] == ' ') {\n                if (consonants == n) {\n    \
    \                result.Add(word);\n                }\n                word =\
    \ \"\";\n                consonants = 0;\n            } else {\n             \
    \   word += s[i];\n                if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i'\
    \ && s[i] != 'o' && s[i] != 'u') {\n                    consonants++;\n      \
    \          }\n            }\n        }\n        if (consonants == n) {\n     \
    \       result.Add(word);\n        }\n        return result;", "        var result\
    \ = new List<string>();\n        var words = s.Split(' ');\n        foreach (var\
    \ word in words) {\n            var cCount = 0;\n            for (int i = 0; i\
    \ < word.Length; i++) {\n                var c = word[i];\n                if\
    \ (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n             \
    \       cCount++;\n                }\n            }\n            if (cCount ==\
    \ n) {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        var result = new List<string>();\n        var words = s.Split('\
    \ ');\n        foreach (var word in words) {\n            var vowelCount = word.ToCharArray().Count(IsVowel);\n\
    \            if (word.Length - vowelCount == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        // throw new NotImplementedException();\n\
    \        // string[] list= s.Split(' ');\n        // int i = 0;\n        // foreach(string\
    \ word in list){\n        //     if (Consonants(word)==n){\n        //       \
    \  //return word;\n        //         i++;\n        //     }\n        // }\n \
    \       // string[] rtn= new string[i];\n        // int index=0;\n        // foreach(string\
    \ word in list){\n        //     if (Consonants(word)==n){\n        //       \
    \  rtn[index]=word;\n        //         index++;\n        //     }\n        //\
    \ }\n        // return rtn;\n        List<string> rtn = new List<string>();\n\
    \        string[] list= s.Split(' ');\n        foreach(string word in list){\n\
    \            if (Consonants(word)==n){\n                rtn.Add(word);\n     \
    \       }\n        }\n        return rtn;", "        var result = new List<string>();\n\
    \        var words = s.Split(' ');\n        foreach (var word in words) {\n  \
    \          if (CountConsonants(word) == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        // TODO: implement\
    \ the function\n        return new List<string>();", "        //int number_of_consonants\
    \ = 0;\n        List<string> list = new List<string>();\n        foreach (string\
    \ word in s.Split(' ')) {\n            int number_of_consonants = 0;\n       \
    \     foreach (char character in word) {\n                switch (character) {\n\
    \                    case 'b':\n                    case 'c':\n              \
    \      case 'd':\n                    case 'f':\n                    case 'g':\n\
    \                    case 'h':\n                    case 'j':\n              \
    \      case 'k':\n                    case 'l':\n                    case 'm':\n\
    \                    case 'n':\n                    case 'p':\n              \
    \      case 'q':\n                    case 'r':\n                    case 's':\n\
    \                    case 't':\n                    case 'v':\n              \
    \      case 'w':\n                    case 'x':\n                    case 'y':\n\
    \                    case 'z':\n                        number_of_consonants++;\n\
    \                        break;\n                }\n            }\n          \
    \  if (number_of_consonants == n) {\n                list.Add(word);\n       \
    \     }\n        }\n        return list;", "        if (s.Length == 0) {\n   \
    \         return new List<string>();\n        }\n        var arr = s.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        List<string>\
    \ res = new List<string>();\n        for (int i = 0; i < arr.Length; i++) {\n\
    \            if (GetNumOfConsonants(arr[i]) == n) {\n                res.Add(arr[i]);\n\
    \            }\n        }\n        return res;", "        string[] split = s.Split('\
    \ ');\n        List<string> result = new List<string>();\n        foreach (string\
    \ word in split) {\n            if (WordContainsNConsonants(word, n)) {\n    \
    \            result.Add(word);\n            }\n        }\n        return result;",
  "        List<string> words = new List<string>();\n        string[] splitted = s.Split('\
    \ ');\n        for (int i = 0; i < splitted.Length; i++) {\n            if (VowelCount(splitted[i])\
    \ == n) {\n                words.Add(splitted[i]);\n            }\n        }\n\
    \        return words;", "        return s.Split(' ').Where(x => x.Count(c =>\
    \ \"aeiou\".Contains(c)) == n).ToList();", "        var result = new List<string>();\n\
    \        var words = s.Split(' ');\n        foreach (var word in words) {\n  \
    \          var count = 0;\n            foreach (var ch in word) {\n          \
    \      if (!\"aeiou\".Contains(ch)) {\n                    count++;\n        \
    \        }\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", '        throw new NotImplementedException();',
  "        List<string> words = new List<string>();\n        int wordStart = 0;\n\
    \        int wordEnd = -1;\n        int consonants = 0;\n        foreach (char\
    \ c in s) {\n            if (c == ' ') {\n                consonants = 0;\n  \
    \              wordStart = wordEnd + 1;\n            } else if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                consonants =\
    \ 0;\n            } else {\n                consonants++;\n            }\n   \
    \         wordEnd++;\n            if (consonants == n) {\n                words.Add(s.Substring(wordStart,\
    \ wordEnd - wordStart + 1));\n            }\n        }\n        return words;",
  "        // Implement this function.\n        // Do not write a main method.\n \
    \       List<string> list = new List<string>();\n        foreach (string word\
    \ in s.Split(' ')) {\n            int count = 0;\n            foreach (char c\
    \ in word) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                    count++;\n                }\n          \
    \  }\n            if (word.Length - count == n) {\n                list.Add(word);\n\
    \            }\n        }\n        return list;", "        // TODO: implement\n\
    \        List<string> res = new List<string>();\n        string[] words = s.Split('\
    \ ');\n        foreach (string word in words) {\n            if (CountConsonants(word)\
    \ == n) {\n                res.Add(word);\n            }\n        }\n        return\
    \ res;", "        var words = s.Split(' ');\n        return words.Where(word =>\
    \ CountConsonants(word) == n).ToList();", "        var words = s.Split(' ');\n\
    \        var result = new List<string>();\n        foreach (var word in words)\
    \ {\n            var count = ConsonantCount(word);\n            if (count == n)\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        // Implement this function.\n        return null;", "   \
    \     // Your code goes here.\n        return new List<string>();", "        var\
    \ list = new List<string>();\n        var res = s.Split(' ');\n        for (int\
    \ i = 0; i < res.Length; i++) {\n            if (Is(res[i], n)) {\n          \
    \      list.Add(res[i]);\n            }\n        }\n        return list;", " \
    \       var x = s.Split(' ');\n        var y = x.Where(i => CountConsonants(i)\
    \ == n);\n        return y.ToList();", "        // if (s.Length <= 0) {\n    \
    \    //     return new List<string>();\n        // }\n\n        // // List of\
    \ consonants\n        // List<char> consonants = new List<char> {\n        //\
    \     'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'\n        // };\n\n        // // List of selected words\n\
    \        // List<string> selectedWords = new List<string>();\n\n        // //\
    \ Split s into words\n        // List<string> words = s.Split(' ').ToList();\n\
    \n        // // Iterate through words\n        // foreach (string word in words)\
    \ {\n        //     // Count consonants in word\n        //     long consonantCount\
    \ = 0;\n        //     foreach (char c in word) {\n        //         if (consonants.Contains(char.ToLower(c)))\
    \ {\n        //             consonantCount++;\n        //         }\n        //\
    \     }\n\n        //     // Add word to selectedWords if consonantCount is equal\
    \ to n\n        //     if (consonantCount == n) {\n        //         selectedWords.Add(word);\n\
    \        //     }\n        // }\n\n        // return selectedWords;\n\n      \
    \  if (s.Length <= 0) {\n            return new List<string>();\n        }\n\n\
    \        List<string> words = s.Split(' ').ToList();\n        List<string> selectedWords\
    \ = new List<string>();\n\n        foreach (string word in words) {\n        \
    \    long consonantCount = 0;\n            foreach (char c in word) {\n      \
    \          if (char.IsLetter(c) && !char.IsLetter(c, 2)) {\n                 \
    \   consonantCount++;\n                }\n            }\n\n            if (consonantCount\
    \ == n) {\n                selectedWords.Add(word);\n            }\n        }\n\
    \n        return selectedWords;", "        List<string> words = new List<string>();\n\
    \        foreach (string w in s.Split(' ')) {\n            if (0 == w.ToCharArray().Count(x\
    \ => !isConsonant(x))) {\n                words.Add(w);\n            }\n     \
    \   }\n        return words;", "        List<string> result = new List<string>();\n\
    \        string[] split = s.Split(' ');\n        foreach (string word in split)\
    \ {\n            if (CountConsonants(word) == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        // Your implementation\
    \ goes here\n        // return null;\n        if (s == \"\") {\n            return\
    \ new List<string>();\n        }\n        string[] words = s.Split(' ');\n   \
    \     List<string> res = new List<string>();\n        for (int i = 0; i < words.Length;\
    \ i++) {\n            if (WordsConsonants(words[i]) == n) {\n                res.Add(words[i]);\n\
    \            }\n        }\n        return res;", "        var words = s.Split();\n\
    \        var result = new List<string>();\n        foreach (var word in words)\
    \ {\n            var consonants = word.Where(letter => letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u');\n            if\
    \ (consonants.Count() == n)\n                result.Add(word);\n        }\n  \
    \      return result;", "        List<string> r = new List<string>();\n      \
    \  foreach (string word in s.Split(' ')) {\n            if (WordContains(word,\
    \ n)) {\n                r.Add(word);\n            }\n        }\n        return\
    \ r;", "        // TODO: implement this function\n        int sum = 0;\n     \
    \   List<string> output = new List<string>();\n        string[] words = s.Split('\
    \ ');\n        foreach (string word in words) {\n            sum = 0;\n      \
    \      foreach (char c in word) {\n                if (isConsonant(c)) {\n   \
    \                 sum += 1;\n                }\n            }\n            if\
    \ (sum == n) {\n                output.Add(word);\n            }\n        }\n\
    \        return output;", "        List<string> words = new List<string>();\n\
    \        int wordStart = 0;\n        int wordEnd = 0;\n        long consonants\
    \ = 0;\n        long i = 0;\n        while (i < s.Length) {\n            if (s[(int)i]\
    \ == ' ') {\n                if (consonants == n) {\n                    words.Add(s.Substring(wordStart,\
    \ wordEnd - wordStart));\n                }\n                consonants = 0;\n\
    \                wordStart = (int)(i + 1);\n                wordEnd = (int)(i\
    \ + 1);\n            } else {\n                if (s[(int)i] != 'a' && s[(int)i]\
    \ != 'e' && s[(int)i] != 'i' && s[(int)i] != 'o' && s[(int)i] != 'u') {\n    \
    \                consonants = consonants + 1;\n                }\n           \
    \     wordEnd = (int)(i + 1);\n            }\n            i = i + 1;\n       \
    \ }\n        if (consonants == n) {\n            words.Add(s.Substring(wordStart,\
    \ wordEnd - wordStart));\n        }\n        return words;", '        throw new
    NotImplementedException();', "        var result = new List<string>();\n     \
    \   if (s.Length == 0) {\n            return result;\n        }\n        for (var\
    \ i = 0; i < s.Length; i++) {\n            var wordStart = i;\n            var\
    \ wordEnd = wordStart;\n            var consonants = 0L;\n            for (; wordEnd\
    \ < s.Length; wordEnd++) {\n                if (IsConsonant(s[wordEnd])) {\n \
    \                   consonants++;\n                }\n                if (s[wordEnd]\
    \ == ' ') {\n                    break;\n                }\n            }\n  \
    \          if (consonants == n) {\n                result.Add(s.Substring(wordStart,\
    \ wordEnd - wordStart));\n            }\n            i = wordEnd;\n        }\n\
    \        return result;", "        // Your code here!\n        List<string> words\
    \ = new List<string>();\n        words = s.Split(' ').ToList();\n        var result\
    \ = new List<string>();\n        for (int i = 0; i < words.Count; i++)\n     \
    \   {\n            int count = 0;\n            for (int j = 0; j < words[i].Length;\
    \ j++)\n            {\n                if ((words[i][j] != 'a') && (words[i][j]\
    \ != 'e') && (words[i][j] != 'i') && (words[i][j] != 'o') && (words[i][j] != 'u'))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            if (count == n)\n            {\n                result.Add(words[i]);\n\
    \            }\n        }\n        return result;", "        string[] words =\
    \ s.Split(' ');\n        List<string> result = new List<string>();\n        foreach\
    \ (string word in words) {\n            if (WordContainsNConsonants(word, n))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        var cons = new HashSet<char>() { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z' };\n\
    \        var words = s.Split(' ');\n        var list = new List<string>();\n \
    \       foreach (var word in words) {\n            var consNum = 0;\n        \
    \    foreach (var ch in word) {\n                if (cons.Contains(ch)) {\n  \
    \                  consNum++;\n                }\n            }\n            if\
    \ (consNum == n) {\n                list.Add(word);\n            }\n        }\n\
    \        return list;", "        List<string> words = new List<string>();\n  \
    \      string word = \"\";\n        int num_consonants = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (s[i] == ' ') {\n              \
    \  if (num_consonants == n) {\n                    words.Add(word);\n        \
    \        }\n                word = \"\";\n                num_consonants = 0;\n\
    \            } else {\n                word += s[i];\n                char c =\
    \ char.ToLower(s[i]);\n                if (c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') {\n                    num_consonants++;\n           \
    \     }\n            }\n        }\n        if (num_consonants == n) {\n      \
    \      words.Add(word);\n        }\n        return words;", "        var words\
    \ = s.Split(' ');\n        var result = new List<string>();\n        foreach (var\
    \ word in words) {\n            if (word.Count(c => \"aeiou\".Contains(c)) ==\
    \ n) {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        // Your code goes here!\n        return null;", '        return
    new List<string>();', '        throw new NotImplementedException();', "      \
    \  // Implement this function\n        return null;", "        var result = new\
    \ List<string>();\n        var p = s.Split(' ');\n        foreach (var t in p)\
    \ {\n            var l = t.Length;\n            var v = \"aeiou\";\n         \
    \   var c = t.ToCharArray();\n            var q = 0;\n            for (int i =\
    \ 0; i < l; i++) {\n                if (v.IndexOf(c[i]) == -1) {\n           \
    \         q++;\n                }\n            }\n            if (q == n) {\n\
    \                result.Add(t);\n            }\n        }\n        return result;",
  "        List<string> words = new List<string>();\n        foreach (string word\
    \ in s.Split(' ')) {\n            if (CountConsonants(word) == n)\n          \
    \      words.Add(word);\n        }\n        return words;", "        List<string>\
    \ result = new List<string>();\n        int start = 0;\n        int end = 0;\n\
    \        while (end < s.Length) {\n            if (s[end] == ' ') {\n        \
    \        if (end - start == n) {\n                    result.Add(s.Substring(start,\
    \ end));\n                }\n                start = end + 1;\n            }\n\
    \            end++;\n        }\n        if (end - start == n) {\n            result.Add(s.Substring(start,\
    \ end));\n        }\n        return result;", "        // Implement your code\
    \ here.\n        List<string> ret = new List<string>();\n        return ret;"]
stop_tokens:
- "\n    }\n"
