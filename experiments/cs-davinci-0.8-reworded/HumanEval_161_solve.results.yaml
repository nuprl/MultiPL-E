language: cs
name: HumanEval_161_solve
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // your
    code here\n        bool no_letters = true;\n        for (int i = 0; i < s.Length;
    i++) {\n            if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <=
    'Z')) {\n                no_letters = false;\n                break;\n            }\n
    \       }\n        if (no_letters) {\n            return new string(s.Reverse().ToArray());\n
    \       }\n        string res = \"\";\n        for (int i = 0; i < s.Length; i++)
    {\n            if (s[i] >= 'a' && s[i] <= 'z') {\n                res += s[i].ToString().ToUpper();\n
    \           } else if (s[i] >= 'A' && s[i] <= 'Z') {\n                res += s[i].ToString().ToLower();\n
    \           } else {\n                res += s[i];\n            }\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var res
    = new StringBuilder();\n        var isChanged = false;\n        for (int i = 0;
    i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                res.Append(char.IsUpper(s[i])
    ? char.ToLower(s[i]) : char.ToUpper(s[i]));\n                isChanged = true;\n
    \           } else {\n                res.Append(s[i]);\n            }\n        }\n
    \       return isChanged ? res.ToString() : new string(res.ToString().Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here\n        StringBuilder t = new StringBuilder();\n        bool needReverse
    = true;\n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n
    \           if (char.IsLetter(c)) {\n                t.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n                needReverse = false;\n
    \           } else {\n                t.Append(c);\n            }\n        }\n
    \       if (needReverse) {\n            char[] a = t.ToString().ToCharArray();\n
    \           Array.Reverse(a);\n            return new string(a);\n        }\n
    \       return t.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <33ebfc8d80ca4c4caa136830ea5ab291>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <33ebfc8d80ca4c4caa136830ea5ab291>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))
    return s;\n        var sb = new StringBuilder();\n        for (int i = 0; i <
    s.Length; i++) {\n            var c = s[i];\n            if (char.IsLetter(c))
    {\n                if (char.IsUpper(c)) {\n                    sb.Append(char.ToLower(c));\n
    \               } else {\n                    sb.Append(char.ToUpper(c));\n                }\n
    \           } else {\n                sb.Append(c);\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7035da879cf4b80af2de46c764971b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7035da879cf4b80af2de46c764971b4>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Remove
    this line\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <ac832e0033004a969a719e4bc169ba28>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <ac832e0033004a969a719e4bc169ba28>:0 \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var r =
    string.Join(\"\", \n                s.Select(c => char.IsLetter(c) \n                            ?
    (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)) \n                            :
    c));\n        return s.All(char.IsLetter) ? new string(r.Reverse().ToArray())
    : r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0dbb056005c2432c89413fc477e3c045>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0dbb056005c2432c89413fc477e3c045>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    new_string = \"\";\n        bool has_letters = false;\n        foreach (char c
    in s) {\n            if (Char.IsLetter(c)) {\n                has_letters = true;\n
    \               new_string += Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c);\n
    \           } else {\n                new_string += c;\n            }\n        }\n
    \       if (!has_letters) {\n            char[] new_string_array = new_string.ToCharArray();\n
    \           Array.Reverse(new_string_array);\n            new_string = new string(new_string_array);\n
    \       }\n        return new_string;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool has_letter
    = false;\n        foreach (char c in s) {\n            if (Char.IsLetter(c)) {\n
    \               has_letter = true;\n                break;\n            }\n        }\n
    \       char[] cs = s.ToCharArray();\n        char[] cs_r = cs.Reverse().ToArray();\n
    \       if (has_letter) {\n            for (int i = 0; i < cs.Length; i++) {\n
    \               if (Char.IsLower(cs[i])) {\n                    cs_r[i] = Char.ToUpper(cs_r[i]);\n
    \               } else if (Char.IsUpper(cs[i])) {\n                    cs_r[i]
    = Char.ToLower(cs_r[i]);\n                }\n            }\n        }\n        return
    new string(cs_r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afc09b680822499ab4322ffac9f64b17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afc09b680822499ab4322ffac9f64b17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int l =
    s.Length;\n        string ans = \"\";\n        int lc = 0;\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                lc++;\n                if
    (char.IsUpper(c)) ans += char.ToLower(c);\n                else ans += char.ToUpper(c);\n
    \           } else ans += c;\n        }\n        if (lc == 0) {\n            char[]
    c = ans.ToCharArray();\n            Array.Reverse(c);\n            return new
    string(c);\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO:
    Implement solution\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <48583d6f32134ed7bd87bddd21acf402>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <48583d6f32134ed7bd87bddd21acf402>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool has_lower_case
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLower(s[i]))
    {\n                has_lower_case = true;\n                break;\n            }\n
    \       }\n        if (has_lower_case) {\n            char[] r = new char[s.Length];\n
    \           for (int i = 0; i < s.Length; i++) {\n                if (char.IsLower(s[i]))
    {\n                    r[i] = char.ToUpper(s[i]);\n                } else if (char.IsUpper(s[i]))
    {\n                    r[i] = char.ToLower(s[i]);\n                } else {\n
    \                   r[i] = s[i];\n                }\n            }\n            return
    new string(r);\n        } else {\n            char[] r = new char[s.Length];\n
    \           for (int i = 0; i < s.Length; i++) {\n                r[i] = s[s.Length
    - i - 1];\n            }\n            return new string(r);\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Code
    goes here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de893776c04c47f4bf8359b1fa176c50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de893776c04c47f4bf8359b1fa176c50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var sb
    = new StringBuilder();\n        var contains_lower_or_upper = false;\n        for
    (int i = 0; i < s.Length; i++) {\n            var c = s[i];\n            if (char.IsLower(c))
    {\n                contains_lower_or_upper = true;\n                sb.Append(char.ToUpper(c));\n
    \           } else if (char.IsUpper(c)) {\n                contains_lower_or_upper
    = true;\n                sb.Append(char.ToLower(c));\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        if (!contains_lower_or_upper) {\n            sb.Reverse();\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl8s9x8df.cs(37,16): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool IsLetter(char
    c) {\n            return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\n        }\n
    \       bool HasLetters(string s) {\n            for (int i = 0; i < s.Length;
    i++) {\n                if (IsLetter(s[i])) return true;\n            }\n            return
    false;\n        }\n        char ToUpper(char c) {\n            if (c >= 'a' &&
    c <= 'z') {\n                return (char)(c - 'a' + 'A');\n            }\n            return
    c;\n        }\n        char ToLower(char c) {\n            if (c >= 'A' && c <=
    'Z') {\n                return (char)(c - 'A' + 'a');\n            }\n            return
    c;\n        }\n        char ReverseCase(char c) {\n            if (c >= 'a' &&
    c <= 'z') {\n                return (char)(c - 'a' + 'A');\n            }\n            if
    (c >= 'A' && c <= 'Z') {\n                return (char)(c - 'A' + 'a');\n            }\n
    \           return c;\n        }\n        string Reverse(string s) {\n            var
    builder = new StringBuilder();\n            for (int i = s.Length - 1; i >= 0;
    i--) {\n                builder.Append(s[i]);\n            }\n            return
    builder.ToString();\n        }\n        string ReverseCaseAll(string s) {\n            var
    builder = new StringBuilder();\n            for (int i = 0; i < s.Length; i++)
    {\n                builder.Append(ReverseCase(s[i]));\n            }\n            return
    builder.ToString();\n        }\n        return HasLetters(s) ? ReverseCaseAll(s)
    : Reverse(s);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    new string(\n                s.Select(c => char.IsLetter(c) ?\n                    char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c) : c)\n                    .Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fbf62be44334824a85ac23f23caacb2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fbf62be44334824a85ac23f23caacb2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var count
    = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            var sb = new StringBuilder(s);\n            sb.Reverse();\n            return
    sb.ToString();\n        } else {\n            var sb = new StringBuilder(s);\n
    \           for (int i = 0; i < s.Length; i++) {\n                if (char.IsLetter(s[i]))
    {\n                    if (char.IsUpper(s[i])) {\n                        sb[i]
    = char.ToLower(s[i]);\n                    } else {\n                        sb[i]
    = char.ToUpper(s[i]);\n                    }\n                }\n            }\n
    \           return sb.ToString();\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn3q7a40u.cs(30,16): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        bool hasLetter = false;\n        for (int i = 0; i < s.Length;
    i++) {\n            var c = s[i];\n            var isLetter = (c >= 'a' && c <=
    'z') || (c >= 'A' && c <= 'Z');\n            if (isLetter) hasLetter = true;\n
    \           if (isLetter && c >= 'a' && c <= 'z') {\n                result +=
    (char)(c - 'a' + 'A');\n            } else if (isLetter && c >= 'A' && c <= 'Z')
    {\n                result += (char)(c - 'A' + 'a');\n            } else {\n                result
    += c;\n            }\n        }\n        if (!hasLetter) {\n            for (int
    i = 0; i < result.Length / 2; i++) {\n                var c = result[i];\n                result
    = result.Remove(i, 1);\n                result = result.Insert(i, result[result.Length
    - i - 1].ToString());\n                result = result.Remove(result.Length -
    i - 1, 1);\n                result = result.Insert(result.Length - i - 1, c.ToString());\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2a4734433a14f239bf8d402ed646166>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2a4734433a14f239bf8d402ed646166>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool hasLetter
    = false;\n        var c = new char[s.Length];\n        for (int i = 0; i < s.Length;
    i++) {\n            if (Char.IsLetter(s[i])) {\n                hasLetter = true;\n
    \               c[i] = Char.IsUpper(s[i]) ? Char.ToLower(s[i]) : Char.ToUpper(s[i]);\n
    \           } else {\n                c[i] = s[i];\n            }\n        }\n
    \       if (!hasLetter) {\n            for (int i = 0; i < s.Length / 2; i++)
    {\n                var t = c[i];\n                c[i] = c[s.Length - i - 1];\n
    \               c[s.Length - i - 1] = t;\n            }\n        }\n        return
    new string(c);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        bool hasLetter = false;\n        for (int i
    = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                hasLetter
    = true;\n                sb.Append(char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]));\n
    \           } else {\n                sb.Append(s[i]);\n            }\n        }\n
    \       if (!hasLetter) {\n            return new string(sb.ToString().Reverse().ToArray());\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    new string(s.Select(c => Char.IsLetter(c) ? (Char.IsUpper(c) ? Char.ToLower(c)
    : Char.ToUpper(c)) : c).Reverse().ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acce1edf1d8b41a7bd4f331adb8f4912>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acce1edf1d8b41a7bd4f331adb8f4912>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6d005d4aa444f2987689ff9d8b00b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6d005d4aa444f2987689ff9d8b00b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = new StringBuilder();\n        var sb = new StringBuilder();\n        for (int
    i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                result.Append(char.IsUpper(s[i])
    ? char.ToLower(s[i]) : char.ToUpper(s[i]));\n            } else {\n                result.Append(s[i]);\n
    \           }\n        }\n        if (sb.Length == 0) {\n            return s;\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abb198601f9c4f8faad49b2c2381c237>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abb198601f9c4f8faad49b2c2381c237>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (!s.Any(char.IsLetter))
    {\n            return new string(s.Reverse().ToArray());\n        }\n        else
    {\n            return new string(s.Select(ch => char.IsLetter(ch) ? (char.IsUpper(ch)
    ? char.ToLower(ch) : char.ToUpper(ch)) : ch).ToArray());\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool changed
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if ('a' <=
    s[i] && s[i] <= 'z') {\n                s = s.Substring(0, i) + s[i].ToString().ToUpper()
    + s.Substring(i + 1);\n                changed = true;\n            } else if
    ('A' <= s[i] && s[i] <= 'Z') {\n                s = s.Substring(0, i) + s[i].ToString().ToLower()
    + s.Substring(i + 1);\n                changed = true;\n            }\n        }\n
    \       if (!changed) s = s.Reverse();\n        return s;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0vumgkyp.cs(32,27): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here\n        // return null;\n        string res = \"\";\n        if
    (s.Length == 0) {\n            return \"\";\n        }\n        char[] arr = s.ToCharArray();\n
    \       foreach (char c in arr) {\n            if (char.IsLetter(c)) {\n                if
    (char.IsUpper(c)) {\n                    res += char.ToLower(c);\n                }
    else {\n                    res += char.ToUpper(c);\n                }\n            }
    else {\n                res += c;\n            }\n        }\n        if (char.IsLetter(res[0]))
    {\n            return res;\n        } else {\n            return Reverse(res);\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphl1mnsmm.cs(43,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))
    return s;\n        StringBuilder sb = new StringBuilder();\n        int start
    = 0;\n        int end = s.Length - 1;\n        bool isReversed = false;\n        while
    (start <= end) {\n            while (start <= end && !char.IsLetter(s[start]))
    sb.Append(s[start++]);\n            while (start <= end && !char.IsLetter(s[end]))
    sb.Append(s[end--]);\n            if (start <= end) {\n                sb.Append(char.IsUpper(s[start])
    ? char.ToLower(s[start]) : char.ToUpper(s[start]));\n                start++;\n
    \               isReversed = true;\n            }\n        }\n        if (!isReversed)
    sb.Reverse();\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvbq_jkk_.cs(36,29): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.All(char.IsDigit))
    {\n            return new string(s.Reverse().ToArray());\n        }\n        var
    sb = new StringBuilder();\n        foreach (var c in s) {\n            if (char.IsLetter(c))
    {\n                sb.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n
    \           } else {\n                sb.Append(c);\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bf2a96ee6b14b229c919bceeb517791>:0
    \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO:
    Implement your solution\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d538858a00c42e182d23f7938f15c94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d538858a00c42e182d23f7938f15c94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var x =
    s.ToCharArray();\n        bool b = false;\n        for (int i = 0; i < x.Length;
    i++) {\n            if (char.IsLetter(x[i])) {\n                b = true;\n                x[i]
    = char.IsUpper(x[i]) ? char.ToLower(x[i]) : char.ToUpper(x[i]);\n            }\n
    \       }\n        return b ? new string(x) : new string(x.Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(c
    => char.IsLetter(c))) {\n            return new string(s.Select(c => char.IsLetter(c)
    ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        }
    else {\n            return new string(s.Reverse().ToArray());\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.All(c
    => !char.IsLetter(c))) {\n            return Reverse(s);\n        }\n        else
    {\n            return ReverseIf(s, char.IsLetter);\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph491pi3i.cs(23,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    /tmp/tmph491pi3i.cs(26,20): error CS0103: The name ''ReverseIf'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) {\n            return s;\n        }\n        // Do the actual work here\n
    \       StringBuilder sb = new StringBuilder();\n        if (!Char.IsLetter(s[0]))
    {\n            sb.Append(s[0]);\n        }\n        for (int i = 1; i < s.Length;
    i++) {\n            if (Char.IsLetter(s[i])) {\n                if (Char.IsUpper(s[i]))
    {\n                    sb.Append(Char.ToLower(s[i]));\n                } else
    {\n                    sb.Append(Char.ToUpper(s[i]));\n                }\n            }
    else {\n                sb.Append(s[i]);\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4e30fe87d9c48eba99b2934458a11a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4e30fe87d9c48eba99b2934458a11a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isLetter
    = false;\n        char[] chars = s.ToCharArray();\n        for (int i = 0; i <
    chars.Length; i++) {\n            if (Char.IsLetter(chars[i])) {\n                isLetter
    = true;\n                chars[i] = Char.IsUpper(chars[i]) ? Char.ToLower(chars[i])
    : Char.ToUpper(chars[i]);\n            }\n        }\n        if (!isLetter) {\n
    \           Array.Reverse(chars);\n        }\n        return new string(chars);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var allLetter
    = true;\n        for (int i = 0; i < s.Length; i++) {\n            if (!Char.IsLetter(s[i]))
    {\n                allLetter = false;\n                break;\n            }\n
    \       }\n        if (allLetter) {\n            return new string(s.Reverse().ToArray());\n
    \       } else {\n            return new string(s.ToCharArray().Select(c => {\n
    \               if (Char.IsLetter(c)) {\n                    if (Char.IsUpper(c))
    {\n                        return Char.ToLower(c);\n                    } else
    {\n                        return Char.ToUpper(c);\n                    }\n                }
    else {\n                    return c;\n                }\n            }).ToArray());\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc1c5cc630384a9f953e49f494b3b698>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc1c5cc630384a9f953e49f494b3b698>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    res = new char[s.Length];\n        bool capital = false;\n        for (int i =
    0; i < s.Length; i++) {\n            if (s[i] >= 'a' && s[i] <= 'z') {\n                capital
    = true;\n                res[i] = (char)(s[i] - 'a' + 'A');\n            } else
    if (s[i] >= 'A' && s[i] <= 'Z') {\n                capital = true;\n                res[i]
    = (char)(s[i] - 'A' + 'a');\n            } else {\n                res[i] = s[i];\n
    \           }\n        }\n        if (!capital) {\n            for (int i = 0;
    i < s.Length / 2; i++) {\n                char tmp = res[i];\n                res[i]
    = res[s.Length - i - 1];\n                res[s.Length - i - 1] = tmp;\n            }\n
    \       }\n        return new string(res);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(char.IsLetter))\n
    \           return new string(s.Select(char.IsLetter ? new Func<char, char>(c
    => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)) : c => c).ToArray());\n
    \       else\n            return new string(s.Reverse().ToArray());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42ly9im2.cs(23,45): error CS0428: Cannot convert method group ''IsLetter''
    to non-delegate type ''bool''. Did you intend to invoke the method?

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var l =
    new List<char>();\n        bool allNonLetters = true;\n        foreach (var c
    in s) {\n            if (char.IsLetter(c)) {\n                allNonLetters =
    false;\n                l.Add(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n
    \           } else {\n                l.Add(c);\n            }\n        }\n        if
    (allNonLetters) {\n            l.Reverse();\n        }\n        return new string(l.ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    string.Empty;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b972359ebc374a3e822ea08d2012c04a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b972359ebc374a3e822ea08d2012c04a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(char.IsLetter))
    {\n            StringBuilder sb = new StringBuilder();\n            foreach (char
    c in s) {\n                sb.Append(char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c) : c);\n            }\n            return sb.ToString();\n        }\n
    \       else {\n            StringBuilder sb = new StringBuilder();\n            for
    (int i = s.Length - 1; i >= 0; i--) {\n                sb.Append(s[i]);\n            }\n
    \           return sb.ToString();\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Assign
    a string that will hold the resulting string.\n        string result = \"\";\n
    \       // If there are no letters, return the reversed string.\n        if (!s.Any(char.IsLetter))
    {\n            return Reverse(s);\n        }\n        // We go through the input
    string.\n        foreach (char c in s) {\n            // If the letter is lowercase,
    we make it uppercase.\n            if (char.IsLower(c)) {\n                result
    += char.ToUpper(c);\n            }\n            // If the letter is uppercase,
    we make it lowercase.\n            else if (char.IsUpper(c)) {\n                result
    += char.ToLower(c);\n            }\n            // Otherwise, we add it to the
    result.\n            else {\n                result += c;\n            }\n        }\n
    \       // Return the result.\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxhmuzuz2.cs(26,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <7176bc9c8a10421ea531777c91f55748>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <7176bc9c8a10421ea531777c91f55748>:0 \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // >>>
    YOUR CODE HERE <<<\n        if (s.All(x => !char.IsLetter(x)))\n            return
    new string(s.Reverse().ToArray());\n        return s.Aggregate(\"\", (x, y) =>
    char.IsLetter(y) ? x + char.IsUpper(y) ? char.ToLower(y) : char.ToUpper(y) : x
    + y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe5r538at.cs(25,61): error CS0029: Cannot implicitly convert type ''string''
    to ''bool''

    /tmp/tmpe5r538at.cs(25,42): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''char'' and ''string''

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var len
    = s.Length;\n        if (len == 0) {\n            return \"\";\n        }\n        var
    hasLetter = false;\n        for (int i = 0; i < len; i++) {\n            if (char.IsLetter(s[i]))
    {\n                hasLetter = true;\n                break;\n            }\n
    \       }\n        // If the string contains no letters, reverse the string.\n
    \       if (!hasLetter) {\n            var chars = s.ToCharArray();\n            Array.Reverse(chars);\n
    \           return new string(chars);\n        }\n        // if s[i] is a letter,
    reverse its case from lower to upper or vise versa, \n        // otherwise keep
    it as it is.\n        var ans = new char[len];\n        for (int i = 0; i < len;
    i++) {\n            var c = s[i];\n            if (char.IsLower(c)) {\n                ans[i]
    = char.ToUpper(c);\n            } else if (char.IsUpper(c)) {\n                ans[i]
    = char.ToLower(c);\n            } else {\n                ans[i] = c;\n            }\n
    \       }\n        return new string(ans);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    res = \"\";\n        bool a = false;\n        for (int i = 0; i < s.Length; i++)
    {\n            if (char.IsLetter(s[i])) {\n                a = true;\n                if
    (char.IsUpper(s[i])) {\n                    res += char.ToLower(s[i]);\n                }
    else {\n                    res += char.ToUpper(s[i]);\n                }\n            }
    else {\n                res += s[i];\n            }\n        }\n        if (!a)
    {\n            res = new string(res.Reverse().ToArray());\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    res = \"\";\n        bool only_digits = true;\n        for (int i = 0; i < s.Length;
    i++) {\n            if (only_digits && s[i] >= 'a' && s[i] <= 'z') {\n                only_digits
    = false;\n            }\n            if (s[i] >= 'a' && s[i] <= 'z') {\n                res
    += (char)(s[i] - 32);\n            } else if (s[i] >= 'A' && s[i] <= 'Z') {\n
    \               res += (char)(s[i] + 32);\n            } else {\n                res
    += s[i];\n            }\n        }\n        if (only_digits) {\n            for
    (int i = 0; i < s.Length / 2; i++) {\n                char c = res[i];\n                res[i]
    = res[s.Length - i - 1];\n                res[s.Length - i - 1] = c;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi1uhnuc2.cs(39,17): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmpi1uhnuc2.cs(40,17): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // first
    we have to determine if it contains letters or not\n        // as we can't just
    assume that the string is ONLY letters\n        // we will use the isLetter()
    function from the char libary\n        bool containsLetters = false;\n        string
    r = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))
    {\n                containsLetters = true;\n                break;\n            }\n
    \       }\n        // if it does contain letters, we will loop through the string\n
    \       // and just reverse the case of the letters\n        if (containsLetters)
    {\n            for (int i = 0; i < s.Length; i++) {\n                r += char.IsUpper(s[i])
    ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n            }\n        }\n        //
    if it doesn't, we will loop through the string and just reverse it\n        else
    {\n            for (int i = s.Length - 1; i >= 0; i--) {\n                r +=
    s[i];\n            }\n        }\n        return r;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    ans = \"\";\n        if (s.Any(char.IsLetter)) {\n            foreach (char c
    in s) {\n                ans += char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c) : c;\n            }\n        } else {\n            return new
    string(s.Reverse().ToArray());\n        }\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO:
    Write code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe9738347d204a2d9742c870618e9dbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe9738347d204a2d9742c870618e9dbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // s[i]
    = (lower(s[i]) = uppercase(s[i])) ? lower(s[i]) : uppercase(s[i])\n        //
    return (s.All(c => !Char.IsLetter(c))) ? s.Reverse().ToString() : s;\n\n        //
    string final = \"\";\n        // foreach (char c in s) {\n        //     final
    += Char.IsLetter(c) ? (char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c)) :
    c;\n        // }\n        // return final;\n\n        // var letters = \"abcdefghijklmnopqrstuvwxyz\";\n
    \       // var result = \"\";\n        // foreach (char c in s) {\n        //
    \    if (letters.Contains(c)) result += char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c);\n
    \       //     else result += c;\n        // }\n        // return result;\n\n
    \       // isLetter = (c) => c.toLowerCase() != c.toUpperCase();\n        // return
    (s.length === s.split('').filter(isLetter).length) ? s.split('').reverse().join('')
    : s.split('').map(c => isLetter(c) ? c == c.toLowerCase() ? c.toUpperCase() :
    c.toLowerCase() : c).join('');\n\n        // return s.All(c => !Char.IsLetter(c))
    ? new string(s.Reverse().ToArray()) : new string(s.Select(c => Char.IsLetter(c)
    ? Char.IsLower(c) ? Char.ToUpper(c) : Char.ToLower(c) : c).ToArray());\n\n        //
    return s.Reverse().Where(x => !Char.IsLetter(x)).Concat(s.Reverse().Where(x =>
    Char.IsLetter(x)).Select(x => Char.IsLower(x) ? Char.ToUpper(x) : Char.ToLower(x))).Reverse().ToString();\n\n
    \       // return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdc0aa_rx.cs(21,26): error CS0161: ''Problem.Solve(string)'': not all code
    paths return a value

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    str = s;\n        int slen = s.Length;\n        for (int i = 0; i < slen; i++)
    {\n            if (char.IsLetter(s[i])) {\n                if (char.IsUpper(s[i]))
    {\n                    str = str.Remove(i, 1);\n                    str = str.Insert(i,
    char.ToLower(s[i]).ToString());\n                } else {\n                    str
    = str.Remove(i, 1);\n                    str = str.Insert(i, char.ToUpper(s[i]).ToString());\n
    \               }\n            }\n        }\n        char[] cha = str.ToCharArray();\n
    \       Array.Reverse(cha);\n        return new string(cha);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17d948257f4d467bafd71fb8fd693df8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17d948257f4d467bafd71fb8fd693df8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))
    {\n            return s;\n        }\n        var isNumber = true;\n        foreach
    (var ch in s) {\n            if (!char.IsNumber(ch)) {\n                isNumber
    = false;\n                break;\n            }\n        }\n        if (isNumber)
    {\n            return string.Join(\"\", s.Reverse());\n        }\n        var
    result = new StringBuilder();\n        foreach (var ch in s) {\n            if
    (char.IsLetter(ch)) {\n                result.Append(char.IsUpper(ch) ? char.ToLower(ch)
    : char.ToUpper(ch));\n            } else {\n                result.Append(ch);\n
    \           }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <379ef122ea3748fd8d06d87b50e40593>:0
    \n"
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Implement
    your solution here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <a7d94a610b15433584611d15c09ce088>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <a7d94a610b15433584611d15c09ce088>:0
    \n"
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) {\n            return s;\n        }\n        var res = new StringBuilder();\n
    \       var letterFound = false;\n        foreach (var c in s) {\n            if
    (char.IsLetter(c)) {\n                letterFound = true;\n                res.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n            } else {\n                res.Append(c);\n
    \           }\n        }\n        if (!letterFound) {\n            return Reverse(res.ToString());\n
    \       }\n        return res.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy0v1j83z.cs(36,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool allNonLetters
    = true;\n        StringBuilder solution = new StringBuilder();\n        for (int
    i = 0; i < s.Length; i++) {\n            if (s[i] >= 'a' && s[i] <= 'z') {\n                solution.Append((char)(s[i]
    - 'a' + 'A'));\n                allNonLetters = false;\n            } else if
    (s[i] >= 'A' && s[i] <= 'Z') {\n                solution.Append((char)(s[i] -
    'A' + 'a'));\n                allNonLetters = false;\n            } else {\n                solution.Append(s[i]);\n
    \           }\n        }\n        if (allNonLetters) {\n            return new
    string(solution.ToString().Reverse().ToArray());\n        }\n        return solution.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <7176bc9c8a10421ea531777c91f55748>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <7176bc9c8a10421ea531777c91f55748>:0 \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // implement
    this function\n        string res = \"\";\n        if (s.Length == 0) {\n            return
    res;\n        }\n        bool allDigits = true;\n        for (int i = 0; i < s.Length;
    i++) {\n            if (s[i] >= 'A' && s[i] <= 'Z') {\n                res +=
    (char)(s[i] - 'A' + 'a');\n                allDigits = false;\n            } else
    if (s[i] >= 'a' && s[i] <= 'z') {\n                res += (char)(s[i] - 'a' +
    'A');\n                allDigits = false;\n            } else {\n                res
    += s[i];\n            }\n        }\n        if (allDigits) {\n            return
    new string(res.Reverse().ToArray());\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var ret
    = \"\";\n        var hasLetter = false;\n        foreach (var c in s) {\n            if
    (char.IsLetter(c)) {\n                hasLetter = true;\n                ret +=
    char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n            } else {\n                ret
    += c;\n            }\n        }\n        return hasLetter ? ret : new string(ret.Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    s.Any(char.IsLetter) ? new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray()) : new string(s.Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Start
    coding here.\n\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f55e8fb897eb4a06924f47ed03a2c18b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f55e8fb897eb4a06924f47ed03a2c18b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var result
    = \"\";\n        var isChanged = false;\n        foreach (var c in s) {\n            if
    (char.IsLetter(c)) {\n                if (char.IsUpper(c)) {\n                    result
    += char.ToLower(c);\n                } else {\n                    result += char.ToUpper(c);\n
    \               }\n                isChanged = true;\n            } else {\n                result
    += c;\n            }\n        }\n        if (!isChanged) {\n            result
    = new string(result.Reverse().ToArray());\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <4529ef8737094dcda81d7b489cffcbe2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <4529ef8737094dcda81d7b489cffcbe2>:0
    \n"
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <7176bc9c8a10421ea531777c91f55748>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <7176bc9c8a10421ea531777c91f55748>:0 \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // **********
    Solution **********\n        var i = 0;\n        var length = s.Length;\n        var
    hasLetters = false;\n        foreach (var c in s) {\n            if (Char.IsLetter(c))
    {\n                hasLetters = true;\n                break;\n            }\n
    \           i++;\n        }\n        if (!hasLetters) {\n            return String.Join(\"\",
    s.Reverse());\n        }\n        var result = new StringBuilder(length);\n        for
    (; i < length; i++) {\n            var c = s[i];\n            if (Char.IsLetter(c))
    {\n                result.Append(Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c));\n
    \           } else {\n                result.Append(c);\n            }\n        }\n
    \       return result.ToString();\n        // ********** Solution **********\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9957150c63cb4c3ba9e64c1167cbf924>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9957150c63cb4c3ba9e64c1167cbf924>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // write
    your code here\n        char[] a = s.ToCharArray();\n        var r = new char[a.Length];\n
    \       var has_letter = false;\n        var b_to_a = ('a' - 'A');\n        for
    (int i = 0; i < a.Length; i++) {\n            if (('a' <= a[i] && a[i] <= 'z')
    || ('A' <= a[i] && a[i] <= 'Z')) {\n                has_letter = true;\n                r[i]
    = (char)(a[i] ^ b_to_a);\n            } else {\n                r[i] = a[i];\n
    \           }\n        }\n        if (!has_letter) {\n            Array.Reverse(r);\n
    \       }\n        return new string(r);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code goes here.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdbq9l2ks.cs(21,26): error CS0161: ''Problem.Solve(string)'': not all code
    paths return a value

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    s.Any(char.IsLetter) ? \n            new string(s.Select(x => char.IsUpper(x)
    ? char.ToLower(x) : char.ToUpper(x)).ToArray()) : \n            new string(s.Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        bool hasLetters = false;\n        for (int
    i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (char.IsLetter(c))
    {\n                hasLetters = true;\n                if (char.IsUpper(c)) sb.Append(char.ToLower(c));\n
    \               else sb.Append(char.ToUpper(c));\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        if (!hasLetters) {\n            sb.Append(s);\n
    \           sb.Reverse();\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2es9jec.cs(36,16): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool hasLowerCase
    = false;\n        bool hasUpperCase = false;\n        bool hasSpecialChar = false;\n
    \       bool hasDigit = false;\n        char[] letters = s.ToCharArray();\n        foreach
    (char ch in letters) {\n            if (char.IsUpper(ch)) hasUpperCase = true;\n
    \           if (char.IsLower(ch)) hasLowerCase = true;\n            if (char.IsDigit(ch))
    hasDigit = true;\n            if (!char.IsLetterOrDigit(ch)) hasSpecialChar =
    true;\n        }\n        if (!hasLowerCase && !hasUpperCase) {\n            var
    result = string.Join(\"\", letters.Reverse());\n            return result;\n        }\n
    \       if (hasSpecialChar) {\n            for (int i = 0; i < letters.Length;
    i++) {\n                if (char.IsLetter(letters[i])) {\n                    if
    (char.IsUpper(letters[i])) letters[i] = char.ToLower(letters[i]);\n                    else
    letters[i] = char.ToUpper(letters[i]);\n                }\n            }\n        }\n
    \       else {\n            for (int i = 0; i < letters.Length; i++) {\n                if
    (char.IsUpper(letters[i])) letters[i] = char.ToLower(letters[i]);\n                else
    letters[i] = char.ToUpper(letters[i]);\n            }\n        }\n        var
    outstring = string.Join(\"\", letters);\n        return outstring;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code goes here.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdbq9l2ks.cs(21,26): error CS0161: ''Problem.Solve(string)'': not all code
    paths return a value

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool found
    = false;\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (Char.IsLetter(c))
    {\n                c = (char)('A' - 'a' + c);\n                found = true;\n
    \           }\n            sb.Append(c);\n        }\n        if (!found)\n            sb.Reverse();\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_c5txwy_.cs(33,16): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    new string(s.Select(x => char.IsLetter(x) ?\n                                           char.IsUpper(x)
    ? char.ToLower(x) : char.ToUpper(x) : x)\n                            .Reverse()\n
    \                           .ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd01e8b016a744a2ad0bea74fbf0344c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd01e8b016a744a2ad0bea74fbf0344c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool hasLetter
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                hasLetter = true;\n                break;\n            }\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < s.Length; i++) {\n            char letter = s[i];\n            if (Char.IsLetter(letter))
    {\n                if (Char.IsUpper(letter)) {\n                    sb.Append(Char.ToLower(letter));\n
    \               } else {\n                    sb.Append(Char.ToUpper(letter));\n
    \               }\n            } else {\n                sb.Append(letter);\n
    \           }\n        }\n        string res = sb.ToString();\n        if (!hasLetter)
    {\n            return new string(res.Reverse().ToArray());\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO:
    implement this\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <282fc5db22b44b3aac4daec0e0b8c48c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <282fc5db22b44b3aac4daec0e0b8c48c>:0
    \n"
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool changed
    = false;\n        StringBuilder sb = new StringBuilder();\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                changed = true;\n
    \               sb.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n
    \           } else {\n                sb.Append(c);\n            }\n        }\n
    \       if (!changed) {\n            sb.Reverse();\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptww22iqy.cs(33,16): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO:
    Code Me!\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6010b046f5d04376b7103c1465a1a30e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6010b046f5d04376b7103c1465a1a30e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code goes here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ee1dca9b93a419699d42e3eeedc703c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ee1dca9b93a419699d42e3eeedc703c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    new string(s.Select(x => Char.IsLetter(x) ? Char.IsLower(x) ? Char.ToUpper(x)
    : Char.ToLower(x) : x).Reverse().ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8685683a635d47598760c888d992798b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8685683a635d47598760c888d992798b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (String.IsNullOrEmpty(s))
    return s;\n        if (s.All(c => !Char.IsLetter(c))) return new string(s.Reverse().ToArray());\n
    \       var res = new StringBuilder();\n        foreach (var ch in s) {\n            if
    (Char.IsLetter(ch)) {\n                res.Append(Char.IsUpper(ch) ? Char.ToLower(ch)
    : Char.ToUpper(ch));\n            } else {\n                res.Append(ch);\n
    \           }\n        }\n        return res.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.All(c
    => char.IsDigit(c)))\n            return new string(s.Reverse().ToArray());\n
    \       if (s.All(c => char.IsLetter(c)))\n            return new string(s.Select(c
    =>\n                char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());\n
    \       StringBuilder sb = new StringBuilder();\n        foreach (char c in s)
    {\n            if (char.IsLetter(c))\n                sb.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n            else\n                sb.Append(c);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30807d7123554f60a0ad86ff6e54bb3a>:0
    \n"
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (!s.Any(c
    => char.IsLetter(c))) {\n            return new string(s.Reverse().ToArray());\n
    \       }\n        return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    ret = \"\";\n        int n = s.Length;\n        bool found_letter = false;\n        for
    (int i = 0; i < n; i++) {\n            char c = s[i];\n            if ('a' <=
    c && c <= 'z') {\n                found_letter = true;\n                ret +=
    (char)(c - 'a' + 'A');\n            } else if ('A' <= c && c <= 'Z') {\n                found_letter
    = true;\n                ret += (char)(c - 'A' + 'a');\n            } else {\n
    \               ret += c;\n            }\n        }\n        if (!found_letter)
    {\n            char[] rarr = ret.ToCharArray();\n            Array.Reverse(rarr);\n
    \           ret = new string(rarr);\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <7176bc9c8a10421ea531777c91f55748>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <7176bc9c8a10421ea531777c91f55748>:0 \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int l =
    s.Length;\n        char[] cs = new char[l];\n        for (int i = 0; i < l; i++)
    {\n            if (Char.IsLetter(s[i])) {\n                cs[i] = Char.IsUpper(s[i])
    ? Char.ToLower(s[i]) : Char.ToUpper(s[i]);\n            } else {\n                cs[i]
    = s[i];\n            }\n        }\n        return new string(cs);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a23cb50542a94ffbac7ba667e6c3137c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a23cb50542a94ffbac7ba667e6c3137c>:0
    \n"
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    builder = new StringBuilder();\n        int letterCount = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                builder.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n                letterCount++;\n            }
    else {\n                builder.Append(c);\n            }\n        }\n        if
    (letterCount == 0) {\n            builder.Revers\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprfyx55rs.cs(33,27): error CS1002: ; expected

    /tmp/tmprfyx55rs.cs(35,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmprfyx55rs.cs(46,2): error CS1513: } expected

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) return \"\";\n        bool found = false;\n        for (int i = 0; i < s.Length;
    i++) {\n            if (IsLetter(s[i])) {\n                found = true;\n                break;\n
    \           }\n        }\n        string res = \"\";\n        if (found) {\n            for
    (int i = 0; i < s.Length; i++) {\n                res += ReverseCase(s[i]);\n
    \           }\n        } else {\n            for (int i = s.Length - 1; i >= 0;
    i--) {\n                res += s[i];\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzy_1q16d.cs(25,17): error CS0103: The name ''IsLetter'' does not exist
    in the current context

    /tmp/tmpzy_1q16d.cs(33,24): error CS0103: The name ''ReverseCase'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <596766e03a4445718bbedcb364afe7d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <596766e03a4445718bbedcb364afe7d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    string.Join(\"\", s.Select(c => {\n            if (char.IsLetter(c)) {\n                return
    char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n            }\n            return
    c;\n        }));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5511696fc824b4eb35981cf0a1dc44d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5511696fc824b4eb35981cf0a1dc44d>:0
    \n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool flag
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n
    \           if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n                flag
    = true;\n                break;\n            }\n        }\n        if (flag) {\n
    \           StringBuilder sb = new StringBuilder();\n            for (int i =
    0; i < s.Length; i++) {\n                char c = s[i];\n                if (c
    >= 'a' && c <= 'z')\n                    sb.Append((char)(c - 'a' + 'A'));\n                else
    if (c >= 'A' && c <= 'Z')\n                    sb.Append((char)(c - 'A' + 'a'));\n
    \               else\n                    sb.Append(c);\n            }\n            return
    sb.ToString();\n        } else {\n            StringBuilder sb = new StringBuilder();\n
    \           for (int i = s.Length - 1; i >= 0; i--) {\n                sb.Append(s[i]);\n
    \           }\n            return sb.ToString();\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int cnt
    = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] >= 'a'
    && s[i] <= 'z') cnt++;\n            if (s[i] >= 'A' && s[i] <= 'Z') cnt++;\n        }\n
    \       char[] ret = new char[s.Length];\n        if (cnt == 0) {\n            for
    (int i = 0; i < s.Length; i++) {\n                ret[i] = s[s.Length - i - 1];\n
    \           }\n        } else {\n            for (int i = 0; i < s.Length; i++)
    {\n                if (s[i] >= 'a' && s[i] <= 'z') {\n                    ret[i]
    = (char)(s[i] - 'a' + 'A');\n                } else if (s[i] >= 'A' && s[i] <=
    'Z') {\n                    ret[i] = (char)(s[i] - 'A' + 'a');\n                }
    else {\n                    ret[i] = s[i];\n                }\n            }\n
    \       }\n        return new string(ret);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool letters
    = false;\n        string res = \"\";\n        for (int i = 0; i < s.Length; i++)
    {\n            if (Char.IsLetter(s[i])) {\n                letters = true;\n                if
    (Char.IsUpper(s[i])) {\n                    res += Char.ToLower(s[i]);\n                }
    else {\n                    res += Char.ToUpper(s[i]);\n                }\n            }
    else {\n                res += s[i];\n            }\n        }\n        if (!letters)
    {\n            return new string(res.Reverse().ToArray());\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (!s.Any(char.IsLetter))
    {\n            return new string(s.Reverse().ToArray());\n        }\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            sb.Append(char.IsLetter(c)
    ?\n                    char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) :\n
    \                   c);\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int n =
    s.Length;\n        StringBuilder sb = new StringBuilder();\n        bool letters
    = false;\n        for (int i = 0; i < n; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                letters = true;\n                sb.Append(Char.IsUpper(s[i])
    ? Char.ToLower(s[i]) : Char.ToUpper(s[i]));\n            } else {\n                sb.Append(s[i]);\n
    \           }\n        }\n        if (!letters) {\n            return new string(sb.ToString().Reverse().ToArray());\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int n =
    s.Length;\n        char[] res = new char[n];\n        bool used = false;\n        for
    (int i = 0; i < n; i++) {\n            if (Char.IsLetter(s[i])) {\n                used
    = true;\n                res[i] = Char.IsUpper(s[i]) ? Char.ToLower(s[i]) : Char.ToUpper(s[i]);\n
    \           } else res[i] = s[i];\n        }\n        if (!used) {\n            for
    (int i = 0; i < n / 2; i++) {\n                char tmp = res[i];\n                res[i]
    = res[n - i - 1];\n                res[n - i - 1] = tmp;\n            }\n        }\n
    \       return new string(res);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // One
    line solution\n        //return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)) : c).Reverse().ToArray());\n        // \n
    \       // Two-lines solution\n        StringBuilder sb = new StringBuilder();\n
    \       bool isEmpty = true;\n        for (int i = 0; i < s.Length; i++) {\n            char
    currentChar = s[i];\n            if (char.IsLetter(currentChar)) {\n                isEmpty
    = false;\n                if (char.IsUpper(currentChar)) {\n                    sb.Append(char.ToLower(currentChar));\n
    \               } else {\n                    sb.Append(char.ToUpper(currentChar));\n
    \               }\n            } else {\n                sb.Append(currentChar);\n
    \           }\n        }\n        if (isEmpty) {\n            sb.Append(new string(sb.ToString().Reverse().ToArray()));\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <471f56eba33d4dd0b079694c4c399053>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <471f56eba33d4dd0b079694c4c399053>:0
    \n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        bool hasLetter = false;\n        for (int i
    = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                sb.Append(char.IsUpper(s[i])
    ? char.ToLower(s[i]) : char.ToUpper(s[i]));\n                hasLetter = true;\n
    \           } else {\n                sb.Append(s[i]);\n            }\n        }\n
    \       return hasLetter ? sb.ToString() : new string(sb.ToString().Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6d005d4aa444f2987689ff9d8b00b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6d005d4aa444f2987689ff9d8b00b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var letters
    = \"abcdefghijklmnopqrstuvwxyz\";\n        var lettersUpper = letters.ToUpper();\n
    \       var lettersUpperIndex = lettersUpper.Select((letter, index) =>\n                new
    { letter, index }).ToDictionary(item => item.letter, item => item.index);\n        bool
    containsLetter = false;\n        for (int i = 0; i < s.Length; i++) {\n            if
    (letters.Contains(s[i]) || lettersUpper.Contains(s[i])) {\n                containsLetter
    = true;\n                break;\n            }\n        }\n        var sb = new
    StringBuilder();\n        if (containsLetter) {\n            for (int i = 0; i
    < s.Length; i++) {\n                if (letters.Contains(s[i])) {\n                    sb.Append(lettersUpper[letters.IndexOf(s[i])]);\n
    \               } else if (lettersUpper.Contains(s[i])) {\n                    sb.Append(letters[lettersUpperIndex[s[i]]]);\n
    \               } else {\n                    sb.Append(s[i]);\n                }\n
    \           }\n        } else {\n            sb.Append(s.Reverse());\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1991ded770c0450e957de6c9884fe684>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1991ded770c0450e957de6c9884fe684>:0
    \n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool flag
    = false;\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i])) {\n                sb.Append(Char.IsUpper(s[i])
    ? Char.ToLower(s[i]) : Char.ToUpper(s[i]));\n                flag = true;\n            }
    else {\n                sb.Append(s[i]);\n            }\n        }\n        return
    flag ? sb.ToString() : new string(sb.ToString().Reverse().ToArray());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015872
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var lowerCase
    = new HashSet<char>(\"abcdefghijklmnopqrstuvwxyz\");\n        var upperCase =
    new HashSet<char>(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        var letters = s.ToCharArray().Where(c
    => lowerCase.Contains(c) || upperCase.Contains(c));\n        var newString = new
    StringBuilder();\n        foreach (var c in letters) {\n            newString.Append(upperCase.Contains(c)
    ? lowerCase.Contains(c) ? c : c.ToString().ToLower() : c.ToString().ToUpper());\n
    \       }\n        return letters.Count() == 0 ? s.Reverse().ToString() : newString.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wv_h_ud.cs(27,54): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''char'' and ''string''

    '
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isDigit
    = true;\n        foreach (char c in s) {\n            if (!Char.IsDigit(c)) {\n
    \               isDigit = false;\n                break;\n            }\n        }\n
    \       if (isDigit) {\n            return new string(s.Reverse().ToArray());\n
    \       }\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                if (Char.IsUpper(s[i])) {\n                    s = s.Remove(i,
    1).Insert(i, Char.ToLower(s[i]).ToString());\n                } else {\n                    s
    = s.Remove(i, 1).Insert(i, Char.ToUpper(s[i]).ToString());\n                }\n
    \           }\n        }\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7496a182f114f129b9d901cda847f0a>:0
    \n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        //>>> s
    = \"a\"\n        //>>> s[0]\n        //'a'\n        //>>> s[0].lower()\n        //'a'\n
    \       //>>> s[0].lower() == s[0]\n        //True\n        //>>> s[0].upper()\n
    \       //'A'\n        //>>> s[0].upper() == s[0]\n        //False\n        for
    (int i = 0; i < s.Length; i++) {\n            if (s[i].ToString().ToLower() ==
    s[i].ToString()) {\n                s = s.Substring(0, i) + s[i].ToString().ToUpper()
    + s.Substring(i + 1);\n            } else {\n                s = s.Substring(0,
    i) + s[i].ToString().ToLower() + s.Substring(i + 1);\n            }\n        }\n
    \       return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <940d3f5d5aa54061a6687bfef3a25673>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <940d3f5d5aa54061a6687bfef3a25673>:0
    \n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))
    return s;\n        StringBuilder builder = new StringBuilder();\n        bool
    hasLetters = false;\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            if (char.IsLetter(c)) {\n                hasLetters = true;\n
    \               builder.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n
    \           } else {\n                builder.Append(c);\n            }\n        }\n
    \       return hasLetters ? builder.ToString() : new string(builder.ToString().Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    new string(s.Select(ch => {\n            if (char.IsLetter(ch))\n                return
    char.IsUpper(ch) ? char.ToLower(ch) : char.ToUpper(ch);\n            return ch;\n
    \       }).Reverse().ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21e07c4b91046d38e269594c70ae3a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21e07c4b91046d38e269594c70ae3a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    r = \"\";\n        foreach (char c in s) {\n            if (Char.IsLetter(c))
    {\n                r += Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c);\n
    \           } else {\n                r += c;\n            }\n        }\n        if
    (r.Length != s.Length) {\n            return new string(r.Reverse().ToArray());\n
    \       }\n        return r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdc8fdcfb3004639b09fbadbed280038>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdc8fdcfb3004639b09fbadbed280038>:0
    \n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <33ebfc8d80ca4c4caa136830ea5ab291>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <33ebfc8d80ca4c4caa136830ea5ab291>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO:
    Implement your solution.\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06fcd2a2dc3c4a66b37779e098759132>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06fcd2a2dc3c4a66b37779e098759132>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        if (!s.Any(Char.IsLetter))\n            sb.Append(s.Reverse());\n
    \       else {\n            foreach (char c in s) {\n                if (Char.IsLetter(c))\n
    \                   sb.Append(Char.IsLower(c) ? Char.ToUpper(c) : Char.ToLower(c));\n
    \               else\n                    sb.Append(c);\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e5176288e784083958a888ef69a36fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e5176288e784083958a888ef69a36fc>:0
    \n"
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(char.IsLetter))
    {\n            var res = s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c) : c);\n            return new string(res.ToArray());\n        }
    else {\n            var res = s.Reverse();\n            return new string(res.ToArray());\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015872
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (HasNoLetters(s))\n
    \           return new string(s.Reverse().ToArray());\n        return new string(s.Select(c
    => {\n            if (char.IsLetter(c))\n                return char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c);\n            return c;\n        }).ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbzx8itfp.cs(22,13): error CS0103: The name ''HasNoLetters'' does not exist
    in the current context

    '
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var hasLetter
    = false;\n        var chars = s.ToCharArray();\n        for (int i = 0; i < chars.Length;
    i++) {\n            if (Char.IsLetter(chars[i])) {\n                hasLetter
    = true;\n                chars[i] = Char.IsUpper(chars[i]) ? Char.ToLower(chars[i])
    : Char.ToUpper(chars[i]);\n            }\n        }\n        if (!hasLetter) {\n
    \           for (int i = 0; i < chars.Length / 2; i++) {\n                var
    temp = chars[i];\n                chars[i] = chars[chars.Length - i - 1];\n                chars[chars.Length
    - i - 1] = temp;\n            }\n        }\n        return new string(chars);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015872
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <c51ecd8bb6224dada50a55d84cd08a7a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <c51ecd8bb6224dada50a55d84cd08a7a>:0
    \n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    new string(s.Select(x => char.IsLetter(x) ? char.IsUpper(x) ? char.ToLower(x)
    : char.ToUpper(x) : x).Reverse().ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e23f0acb16164b94a3841c5143f8d1c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e23f0acb16164b94a3841c5143f8d1c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool isUp
    = false;\n        bool isLow = false;\n        bool isDigit = false;\n        bool
    isChar = false;\n        var ca = s.ToCharArray();\n        for (int i = 0; i
    < ca.Length; i++) {\n            if (ca[i] >= 'a' && ca[i] <= 'z') {\n                isLow
    = true;\n            } else if (ca[i] >= 'A' && ca[i] <= 'Z') {\n                isUp
    = true;\n            } else if (ca[i] >= '0' && ca[i] <= '9') {\n                isDigit
    = true;\n            } else {\n                isChar = true;\n            }\n
    \       }\n        string r = \"\";\n        if (isLow && isUp) {\n            for
    (int i = 0; i < ca.Length; i++) {\n                if (ca[i] >= 'a' && ca[i] <=
    'z') {\n                    r += ca[i].ToString().ToUpper();\n                }
    else if (ca[i] >= 'A' && ca[i] <= 'Z') {\n                    r += ca[i].ToString().ToLower();\n
    \               } else {\n                    r += ca[i].ToString();\n                }\n
    \           }\n        } else if (isDigit && isChar) {\n            r = new string(ca.Reverse().ToArray());\n
    \       } else {\n            r = s;\n        }\n        return r;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df9ea1f36c9249afaa641b207ecbc21b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df9ea1f36c9249afaa641b207ecbc21b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    ret = new char[s.Length];\n        int i = 0;\n        foreach (char c in s) {\n
    \           ret[i++] = char.IsLetter(c) ? (char.IsUpper(c) ? char.ToLower(c) :
    char.ToUpper(c)) : c;\n        }\n        Array.Reverse(ret);\n        return
    new string(ret);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94cf567b9bd34aa48249165852afc978>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94cf567b9bd34aa48249165852afc978>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int n =
    s.Length;\n        bool containLetter = false;\n        StringBuilder sb = new
    StringBuilder();\n        for (int i = 0; i < n; i++) {\n            if (char.IsLetter(s[i]))
    {\n                containLetter = true;\n                if (char.IsUpper(s[i]))
    {\n                    sb.Append(char.ToLower(s[i]));\n                } else
    {\n                    sb.Append(char.ToUpper(s[i]));\n                }\n            }
    else {\n                sb.Append(s[i]);\n            }\n        }\n        if
    (!containLetter) {\n            char[] carr = sb.ToString().ToCharArray();\n            Array.Reverse(carr);\n
    \           return new string(carr);\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(x
    => char.IsLetter(x))) {\n            return new string(s.Select(x => char.IsLetter(x)
    ? \n                char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x) : x).ToArray());\n
    \       } else {\n            return new string(s.Reverse().ToArray());\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here.\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5396c2caacc943c895cbe05dd032545e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5396c2caacc943c895cbe05dd032545e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool has_letters
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))
    {\n                has_letters = true;\n                break;\n            }\n
    \       }\n        if (!has_letters) {\n            return new string(s.Reverse().ToArray());\n
    \       }\n        StringBuilder builder = new StringBuilder();\n        for (int
    i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                if
    (char.IsUpper(s[i])) {\n                    builder.Append(char.ToLower(s[i]));\n
    \               } else {\n                    builder.Append(char.ToUpper(s[i]));\n
    \               }\n            } else {\n                builder.Append(s[i]);\n
    \           }\n        }\n        return builder.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool a
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))
    {\n                a = true;\n                break;\n            }\n        }\n
    \       if (a) {\n            StringBuilder sb = new StringBuilder();\n            for
    (int i = 0; i < s.Length; i++) {\n                if (char.IsLower(s[i])) {\n
    \                   sb.Append(char.ToUpper(s[i]));\n                } else if
    (char.IsUpper(s[i])) {\n                    sb.Append(char.ToLower(s[i]));\n                }
    else {\n                    sb.Append(s[i]);\n                }\n            }\n
    \           return sb.ToString();\n        } else {\n            return new string(s.Reverse().ToArray());\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <7176bc9c8a10421ea531777c91f55748>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <7176bc9c8a10421ea531777c91f55748>:0 \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool found
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                found = true;\n                if (Char.IsUpper(s[i])) {\n
    \                   s = s.Substring(0, i) + Char.ToLower(s[i]) + s.Substring(i
    + 1);\n                } else {\n                    s = s.Substring(0, i) + Char.ToUpper(s[i])
    + s.Substring(i + 1);\n                }\n            }\n        }\n        if
    (!found) {\n            return new string(s.Reverse().ToArray());\n        }\n
    \       return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    new string(s.Select(x => char.IsLetter(x) ? \n                                char.IsUpper(x)
    ? char.ToLower(x) : char.ToUpper(x) : x)\n                          .Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d9cdc04b74c43a4a49eec89ae271129>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d9cdc04b74c43a4a49eec89ae271129>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Where(c
    => char.IsLetter(c)).Count() == 0)\n            return new string(s.Reverse().ToArray());\n
    \       else {\n            string r = \"\";\n            foreach (char c in s)
    {\n                if (char.IsLetter(c)) {\n                    if (char.IsUpper(c))\n
    \                       r += char.ToLower(c);\n                    else\n                        r
    += char.ToUpper(c);\n                }\n                else\n                    r
    += c;\n            }\n            return r;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <33ebfc8d80ca4c4caa136830ea5ab291>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <33ebfc8d80ca4c4caa136830ea5ab291>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    new string(s.Select(c => Char.IsLetter(c) ? (Char.IsUpper(c) ? Char.ToLower(c)
    : Char.ToUpper(c)) : c).Reverse().ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acce1edf1d8b41a7bd4f331adb8f4912>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acce1edf1d8b41a7bd4f331adb8f4912>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code is here...\n        int length = s.Length;\n        char[] s_char = s.ToCharArray();\n
    \       int i = 0;\n        bool has_letter = false;\n        while (i < length
    && !has_letter) {\n            if (char.IsLetter(s_char[i])) {\n                has_letter
    = true;\n            }\n            i++;\n        }\n        if (has_letter) {\n
    \           for (int j = 0; j < length; j++) {\n                if (char.IsLetter(s_char[j]))
    {\n                    if (char.IsUpper(s_char[j])) {\n                        s_char[j]
    = char.ToLower(s_char[j]);\n                    } else {\n                        s_char[j]
    = char.ToUpper(s_char[j]);\n                    }\n                }\n            }\n
    \       } else {\n            for (int j = 0; j < length / 2; j++) {\n                char
    temp = s_char[j];\n                s_char[j] = s_char[length - j - 1];\n                s_char[length
    - j - 1] = temp;\n            }\n        }\n        return new string(s_char);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.All(char.IsLetter))
    {\n            return new string(s.Select(x => char.IsUpper(x) ? char.ToLower(x)
    : char.ToUpper(x)).ToArray());\n        }\n        else {\n            return
    new string(s.Reverse().ToArray());\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cccada5d6ef43e88572839adc25a953>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cccada5d6ef43e88572839adc25a953>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    solution here\n        bool no_letters = true;\n        var result = new StringBuilder();\n
    \       foreach (var c in s) {\n            if (char.IsLetter(c)) {\n                result.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n                no_letters = false;\n            }
    else {\n                result.Append(c);\n            }\n        }\n        if
    (no_letters) {\n            return new string(result.ToString().Reverse().ToArray());\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    result = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n
    \           if (char.IsLetter(s[i])) {\n                result.Append(char.IsUpper(s[i])
    ? char.ToLower(s[i]) : char.ToUpper(s[i]));\n            } else {\n                result.Append(s[i]);\n
    \           }\n        }\n        if (result.ToString().All(x => !char.IsLetter(x)))
    {\n            return new string(result.ToString().Reverse().ToArray());\n        }\n
    \       return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int n =
    s.Length;\n        var str = s.ToList();\n        bool letterFound = false;\n
    \       for (int i = 0; i < n; i++) {\n            if (char.IsLetter(str[i]))
    {\n                letterFound = true;\n                if (char.IsUpper(str[i]))
    {\n                    str[i] = char.ToLower(str[i]);\n                } else
    {\n                    str[i] = char.ToUpper(str[i]);\n                }\n            }\n
    \       }\n        if (!letterFound) {\n            return new string(str.Reverse().ToArray());\n
    \       }\n        return new string(str.ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiyk7mwgi.cs(36,44): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    chars = s.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n            if
    (char.IsLetter(chars[i])) {\n                chars[i] = char.IsUpper(chars[i])
    ? char.ToLower(chars[i]) : char.ToUpper(chars[i]);\n            }\n        }\n
    \       return chars.Length > 0 ? new string(chars) : new string(chars.Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cc3362b660240aba77db1f100efcf57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cc3362b660240aba77db1f100efcf57>:0
    \n"
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        //replace
    all letters\n        var map = new Dictionary<char, char>()\n        {\n            {'a',
    'A'},\n            {'b', 'B'},\n            {'c', 'C'},\n            {'d', 'D'},\n
    \           {'e', 'E'},\n            {'f', 'F'},\n            {'g', 'G'},\n            {'h',
    'H'},\n            {'i', 'I'},\n            {'j', 'J'},\n            {'k', 'K'},\n
    \           {'l', 'L'},\n            {'m', 'M'},\n            {'n', 'N'},\n            {'o',
    'O'},\n            {'p', 'P'},\n            {'q', 'Q'},\n            {'r', 'R'},\n
    \           {'s', 'S'},\n            {'t', 'T'},\n            {'u', 'U'},\n            {'v',
    'V'},\n            {'w', 'W'},\n            {'x', 'X'},\n            {'y', 'Y'},\n
    \           {'z', 'Z'},\n            {'A', 'a'},\n            {'B', 'b'},\n            {'C',
    'c'},\n            {'D', 'd'},\n            {'E', 'e'},\n            {'F', 'f'},\n
    \           {'G', 'g'},\n            {'H', 'h'},\n            {'I', 'i'},\n            {'J',
    'j'},\n            {'K', 'k'},\n            {'L', 'l'},\n            {'M', 'm'},\n
    \           {'N', 'n'},\n            {'O', 'o'},\n            {'P', 'p'},\n            {'Q',
    'q'},\n            {'R', 'r'},\n            {'S', 's'},\n            {'T', 't'},\n
    \           {'U', 'u'},\n            {'V', 'v'},\n            {'W', 'w'},\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsb6zyxsc.cs(74,6): error CS1002: ; expected

    /tmp/tmpsb6zyxsc.cs(75,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpsb6zyxsc.cs(86,2): error CS1513: } expected

    '
  timestamp: 1660015873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // >>>
    YOUR CODE HERE <<<\n        // check if string has lower case letters\n        int
    count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                count++;\n            }\n        }\n        if (count > 0)
    {\n            string res = \"\";\n            for (int i = 0; i < s.Length; i++)
    {\n                if (Char.IsLetter(s[i])) {\n                    if (Char.IsLower(s[i]))
    {\n                        res += Char.ToUpper(s[i]);\n                    } else
    {\n                        res += Char.ToLower(s[i]);\n                    }\n
    \               } else {\n                    res += s[i];\n                }\n
    \           }\n            return res;\n        } else {\n            char[] arr
    = s.ToCharArray();\n            Array.Reverse(arr);\n            return new string(arr);\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var lower
    = \"abcdefghijklmnopqrstuvwxyz\";\n        var upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n
    \       var ns = \"\";\n        var isLetter = false;\n        foreach (var c
    in s) {\n            if (lower.Contains(c)) {\n                isLetter = true;\n
    \               ns += c.ToString().ToUpper();\n            } else if (upper.Contains(c))
    {\n                isLetter = true;\n                ns += c.ToString().ToLower();\n
    \           } else {\n                ns += c;\n            }\n        }\n        if
    (isLetter) {\n            return ns;\n        } else {\n            return new
    string(ns.Reverse().ToArray());\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        bool hasLetters = false;\n        for (int i = 0; i <
    s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                hasLetters
    = true;\n                if (char.IsUpper(s[i])) {\n                    result
    += char.ToLower(s[i]);\n                } else {\n                    result +=
    char.ToUpper(s[i]);\n                }\n            } else {\n                result
    += s[i];\n            }\n        }\n        if (!hasLetters) {\n            result
    = new string(result.Reverse().ToArray());\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6d005d4aa444f2987689ff9d8b00b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6d005d4aa444f2987689ff9d8b00b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <7176bc9c8a10421ea531777c91f55748>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <7176bc9c8a10421ea531777c91f55748>:0 \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        int dif = 'a' - 'A';\n        bool hasLetter
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] >=
    'a' && s[i] <= 'z') {\n                sb.Append((char)(s[i] - dif));\n                hasLetter
    = true;\n            } else if (s[i] >= 'A' && s[i] <= 'Z') {\n                sb.Append((char)(s[i]
    + dif));\n                hasLetter = true;\n            } else {\n                sb.Append(s[i]);\n
    \           }\n        }\n        if (!hasLetter) {\n            return new string(sb.ToString().Reverse().ToArray());\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // If the
    string contains no letters, reverse the string.\n        if (s.Any(c => char.IsLetter(c)))
    {\n            return string.Concat(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c) : c));\n        } else {\n            var
    arr = s.ToCharArray();\n            Array.Reverse(arr);\n            return new
    string(arr);\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    t = s.ToLower();\n        if (s == t) {\n            t = s.ToUpper();\n        }\n
    \       return t;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <692667f2997b4061b0bdf2c9cbad9e59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <692667f2997b4061b0bdf2c9cbad9e59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    s.Length > 0 && s.Any(c => char.IsLetter(c)) ? string.Concat(s.Select(c => char.IsLetter(c)
    ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c)) : string.Concat(s.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Perform
    the string reversal.\n        var t = \"\";\n        for (int i = s.Length - 1;
    i >= 0; i--) {\n            if (char.IsLetter(s[i])) {\n                t += char.IsUpper(s[i])
    ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n            } else {\n                t
    += s[i];\n            }\n        }\n        return t;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5f273a847a045c8b412139be14395bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5f273a847a045c8b412139be14395bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        bool hasLetter = false;\n        for (int i = 0; i < s.Length;
    i++) {\n            char c = s[i];\n            if (char.IsLetter(c)) {\n                hasLetter
    = true;\n                if (char.IsUpper(c)) {\n                    result +=
    char.ToLower(c);\n                } else {\n                    result += char.ToUpper(c);\n
    \               }\n            } else {\n                result += c;\n            }\n
    \       }\n        if (!hasLetter) {\n            result = new string(result.Reverse().ToArray());\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool hasLetter
    = false;\n        StringBuilder sb = new StringBuilder();\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                sb.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n                hasLetter = true;\n            }
    else {\n                sb.Append(c);\n            }\n        }\n        if (!hasLetter)
    {\n            sb.Reverse();\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6ynjti2.cs(33,16): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    string.Join(\"\", s.Select(x => char.IsLetter(x) ? char.IsUpper(x) ? char.ToLower(x)
    : char.ToUpper(x) : x));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5409fe612ae4430c90c77a933c434053>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5409fe612ae4430c90c77a933c434053>:0
    \n"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0f86t159.cs(21,26): error CS0161: ''Problem.Solve(string)'': not all code
    paths return a value

    '
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // >>>>>
    The solution begins here <<<<<\n        return s;\n        // >>>>> The solution
    ends here <<<<<\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccb4a077110b451caeda6a46ea89bb9d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccb4a077110b451caeda6a46ea89bb9d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var letters
    = s.Where(c => char.IsLetter(c)).ToArray();\n        if (letters.Length == 0)
    {\n            return new string(s.Reverse().ToArray());\n        } else {\n            var
    t = new StringBuilder();\n            foreach (var c in s) {\n                t.Append(char.IsLetter(c)
    ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c);\n            }\n            return
    t.ToString();\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool is_letter
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                is_letter = true;\n                break;\n            }\n
    \       }\n        var str = is_letter ? s.Select(x => Char.IsLetter(x) ? (Char.IsUpper(x)
    ? Char.ToLower(x) : Char.ToUpper(x)) : x) : s.Reverse();\n        return new string(str.ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Where(e
    => Char.IsLetter(e)).Count() == 0) {\n            return new string(s.Reverse().ToArray());\n
    \       } else {\n            var c = s.ToCharArray();\n            for (int i
    = 0; i < c.Length; i++) {\n                if (Char.IsLetter(c[i])) {\n                    c[i]
    = Char.IsUpper(c[i]) ? Char.ToLower(c[i]) : Char.ToUpper(c[i]);\n                }\n
    \           }\n            return new string(c);\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool changed
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                changed = true;\n                if (Char.IsUpper(s[i])) {\n
    \                   s = s.Substring(0, i) + s[i].ToString().ToLower() + s.Substring(i
    + 1);\n                } else {\n                    s = s.Substring(0, i) + s[i].ToString().ToUpper()
    + s.Substring(i + 1);\n                }\n            }\n        }\n        if
    (!changed) {\n            char[] chars = s.ToCharArray();\n            Array.Reverse(chars);\n
    \           s = new string(chars);\n        }\n        return s;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var sb
    = new StringBuilder();\n        bool hasLetters = false;\n        for (int i =
    0; i < s.Length; i++) {\n            var c = s[i];\n            var cUpper = char.ToUpper(c);\n
    \           if (cUpper == c) {\n                sb.Append(char.ToLower(c));\n
    \           } else {\n                sb.Append(cUpper);\n                hasLetters
    = true;\n            }\n        }\n        if (!hasLetters) {\n            return
    new string(sb.ToString().Reverse().ToArray());\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            if (c >= 'a' && c
    <= 'z') {\n                result += (char)('A' + (c - 'a'));\n            } else
    if (c >= 'A' && c <= 'Z') {\n                result += (char)('a' + (c - 'A'));\n
    \           } else {\n                result += c;\n            }\n        }\n
    \       return new string(result.Reverse().ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aba9e7d1854343589c2592a8a9444601>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aba9e7d1854343589c2592a8a9444601>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(char.IsLetter))\n
    \           return string.Concat(s.Select(c => char.IsLetter(c) ?\n                char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c) : c));\n        else return new string(s.Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        var isLetter = false;\n        foreach (var c in s) {\n
    \           if (Char.IsLetter(c)) {\n                isLetter = true;\n                if
    (Char.IsUpper(c)) {\n                    result += Char.ToLower(c);\n                }
    else {\n                    result += Char.ToUpper(c);\n                }\n            }
    else {\n                result += c;\n            }\n        }\n        if (!isLetter)
    {\n            result = new string(result.Reverse().ToArray());\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var cont
    = false;\n        var st = \"\";\n        foreach (var c in s) {\n            if
    (Char.IsLetter(c)) {\n                st += Char.IsUpper(c) ? Char.ToLower(c)
    : Char.ToUpper(c);\n                cont = true;\n            } else st += c;\n
    \       }\n        return cont ? st : new string(st.Reverse().ToArray());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <596766e03a4445718bbedcb364afe7d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <596766e03a4445718bbedcb364afe7d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b702a930d54a41378cdef726b82a5502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    letters = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            if (c.IsLetter()) {\n                letters += c;\n            }\n
    \       }\n        if (letters.Length == 0) {\n            return new string(s.Reverse().ToArray());\n
    \       }\n        StringBuilder result = new StringBuilder();\n        int j
    = 0;\n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n
    \           if (c.IsLetter()) {\n                if (c.IsUpper()) {\n                    result.Append(letters[j].ToLower());\n
    \               } else {\n                    result.Append(letters[j].ToUpper());\n
    \               }\n                j++;\n            } else {\n                result.Append(c);\n
    \           }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp37ylmzmg.cs(25,19): error CS1501: No overload for method ''IsLetter''
    takes 0 arguments

    /tmp/tmp37ylmzmg.cs(36,19): error CS1501: No overload for method ''IsLetter''
    takes 0 arguments

    /tmp/tmp37ylmzmg.cs(37,23): error CS1501: No overload for method ''IsUpper'' takes
    0 arguments

    /tmp/tmp37ylmzmg.cs(38,46): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmp37ylmzmg.cs(40,46): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    '
  timestamp: 1660015874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (!s.Any(char.IsLetter))
    {\n            char[] str = s.ToCharArray();\n            Array.Reverse(str);\n
    \           return new string(str);\n        }\n        string result = \"\";\n
    \       foreach (char c in s) {\n            result += char.IsLetter(c) ? char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c) : c;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code here.\n        var res = new string(s.ToCharArray().Reverse().ToArray());\n
    \       for (int i = 0; i < res.Length; i++) {\n            if (char.IsLetter(res[i]))
    {\n                res = res.Remove(i, 1).Insert(i, char.IsUpper(res[i]) ? char.ToLower(res[i]).ToString()
    : char.ToUpper(res[i]).ToString());\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dc94ded371b4803ae7de0ede60e3a5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dc94ded371b4803ae7de0ede60e3a5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <33ebfc8d80ca4c4caa136830ea5ab291>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <33ebfc8d80ca4c4caa136830ea5ab291>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code goes here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ee1dca9b93a419699d42e3eeedc703c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ee1dca9b93a419699d42e3eeedc703c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(Char.IsLetter))
    {\n            return new string(s.Select(x => Char.IsLetter(x) ? (Char.IsUpper(x)
    ? Char.ToLower(x) : Char.ToUpper(x)) : x).ToArray());\n        } else {\n            return
    new string(s.Reverse().ToArray());\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO:
    implementation here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74b94a1b78ed4cfa94b598992201dfb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74b94a1b78ed4cfa94b598992201dfb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Any(c
    => char.IsLetter(c))) {\n            return string.Concat(s.Select(c => char.IsLetter(c)
    ? \n                char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c));\n
    \       } else {\n            return new string(s.Reverse().ToArray());\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    Code Here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea538e9670644dcea7b7d8b74f62d3b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea538e9670644dcea7b7d8b74f62d3b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    r = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))\n
    \               r += char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n
    \           else\n                r += s[i];\n        }\n        return r.Length
    == 0 ? s : r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70bca8e6eec84d438e566b1dfbfeb52e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70bca8e6eec84d438e566b1dfbfeb52e>:0
    \n"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.All(ch
    => !char.IsLetter(ch))) {\n            return Reverse(s);\n        }\n        var
    result = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            if
    (char.IsLetter(s[i])) {\n                result[i] = char.IsUpper(s[i]) ? char.ToLower(s[i])
    : char.ToUpper(s[i]);\n            } else {\n                result[i] = s[i];\n
    \           }\n        }\n        return new string(result);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqtdci12w.cs(23,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660015875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        bool containsLetter = false;\n        foreach
    (char c in s) {\n            if (Char.IsLetter(c)) {\n                sb.Append(Char.IsUpper(c)
    ? Char.ToLower(c) : Char.ToUpper(c));\n                containsLetter = true;\n
    \           } else {\n                sb.Append(c);\n            }\n        }\n
    \       if (!containsLetter) {\n            sb.Reverse();\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph71pog75.cs(33,16): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // The
    solution can be easily achieved by checking each character \n        // in the
    string and then reversing its case.\n        // The string can be reversed by
    subtracting (or adding) \n        // the difference between upper and lower case
    letters.\n        // For example, 'A' - 'a' = 32, so 'a' + 32 = 'A'.\n        //
    This loop will take O(n) time.\n        StringBuilder ans = new StringBuilder();\n
    \       bool hasLetter = false;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                hasLetter = true;\n                if (char.IsUpper(c))
    {\n                    ans.Append(char.ToLower(c));\n                } else {\n
    \                   ans.Append(char.ToUpper(c));\n                }\n            }
    else {\n                ans.Append(c);\n            }\n        }\n        // If
    the string does not contain any letters, we can reverse the string.\n        //
    This will take O(n) time.\n        if (!hasLetter) {\n            ans.Reverse();\n
    \       }\n        return ans.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphrn6fhgt.cs(45,17): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var r =
    new StringBuilder();\n        var letters = false;\n        for (int i = 0; i
    < s.Length; i++) {\n            if (s[i] >= 'a' && s[i] <= 'z') {\n                letters
    = true;\n                r.Append((char)(s[i] - 'a' + 'A'));\n            } else
    if (s[i] >= 'A' && s[i] <= 'Z') {\n                letters = true;\n                r.Append((char)(s[i]
    - 'A' + 'a'));\n            } else {\n                r.Append(s[i]);\n            }\n
    \       }\n        if (!letters) {\n            return r.ToString().Reverse().ToString();\n
    \       }\n        return r.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f41acbf1f5450191c1fc7a2013e5bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f41acbf1f5450191c1fc7a2013e5bb>:0
    \n"
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // TODO\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90f980bc47df48a68338fabbcb440d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90f980bc47df48a68338fabbcb440d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Your
    code goes here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnk96istt.cs(21,26): error CS0161: ''Problem.Solve(string)'': not all code
    paths return a value

    '
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    t = \"\";\n        if (s.Any(x => char.IsLetter(x))) {\n            t = new string(s.Select(x
    => char.IsLetter(x) ? (char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)) :
    x).ToArray());\n        } else {\n            t = new string(s.Reverse().ToArray());\n
    \       }\n        return t;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        char[]
    a = s.ToCharArray();\n        for (int i = 0; i < a.Length; i++) {\n            if
    (char.IsLetter(a[i])) {\n                a[i] = char.IsUpper(a[i]) ? char.ToLower(a[i])
    : char.ToUpper(a[i]);\n            }\n        }\n        return string.Concat(a);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3ab270228e5462ca6a0d2e686361c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3ab270228e5462ca6a0d2e686361c4a>:0
    \n"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // The
    first approach that comes to mind is to use the standard library\n        // by
    using the char.IsLetter(char) and char.ToUpper(char) \n        // and char.ToLower(char)
    functions, but we want to avoid that,\n        // so we will use some bitwise
    operations to achieve this.\n        // First, we need to create a function that
    checks if a character is a letter.\n        // The ASCII values for capital letters
    are from 65 to 90,\n        // and for small letters are from 97 to 122,\n        //
    which means that if we subtract 32 from a capital letter, \n        // we get
    a small letter. So, what we will do is convert every letter\n        // to its
    respective small letter and then check if it's a small letter.\n        // That
    way, we don't have to hardcode the boundaries of the letters.\n        // Let's
    build this function now.\n        bool IsLetter(char c) {\n            // c -
    'A' => ('a' - 'A') = ('a' + 'A') => ('a' & 'A') = 0\n            // c - 'a' =>
    ('A' - 'a') = ('A' + 'a') = ('A' & 'a') = 2\n            // c - '0' => ('9' -
    '0') = ('9' + '0') = ('9' & '0') = 8\n            // c - '9' => ('0' - '9') =
    ('0' + '9') = ('0' & '9') = 1\n            int d = (c - 'a') & ' ';\n            //
    If it's a letter, d = 2. Otherwise, d = 0.\n            return d == 2;\n        }\n
    \       // Now we need to create a function that will reverse a character's case.\n
    \       // We only need to check if a character is a letter and then\n        //
    subtract 32 from it if it's a capital letter or add 32 to it if it's a small letter.\n
    \       char ReverseCase(char c) {\n            if (IsLetter(c)) {\n                //
    If a character is a letter, we can just add 32 to it if it's\n                //
    a capital letter or subtract 32 from it if it's a small letter.\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7sx1fel8.cs(52,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp7sx1fel8.cs(63,2): error CS1513: } expected

    '
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s))
    {\n            return string.Empty;\n        }\n        string reverse = string.Empty;\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))
    {\n                reverse += char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n
    \           } else {\n                reverse += s[i];\n            }\n        }\n
    \       return string.IsNullOrEmpty(reverse) ? new string(s.Reverse().ToArray())
    : reverse;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ca04d9fa66842ce981e5721098953ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ca04d9fa66842ce981e5721098953ba>:0
    \n"
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var hasLetters
    = false;\n        var sb = new StringBuilder();\n        foreach (var c in s)
    {\n            if (char.IsLetter(c)) {\n                hasLetters = true;\n                sb.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        return hasLetters ? sb.ToString() : new string(s.Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool has_a_letter
    = false;\n        char[] chs = s.ToCharArray();\n        for (int i = 0; i < chs.Length;
    i++) {\n            if (char.IsLetter(chs[i])) {\n                has_a_letter
    = true;\n                if (char.IsUpper(chs[i]))\n                    chs[i]
    = char.ToLower(chs[i]);\n                else\n                    chs[i] = char.ToUpper(chs[i]);\n
    \           }\n        }\n        if (!has_a_letter)\n            Array.Reverse(chs);\n
    \       return new string(chs);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    result = \"\";\n        //if (s.Any(char.IsLetter))\n        if (s.Any(char.IsLetter))\n
    \           result = new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray());\n        else\n            result
    = new string(s.Reverse().ToArray());\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int changes
    = 0;\n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n
    \           if (char.IsLetter(c)) {\n                changes++;\n                if
    (char.IsUpper(c)) {\n                    s = s.Substring(0, i) + char.ToLower(c)
    + s.Substring(i + 1);\n                } else {\n                    s = s.Substring(0,
    i) + char.ToUpper(c) + s.Substring(i + 1);\n                }\n            }\n
    \       }\n        if (changes == 0) {\n            return new string(s.Reverse().ToArray());\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        //put your
    code here\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56a34286b234425da947bbe3ab13811e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56a34286b234425da947bbe3ab13811e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5b73f76aefa45d6982d1deaf0dcf079>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5b73f76aefa45d6982d1deaf0dcf079>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        var str
    = s.Select(x => Char.IsLetter(x) ? (Char.IsUpper(x) ? \n                                                        (Char)Char.ToLower(x)
    : \n                                                        (Char)Char.ToUpper(x))
    : \n                                                    x).Reverse().ToArray();\n
    \       return new string(str);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89187e8d89664b34a39b75254cbe078e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89187e8d89664b34a39b75254cbe078e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int len
    = s.Length;\n        string res = new string(s.Reverse().ToArray());\n        if
    (res.All(c => !char.IsLetter(c))) {\n            return res;\n        }\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            if
    (char.IsLetter(res[i])) {\n                sb.Append(char.IsUpper(res[i]) ? char.ToLower(res[i])
    : char.ToUpper(res[i]));\n            } else {\n                sb.Append(res[i]);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b66d0d3a7a82405398fae56bd519bb56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b66d0d3a7a82405398fae56bd519bb56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int cnt
    = 0;\n        for (int i = 0; i < s.Length; i++)\n            if (char.IsLetter(s[i]))
    cnt++;\n        if (cnt == 0) return new string(s.Reverse().ToArray());\n        char[]
    ret = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            if
    (char.IsLetter(s[i])) {\n                ret[i] = char.IsUpper(s[i]) ? char.ToLower(s[i])
    : char.ToUpper(s[i]);\n            } else ret[i] = s[i];\n        }\n        return
    new string(ret);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Add
    your solution here\n        char[] sToChar = s.ToCharArray();\n        for (int
    i = 0; i < sToChar.Length; i++) {\n            if (sToChar[i] >= 'a' && sToChar[i]
    <= 'z') {\n                sToChar[i] = (char)(sToChar[i] - 32);\n            }
    else if (sToChar[i] >= 'A' && sToChar[i] <= 'Z') {\n                sToChar[i]
    = (char)(sToChar[i] + 32);\n            }\n        }\n        string ans = new
    string(sToChar);\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d720c2b77af644d988cffd955bf1ca94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d720c2b77af644d988cffd955bf1ca94>:0
    \n"
  stdout: ''
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        // Fill
    in the code here.\n        var letters = s.Where(c => Char.IsLetter(c)).ToArray();\n
    \       if (letters.Length == 0) {\n            return new string(s.Reverse().ToArray());\n
    \       } else {\n            var result = new StringBuilder();\n            foreach
    (var c in s) {\n                if (Char.IsLetter(c)) {\n                    result.Append(Char.IsUpper(c)
    ? Char.ToLower(c) : Char.ToUpper(c));\n                } else {\n                    result.Append(c);\n
    \               }\n            }\n            return result.ToString();\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        bool hasLetter
    = false;\n        var sb = new StringBuilder();\n        foreach (var c in s)
    {\n            if (char.IsLetter(c)) {\n                hasLetter = true;\n                sb.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        if (!hasLetter) {\n            return Reverse(sb.ToString());\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprwdyeyr0.cs(33,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s.Length
    == 0) return \"\";\n        bool hasLetter = false;\n        for (int i = 0; i
    < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                hasLetter
    = true;\n                break;\n            }\n        }\n        if (!hasLetter)
    return s.Reverse().ToString();\n        var sb = new StringBuilder();\n        for
    (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (char.IsLetter(c))
    {\n                if (char.IsUpper(c)) {\n                    sb.Append(char.ToLower(c));\n
    \               } else {\n                    sb.Append(char.ToUpper(c));\n                }\n
    \           } else {\n                sb.Append(c);\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7132d737cfe64a93a8c6fa37c26031eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7132d737cfe64a93a8c6fa37c26031eb>:0
    \n"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        string
    str = \"\";\n        bool flag = false;\n        for (int i = 0; i < s.Length;
    i++) {\n            if (char.IsLetter(s[i])) {\n                flag = true;\n
    \               if (char.IsUpper(s[i])) {\n                    str += char.ToLower(s[i]);\n
    \               } else {\n                    str += char.ToUpper(s[i]);\n                }\n
    \           } else {\n                str += s[i];\n            }\n        }\n
    \       if (flag) {\n            return str;\n        } else {\n            return
    Reverse(str);\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxlgqk19i.cs(39,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        StringBuilder
    res = new StringBuilder();\n        int size = s.Length;\n        for (int i =
    0; i < size; i++) {\n            if (s[i] >= 'a' && s[i] <= 'z') {\n                res.Append((char)(s[i]
    - 'a' + 'A'));\n            } else if (s[i] >= 'A' && s[i] <= 'Z') {\n                res.Append((char)(s[i]
    - 'A' + 'a'));\n            } else {\n                res.Append(s[i]);\n            }\n
    \       }\n        return size == 0 ? s : res.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6031a1daa1854b009f63939d696e5a22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6031a1daa1854b009f63939d696e5a22>:0
    \n"
  stdout: ''
  timestamp: 1660015876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n
    \   // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n
    \   // (\"#A@c\")\n    public static string Solve(string s) {\n        int lower_case
    = 0;\n        int upper_case = 0;\n        int other = 0;\n        string s2 =
    s;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] > 96 &&
    s[i] < 123) {\n                lower_case++;\n            } else if (s[i] > 64
    && s[i] < 91) {\n                upper_case++;\n            } else {\n                other++;\n
    \           }\n        }\n        if (other == s.Length) {\n            char[]
    array = s.ToCharArray();\n            Array.Reverse(array);\n            return
    new string(array);\n        }\n        if (lower_case == 0) {\n            return
    s.ToLower();\n        }\n        if (upper_case == 0) {\n            return s.ToUpper();\n
    \       }\n        s2 = \"\";\n        for (int i = 0; i < s.Length; i++) {\n
    \           if (s[i] > 96 && s[i] < 123) {\n                s2 += s[i].ToString().ToUpper();\n
    \           } else if (s[i] > 64 && s[i] < 91) {\n                s2 += s[i].ToString().ToLower();\n
    \           } else {\n                s2 += s[i].ToString();\n            }\n
    \       }\n        return s2;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015876
