language: cs
name: HumanEval_65_circular_shift
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        int n = 0;\n        long tmp = x;\n    \
    \    while (tmp > 0) {\n            n++;\n            tmp /= 10;\n        }\n\
    \        long ret = 0;\n        for (int i = 0; i < n; i++) {\n            ret\
    \ = ret * 10 + (x % 10);\n            x /= 10;\n        }\n        if (shift <\
    \ n) ret = ret / (long)Math.Pow(10, n - shift) + ret % (long)Math.Pow(10, n -\
    \ shift) * (long)Math.Pow(10, shift);\n        return ret.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57abb9d620424722a08a54c2883f0a66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57abb9d620424722a08a54c2883f0a66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976726
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Take\
    \ the number of digits, add shift and modularly reduce by the same to\n      \
    \  // get the right circular shift\n        int digits = x.ToString().Length;\n\
    \        if (shift > digits)\n            return Reverse(x.ToString());\n    \
    \    shift = (shift + digits) % digits;\n        return x.ToString().Substring((int)shift)\
    \ + x.ToString().Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk3qzi04g.cs(21,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            return new\
    \ string(s.Reverse().ToArray());\n        }\n        int l = s.Length;\n     \
    \   return s.Substring(l - (int)shift) + s.Substring(0, l - (int)shift);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04c1f4977d61443498723f880e0c86b7>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ numStr = x.ToString();\n        if (shift >= numStr.Length) {\n            return\
    \ new string(numStr.Reverse().ToArray());\n        }\n        string front = numStr.Substring(0,\
    \ (int) shift);\n        string back = numStr.Substring((int) shift);\n      \
    \  return back + front;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d5c1401c613499eb4a1c26efb87f439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d5c1401c613499eb4a1c26efb87f439>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > x.ToString().Length) {\n            string s = x.ToString();\n           \
    \ char[] charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n\
    \            return new string(charArray);\n        }\n        long pow = 1;\n\
    \        for (int i = 0; i < shift; i++) {\n            pow *= 10;\n        }\n\
    \        return (x % pow).ToString() + (x / pow).ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e981ae61db441629b659d7275dc6162>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e981ae61db441629b659d7275dc6162>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ xs = x.ToString();\n        // If shift >= length of x, reverse.\n        if\
    \ (shift >= xs.Length) {\n            StringBuilder xsb = new StringBuilder(xs);\n\
    \            xsb.Reverse();\n            return xsb.ToString();\n        }\n \
    \       string ys = xs.Substring(0, (int)shift);\n        return xs.Substring((int)shift)\
    \ + ys;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0o8mx5ri.cs(21,17): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        long y = x;\n\
    \        long pow = 1;\n        while (y >= 10) {\n            y /= 10;\n    \
    \        pow *= 10;\n        }\n        return ((x % pow) * 10 + y).ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d64e9986dede454cb6394e61fbcd3745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d64e9986dede454cb6394e61fbcd3745>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ digits = x.ToString().ToCharArray();\n        for (int i = 0; i < shift; i++)\
    \ {\n            char lastDigit = digits[digits.Length - 1];\n            for\
    \ (int j = digits.Length - 1; j > 0; j--) {\n                digits[j] = digits[j\
    \ - 1];\n            }\n            digits[0] = lastDigit;\n        }\n      \
    \  return new string(digits);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <708e55f6f9d548fd959804c3a0eec5b9>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ x_digits = x.ToString().ToCharArray();\n        if (shift >= x_digits.Length)\
    \ {\n            Array.Reverse(x_digits);\n            return new string(x_digits);\n\
    \        }\n        else {\n            char[] y_digits = new char[x_digits.Length];\n\
    \            for (int i = 0; i < x_digits.Length; i++) {\n                int\
    \ y_pos = (i + (int)shift) % x_digits.Length;\n                y_digits[y_pos]\
    \ = x_digits[i];\n            }\n            return new string(y_digits);\n  \
    \      }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bfa781ca63744f89c802b283fcd5509>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return (x.ToString());\n        }\n        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            return (new string(s.Reverse().ToArray()));\n\
    \        }\n        s = s.Substring(s.Length - (int)shift, (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);\n        return (s);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976726
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ y = x / 10;\n        long z = x % 10;\n        for (long i = 0; i < shift; i++)\
    \ {\n            long r = z % 10;\n            long q = z / 10;\n            z\
    \ = y % 10;\n            y = y / 10;\n            x = r * (long)Math.Pow(10, NumberLength(x))\
    \ + x;\n        }\n        return x.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv81cd9rv.cs(24,40): error CS0103: The name ''NumberLength'' does not exist
    in the current context

    '
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift < s.Length) {\n            string prefix\
    \ = s.Substring(0, (int)shift);\n            string suffix = s.Substring((int)shift);\n\
    \            s = suffix + prefix;\n        } else {\n            s = new string(s.Reverse().ToArray());\n\
    \        }\n        return s;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8abfac723cde41089510aacdf905512f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8abfac723cde41089510aacdf905512f>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Longest\
    \ possible number of digits (need to store in long to avoid\n        // overflow\
    \ for really big numbers)\n        long digits = 18;\n        string s = x.ToString();\n\
    \        int len = s.Length;\n        shift = shift % len;\n        string a =\
    \ s.Substring(len - (int)shift);\n        string b = s.Substring(0, len - (int)shift);\n\
    \        return a + b;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b26cbee8c5f4b09a9eeac689be28ba5>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        var digits = s.ToCharArray();\n        Array.Reverse(digits);\n\
    \        if (shift < digits.Length) {\n            // Shift digit array around\n\
    \            var newArr = new char[digits.Length];\n            for (var i = 0;\
    \ i < digits.Length; i++) {\n                newArr[(i + shift) % digits.Length]\
    \ = digits[i];\n            }\n            return new string(newArr);\n      \
    \  } else {\n            return new string(digits);\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e76c26d2af6431ebf870b05187c0f0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e76c26d2af6431ebf870b05187c0f0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976726
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = ListOfDigits(x);\n        shift = shift % digits.Count;\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        var d = digits.Skip((int)shift).ToList();\n\
    \        d.AddRange(digits.Take((int)shift));\n        return string.Join(\"\"\
    , d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqltpgfdh.cs(17,22): error CS0103: The name ''ListOfDigits'' does not exist
    in the current context

    /tmp/tmpqltpgfdh.cs(18,17): error CS0019: Operator ''%'' cannot be applied to
    operands of type ''long'' and ''method group''

    '
  timestamp: 1659976726
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var xs\
    \ = x.ToString();\n        if (shift > xs.Length) {\n            return Reverse(xs);\n\
    \        }\n        var rot = Right(xs, (int)shift);\n        var left = Left(xs,\
    \ xs.Length - (int)shift);\n        return rot + left;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdymg4w8g.cs(19,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    /tmp/tmpdymg4w8g.cs(21,19): error CS0103: The name ''Right'' does not exist in
    the current context

    /tmp/tmpdymg4w8g.cs(22,20): error CS0103: The name ''Left'' does not exist in
    the current context

    '
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int digits\
    \ = (int)Math.Floor(Math.Log10(x) + 1);\n        if (shift > digits) {\n     \
    \       return new string(x.ToString().Reverse().ToArray());\n        }\n    \
    \    string raw = x.ToString();\n        return raw.Substring((int)shift) + raw.Substring(0,\
    \ (int)shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63242b538912474886e5d35057087a0e>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            return string.Join(\"\
    \", s.Reverse());\n        }\n        else {\n            return s.Substring(shift)\
    \ + s.Substring(0, shift);\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcus9por3.cs(22,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpcus9por3.cs(22,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ chars = x.ToString().ToCharArray();\n        long how_many = shift % chars.Length;\n\
    \        if (how_many == 0) return x.ToString();\n        string reversed = new\
    \ string(chars.Reverse().ToArray());\n        return reversed.Substring((int)how_many)\
    \ + reversed.Substring(0, (int)how_many);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b20006b7a534de69257028b89119487>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b20006b7a534de69257028b89119487>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        if (shift > x.ToString().Length) return\
    \ string.Join(\"\", x.ToString().Reverse());\n        var arr = x.ToString().ToCharArray();\n\
    \        Array.Reverse(arr);\n        var y = long.Parse(new string(arr));\n \
    \       var result = (y / (long)Math.Pow(10, shift)) +\n            ((y % (long)Math.Pow(10,\
    \ shift)) * (long)Math.Pow(10, x.ToString().Length - shift));\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93b3dc3e984e4e758450862acd7b72cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93b3dc3e984e4e758450862acd7b72cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        shift = s.Length\
    \ - shift;\n        if (shift == s.Length) return s;\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1d88d6f804c4f1ab35eeb16d1fc37cf>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ shiftX = x.ToString();\n        int len = shiftX.Length;\n        int digits\
    \ = (int) (Math.Log10(x) + 1);\n        if (shift >= digits) {\n            //\
    \ handle more shifts than there are digits\n            return new string(shiftX.Reverse().ToArray());\n\
    \        }\n        // shift digits within the integer\n        string s = \"\"\
    ;\n        s += shiftX.Substring(len - (int) shift);\n        s += shiftX.Substring(0,\
    \ len - (int) shift);\n        return s;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f2032370be04409b05a0b69e4343aee>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        return new string(CircularShift(s.ToCharArray(),\
    \ shift));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3u1abdeq.cs(18,41): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''long''

    '
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            string rs =\
    \ s.ToCharArray().Reverse().Aggregate(\"\", (a, b) => a + b);\n            return\
    \ rs;\n        }\n        string l = s.Substring(0, (int)shift);\n        string\
    \ r = s.Substring((int)shift);\n        return r + l;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27e1629fef7a41818a6f7dea19f9ad42>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        List<char>\
    \ tmp = Convert.ToString(x).ToList();\n        int len = tmp.Count;\n        if\
    \ (shift == len)\n            return new string(tmp.ToArray());\n        if (shift\
    \ > len) {\n            tmp.Reverse();\n            return new string(tmp.ToArray());\n\
    \        }\n        var output = tmp.GetRange(len - (int)shift, (int)shift);\n\
    \        output.AddRange(tmp.GetRange(0, len - (int)shift));\n        return new\
    \ string(output.ToArray());\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ y = x.ToString();\n        if (shift >= y.Length)\n            return new string(y.Reverse().ToArray());\n\
    \        return y.Substring((int)shift) + y.Substring(0, (int)shift);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a58239e7c0a2470aa1a5edc126970bee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a58239e7c0a2470aa1a5edc126970bee>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        return\
    \ new string(x.ToString().Substring((int)shift) + x.ToString().Substring(0, (int)shift));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c31c449ec0ec45f2a2783287dc340f7c>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: startIndex cannot be larger than length of\
    \ string.\nParameter name: startIndex\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00008]\
    \ in <c31c449ec0ec45f2a2783287dc340f7c>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <c31c449ec0ec45f2a2783287dc340f7c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: startIndex cannot be larger than\
    \ length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00008]\
    \ in <c31c449ec0ec45f2a2783287dc340f7c>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <c31c449ec0ec45f2a2783287dc340f7c>:0 \n"
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        if (shift >= s.Length)\n            return new string(s.Reverse().ToArray());\n\
    \        var shift_left = s.Substring(0, (int)shift);\n        var shift_right\
    \ = s.Substring((int)shift);\n        return shift_right + shift_left;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3ac5ac265a648c88330760c71931c6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3ac5ac265a648c88330760c71931c6b>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ str = x.ToString();\n        if (shift > str.Length) {\n            return new\
    \ string(str.Reverse().ToArray());\n        }\n        else {\n            return\
    \ str.Substring(str.Length - (int)shift) + str.Substring(0, str.Length - (int)shift);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ str = x.ToString();\n        shift = shift % str.Length;\n        string shifted\
    \ = str.Substring((int)shift) + str.Substring(0, (int)shift);\n        return\
    \ shifted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50d4f9db18194fda9838c2345d95d15b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50d4f9db18194fda9838c2345d95d15b>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        string s = x.ToString();\n\
    \        int n = s.Length;\n        shift = shift % n;\n        if (shift == 0)\
    \ {\n            return s;\n        }\n        // shift left\n        s = s.Substring(n\
    \ - shift) + s.Substring(0, n - shift);\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqcb4dowq.cs(27,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqcb4dowq.cs(27,53): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        if (shift >= x.ToString().Length) return\
    \ new string(x.ToString().Reverse().ToArray());\n        string s = x.ToString();\n\
    \        string a = s.Substring(0, (int)(shift));\n        string b = s.Substring((int)(shift));\n\
    \        return b + a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1afad2a35cee4eacb5ce0fc1a4310e3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1afad2a35cee4eacb5ce0fc1a4310e3c>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        string result = digits;\n        long i = 0;\n\
    \        while (i < shift) {\n            i++;\n            result = result.Substring(1)\
    \ + result[0];\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99b4a5f347164a02926013609744699e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99b4a5f347164a02926013609744699e>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ input = x.ToString();\n        if (shift == 0) return input;\n        string\
    \ shifted;\n        if (shift > input.Length)\n            shifted = new string(input.Reverse().ToArray());\n\
    \        else\n            shifted = input.Substring(input.Length - (int)shift)\
    \ + input.Substring(0, input.Length - (int)shift);\n        // Debug.WriteLine(shifted);\n\
    \        return shifted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var d\
    \ = x.ToString().ToCharArray();\n        if (shift >= d.Length) {\n          \
    \  Array.Reverse(d);\n            return new string(d);\n        }\n        var\
    \ s = d.Skip((int)shift).ToArray();\n        var e = d.Take((int)shift).ToArray();\n\
    \        return new string(s) + new string(e);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d32c52bbf5d04af2be1dc4b7b23ec7f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d32c52bbf5d04af2be1dc4b7b23ec7f0>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        if (shift > digits.Length) {\n            return\
    \ new string(digits.Reverse().ToArray());\n        }\n        return digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92a1c74872864cec87752548a79eeb2f>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        char[] digits\
    \ = x.ToString().ToCharArray();\n        char[] r = new char[digits.Length];\n\
    \        for (int i = 0; i < digits.Length; i++) {\n            r[i] = digits[(i\
    \ + (int)shift) % digits.Length];\n        }\n        return new string(r);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3512582808ea45ca8d7646801d450926>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3512582808ea45ca8d7646801d450926>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int s\
    \ = Math.Max(0, Convert.ToInt32(shift));\n        if (s < 2) {\n            return\
    \ x.ToString();\n        } else {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3bc241c1e651432097a26259cd238c3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3bc241c1e651432097a26259cd238c3e>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var n\
    \ = (int)BigInteger.Log10(x) + 1;\n        shift %= n;\n        if (shift == 0)\
    \ {\n            return x.ToString();\n        }\n        if (shift < 0) {\n \
    \           shift += n;\n        }\n        return (x.ToString().Substring(n -\
    \ shift) + x.ToString().Substring(0, n - shift));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpja4a109b.cs(25,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpja4a109b.cs(25,79): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        if (shift == 0)\
    \ {\n            return s;\n        }\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b02ee3f357542b79df1bae17bcb96d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b02ee3f357542b79df1bae17bcb96d6>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        long digits = (long)Math.Floor(Math.Log10(x)\
    \ + 1);\n        string xs = x.ToString();\n        if (shift < digits) {\n  \
    \          xs = xs.Substring((int)shift) + xs.Substring(0, (int)shift);\n    \
    \    } else {\n            xs = xs.Reverse().ToString();\n        }\n        return\
    \ xs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <849a4035ac654a1cb219bc8993902c52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <849a4035ac654a1cb219bc8993902c52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        return\
    \ new string(x.ToString().Substring((int)shift).Reverse().ToArray()) +\n     \
    \           new string(x.ToString().Substring(0, (int)shift).Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25438b8d78614338902151ecb419c562>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: startIndex cannot be larger than length of\
    \ string.\nParameter name: startIndex\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00008]\
    \ in <25438b8d78614338902151ecb419c562>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <25438b8d78614338902151ecb419c562>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: startIndex cannot be larger than\
    \ length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00008]\
    \ in <25438b8d78614338902151ecb419c562>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <25438b8d78614338902151ecb419c562>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var str\
    \ = x.ToString();\n        if (shift < str.Length) {\n            var index =\
    \ str.Length - (int)shift;\n            return str.Substring(index) + str.Substring(0,\
    \ index);\n        } else {\n            return new string(str.Reverse().ToArray());\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3446bfb12aab49178a3a485c616188de>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0) {\n            throw new System.ArgumentException(\"shift must be non-negative.\"\
    );\n        }\n        string s = x.ToString();\n        if (shift >= s.Length)\
    \ {\n            return new string(s.Reverse().ToArray());\n        }\n      \
    \  return s.Substring(shift) + s.Substring(0, shift);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptnrliuj1.cs(24,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptnrliuj1.cs(24,52): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int digits\
    \ = (int)Math.Ceiling(Math.Log10(x));\n        int rotations = (int)(shift % digits);\n\
    \        if (rotations == 0) return x.ToString();\n        if (rotations == digits)\
    \ return Reverse(x.ToString());\n        string s = x.ToString();\n        return\
    \ (s.Substring(rotations) + s.Substring(0, rotations));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7h2b_ymr.cs(20,41): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        int len = s.Length;\n        shift = shift % len;\n\
    \        if (shift == 0) return s;\n        if (shift > len) return new string(s.Reverse().ToArray());\n\
    \        return s.Substring(len - (int)shift) + s.Substring(0, len - (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f7f7cf9d4b74da9b6787851a1d095d5>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7a157423f4c4a2992072b780bb0cbb0>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        string shifted = digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);\n        return digits.Length == shifted.Length\
    \ ? shifted : new string(shifted.Reverse().ToArray());\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5cfcc49b0a9645ceb7b47393d5fa3c80>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: startIndex cannot be larger than length of\
    \ string.\nParameter name: startIndex\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00009]\
    \ in <5cfcc49b0a9645ceb7b47393d5fa3c80>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <5cfcc49b0a9645ceb7b47393d5fa3c80>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: startIndex cannot be larger than\
    \ length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00009]\
    \ in <5cfcc49b0a9645ceb7b47393d5fa3c80>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <5cfcc49b0a9645ceb7b47393d5fa3c80>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        shift = shift % s.Length;\n        var xl = s.Length;\n\
    \        var y = s.Substring((int)shift) + s.Substring(0, (int)shift);\n     \
    \   var yl = y.Length;\n        return y;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <debe624218e54905b05af61f864c858e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <debe624218e54905b05af61f864c858e>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = x.ToString().ToCharArray();\n        shift = shift % digits.Length;\n    \
    \    shift = shift < 0 ? digits.Length + shift : shift;\n        return new string(digits.Skip((int)shift).Concat(digits.Take((int)shift)).ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2745fdef83364b3da5d530543016589b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2745fdef83364b3da5d530543016589b>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        shift\
    \ = shift % (int)Math.Log10(x) + 1;\n        string s = x.ToString();\n      \
    \  if (shift >= s.Length) {\n            return string.Join(\"\", s.Reverse());\n\
    \        }\n        return s.Substring(s.Length - (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <848127da2e6943c1a0f24f69dd70af53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <848127da2e6943c1a0f24f69dd70af53>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ a = x.ToString().ToCharArray();\n        int size = a.Length;\n        // Convert\
    \ the integer to a string of digits, reversing the order.\n        for (int i\
    \ = 0; i < size / 2; i++) {\n            char temp = a[i];\n            a[i] =\
    \ a[size - i - 1];\n            a[size - i - 1] = temp;\n        }\n        //\
    \ Shift the digits right by shift modulo the number of digits.\n        for (int\
    \ i = 0; i < shift % size; i++) {\n            char temp = a[size - 1];\n    \
    \        for (int j = size - 1; j > 0; j--) {\n                a[j] = a[j - 1];\n\
    \            }\n            a[0] = temp;\n        }\n        // Convert the result\
    \ back to a string and return it.\n        return new string(a);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67032127584a413c8eb4971a51ab212e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67032127584a413c8eb4971a51ab212e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        shift = shift % digits.Length;\n        if (shift\
    \ == 0) {\n            return digits;\n        }\n        int start = digits.Length\
    \ - (int)shift;\n        return digits.Substring(start) + digits.Substring(0,\
    \ start);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47d850aa28104b3ab601889c2ee66ca2>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var num\
    \ = (int)Math.Log10(x) + 1;\n        shift = shift % num;\n        if (shift ==\
    \ 0) {\n            return x.ToString();\n        }\n        var l = (int)(x /\
    \ Math.Pow(10, shift));\n        var r = (int)(x % Math.Pow(10, shift));\n   \
    \     return (r.ToString() + l.ToString());\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3bfbadbb79754eee8a624d8fc5a98633>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3bfbadbb79754eee8a624d8fc5a98633>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int ndigits\
    \ = x.ToString().Length;\n        int rshift = (int)(shift % ndigits);\n     \
    \   string xs = x.ToString();\n        if (rshift == 0) return xs;\n        return\
    \ xs.Substring(ndigits - rshift) + xs.Substring(0, ndigits - rshift);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9a18327df85484eb397247456047467>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ <= 0) return x.ToString();\n        string s = x.ToString();\n        if (shift\
    \ > s.Length) return new string(s.Reverse().ToArray());\n        return s.Substring(s.Length\
    \ - (int)shift) + s.Substring(0, s.Length - (int)shift);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            string temp\
    \ = \"\";\n            for (int i = s.Length - 1; i >= 0; i--) {\n           \
    \     temp += s[i];\n            }\n            return temp;\n        }\n    \
    \    return s.Substring((int)shift) + s.Substring(0, (int)shift);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af0fa37902eb42b792788eaf7faa632b>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = new List<int>();\n        while (x > 0) {\n            digits.Add((int)(x\
    \ % 10));\n            x /= 10;\n        }\n        while (shift > digits.Count)\n\
    \            shift -= digits.Count;\n        if (shift == digits.Count)\n    \
    \        shift = 0;\n        var shiftedDigits = new List<int>();\n        for\
    \ (int i = digits.Count - shift; i < digits.Count; i++)\n            shiftedDigits.Add(digits[i]);\n\
    \        for (int i = 0; i < digits.Count - shift; i++)\n            shiftedDigits.Add(digits[i]);\n\
    \        var result = new StringBuilder();\n        foreach (var digit in shiftedDigits)\n\
    \            result.Append(digit);\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmposw7mms2.cs(27,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ str = x.ToString();\n        string result = str.Substring((int)shift, str.Length\
    \ - (int)shift) + str.Substring(0, (int)shift);\n        if (shift > result.Length)\
    \ {\n            return new string(result.Reverse().ToArray());\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc4934bb4b944426bd654be2c7be3e47>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: startIndex cannot be larger than length of\
    \ string.\nParameter name: startIndex\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00012]\
    \ in <fc4934bb4b944426bd654be2c7be3e47>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <fc4934bb4b944426bd654be2c7be3e47>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: startIndex cannot be larger than\
    \ length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00012]\
    \ in <fc4934bb4b944426bd654be2c7be3e47>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <fc4934bb4b944426bd654be2c7be3e47>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        string a = s.Substring(0,\
    \ s.Length - (int)shift);\n        string b = s.Substring(s.Length - (int)shift);\n\
    \        return b + a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7cfc1686ee82482bbac9a78783cb39ef>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        return (shift >= s.Length ? new string(s.Reverse().ToArray())\
    \ : (s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdfc159d74944b30b06bd816f8c0bcc3>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ str = x.ToString();\n        long digits = str.Length;\n        if (shift ==\
    \ digits) {\n            return str;\n        }\n        else if (shift > digits)\
    \ {\n            return new string(str.Reverse().ToArray());\n        }\n    \
    \    else {\n            string str1 = str.Substring(0, (int)shift);\n       \
    \     string str2 = str.Substring((int)shift);\n            return str2 + str1;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96015564bd81424884180a0a9c522f47>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ xstring = x.ToString();\n        if (shift > xstring.Length)\n            return\
    \ new string(xstring.Reverse().ToArray());\n        return xstring.Substring((int)shift)\
    \ + xstring.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2d1624d168049d1b2ab97d479dc647d>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        shift\
    \ = shift % x.ToString().Length;\n        if (shift == 0) return x.ToString();\n\
    \        return x.ToString().Substring((int)shift) + x.ToString().Substring(0,\
    \ (int)shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccf5264d8d4942a9bc82c0efbff87ddc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccf5264d8d4942a9bc82c0efbff87ddc>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ str = x.ToString();\n        if (shift > str.Length) {\n            return new\
    \ string(str.Reverse().ToArray());\n        }\n        return str.Substring((int)shift)\
    \ + str.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cfe55332a0e46a2b06d18ae45bc31d2>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7a157423f4c4a2992072b780bb0cbb0>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var numDigits\
    \ = (int)Math.Floor(Math.Log10(x) + 1);\n        if (shift >= numDigits)\n   \
    \         return new string(x.ToString().Reverse().ToArray());\n        var offset\
    \ = x / (long)Math.Pow(10, shift);\n        var suffix = x % (long)Math.Pow(10,\
    \ shift);\n        return suffix.ToString() + offset.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4df612f90edc4acc8c48cbff23a1f69c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4df612f90edc4acc8c48cbff23a1f69c>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Handle\
    \ shifts that are too big.\n        if (shift > NumDigits(x)) {\n            return\
    \ ReverseDigits(x);\n        }\n        // Create a reversed version of the number.\n\
    \        string reversed = ReverseDigits(x);\n        // Shift the reversed digits,\
    \ then reverse them back.\n        return ReverseDigits(Int64.Parse(reversed.Substring((int)shift)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpouptn4fr.cs(18,21): error CS0103: The name ''NumDigits'' does not exist
    in the current context

    /tmp/tmpouptn4fr.cs(19,20): error CS0103: The name ''ReverseDigits'' does not
    exist in the current context

    /tmp/tmpouptn4fr.cs(22,27): error CS0103: The name ''ReverseDigits'' does not
    exist in the current context

    /tmp/tmpouptn4fr.cs(24,16): error CS0103: The name ''ReverseDigits'' does not
    exist in the current context

    '
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int num_digits\
    \ = (int) Math.Floor(Math.Log10(x) + 1);\n        shift = shift % num_digits;\n\
    \        if (shift == 0) return x.ToString();\n        if (shift < 0) shift +=\
    \ num_digits;\n        var s = new StringBuilder();\n        var x_str = x.ToString();\n\
    \        for (int i = 0; i < num_digits; i++) {\n            s.Append(x_str[(int)\
    \ ((i + shift) % num_digits)]);\n        }\n        return s.ToString();\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6cf210b339649c6ade4677d8e37554c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6cf210b339649c6ade4677d8e37554c>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        return\
    \ ReverseDigits(RotateRight(x, shift));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwf6lkdls.cs(17,16): error CS0103: The name ''ReverseDigits'' does not
    exist in the current context

    /tmp/tmpwf6lkdls.cs(17,30): error CS0103: The name ''RotateRight'' does not exist
    in the current context

    '
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift < s.Length) {\n            string a = s.Substring(0,\
    \ (int) shift);\n            string b = s.Substring((int) shift);\n          \
    \  return b + a;\n        } else {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80971497a0394c3693b982c4790e9685>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80971497a0394c3693b982c4790e9685>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        var s0 = s.Substring(0, (int)shift);\n        var s1 = s.Substring((int)shift);\n\
    \        return s1 + s0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73fc641572734f5f9b952bd0d5917b32>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var v\
    \ = x.ToString();\n        shift = shift % v.Length;\n        var v2 = v.Substring((int)shift)\
    \ + v.Substring(0, (int)shift);\n        return v2;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5246975cd7c84d8db9d741a26695c3b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5246975cd7c84d8db9d741a26695c3b8>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Math.Log10(x)) {\n            char[] digits = x.ToString().ToCharArray();\n\
    \            Array.Reverse(digits);\n            return new string(digits);\n\
    \        } else {\n            char[] digits = x.ToString().ToCharArray();\n \
    \           Array.Reverse(digits);\n            char[] shifted = new char[digits.Length];\n\
    \            Array.Copy(digits, shifted, digits.Length);\n            Array.Copy(digits,\
    \ 0, shifted, digits.Length - shift, shift);\n            Array.Reverse(shifted);\n\
    \            return new string(shifted);\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2a304a920394ead915e5fa6a27b98de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2a304a920394ead915e5fa6a27b98de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        string r = \"\";\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            r += s[(i + (int)shift) % s.Length];\n        }\n      \
    \  return r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f570700a9b04bf6bcf6f2c3941de63b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f570700a9b04bf6bcf6f2c3941de63b>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = new List<int>();\n        while (x > 0) {\n            digits.Add((int)(x\
    \ % 10));\n            x /= 10;\n        }\n        digits.Reverse();\n      \
    \  var result = new StringBuilder();\n        var shiftIndex = 0;\n        while\
    \ (shiftIndex < shift) {\n            if (shiftIndex >= digits.Count) {\n    \
    \            result.Append(digits[shiftIndex - digits.Count]);\n            }\
    \ else {\n                result.Append(digits[shiftIndex]);\n            }\n\
    \            shiftIndex++;\n        }\n        for (var i = 0; i < digits.Count;\
    \ i++) {\n            if (shiftIndex >= digits.Count) {\n                result.Append(digits[shiftIndex\
    \ - digits.Count]);\n            } else {\n                result.Append(digits[shiftIndex]);\n\
    \            }\n            shiftIndex++;\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6d3a32645354d0aa547f0c11da00a51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6d3a32645354d0aa547f0c11da00a51>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.CircularShift (System.Int64 x, System.Int"
  stdout: ''
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        string circular = \"\";\n        for (int i\
    \ = 0; i < shift; i++) {\n            circular = circular + digits[digits.Length\
    \ - 1];\n            digits = digits.Substring(0, digits.Length - 1);\n      \
    \  }\n        return circular + digits;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61d253f3772c47cda5d7bf8d3819abbb>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x0001c] in\
    \ <61d253f3772c47cda5d7bf8d3819abbb>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00035] in <61d253f3772c47cda5d7bf8d3819abbb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.CircularShift (System.Int64 x, System.Int64 shift)\
    \ [0x0001c] in <61d253f3772c47cda5d7bf8d3819abbb>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <61d253f3772c47cda5d7bf8d3819abbb>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        char[] chars = s.ToCharArray();\n        char[] res\
    \ = new char[chars.Length];\n        if (shift > chars.Length) {\n           \
    \ return new string(chars.Reverse().ToArray());\n        }\n        else {\n \
    \           shift = shift % chars.Length;\n            for (int i = 0; i < chars.Length;\
    \ i++) {\n                res[i] = chars[(i + shift) % chars.Length];\n      \
    \      }\n            return new string(res);\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26890c4f92644a80800da6ed677e088f>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        shift = shift % s.Length;\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a08725540e141d9bc059cefdd6b4047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a08725540e141d9bc059cefdd6b4047>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ tmp = x.ToString();\n        if (shift > tmp.Length) {\n            tmp = new\
    \ string(tmp.Reverse().ToArray());\n        } else {\n            shift = tmp.Length\
    \ - shift;\n            tmp = tmp.Substring(shift) + tmp.Substring(0, shift);\n\
    \        }\n        return tmp;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwab_ntax.cs(22,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpwab_ntax.cs(22,59): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        if (shift > digits.Length) {\n            return\
    \ new string(digits.Reverse().ToArray());\n        }\n        return digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92a1c74872864cec87752548a79eeb2f>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        s = s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n        if (shift > s.Length) {\n           \
    \ return s.Reverse();\n        }\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn0p6rm0r.cs(21,20): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ r = x.ToString();\n        long m = r.Length;\n        shift = shift % m;\n\
    \        if (shift == 0) {\n            return r;\n        }\n        return r.Substring((int)shift)\
    \ + r.Substring(0, (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ce5b1ae5fd2447abd44d70cc667bc28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ce5b1ae5fd2447abd44d70cc667bc28>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        return shift >= s.Length ? new string(s.Reverse().ToArray())\
    \ : s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9db7b272fe514fe5933bd836aa35862c>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        int len = (int)Math.Floor(Math.Log10(x))\
    \ + 1;\n        shift = shift % len;\n        string s = x.ToString();\n     \
    \   return s.Substring((int)shift) + s.Substring(0, (int)shift);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3c566db117b4d7fa5b3903a72f67dcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3c566db117b4d7fa5b3903a72f67dcb>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        return\
    \ String.Join(\"\", x.ToString().Skip((int)shift).Reverse().Concat(x.ToString().Take((int)shift).Reverse()));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <115efc7cb385496ba68f2d7348c5702a>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = x.ToString().ToCharArray();\n        if (shift > digits.Length) {\n      \
    \      Array.Reverse(digits);\n            return new string(digits);\n      \
    \  }\n        var outdigits = new char[digits.Length];\n        for (var i = 0;\
    \ i < digits.Length; i++) {\n            outdigits[i] = digits[(i + shift) % digits.Length];\n\
    \        }\n        return new string(outdigits);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da3a9274c87d43f59d0a260e7301cd66>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            return new\
    \ string(s.Reverse().ToArray());\n        }\n        else {\n            return\
    \ s.Substring(shift) + s.Substring(0, shift);\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3dsrkkh1.cs(22,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3dsrkkh1.cs(22,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            s = Reverse(s);\n\
    \        } else {\n            s = s.Substring(s.Length - (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);\n        }\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5mjz7re.cs(19,17): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        long n = s.Length;\n        if (shift >= n) {\n \
    \           var chars = s.ToCharArray();\n            Array.Reverse(chars);\n\
    \            return new string(chars);\n        }\n        var t = new char[n];\n\
    \        var sb = new StringBuilder();\n        for (long i = 0; i < n; i++) {\n\
    \            t[(i + shift) % n] = s[i];\n        }\n        for (long i = 0; i\
    \ < n; i++) {\n            sb.Append(t[i]);\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4_ao0c0c.cs(27,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length)\n            return new string(s.Reverse().ToArray());\n\
    \        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a312048100394a62b02e20544d9adb95>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ n = (long)Math.Floor(Math.Log10(x)) + 1;\n        if (shift >= n) {\n      \
    \      return ReverseDigits(x);\n        }\n        string s = x.ToString();\n\
    \        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7mo7otw6.cs(19,20): error CS0103: The name ''ReverseDigits'' does not
    exist in the current context

    '
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        int len = x.ToString().Length;\n\
    \        if (shift >= len) {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n        string s = x.ToString();\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ca1a3874aed4dc1b99818a75652fc47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ca1a3874aed4dc1b99818a75652fc47>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            var rev = s.Reverse();\n\
    \            return new string(rev.ToArray());\n        }\n        var right =\
    \ s.Substring(0, s.Length - (int)shift);\n        var left = s.Substring((int)shift);\n\
    \        return string.Format(\"{0}{1}\", left, right);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f783e7c0b8d3421392be3919371735f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f783e7c0b8d3421392be3919371735f5>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            return string.Join(\"\
    \", s.Reverse());\n        }\n        char[] r = s.ToCharArray();\n        Array.Reverse(r);\n\
    \        return string.Join(\"\", r.Skip((int)shift).Concat(r.Take((int)shift)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbbd7c10e22a455fb97e296bf10a8998>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbbd7c10e22a455fb97e296bf10a8998>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            return new\
    \ string(s.Reverse().ToArray());\n        }\n        return s.Substring(s.Length\
    \ - (int)shift) + s.Substring(0, s.Length - (int)shift);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab839e008a024cc7ba5eefa4e8cdfd66>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            string t = new string(s.Reverse().ToArray());\n\
    \            return t;\n        }\n        string t1 = s.Substring(0, (int)shift);\n\
    \        string t2 = s.Substring((int)shift);\n        return t2 + t1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fb81835dbd44f6f9624bb6537f462f1>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        else {\n            return s.Substring(s.Length - (int)shift)\
    \ + s.Substring(0, s.Length - (int)shift);\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            return new\
    \ string(s.Reverse().ToArray());\n        }\n        s = s.Substring(0, (int)\
    \ shift) + new string(s.Substring((int) shift).Reverse().ToArray());\n       \
    \ return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa074d12f742449b89f2c90b6f18acb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa074d12f742449b89f2c90b6f18acb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ digits = (long)Math.Floor(Math.Log10(x)) + 1;\n        if (shift >= digits)\
    \ {\n            return new string(x.ToString().Reverse().ToArray());\n      \
    \  }\n        long shift_divisor = (long)Math.Pow(10, digits - shift);\n     \
    \   long right = x % shift_divisor;\n        long left = x / shift_divisor;\n\
    \        return (right * (long)Math.Pow(10, shift) + left).ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bbd55b5f6d446d9955db86cf5f6316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bbd55b5f6d446d9955db86cf5f6316>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        string str = x.ToString();\n        if (shift\
    \ >= str.Length) return str.Reverse().ToString();\n        return str.Substring(str.Length\
    \ - (int)shift) + str.Substring(0, str.Length - (int)shift);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9b8a6c55879479fa9e92cf084847aa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9b8a6c55879479fa9e92cf084847aa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        if (shift > s.Length) {\n            var a = s.ToCharArray();\n\
    \            Array.Reverse(a);\n            return new string(a);\n        }\n\
    \        else {\n            var a = s.ToCharArray();\n            Array.Reverse(a);\n\
    \            Array.Reverse(a, 0, (int)shift);\n            Array.Reverse(a, (int)shift,\
    \ (int)(s.Length - shift));\n            return new string(a);\n        }\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        shift\
    \ = shift % (int)Math.Log10(x) + 1; // shift % number of digits\n        long\
    \ result = x % (long)Math.Pow(10, shift);\n        x /= (long)Math.Pow(10, shift);\n\
    \        result *= (long)Math.Pow(10, (int)Math.Log10(x) + 1);\n        result\
    \ += x;\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7904804ab37456a96eeba1d81a29eac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7904804ab37456a96eeba1d81a29eac>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ digs = (long)Math.Ceiling(Math.Log10(x));\n        string s = x.ToString();\n\
    \        if (shift == digs) {\n            return string.Join(\"\", s.Reverse());\n\
    \        }\n        if (shift > digs) {\n            string t = CircularShift(x,\
    \ shift - digs);\n            return string.Join(\"\", t.Reverse());\n       \
    \ }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98b13655a88c4e35a77fedb694fc19a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98b13655a88c4e35a77fedb694fc19a1>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ ret = x.ToString();\n        if (shift < ret.Length) {\n            ret = ret.Substring((int)shift)\
    \ + ret.Substring(0, (int)shift);\n        } else {\n            ret = new string(ret.Reverse().ToArray());\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31617c4a71024567b7fe67c80d09feb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31617c4a71024567b7fe67c80d09feb2>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = x.ToString().ToCharArray();\n        var shifts = shift.ToString().ToCharArray();\n\
    \        var m = shifts.Length - 1;\n        if (digits.Length < m) {\n      \
    \      Array.Reverse(digits);\n            return new string(digits);\n      \
    \  } else {\n            var n = digits.Length - m;\n            var y = new char[digits.Length];\n\
    \            for (var i = 0; i < m; i++)\n                y[i] = digits[n + i];\n\
    \            for (var i = 0; i < n; i++)\n                y[m + i] = digits[i];\n\
    \            return new string(y);\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f09e631d4e84b039a96abdd955e719b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f09e631d4e84b039a96abdd955e719b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976729
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = x.ToString();\n        if (shift > result.Length) {\n            char[]\
    \ ca = result.ToCharArray();\n            Array.Reverse(ca);\n            return\
    \ new string(ca);\n        }\n        return result.Substring(shift, result.Length\
    \ - shift) + result.Substring(0, shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpybfjiy54.cs(23,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpybfjiy54.cs(23,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpybfjiy54.cs(23,85): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976729
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        int length = digits.Length;\n        if (shift\
    \ > length) {\n            return Reverse(digits);\n        }\n        else {\n\
    \            string new_digits = digits.Substring((int)shift, (int)(length - shift))\
    \ + digits.Substring(0, (int)shift);\n            return new_digits;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rnkk4gk.cs(20,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        int len = s.Length;\n        if (shift < len) {\n\
    \            return s.Substring((int)shift) + s.Substring(0, (int)shift);\n  \
    \      } else {\n            char[] c = s.ToCharArray();\n            Array.Reverse(c);\n\
    \            return new string(c);\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf78d2aa3e8a4d2aac771685532a7d8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf78d2aa3e8a4d2aac771685532a7d8e>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length)\n            return ReverseString(s);\n\
    \        string a = s.Substring(0, (int)shift);\n        string b = s.Substring((int)shift);\n\
    \        return b + a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfmj7mym.cs(19,20): error CS0103: The name ''ReverseString'' does not
    exist in the current context

    '
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        string digits = x.ToString();\n        if\
    \ (shift > digits.Length) {\n            char[] temp = digits.ToCharArray();\n\
    \            Array.Reverse(temp);\n            return new string(temp);\n    \
    \    }\n        return digits.Substring(digits.Length - (int)shift) + digits.Substring(0,\
    \ digits.Length - (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var sb\
    \ = new StringBuilder();\n        var s = x.ToString();\n        if (shift > s.Length)\
    \ {\n            sb.Append(new string(s.Reverse().ToArray()));\n        } else\
    \ {\n            var start = (int)(s.Length - shift);\n            sb.Append(s.Substring(start));\n\
    \            sb.Append(s.Substring(0, start));\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976729
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int shiftLength\
    \ = x.ToString().Length;\n        if (shift > shiftLength) {\n            return\
    \ x.ToString().Reverse().ToArray().ToString();\n        } else {\n           \
    \ string num = x.ToString();\n            string output = \"\";\n            int\
    \ l = num.Length;\n            for (int i = 0; i < l; i++) {\n               \
    \ output += num[(l - shift + i) % l];\n            }\n            return output;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeqwn309z.cs(25,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976729
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > Utils.NumDigits(x)) {\n            return Utils.ReverseDigits(x);\n      \
    \  }\n        var digits = Utils.Digits(x);\n        for (int i = 0; i < shift;\
    \ i++) {\n            var lastDigit = digits[digits.Count - 1];\n            digits.RemoveAt(digits.Count\
    \ - 1);\n            digits.Insert(0, lastDigit);\n        }\n        return Utils.DigitsToString(digits);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1zdkr2ht.cs(17,21): error CS0122: ''Utils'' is inaccessible due to its
    protection level

    /tmp/tmp1zdkr2ht.cs(18,20): error CS0122: ''Utils'' is inaccessible due to its
    protection level

    /tmp/tmp1zdkr2ht.cs(20,22): error CS0122: ''Utils'' is inaccessible due to its
    protection level

    /tmp/tmp1zdkr2ht.cs(22,36): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmp1zdkr2ht.cs(23,29): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmp1zdkr2ht.cs(26,16): error CS0122: ''Utils'' is inaccessible due to its
    protection level

    '
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int[]\
    \ bits = new int[64];\n        int n = 0;\n        for (; x > 0; x /= 10)\n  \
    \          bits[n++] = (int)(x % 10);\n        if (shift >= n) {\n           \
    \ string result = \"\";\n            for (int i = n - 1; i >= 0; i--)\n      \
    \          result += \"\" + bits[i];\n            return result;\n        }\n\
    \        string result2 = \"\";\n        for (int i = 0; i < n; i++)\n       \
    \     result2 += \"\" + bits[(n - (int)shift + i) % n];\n        return result2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a69e6ec6ba874bebbcf1eb06ad8ec45d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a69e6ec6ba874bebbcf1eb06ad8ec45d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ y = x.ToString();\n        if (shift == 0) {\n            return y;\n      \
    \  }\n        int len = y.Length;\n        if (shift > len) {\n            shift\
    \ %= len;\n        }\n        string f = y.Substring(0, (int)shift);\n       \
    \ string s = y.Substring((int)shift);\n        return s + f;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6993239aa814a5ea3c76b1bcdc573be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6993239aa814a5ea3c76b1bcdc573be>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // number\
    \ of digits in x\n        long n = 1 + (long)Math.Floor(Math.Log10(x));\n    \
    \    // check for shift > number of digits\n        if (shift >= n) {\n      \
    \      return new string(x.ToString().Reverse().ToArray());\n        }\n     \
    \   // shift the digits\n        else {\n            // separate the digits\n\
    \            string s = x.ToString();\n            string newString = s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n            return newString;\n        }\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b17ddef36a14e928713ddebf301d626>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b17ddef36a14e928713ddebf301d626>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int nd\
    \ = x.ToString().Length;\n        if (shift >= nd) {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n        string s = x.ToString();\n        string left = s.Substring(0,\
    \ (int)shift);\n        string right = s.Substring((int)shift);\n        return\
    \ right + left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d68c9a748bdc4119ad79eb7a3cc6364f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d68c9a748bdc4119ad79eb7a3cc6364f>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        int l = (int)Math.Log10(x)\
    \ + 1;\n        if (shift > l) {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n        string s = x.ToString();\n        s = s.Substring(0, l - (int)shift)\
    \ + new string(s.Substring((int)shift).Reverse().ToArray());\n        return s;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b633e0ece65e43d896dc22064f9a233b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b633e0ece65e43d896dc22064f9a233b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ xs = x.ToString();\n        if (shift >= xs.Length) {\n            return new\
    \ string(xs.Reverse().ToArray());\n        }\n        return xs.Substring((int)shift)\
    \ + xs.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4484dabd109442dea3ff7bc98acd4f7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4484dabd109442dea3ff7bc98acd4f7f>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        var s = x.ToString();\n        if (shift\
    \ >= s.Length) {\n            var r = s.Reverse().ToArray();\n            return\
    \ new string(r);\n        }\n        var t = s.Substring(s.Length - (int)shift);\n\
    \        var u = s.Substring(0, s.Length - (int)shift);\n        return t + u;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b0dd72cfd544f55ad06739daf854363>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        if (shift == 0)\
    \ return s;\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ffe1baa71d446568c052798e197b8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ffe1baa71d446568c052798e197b8dc>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            return new\
    \ string(s.Reverse().ToArray());\n        }\n        return s.Substring(s.Length\
    \ - (int)shift) + s.Substring(0, s.Length - (int)shift);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab839e008a024cc7ba5eefa4e8cdfd66>:0 \n"
  stdout: ''
  timestamp: 1659976729
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        shift = shift % s.Length;\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a08725540e141d9bc059cefdd6b4047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a08725540e141d9bc059cefdd6b4047>:0 \n"
  stdout: ''
  timestamp: 1659976728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0) {\n            throw new InvalidOperationException(\"shift < 0\");\n  \
    \      }\n        if (shift == 0) {\n            return x.ToString();\n      \
    \  }\n        string s = x.ToString();\n        if (shift > s.Length) {\n    \
    \        return new string(s.Reverse().ToArray());\n        }\n        return\
    \ s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ output = x.ToString();\n        long N = output.Length;\n        if (shift >=\
    \ N) {\n            output = new string(output.Reverse().ToArray());\n       \
    \ } else {\n            string head = output.Substring(0, (int)shift);\n     \
    \       string tail = output.Substring((int)shift);\n            output = tail\
    \ + head;\n        }\n        return output;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3aec012f9e384f248ec7f647577bbe01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3aec012f9e384f248ec7f647577bbe01>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = x.ToString().ToCharArray();\n        var result = new char[digits.Length];\n\
    \        var offset = shift % digits.Length;\n        for (var i = 0; i < digits.Length;\
    \ i++) {\n            result[i] = digits[(i + offset) % digits.Length];\n    \
    \    }\n        return new string(result);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b68815df7fa4b6aa2cd442222e62dbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b68815df7fa4b6aa2cd442222e62dbd>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        int y = (int)x;\n\
    \        int e = y;\n        int digits = 0;\n        while (e > 0) {\n      \
    \      e /= 10;\n            digits++;\n        }\n        shift %= digits;\n\
    \        if (shift == 0) {\n            return x.ToString();\n        }\n    \
    \    int d = y % (int)Math.Pow(10, shift);\n        int d2 = y / (int)Math.Pow(10,\
    \ shift);\n        return (d * (int)Math.Pow(10, digits - shift) + d2).ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94201f00af7e460d9d1123e473dbc468>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94201f00af7e460d9d1123e473dbc468>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digitstr\
    \ = x.ToString();\n        var shift2 = shift % digitstr.Length;\n        return\
    \ digitstr.Substring((int)shift2) + digitstr.Substring(0, (int)shift2);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91236161ad7f4ea79f7eceeb9a662e48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91236161ad7f4ea79f7eceeb9a662e48>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Write\
    \ your code here\n        string s = x.ToString();\n        int N = s.Length;\n\
    \        if (shift >= N) {\n            char[] rev = s.ToCharArray();\n      \
    \      Array.Reverse(rev);\n            return new string(rev);\n        }\n \
    \       else {\n            return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01c0fd1c9e0b4a999c3bc735c8a2a13a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01c0fd1c9e0b4a999c3bc735c8a2a13a>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = new List<long>();\n        var base10 = BigInteger.Pow(10, shift);\n     \
    \   var remainder = x;\n        while (remainder > 0) {\n            digits.Add(remainder\
    \ % 10);\n            remainder /= 10;\n        }\n        if (shift > digits.Count)\
    \ {\n            shift = digits.Count;\n        }\n        var temp = digits.GetRange((int)shift,\
    \ (int)(digits.Count - shift));\n        temp.AddRange(digits.GetRange(0, (int)shift));\n\
    \        var result = string.Join(\"\", temp);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3qx1p1if.cs(18,41): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = x.ToString();\n        shift = shift % result.Length;\n        if (shift\
    \ == 0) {\n            return result;\n        }\n        result = result.Substring((int)shift)\
    \ + result.Substring(0, (int)shift);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc20ca5afd8f4accba06624a88805a3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc20ca5afd8f4accba06624a88805a3c>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ tmp = x.ToString();\n        if (shift >= tmp.Length) {\n            tmp = new\
    \ string(tmp.Reverse().ToArray());\n        } else {\n            tmp = tmp.Substring(tmp.Length\
    \ - (int)shift) + tmp.Substring(0, tmp.Length - (int)shift);\n        }\n    \
    \    return tmp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28aa2cf636ab433e8658e2321cb4bfaf>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Write\
    \ your code here\n        string s = x.ToString();\n        return (s.Substring(s.Length\
    \ - (int)shift) + s.Substring(0, s.Length - (int)shift));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: StartIndex\
    \ cannot be less than zero.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00004] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00010]\
    \ in <487b55a3ac9f4aeead44455122add482>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <487b55a3ac9f4aeead44455122add482>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: StartIndex cannot be less than\
    \ zero.\nParameter name: startIndex\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x00004] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00010]\
    \ in <487b55a3ac9f4aeead44455122add482>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <487b55a3ac9f4aeead44455122add482>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        long digitcount = s.Length;\n        // If the number\
    \ of digits is less than the shift, reverse the number and shift\n        if (digitcount\
    \ < shift) {\n            char[] ca = s.ToCharArray();\n            Array.Reverse(ca);\n\
    \            s = new string(ca);\n            shift = digitcount - shift;\n  \
    \      }\n        string front = s.Substring(0, (int)shift);\n        string back\
    \ = s.Substring((int)shift);\n        return (back + front);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91ff5c5cf09341fe8851e1a640c7dd5e>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Length cannot be less than zero.\nParameter\
    \ name: length\n  at System.String.Substring (System.Int32 startIndex, System.Int32\
    \ length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CircularShift\
    \ (System.Int64 x, System.Int64 shift) [0x0003a] in <91ff5c5cf09341fe8851e1a640c7dd5e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00035] in <91ff5c5cf09341fe8851e1a640c7dd5e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x0003a]\
    \ in <91ff5c5cf09341fe8851e1a640c7dd5e>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <91ff5c5cf09341fe8851e1a640c7dd5e>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0) {\n            throw new ArgumentException(\"Cannot shift less than 0\"\
    );\n        }\n        var digits = x.ToString().Select(y => int.Parse(y.ToString())).ToList();\n\
    \        if (shift > digits.Count) {\n            digits.Reverse();\n        \
    \    return string.Join(\"\", digits);\n        }\n        var result = digits.GetRange(digits.Count\
    \ - (int)shift, (int)shift);\n        result.AddRange(digits.GetRange(0, digits.Count\
    \ - (int)shift));\n        return string.Join(\"\", result);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ digits = x.ToString().ToCharArray();\n        if (shift >= digits.Length) {\n\
    \            Array.Reverse(digits);\n            return new string(digits);\n\
    \        }\n        char[] tmp = new char[digits.Length];\n        Array.Copy(digits,\
    \ shift, tmp, 0, digits.Length - shift);\n        Array.Copy(digits, 0, tmp, digits.Length\
    \ - shift, shift);\n        return new string(tmp);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36aa341c4d894d8bbc45960b816e5c7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36aa341c4d894d8bbc45960b816e5c7e>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ x_str = x.ToString();\n        if (shift >= x_str.Length) {\n            return\
    \ new string(x_str.Reverse().ToArray());\n        }\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < x_str.Length; i++) {\n \
    \           int index = (i + (int)shift) % x_str.Length;\n            sb.Append(x_str[index]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9717e149b61c4b7d8c75f3b917f100da>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9717e149b61c4b7d8c75f3b917f100da>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var s\
    \ = x.ToString();\n        if (shift > s.Length) {\n            return String.Join(\"\
    \", s.Reverse());\n        }\n        return s.Substring((int)shift) + s.Substring(0,\
    \ (int)shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1c77719e2f54201b0e2d5f8d23dea2e>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ digits = 0;\n        long result = 0;\n        long x1 = x;\n        while (x1\
    \ > 0) {\n            digits += 1;\n            x1 /= 10;\n        }\n       \
    \ if (shift > digits) {\n            for (int i = 0; i < digits; i++) {\n    \
    \            result = result * 10 + x % 10;\n                x /= 10;\n      \
    \      }\n        } else {\n            for (int i = 0; i < shift; i++) {\n  \
    \              result = result * 10 + x % 10;\n                x /= 10;\n    \
    \        }\n            for (int i = 0; i < digits - shift; i++) {\n         \
    \       result = result * 10 + x % 10;\n                x /= 10;\n           \
    \ }\n        }\n        return result.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <254f7531edd24417be3fc1390de58715>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <254f7531edd24417be3fc1390de58715>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        string result = \"\";\n        shift = shift\
    \ % digits.Length;\n        if (shift > 0) {\n            // shift right\n   \
    \         result = digits.Substring((int)shift) + digits.Substring(0, (int)shift);\n\
    \        } else {\n            // shift left\n            shift = digits.Length\
    \ + shift;\n            result = digits.Substring((int)shift) + digits.Substring(0,\
    \ (int)shift);\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ee28e3fc18947d686301de78e85f784>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ee28e3fc18947d686301de78e85f784>:0 \n"
  stdout: ''
  timestamp: 1659976730
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ S = x.ToString();\n        int L = S.Length;\n        shift = shift % L;\n \
    \       if (shift == 0) return S;\n        string A = S.Substring(0, shift);\n\
    \        string B = S.Substring(shift);\n        return B + A;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4f5z6nu.cs(21,35): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpi4f5z6nu.cs(22,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ x_str = x.ToString();\n        string[] x_str_arr = x_str.Select(y => y.ToString()).ToArray();\n\
    \        string[] shifted_arr = new string[x_str_arr.Length];\n        if (shift\
    \ > x_str_arr.Length) {\n            for (int i = 0; i < x_str_arr.Length; i++)\
    \ {\n                shifted_arr[i] = x_str_arr[x_str_arr.Length - i - 1];\n \
    \           }\n        } else {\n            for (int i = 0; i < x_str_arr.Length;\
    \ i++) {\n                shifted_arr[i] = x_str_arr[(int)((i + shift) % x_str_arr.Length)];\n\
    \            }\n        }\n        string res = string.Join(\"\", shifted_arr);\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c019b0cb52043919df55870bcf28382>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var n\
    \ = x.ToString().Length;\n        if (shift >= n) {\n            return String.Join(\"\
    \", x.ToString().Reverse());\n        }\n        var l = String.Join(\"\", x.ToString().Substring(0,\
    \ (int)shift).Reverse());\n        var r = String.Join(\"\", x.ToString().Substring((int)shift).Reverse());\n\
    \        return l + r;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de2a2de2ea6f404dbc328d9a6db92671>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de2a2de2ea6f404dbc328d9a6db92671>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            char[] ca =\
    \ s.ToCharArray();\n            Array.Reverse(ca);\n            return new string(ca);\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c73e06fba06543979ebc4f00cc27b618>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c73e06fba06543979ebc4f00cc27b618>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        long n = digits.Length;\n        if (shift >\
    \ n) {\n            return digits.Reverse().Join();\n        }\n        return\
    \ digits.Substring((int)shift) + digits.Substring(0, (int)shift);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi5ull2mo.cs(20,37): error CS1501: No overload for method ''Join'' takes
    0 arguments

    '
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        if (shift >= digits.Length)\n            return\
    \ new string(digits.Reverse().ToArray());\n        return digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5472fc5be5de43e580c5c7a358d77cbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5472fc5be5de43e580c5c7a358d77cbd>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        int n = s.Length;\n        shift = shift % n;\n \
    \       if (shift == 0) return s;\n        if (shift < 0) shift += n;\n      \
    \  return s.Substring((int)shift) + s.Substring(0, (int)shift);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2264d740f75c4671b42c6802cc477ab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2264d740f75c4671b42c6802cc477ab6>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        if (shift >= x.ToString().Length) {\n  \
    \          char[] charArray = x.ToString().ToCharArray();\n            Array.Reverse(charArray);\n\
    \            return new string(charArray);\n        }\n        return x.ToString().Substring((int)shift)\
    \ + x.ToString().Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ed8af40b8f425b845788148dac5534>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ed8af40b8f425b845788148dac5534>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        string srev = s.Reverse();\n        return (shift\
    \ <= s.Length ? s.Substring(shift) + s.Substring(0, shift) : srev.Substring(srev.Length\
    \ - shift) + srev.Substring(0, srev.Length - shift));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxkwzkczj.cs(18,23): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxkwzkczj.cs(19,49): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxkwzkczj.cs(19,73): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpxkwzkczj.cs(19,97): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxkwzkczj.cs(19,138): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976730
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        char[] a = s.ToCharArray();\n        int n = a.Length;\n\
    \        for (int i = 0; i < shift; i++) {\n            char t = a[n - 1];\n \
    \           Array.Copy(a, 0, a, 1, n - 1);\n            a[0] = t;\n        }\n\
    \        return new string(a);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0911911ad2f94f12875df51654c5a555>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = new string(x.ToString().Reverse().ToArray());\n        if (shift >= digits.Length)\n\
    \            return digits;\n        return digits.Substring((int)shift) + digits.Substring(0,\
    \ (int)shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa8fda2e6db843b8b3405f8339c666a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa8fda2e6db843b8b3405f8339c666a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var digits\
    \ = new List<long>();\n        while (x > 0) {\n            digits.Add(x % 10);\n\
    \            x /= 10;\n        }\n        if (shift > digits.Count) {\n      \
    \      digits.Reverse();\n        } else {\n            shift = digits.Count -\
    \ shift;\n            var temp = digits.GetRange((int)shift, (int)(digits.Count\
    \ - shift));\n            temp.AddRange(digits.GetRange(0, (int)shift));\n   \
    \         digits = temp;\n        }\n        return string.Join(\"\", digits);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06c2ffbaaff14c9cb00b72cb069f5d97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06c2ffbaaff14c9cb00b72cb069f5d97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ ret = x.ToString();\n        if (shift > ret.Length) {\n            return new\
    \ string(ret.Reverse().ToArray());\n        }\n        ret = ret.Substring(ret.Length\
    \ - (int)shift, (int)shift) + ret.Substring(0, ret.Length - (int)shift);\n   \
    \     return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var numDigits\
    \ = ((int)Math.Floor(Math.Log10(x) + 1));\n        shift = (shift % numDigits);\n\
    \        if (shift == 0) {\n            return x.ToString();\n        }\n    \
    \    var str = x.ToString();\n        return (str.Substring((int)shift, (int)(numDigits\
    \ - shift)) + str.Substring(0, (int)shift));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdae9fa18a5e47ef87b858d589d91435>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdae9fa18a5e47ef87b858d589d91435>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > 0) {\n            string d = x.ToString();\n            for (int i = 0; i\
    \ < shift; i++) {\n                d = d.Substring(1) + d[0];\n            }\n\
    \            return d;\n        } else {\n            return x.ToString();\n \
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70ce15ebcff6421785c543336042fc31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70ce15ebcff6421785c543336042fc31>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ xs = x.ToString();\n        if (shift > xs.Length) {\n            // Reverse\
    \ digits, zero pad\n            xs = new string(xs.Reverse().ToArray());\n   \
    \         xs = xs.PadLeft(shift.ToString().Length, '0');\n        } else {\n \
    \           // Shift digits\n            xs = xs.Substring(shift) + xs.Substring(0,\
    \ shift);\n        }\n        return xs;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcaf08fa4.cs(24,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpcaf08fa4.cs(24,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift >= s.Length) {\n            s = new string(s.Reverse().ToArray());\n\
    \        } else {\n            s = s.Substring(s.Length - (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);\n        }\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f90601280eb04c238670dbf912aaad23>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        string s = x.ToString();\n\
    \        var l = s.Length;\n        if (shift >= l) {\n            return Reverse(s);\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5owomnj4.cs(23,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        return\
    \ new string(x.ToString().Substring((int)shift).Reverse().ToArray()) + new string(x.ToString().Substring(0,\
    \ (int)shift).Reverse().ToArray());\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64b30fdf589b46a3897d6a29a04455a4>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: startIndex cannot be larger than length of\
    \ string.\nParameter name: startIndex\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00008]\
    \ in <64b30fdf589b46a3897d6a29a04455a4>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <64b30fdf589b46a3897d6a29a04455a4>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: startIndex cannot be larger than\
    \ length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00008]\
    \ in <64b30fdf589b46a3897d6a29a04455a4>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <64b30fdf589b46a3897d6a29a04455a4>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var xString\
    \ = x.ToString();\n        if (shift >= xString.Length) {\n            return\
    \ new string(xString.Reverse().ToArray());\n        }\n        else {\n      \
    \      return xString.Substring((int)shift) + xString.Substring(0, (int)shift);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5220d33c1d04475e9c48dadb2caab6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5220d33c1d04475e9c48dadb2caab6e1>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        if (shift == 0)\
    \ return s;\n        if (shift < 0) shift += s.Length;\n        if (shift == s.Length)\
    \ return ReverseString(s);\n        return s.Substring((int)shift) + s.Substring(0,\
    \ (int)shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf8kfe3re.cs(21,39): error CS0103: The name ''ReverseString'' does not
    exist in the current context

    '
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        } else {\n            int\
    \ num_digits = 0;\n            long tmp = x;\n            while (tmp > 0) {\n\
    \                tmp /= 10;\n                num_digits++;\n            }\n  \
    \          shift %= num_digits;\n            if (shift == 0) {\n             \
    \   return x.ToString();\n            } else {\n                long tmp2 = 0;\n\
    \                long digit = 0;\n                for (int i = 0; i < num_digits;\
    \ i++) {\n                    digit = x % 10;\n                    x /= 10;\n\
    \                    tmp2 = tmp2 * 10 + digit;\n                }\n          \
    \      tmp = tmp2;\n                for (int i = 0; i < shift; i++) {\n      \
    \              digit = tmp % 10;\n                    tmp /= 10;\n           \
    \         tmp2 = tmp2 * 10 + digit;\n                }\n                return\
    \ tmp2.ToString();\n            }\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d91c2eff1c04182af95712a120c7faf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d91c2eff1c04182af95712a120c7faf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ digits = (long)Math.Log10(x) + 1;\n        if (shift > digits) {\n         \
    \   return new string(x.ToString().Reverse().ToArray());\n        }\n        var\
    \ s = x.ToString();\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f36f957dddf74f5e87167724ccd03540>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var xString\
    \ = x.ToString();\n        var xLength = xString.Length;\n        var shiftLength\
    \ = shift % xLength;\n        if (shiftLength == 0) {\n            return xString;\n\
    \        }\n        return xString.Substring((int)shiftLength) + xString.Substring(0,\
    \ (int)shiftLength);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6016a1ad41d434dae2e628ee52d50ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6016a1ad41d434dae2e628ee52d50ac>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            char[] ss = s.ToCharArray();\n \
    \           Array.Reverse(ss);\n            return new string(ss);\n        }\n\
    \        string end = s.Substring(0, (int)shift);\n        string start = s.Substring((int)shift);\n\
    \        return start + end;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12feab25fd5c44638baaee6209b2eaee>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7a157423f4c4a2992072b780bb0cbb0>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var b\
    \ = new char[shift];\n        for (int i = 0; i < shift; i++) {\n            b[i]\
    \ = (char)('0' + (x % 10));\n            x /= 10;\n        }\n        return new\
    \ string(b.Reverse().ToArray());\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b3be19ec7d44ee3a9d2e2771d14d3ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b3be19ec7d44ee3a9d2e2771d14d3ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int len\
    \ = (int) Math.Log10(x) + 1;\n        if (shift > len) {\n            char[] chars\
    \ = x.ToString().ToCharArray();\n            Array.Reverse(chars);\n         \
    \   return new string(chars);\n        }\n        else {\n            char[] chars\
    \ = x.ToString().ToCharArray();\n            for (int i = 0; i < shift; i++) {\n\
    \                char first = chars[0];\n                for (int j = 0; j < len\
    \ - 1; j++) {\n                    chars[j] = chars[j + 1];\n                }\n\
    \                chars[len - 1] = first;\n            }\n            return new\
    \ string(chars);\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d69a77f33042539e1d4138cd58e716>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        string s1 = s.Substring(0,\
    \ (int)shift);\n        string s2 = s.Substring((int)shift);\n        return s2\
    \ + s1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8be74bb62744e05b8b4a80500e86bf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8be74bb62744e05b8b4a80500e86bf4>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ temp = x;\n        int shiftTimes = 0;\n        while (temp > 0) {\n       \
    \     temp /= 10;\n            shiftTimes++;\n        }\n        shift %= shiftTimes;\n\
    \        while (shift > 0) {\n            x = (x % 10) * (long)Math.Pow(10, shiftTimes\
    \ - 1) + x / 10;\n            shift--;\n        }\n        return x.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a42685dc658043d68cc74cb377920791>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a42685dc658043d68cc74cb377920791>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        long n = s.Length;\n        if (shift >= n) {\n \
    \           return new string(s.Reverse().ToArray());\n        }\n        string\
    \ y = s.Substring((int)shift, (int)(n - shift));\n        y += s.Substring(0,\
    \ (int)shift);\n        return y;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffc780f2cb764807a2df30dd04c1f9af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffc780f2cb764807a2df30dd04c1f9af>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int len\
    \ = (int)Math.Log10(x);\n        string[] tmp = new string[len + 1];\n       \
    \ for (int i = 0; i <= len; i++) {\n            tmp[(i + len - (int)shift) % (len\
    \ + 1)] = ((char)((x / (long)Math.Pow(10, i)) % 10 + '0')).ToString();\n     \
    \   }\n        return string.Join(\"\", tmp);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at (wrapper stelemref) System.Object.virt_stelemref_sealed_class(intptr,object)\n\
    \  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00047] in\
    \ <9608ec28424d46c5a5f380771e8472bd>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <9608ec28424d46c5a5f380771e8472bd>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at (wrapper stelemref) System.Object.virt_stelemref_sealed_class(intptr,object)\n\
    \  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00047] in\
    \ <9608ec28424d46c5a5f380771e8472bd>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <9608ec28424d46c5a5f380771e8472bd>:0 \n"
  stdout: ''
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ r = x.ToString();\n        if (shift < r.Length) {\n            r = r.Substring((int)shift,\
    \ (int)(r.Length - shift)) + r.Substring(0, (int)shift);\n        } else {\n \
    \           r = r.Reverse();\n        }\n        return r;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpad_1zc_0.cs(21,17): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''string''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        if (shift > digits.Length) {\n            digits\
    \ = digits.Reverse().ToString();\n        } else {\n            digits = digits.Substring(digits.Length\
    \ - shift, shift) + digits.Substring(0, digits.Length - shift);\n        }\n \
    \       return digits;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfackuhat.cs(21,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfackuhat.cs(21,62): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpfackuhat.cs(21,91): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int len\
    \ = x.ToString().Length;\n        shift = shift % len;\n        if (shift == 0)\
    \ return x.ToString();\n        if (shift == len) return new string(x.ToString().Reverse().ToArray());\n\
    \        int[] x_digits = new int[len];\n        for (int i = 0; i < len; i++)\
    \ {\n            x_digits[(i + shift) % len] = (int)(x % 10);\n            x /=\
    \ 10;\n        }\n        return new string(x_digits.Select(y => (char)(y + '0')).ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12bff9f45b4c48248aa2d2869881bc66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12bff9f45b4c48248aa2d2869881bc66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ res = x.ToString();\n        shift = shift % res.Length;\n        if (shift\
    \ == 0) {\n            return res;\n        }\n        var a = res.Substring(res.Length\
    \ - shift);\n        var b = res.Substring(0, res.Length - shift);\n        return\
    \ a + b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxnqtrhfl.cs(22,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxnqtrhfl.cs(23,34): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976731
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ digits = (long) Math.Floor(Math.Log10(x)) + 1;\n        if (shift >= digits)\
    \ {\n            return Reverse(x);\n        }\n        long rem = x % ((long)\
    \ Math.Pow(10, shift));\n        long div = x / ((long) Math.Pow(10, shift));\n\
    \        return (rem.ToString() + div.ToString());\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcaov6lzx.cs(19,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        long\
    \ len = (long)Math.Floor(Math.Log10(x) + 1);\n        if (shift >= len)\n    \
    \        return String.Join(\"\", x.ToString().Reverse());\n        else\n   \
    \         return x.ToString().Substring((int)shift) + x.ToString().Substring(0,\
    \ (int)shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c09652f9c66d4c5395bf3b1f58563f13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c09652f9c66d4c5395bf3b1f58563f13>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Length\
    \ of the integer.\n        int n = 0;\n        for (long u = x; u > 0; u /= 10)\
    \ n++;\n        shift %= n;\n        if (shift == 0) return x.ToString();\n  \
    \      var t = new StringBuilder();\n        for (long u = x; u > 0; u /= 10)\
    \ t.Append((u % 10).ToString());\n        t.Append(t.ToString());\n        return\
    \ t.ToString().Substring((int)shift, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35237d31e0474dc0b568e09d94eff0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35237d31e0474dc0b568e09d94eff0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        char[]\
    \ c = x.ToString().ToCharArray();\n        if (shift > c.Length) {\n         \
    \   Array.Reverse(c);\n            return new string(c);\n        }\n        while\
    \ (shift-- > 0) {\n            char b = c[c.Length - 1];\n            Array.Copy(c,\
    \ 0, c, 1, c.Length - 1);\n            c[0] = b;\n        }\n        return new\
    \ string(c);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976731
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ result = x.ToString();\n        if (shift >= result.Length) {\n            return\
    \ new string(result.Reverse().ToArray());\n        }\n        return result.Substring((int)shift)\
    \ + result.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adefc794f5564e89bd6573e976b3a04a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adefc794f5564e89bd6573e976b3a04a>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        char[] a = s.ToCharArray();\n\
    \        Array.Reverse(a, 0, a.Length);\n        Array.Reverse(a, 0, (int)shift);\n\
    \        Array.Reverse(a, (int)shift, a.Length - (int)shift);\n        return\
    \ new string(a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7c337ce9a774ecaa97f9f2325da6c8c>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ xs = x.ToString();\n        int xslen = xs.Length;\n        shift = shift %\
    \ xslen;\n        if (shift == 0) {\n            return xs;\n        }\n     \
    \   if (shift < 0) {\n            shift += xslen;\n        }\n        return xs.Substring((int)shift)\
    \ + xs.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <785e1904baae468d9c417a86314c09cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <785e1904baae468d9c417a86314c09cd>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // Convert\
    \ x to a string\n        string xs = x.ToString();\n        int len = xs.Length;\n\
    \        int shift1 = (int)(shift % len);\n        if (shift1 == 0) {\n      \
    \      return xs;\n        }\n        string xs1 = xs.Substring(len - shift1);\n\
    \        string xs2 = xs.Substring(0, len - shift1);\n        return xs1 + xs2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad9bcc39a5a343c4825440b807934ddd>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int n\
    \ = x.ToString().Length;\n        shift = shift % n;\n        if (shift == 0)\
    \ {\n            return x.ToString();\n        }\n        string s = x.ToString();\n\
    \        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc14190012f4c3e9e3377fcdeb7a528>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc14190012f4c3e9e3377fcdeb7a528>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var xs\
    \ = x.ToString();\n        var l = xs.Length;\n        if (shift >= l) {\n   \
    \         return ReverseString(xs);\n        }\n        return xs.Substring((int)shift)\
    \ + xs.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp29ex8cgk.cs(20,20): error CS0103: The name ''ReverseString'' does not
    exist in the current context

    '
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) return x.ToString();\n        int i = 0;\n        char[] a = x.ToString().ToCharArray();\n\
    \        // Shift right.\n        while (i < shift) {\n            var t = a[a.Length\
    \ - 1];\n            for (int j = a.Length - 1; j > 0; j--)\n                a[j]\
    \ = a[j - 1];\n            a[0] = t;\n            i++;\n        }\n        return\
    \ new string(a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbca61604b8d4872a973dcc1e36acaf7>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        // The\
    \ number of digits in the integer x.\n        var n = 0;\n        var t = x;\n\
    \        while (t > 0) {\n            n += 1;\n            t /= 10;\n        }\n\
    \        if (shift > n) {\n            // We are shifting more digits than exist\
    \ in the integer, so just\n            // reverse the digits.\n            string\
    \ result = \"\";\n            while (x > 0) {\n                var digit = x %\
    \ 10;\n                result += digit.ToString();\n                x /= 10;\n\
    \            }\n            return result;\n        }\n        // We need to shift\
    \ shift digits.\n        // Find the leftmost shift digits of x.\n        var\
    \ left = 0;\n        t = x;\n        while (shift > 0) {\n            left = 10\
    \ * left + (t % 10);\n            t /= 10;\n            shift -= 1;\n        }\n\
    \        // The rightmost n - shift digits of x.\n        var right = t;\n   \
    \     // Reverse the digits of left.\n        var left_rev = 0;\n        while\
    \ (left > 0) {\n            left_rev = 10 * left_rev + (left % 10);\n        \
    \    left /= 10;\n        }\n        return left_rev.ToString() + right.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpljgl77v5.cs(40,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ val = x.ToString();\n        shift = shift % val.Length;\n        return val.Substring((int)shift)\
    \ + val.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59bbd62ffdc946c58aaeeee2618b044f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59bbd62ffdc946c58aaeeee2618b044f>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ res = x.ToString();\n        while (shift > 0) {\n            if (res.Length\
    \ <= 1) {\n                return new string(res.Reverse().ToArray());\n     \
    \       }\n            res = res.Substring(1) + res[0];\n            shift--;\n\
    \        }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2469a470cbd48b3a34c97ca6d32afc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2469a470cbd48b3a34c97ca6d32afc1>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ <= 0) {\n            throw new System.Exception(\"Shift must be positive\");\n\
    \        }\n        if (x == 0) {\n            return \"0\";\n        }\n    \
    \    var num_digits = (int)Math.Floor(Math.Log10(x) + 1);\n        if (shift >=\
    \ num_digits) {\n            return Reverse(x);\n        }\n        var y = x\
    \ / (long)Math.Pow(10, shift);\n        var z = x % (long)Math.Pow(10, shift);\n\
    \        return (z.ToString() + y.ToString());\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgqacl0r4.cs(25,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ digits = x.ToString();\n        shift = shift % digits.Length;\n        if (shift\
    \ == 0) {\n            return digits;\n        }\n        return digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <239849c41f1349b3a56de5cdcc35f862>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <239849c41f1349b3a56de5cdcc35f862>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        List<long>\
    \ digits = new List<long>();\n        while (x > 0) {\n            digits.Add(x\
    \ % 10);\n            x /= 10;\n        }\n        int n = digits.Count;\n   \
    \     if (shift >= n) {\n            digits.Reverse();\n            return digits.Aggregate(\"\
    \", (total, y) => (total + Convert.ToString(y)));\n        }\n        List<long>\
    \ res = new List<long>();\n        for (int i = n - shift; i < n; i++) {\n   \
    \         res.Add(digits[i]);\n        }\n        for (int i = 0; i < n - shift;\
    \ i++) {\n            res.Add(digits[i]);\n        }\n        return res.Aggregate(\"\
    \", (total, y) => (total + Convert.ToString(y)));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"\
    001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n  \
    \  Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
    \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnp06pvay.cs(28,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ <= 0)\n            return \"\" + x;\n        char[] digits = \"\" + x;\n   \
    \     if (shift >= digits.Length) {\n            Array.Reverse(digits);\n    \
    \        return new string(digits);\n        }\n        long first = digits.Length\
    \ - shift;\n        StringBuilder sb = new StringBuilder();\n        for (long\
    \ i = first; i < digits.Length; i++)\n            sb.Append(digits[i]);\n    \
    \    for (long i = 0; i < first; i++)\n            sb.Append(digits[i]);\n   \
    \     return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe0gqspiq.cs(19,25): error CS0029: Cannot implicitly convert type ''string''
    to ''char[]''

    '
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        int digits\
    \ = (int)Math.Floor(Math.Log10(x) + 1);\n        //if (shift >= digits) return\
    \ ReverseDigits(x);\n        if (shift >= digits) return ReverseDigits(x);\n \
    \       int d = (int)(shift % digits);\n        long A = (long)Math.Pow(10, d);\n\
    \        //>>> (A)\n        //(1000)\n        long B = (long)Math.Pow(10, digits\
    \ - d);\n        //>>> (B)\n        //(10)\n        long T = x % A;\n        //>>>\
    \ (T)\n        //(200)\n        long tmp = T * B;\n        //>>> (tmp)\n     \
    \   //(2000)\n        long tmp2 = x / A;\n        //>>> (tmp2)\n        //(1)\n\
    \        long tmp3 = tmp + tmp2;\n        //>>> (tmp3)\n        //(2100)\n   \
    \     return tmp3.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdqud1sr8.cs(19,37): error CS0103: The name ''ReverseDigits'' does not
    exist in the current context

    '
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        var n\
    \ = (int)Math.Floor(Math.Log10(x)) + 1;\n        shift = shift % n;\n        if\
    \ (shift == 0) return x.ToString();\n        var s = x.ToString();\n        var\
    \ result = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n     \
    \       result.Append(s[(i + n - (int)shift) % n]);\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da52064cae3742b79a192c9837b3c526>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        string res = x.ToString();\n\
    \        if (shift >= res.Length) {\n            char[] arr = res.ToCharArray();\n\
    \            Array.Reverse(arr);\n            return new string(arr);\n      \
    \  }\n        return res.Substring(res.Length - (int)shift) + res.Substring(0,\
    \ res.Length - (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29dc61885f544936a180cdd2635d4195>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        string\
    \ s = x.ToString();\n        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7a157423f4c4a2992072b780bb0cbb0>:0 \n"
  stdout: ''
  timestamp: 1659976727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ < 0L)\n            throw new Exception();\n        char[] str = x.ToString().ToCharArray();\n\
    \        Array.Reverse(str);\n        if (shift >= str.Length)\n            return\
    \ new string(str);\n        string s = new string(str);\n        string y = s.Substring(0,\
    \ str.Length - (int)shift);\n        string z = s.Substring(str.Length - (int)shift);\n\
    \        return z + y;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c3644cbbbb84162b1a5527b0a714c15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c3644cbbbb84162b1a5527b0a714c15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976732
