language: cs
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int substringLen = substring.Length;\n
    \       for (int i = 0; i < str.Length; i++) {\n            if (substring == str.Substring(i,
    substringLen)) {\n                result++;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <4d31d8f45bdd4ba18af859e2c3cc9a8c>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <4d31d8f45bdd4ba18af859e2c3cc9a8c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <4d31d8f45bdd4ba18af859e2c3cc9a8c>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <4d31d8f45bdd4ba18af859e2c3cc9a8c>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        Debug.Assert(str != null);\n        Debug.Assert(substring
    != null);\n        int lenStr = str.Length;\n        int lenSubstring = substring.Length;\n
    \       long ans = 0;\n        for (int i = 0; i + lenSubstring <= lenStr; i++)
    {\n            if (str.Substring(i, lenSubstring) == substring) {\n                ans++;\n
    \           }\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Split(new string[] { substring }, StringSplitOptions.None).Length
    - 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96d4d867c00340aabc1e846fcaf5e401>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long res = 0;\n        int lastFound = -1;\n        while
    (true) {\n            lastFound = str.IndexOf(substring, lastFound + 1);\n            if
    (lastFound == -1) break;\n            res++;\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // >>> str.Substring(0, 1)\n        // 'a'\n        // >>>
    str.Substring(1, 1)\n        // 'a'\n        // >>> str.Substring(2, 1)\n        //
    'a'\n        long times = 0;\n        int length_substring = substring.Length;\n
    \       for (int i = 0; i <= str.Length - length_substring; i++) {\n            if
    (str.Substring(i, length_substring) == substring) {\n                times +=
    1;\n            }\n        }\n        return times;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        for (int i = 0; i <= str.Length -
    substring.Length; i++) {\n            if (str.Substring(i, substring.Length) ==
    substring) {\n                cnt++;\n            }\n        }\n        return
    cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            for (int j = 0; j < substring.Length; j++) {\n                if
    (i + j >= str.Length) {\n                    return count;\n                }\n
    \               if (str[i + j] != substring[j]) {\n                    break;\n
    \               }\n                if (j == substring.Length - 1) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // >>> HowManyTimes2((\"\"), (\"a\"))\n        // (0L)\n
    \       // >>> HowManyTimes2((\"aaa\"), (\"a\"))\n        // (3L)\n        //
    >>> HowManyTimes2((\"aaaa\"), (\"aa\"))\n        // (3L)\n        long ret = 0;\n
    \       for (int i = 0; i < str.Length; i++) {\n            if (i + substring.Length
    > str.Length) {\n                break;\n            }\n            if (str.Substring(i,
    substring.Length) == substring) {\n                ret += 1;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        string pattern = substring;\n        long times = 0;\n        int
    i = str.IndexOf(pattern);\n        while (i != -1) {\n            times++;\n            i
    = str.IndexOf(pattern, i + 1);\n        }\n        return times;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var count = 0L;\n        int pos = -1;\n        while ((pos
    = str.IndexOf(substring, pos + 1)) != -1) {\n            count++;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var all = from i in Enumerable.Range(0, str.Length - substring.Length
    + 1)\n                  where Enumerable.Range(0, substring.Length).All(j => str[i
    + j] == substring[j])\n                  select i;\n        return all.Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return 1 + HowManyTimes(str.Substring(1), substring);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00001]
    in <478b7f85da324717b3c4a5aee0747bd4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <478b7f85da324717b3c4a5aee0747bd4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: startIndex cannot be larger than length of
    string.\nParameter name: startIndex\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00001]
    in <478b7f85da324717b3c4a5aee0747bd4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <478b7f85da324717b3c4a5aee0747bd4>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ret = 0;\n        for (int i = 0; i <= str.Length -
    substring.Length; i++) {\n            bool match = true;\n            for (int
    j = 0; j < substring.Length; j++) {\n                if (str[i + j] != substring[j])
    {\n                    match = false;\n                    break;\n                }\n
    \           }\n            if (match) {\n                ret++;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int strLen = str.Length;\n        int
    substrLen = substring.Length;\n        if (substrLen > strLen) {\n            return
    result;\n        }\n        for (int i = 0; i < strLen - substrLen + 1; i++) {\n
    \           if (str.Substring(i, substrLen) == substring) {\n                result++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return new string(str.ToCharArray().Where(x => x == substring[0]).ToArray()).Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f581382f859d47ada6d9f0d9df6c2736>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (i + substring.Length > str.Length) {\n                break;\n
    \           }\n            if (str.Substring(i, substring.Length) == substring)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        for (int i = 0; i <= str.Length
    - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)
    == substring) {\n                result++;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length == 0) {\n            return 0;\n        }\n
    \       if (str.Length == 0) {\n            return 0;\n        }\n        var
    s = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i]
    == substring[0]) {\n                var k = 0;\n                var ii = i;\n
    \               while (k < substring.Length && ii < str.Length && str[ii] == substring[k])
    {\n                    k++;\n                    ii++;\n                }\n                if
    (k == substring.Length) {\n                    s++;\n                }\n            }\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var ans = 0L;\n        for (var i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i).StartsWith(substring)) {\n                ans++;\n
    \           }\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long r = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (i + substring.Length > str.Length) {\n                continue;\n
    \           }\n            bool ok = true;\n            for (int j = 0; j < substring.Length;
    j++) {\n                if (str[i + j] != substring[j]) {\n                    ok
    = false;\n                    break;\n                }\n            }\n            if
    (ok) {\n                r++;\n            }\n        }\n        return r;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length == 0) {\n            return 0;\n        }\n
    \       int count = 0;\n        int lastIdx = 0;\n        int idx = str.IndexOf(substring,
    lastIdx);\n        while (idx != -1) {\n            count++;\n            lastIdx
    = idx + 1;\n            idx = str.IndexOf(substring, lastIdx);\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ans = 0;\n        for (int l = 0; l < str.Length; l++)
    {\n            for (int r = l + 1; r <= str.Length; r++) {\n                if
    (str.Substring(l, r - l) == substring) {\n                    ans++;\n                }\n
    \           }\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // >>> HowManyTimes((\"\"), (\"a\"))\n        // (0L)\n
    \       // >>> HowManyTimes((\"aaa\"), (\"a\"))\n        // (3L)\n        // >>>
    HowManyTimes((\"aaaa\"), (\"aa\"))\n        // (3L)\n        long result = 0;\n
    \       int index = 0;\n        if (substring.Length == 0) {\n            return
    0;\n        }\n        while (index < str.Length) {\n            if (str[index]
    == substring[0]) {\n                if (str.Length - index < substring.Length)
    {\n                    // can't match\n                    break;\n                }\n
    \               bool matches = true;\n                for (int i = 0; i < substring.Length;
    i++) {\n                    if (str[index + i] != substring[i]) {\n                        matches
    = false;\n                        break;\n                    }\n                }\n
    \               if (matches) {\n                    result++;\n                    index
    += substring.Length;\n                } else {\n                    index++;\n
    \               }\n            } else {\n                index++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3cb063edc1c4c7fb179cd4406d3f255>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        string s = substring;\n        long count = 0;\n        for
    (int start = 0; ; ) {\n            int next = str.IndexOf(s, start);\n            if
    (next == -1)\n                break;\n            count++;\n            start
    = next + 1;\n        }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long Count = 0;\n        int StartPos = 0;\n        while
    (true) {\n            int Index = str.IndexOf(substring, StartPos);\n            if
    (Index < 0) {\n                break;\n            }\n            Count += 1;\n
    \           StartPos = Index + 1;\n        }\n        return Count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int j = 0;\n        for (int i
    = 0; i < str.Length; i++) {\n            if (str[i] == substring[j]) {\n                j++;\n
    \               if (j == substring.Length) {\n                    result++;\n
    \                   j = 0;\n                }\n            } else {\n                j
    = 0;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b84ebb75134a4dfd81658b0703b01f4a>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i <= str.Length
    - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)
    == substring) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Length - str.Replace(substring, \"\").Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var len1 = str.Length;\n        var len2 = substring.Length;\n
    \       if (len1 < len2) {\n            return 0;\n        }\n        var results
    = new List<long>();\n        var lastIndex = len1 - len2;\n        for (var i
    = 0; i <= lastIndex; i++) {\n            var piece = str.Substring(i, len2);\n
    \           if (piece == substring) {\n                results.Add(i);\n            }\n
    \       }\n        return results.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Count(v => substring.Equals(str.Substring(v,
    substring.Length)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c__DisplayClass0_0.<HowManyTimes>b__0 (System.Char v) [0x00018]
    in <f42088816ae343fb9b974531c67909ce>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]
    predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.HowManyTimes
    (System.String str, System.String substring) [0x00015] in <f42088816ae343fb9b974531c67909ce>:0
    \n  at Problem.Main (System.String[] args) [0x0001a] in <f42088816ae343fb9b974531c67909ce>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c__DisplayClass0_0.<HowManyTimes>b__0 (System.Char v) [0x00018]
    in <f42088816ae343fb9b974531c67909ce>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]
    predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.HowManyTimes
    (System.String str, System.String substring) [0x00015] in <f42088816ae343fb9b974531c67909ce>:0
    \n  at Problem.Main (System.String[] args) [0x0001a] in <f42088816ae343fb9b974531c67909ce>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int i = 0;\n        long count = 0;\n        while (true)
    {\n            i = str.IndexOf(substring, i);\n            if (i == -1) break;\n
    \           i++;\n            count++;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            for (int j = 0; j < substring.Length; j++) {\n                if
    (i + j >= str.Length) {\n                    break;\n                }\n                if
    (str[i + j] != substring[j]) {\n                    break;\n                }\n
    \               if (j == substring.Length - 1) {\n                    result++;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int i = 0;\n        long count = 0;\n        while ((i =
    str.IndexOf(substring, i)) != -1) {\n            i += substring.Length;\n            count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bb8d29237ba406ea31531b2f2fd0308>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int s = 0;\n        while (str.IndexOf(substring, s) >=
    0) {\n            s = str.IndexOf(substring, s) + 1;\n            yield return
    1;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhnkams4.cs(16,24): error CS1624: The body of ''Problem.HowManyTimes(string,
    string)'' cannot be an iterator block because ''long'' is not an iterator interface
    type

    '
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, Math.Min(substring.Length, str.Length
    - i)) == substring) {\n                result += 1;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // >>> re.findall(\"abcabc\", \"abc\")\n        // ['abc',
    'abc']\n        // >>> re.findall(\"abcabc\", \"a\")\n        // ['a', 'a']\n
    \       // >>> re.findall(\"abcabc\", \"\")\n        // ['', '', '', '', '', '']\n
    \       // >>> re.findall(\"abcabc\", \"bc\")\n        // ['bc', 'bc']\n        //
    >>> re.findall(\"abcabc\", \"abcabc\")\n        // ['abcabc']\n        // >>>
    re.findall(\"abcabc\", \"abcab\")\n        // []\n        // >>> re.findall(\"abcabc\",
    \"abcd\")\n        // []\n        // >>> re.findall(\"abcabc\", \"abcabcabc\")\n
    \       // []\n        if (substring == \"\")\n            return str.Length +
    1;\n        var substrings = new List<string>();\n        for (int i = 0; i <
    str.Length; i++) {\n            if (i + substring.Length <= str.Length) {\n                var
    substr = str.Substring(i, substring.Length);\n                if (substr == substring)\n
    \                   substrings.Add(substr);\n            }\n        }\n        return
    substrings.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        for (int start = 0; start < str.Length;
    ++start) {\n            for (int substart = 0; substart < substring.Length; ++substart)
    {\n                int stringIndex = start + substart;\n                if (stringIndex
    >= str.Length) {\n                    break;\n                }\n                if
    (str[stringIndex] != substring[substart]) {\n                    break;\n                }\n
    \               if (substart == substring.Length - 1) {\n                    ++result;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length > str.Length) {\n            return
    0;\n        }\n        long answer = 0;\n        long mul = 1;\n        long hash
    = 0;\n        long hash_substring = 0;\n        int p = 100000007;\n        int
    x = 31;\n        var xpow = new List<long> {1};\n        long xpowi = 1;\n        for
    (int i = 0; i < str.Length; i++) {\n            var s = str[i];\n            hash
    = (hash + s * mul) % p;\n            xpowi = (xpowi * x) % p;\n            xpow.Add(xpowi);\n
    \           mul = (mul * x) % p;\n        }\n        mul = 1;\n        for (int
    i = 0; i < substring.Length; i++) {\n            var s = substring[i];\n            hash_substring
    = (hash_substring + s * mul) % p;\n            mul = (mul * x) % p;\n        }\n
    \       for (int i = 0; i + substring.Length <= str.Length; i++) {\n            var
    xi = xpow[i];\n            var xj = xpow[i + substring.Length];\n            var
    hash_i = (hash + p - (xi * str[i]) % p) % p;\n            var hash_j = (hash_i
    * xj) % p;\n            if (hash_j == hash_substring) {\n                answer++;\n
    \           }\n        }\n        return answer;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1aa900d91ce41858f463ce06fd0960e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1aa900d91ce41858f463ce06fd0960e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var l = str.Length;\n        var sub = substring.Length;\n
    \       var count = 0L;\n        for (var i = 0; i < l; i++) {\n            if
    (sub + i <= l && str.Substring(i, sub) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int start = 0;\n        while
    (true) {\n            start = str.IndexOf(substring, start);\n            if (start
    == -1)\n                break;\n            result++;\n            start++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        int pos = 0;\n        while (true)
    {\n            pos = str.IndexOf(substring, pos);\n            if (pos == -1)\n
    \               break;\n            cnt++;\n            pos++;\n        }\n        return
    cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long start = -1;\n        long count = 0;\n        for (long
    i = 0; i < str.Length; i++) {\n            if (str[(int)i] == substring[0]) {\n
    \               start = i;\n                break;\n            }\n        }\n
    \       while (start != -1) {\n            int i = 0;\n            while (i <
    substring.Length && (start + i) < str.Length && str[(int)(start + i)] == substring[i])
    {\n                i++;\n            }\n            if (i == substring.Length)
    {\n                count++;\n            }\n            start = -1;\n            for
    (long x = start + i; x < str.Length; x++) {\n                if (str[(int)x] ==
    substring[0]) {\n                    start = x;\n                    break;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976170
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return new List<string>(str.Split(substring)).Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <433b282c30054441938af655425e9b99>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long matches = 0;\n        for (int i = 0; i <= str.Length
    - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)
    == substring) {\n                matches++;\n            }\n        }\n        return
    matches;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var i = 0;\n        var times = 0;\n        while ((i =
    str.IndexOf(substring, i)) != -1) {\n            times++;\n            i++;\n
    \       }\n        return times;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (substring.Length <= str.Length - i && str.Substring(i,
    substring.Length) == substring) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long res = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i, substring.Length) == substring) {\n                res++;\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        int index = 0;\n        while ((index
    = str.IndexOf(substring, index)) != -1) {\n            index += substring.Length;\n
    \           count++;\n        }\n        return count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <456e8f77b43441fbad0be8a4203dcb36>:0
    \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int M = substring.Length;\n        int N = str.Length;\n
    \       int count = 0;\n        for (int i = 0; i <= N - M; i++) {\n            int
    j;\n            for (j = 0; j < M; j++) {\n                if (str[i + j] != substring[j])
    {\n                    break;\n                }\n            }\n            if
    (j == M) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length > str.Length) {\n            return
    0;\n        }\n        long result = 0;\n        int j = 0;\n        for (int
    i = 0; i < str.Length; i++) {\n            if (str[i] == substring[j]) {\n                j++;\n
    \               if (j == substring.Length) {\n                    result++;\n
    \                   j = 0;\n                }\n            } else {\n                j
    = 0;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d143686a9a3e4eabbc67bd9f7e4559fa>:0
    \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int pos = str.IndexOf(substring);\n
    \       while (pos != -1) {\n            result += 1;\n            pos = str.IndexOf(substring,
    pos + 1);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int n = str.Length, m = substring.Length;\n        int[]
    p = new int[m];\n        p[0] = -1;\n        for (int i = 1; i < m; i++) {\n            int
    j = p[i - 1];\n            while (j != -1 && substring[j + 1] != substring[i])
    {\n                j = p[j];\n            }\n            if (substring[j + 1]
    == substring[i]) {\n                p[i] = j + 1;\n            } else {\n                p[i]
    = -1;\n            }\n        }\n        int cnt = 0;\n        int q = -1;\n        for
    (int i = 0; i < n; i++) {\n            while (q != -1 && substring[q + 1] != str[i])
    {\n                q = p[q];\n            }\n            if (substring[q + 1]
    == str[i]) {\n                q++;\n            }\n            if (q == m - 1)
    {\n                cnt++;\n                q = p[q];\n            }\n        }\n
    \       return cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ret = 0;\n        for (int i = 0; i <= str.Length -
    substring.Length; i++) {\n            bool match = true;\n            for (int
    j = 0; j < substring.Length; j++) {\n                if (str[i + j] != substring[j])
    {\n                    match = false;\n                    break;\n                }\n
    \           }\n            if (match) {\n                ret++;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        string ss = str;\n        long n = 0;\n        while (ss.Length
    > 0) {\n            int ix = ss.IndexOf(substring);\n            if (ix >= 0)
    {\n                n += 1;\n                ss = ss.Substring(ix + 1);\n            }
    else {\n                break;\n            }\n        }\n        return n;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var i = 0;\n        var j = 0;\n        var count = 0;\n
    \       while (i < str.Length) {\n            if (str[i] == substring[j]) {\n
    \               j++;\n                if (j == substring.Length) {\n                    count++;\n
    \                   j = 0;\n                }\n            } else {\n                j
    = 0;\n            }\n            i++;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0283c08889fc4d8db3bb2305dbf88bdf>:0
    \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int sub_len = substring.Length;\n        long count = 0;\n
    \       for (int i = 0; i <= str.Length - sub_len; i++) {\n            if (str.Substring(i,
    sub_len) == substring) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ret = 0;\n        int slen = str.Length;\n        int
    sublen = substring.Length;\n        if (sublen > slen) {\n            ret = 0;\n
    \       } else {\n            for (int i = 0; i < slen - sublen + 1; i++) {\n
    \               if (str.Substring(i, sublen) == substring) {\n                    ret++;\n
    \               }\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        Debug.Assert(substring.Length > 0);\n        int count =
    0;\n        int pos = 0;\n        while (true) {\n            int next_pos = str.IndexOf(substring,
    pos);\n            if (next_pos == -1) {\n                break;\n            }\n
    \           pos = next_pos + 1;\n            count++;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length == 0) {\n            return 0;\n        }\n
    \       var ret = str.Length - substring.Length + 1;\n        for (int i = 1;
    i < substring.Length; i++) {\n            if (substring[i] != substring[0]) {\n
    \               break;\n            }\n            ret++;\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8489f91cace34f11bf3bed1f59742384>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8489f91cace34f11bf3bed1f59742384>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int index = -1;\n        long count = 0;\n        while
    ((index = str.IndexOf(substring, index + 1)) != -1) {\n            count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length > str.Length)\n            return 0;\n
    \       long count = 0;\n        for (int i = 0; i <= str.Length - substring.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring)\n                count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (str.Length < substring.Length) {\n            return
    0;\n        }\n        if (str.Length == substring.Length) {\n            return
    str == substring ? 1 : 0;\n        }\n        var ret = 0L;\n        for (var
    i = 0; i < str.Length - substring.Length + 1; i++) {\n            if (str.Substring(i,
    substring.Length) == substring) {\n                ret++;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Where((c, i) =>\n                (i == 0 || str[i
    - 1] != substring[0]) && str.Skip(i).Take(substring.Length).SequenceEqual(substring))\n
    \           .Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <ab2cb4fd545f4637b5c0ac10d5d7de58>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <ab2cb4fd545f4637b5c0ac10d5d7de58>:0 \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        int i = 0;\n        while (true)
    {\n            i = str.IndexOf(substring, i);\n            if (i < 0) {\n                break;\n
    \           }\n            i += substring.Length;\n            cnt++;\n        }\n
    \       return cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43e5773140e44bdc851d04695d72ee96>:0
    \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long res = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i, substring.Length) == substring) {\n                res++;\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Handle the case where the length of the substring is
    1.\n        if (substring.Length == 1) {\n            return str.Count(c => c
    == substring[0]);\n        }\n        // Initialize variables.\n        long count
    = 0;\n        var len = substring.Length;\n        // For every substring length,
    calculate the number of times it appears in the original string.\n        for
    (int i = 0; i < len; i++) {\n            // If a substring of the given length
    appears in the original string, increment the count.\n            if (str.Contains(substring.Substring(i,
    len - i))) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f5852c8a0c84bd2a0c29e9864f9604f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f5852c8a0c84bd2a0c29e9864f9604f>:0
    \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Your code goes here.\n        // Return the number of
    times 'substring' is found in 'str'.\n        long result = 0;\n        int index
    = 0;\n        while(true) {\n            index = str.IndexOf(substring, index);\n
    \           if(index == -1) {\n                break;\n            }\n            result
    += 1;\n            index += 1;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Your code goes here.\n        int n = str.Length;\n        int
    m = substring.Length;\n        BigInteger result = 0;\n        for (int i = 0;
    i < n; i++) {\n            for (int j = i; j < n; j++) {\n                string
    tempStr = str.Substring(i, j - i + 1);\n                if (tempStr.Length < m)
    {\n                    continue;\n                }\n                if (string.Compare(tempStr,
    substring) == 0) {\n                    result += 1;\n                }\n            }\n
    \       }\n        return (long)result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length == 0) {\n            return 0;\n        }\n
    \       return str.Length - str.Replace(substring, \"\").Length;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a4f6009966e4c3cb460bfbb3d77bccb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a4f6009966e4c3cb460bfbb3d77bccb>:0
    \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        int sublen = substring.Length;\n
    \       for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i,
    sublen) == substring) {\n                cnt++;\n            }\n        }\n        return
    cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <7853902d0619440fb487b9cf7fd0bf89>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <7853902d0619440fb487b9cf7fd0bf89>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <7853902d0619440fb487b9cf7fd0bf89>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <7853902d0619440fb487b9cf7fd0bf89>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        for (int i = 0; i <= str.Length -
    substring.Length; i++) {\n            if (str.Substring(i, substring.Length) ==
    substring) {\n                cnt++;\n            }\n        }\n        return
    cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        var len = substring.Length;\n        for
    (var i = 0; i <= str.Length - len; i++) {\n            if (substring == str.Substring(i,
    len)) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long r = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i, substring.Length) == substring)\n                r++;\n
    \       }\n        return r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <c3bf17a56e4545c7a56d0ad2ad7ba75e>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <c3bf17a56e4545c7a56d0ad2ad7ba75e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <c3bf17a56e4545c7a56d0ad2ad7ba75e>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <c3bf17a56e4545c7a56d0ad2ad7ba75e>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (str.Length < substring.Length) {\n            return
    0;\n        }\n        if (str.Length == substring.Length) {\n            return
    str == substring ? 1 : 0;\n        }\n        for (int i = 0; i < str.Length -
    substring.Length + 1; i++) {\n            if (str.Substring(i, substring.Length)
    == substring) {\n                return 1 + HowManyTimes(str.Substring(i + 1),
    substring);\n            }\n        }\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        Debug.Assert(str != null);\n        Debug.Assert(substring
    != null);\n        int len = substring.Length;\n        if (len == 0) return 0;\n
    \       int strlen = str.Length;\n        long result = 0;\n        for (int i
    = 0; i < strlen; i++) {\n            if (str[i] == substring[0]) {\n                result++;\n
    \               for (int j = 1; j < len; j++) {\n                    if (i + j
    >= strlen || str[i + j] != substring[j]) {\n                        result--;\n
    \                       break;\n                    }\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // At each position, check if there is a match with the
    substring.\n        // If there is a match, add the number of previous matches
    to the total count.\n        long count = 0;\n        long previous_count = 0;\n
    \       for (int i = 0; i < str.Length; i++) {\n            if (str[i] == substring[0])
    {\n                int j = 0;\n                while (j < substring.Length &&
    str[i + j] == substring[j]) {\n                    j++;\n                }\n                if
    (j == substring.Length) {\n                    count += previous_count + 1;\n
    \                   previous_count++;\n                }\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f10b24d824824e0b83e6455fd9c1e806>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String
    substring) [0x00038] in <f10b24d824824e0b83e6455fd9c1e806>:0 \n  at Problem.Main
    (System.String[] args) [0x00033] in <f10b24d824824e0b83e6455fd9c1e806>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String
    substring) [0x00038] in <f10b24d824824e0b83e6455fd9c1e806>:0 \n  at Problem.Main
    (System.String[] args) [0x00033] in <f10b24d824824e0b83e6455fd9c1e806>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ans = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            bool is_ok = true;\n            for (int j = 0; j < substring.Length;
    j++) {\n                if (str[i + j] != substring[j]) {\n                    is_ok
    = false;\n                    break;\n                }\n            }\n            if
    (is_ok) ans++;\n        }\n        return ans;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String
    substring) [0x00010] in <3223c91cdfe84f03b241bdf8712e2ef0>:0 \n  at Problem.Main
    (System.String[] args) [0x00033] in <3223c91cdfe84f03b241bdf8712e2ef0>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String
    substring) [0x00010] in <3223c91cdfe84f03b241bdf8712e2ef0>:0 \n  at Problem.Main
    (System.String[] args) [0x00033] in <3223c91cdfe84f03b241bdf8712e2ef0>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // NFA matching is too slow, use KMP matching\n        var
    p = new KMP(substring);\n        return p.Search(str).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8mlqaur8.cs(18,21): error CS0246: The type or namespace name ''KMP'' could
    not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int pos = 0;\n        long count = 0;\n        while (pos
    < str.Length && pos != -1) {\n            pos = str.IndexOf(substring, pos);\n
    \           if (pos != -1) {\n                count++;\n                pos++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        string[] array = str.Split(new string[] { substring }, StringSplitOptions.None);\n
    \       return array.Length - 1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5e0a452db9f479c9467a8c32c2f7095>:0
    \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long sum = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i, substring.Length) == substring) {\n                sum++;\n
    \           }\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <6ff59d11e04c40f7a5ba8f3502fe3a0c>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <6ff59d11e04c40f7a5ba8f3502fe3a0c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <6ff59d11e04c40f7a5ba8f3502fe3a0c>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <6ff59d11e04c40f7a5ba8f3502fe3a0c>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length > str.Length)\n            return 0;\n
    \       if (substring.Length == 0)\n            return str.Length + 1;\n        int
    count = 0;\n        int i = 0;\n        while (i < str.Length) {\n            if
    (str[i] == substring[0]) {\n                int j = 1;\n                while
    (j < substring.Length && i + j < str.Length && str[i + j] == substring[j])\n                    j++;\n
    \               if (j == substring.Length)\n                    count++;\n            }\n
    \           i++;\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var i = 0;\n        var count = 0;\n        while (true)
    {\n            i = str.IndexOf(substring, i);\n            if (i == -1)\n                break;\n
    \           i++;\n            count++;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Length - str.Replace(substring, \"\").Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Length - str.Replace(substring, \"\").Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        int strlen = str.Length;\n        int
    sublen = substring.Length;\n        for (int i = 0; i <= strlen - sublen; i++)
    {\n            string tstr = str.Substring(i, sublen);\n            if (tstr ==
    substring) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Write your code here\n        int idx = 0;\n        int
    count = 0;\n        while (idx >= 0) {\n            idx = str.IndexOf(substring,
    idx, StringComparison.Ordinal);\n            if (idx >= 0) {\n                idx
    += substring.Length;\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58952cf349044e3aba1c137f380bc4fc>:0
    \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int cnt = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i, substring.Length) == substring)\n                cnt++;\n
    \       }\n        return cnt;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <3c03c462ecba483d992257f528bb8a46>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <3c03c462ecba483d992257f528bb8a46>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <3c03c462ecba483d992257f528bb8a46>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <3c03c462ecba483d992257f528bb8a46>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        int idx = 0;\n        while ((idx
    = str.IndexOf(substring, idx)) >= 0) {\n            idx += substring.Length;\n
    \           cnt++;\n        }\n        return cnt;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7012fd0957d49879230330d79c6af6d>:0
    \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        Debug.Assert(substring.Length > 0);\n        long count
    = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] ==
    substring[0]) {\n                bool found = true;\n                for (int
    j = 1; j < substring.Length; j++) {\n                    if (i + j >= str.Length
    || str[i + j] != substring[j]) {\n                        found = false;\n                        break;\n
    \                   }\n                }\n                if (found) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length == 0) {\n            return 0;\n        }\n
    \       var originalIndex = 0;\n        var originalCount = 0;\n        var substringIndex
    = 0;\n        var substringCount = 0;\n        var result = 0L;\n        while
    (originalIndex < str.Length) {\n            if (str[originalIndex] == substring[substringIndex])
    {\n                originalCount += 1;\n                substringCount += 1;\n
    \               if (substringCount == substring.Length) {\n                    result
    += 1;\n                    substringCount = 0;\n                    substringIndex
    = 0;\n                } else {\n                    substringIndex += 1;\n                }\n
    \           } else {\n                substringIndex = 0;\n                substringCount
    = 0;\n            }\n            originalIndex += 1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3f906c21b8443aeb1979b4568b0c196>:0
    \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        int subLen = substring.Length;\n
    \       int strLen = str.Length;\n        for (int i = 0; i < strLen; i++) {\n
    \           if (str[i] == substring[0]) {\n                bool match = true;\n
    \               for (int j = 1; j < subLen; j++) {\n                    if (str[i
    + j] != substring[j]) {\n                        match = false;\n                        break;\n
    \                   }\n                }\n                if (match) {\n                    cnt++;\n
    \               }\n            }\n        }\n        return cnt;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String
    substring) [0x00037] in <d40ca7a983ca499799b561838a0bda9c>:0 \n  at Problem.Main
    (System.String[] args) [0x00033] in <d40ca7a983ca499799b561838a0bda9c>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String
    substring) [0x00037] in <d40ca7a983ca499799b561838a0bda9c>:0 \n  at Problem.Main
    (System.String[] args) [0x00033] in <d40ca7a983ca499799b561838a0bda9c>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Your code goes here\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60d614a4b404f419747e6a658122f88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60d614a4b404f419747e6a658122f88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        int index = -1;\n        while
    (true) {\n            index = str.IndexOf(substring, index + 1);\n            if
    (index == -1) {\n                break;\n            }\n            count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (str.Length == 0 || substring.Length == 0)\n            return
    0;\n        long count = 0;\n        for (int i = 0; i <= str.Length - substring.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring)\n                count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int len = substring.Length;\n        if (len > str.Length)
    return 0;\n        long count = 0;\n        for (int i = 0; i < str.Length - len
    + 1; i++) {\n            if (str.Substring(i, len) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ans = 0;\n        int len = substring.Length;\n        for
    (int i = 0; i <= str.Length - len; i++) {\n            if (str.Substring(i, len)
    == substring)\n                ans++;\n        }\n        return ans;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var count = 0L;\n        var substringLength = substring.Length;\n
    \       var strLength = str.Length;\n        for (var i = 0; i < strLength; i++)
    {\n            if (i + substringLength > strLength) {\n                break;\n
    \           }\n            var sub = str.Substring(i, substringLength);\n            if
    (sub == substring) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Fill in your solution here\n        var len = substring.Length;\n
    \       var count = 0;\n        var i = 0;\n        while (i < str.Length) {\n
    \           if (str.Substring(i, len) == substring) {\n                count++;\n
    \               i += len;\n            } else {\n                i++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x0000f]
    in <750c2e3712f74995b049101a0809e0e2>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <750c2e3712f74995b049101a0809e0e2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x0000f]
    in <750c2e3712f74995b049101a0809e0e2>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <750c2e3712f74995b049101a0809e0e2>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ret = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (substring.Length + i > str.Length) break;\n            if (substring
    == str.Substring(i, substring.Length)) {\n                ret++;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            int s = i;\n            int subIndex = 0;\n            while
    (s < str.Length && subIndex < substring.Length && str[s] == substring[subIndex])
    {\n                s++;\n                subIndex++;\n            }\n            if
    (subIndex == substring.Length)\n                result++;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Your code goes here\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60d614a4b404f419747e6a658122f88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60d614a4b404f419747e6a658122f88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (i + substring.Length <= str.Length && str.Substring(i,
    substring.Length) == substring) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return HowManyTimes(str, substring, str.Length, substring.Length);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2c7e6qd7.cs(17,16): error CS1501: No overload for method ''HowManyTimes''
    takes 4 arguments

    '
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long res = 0;\n        if (substring.Length > str.Length)
    {\n            return res;\n        }\n        while (str.Length != 0) {\n            int
    pos = str.IndexOf(substring);\n            if (pos == -1) {\n                break;\n
    \           }\n            str = str.Substring(pos + substring.Length);\n            res++;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e2ef04b8ba742e5bd82a3868de6413b>:0
    \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i <= str.Length
    - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)
    == substring)\n                count++;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (str.Length == 0 || substring.Length == 0) {\n            return
    0;\n        }\n        if (substring.Length > str.Length) {\n            return
    0;\n        }\n        long result = 0;\n        for (int i = 0; i <= str.Length
    - substring.Length; i++) {\n            bool match = true;\n            for (int
    j = 0; j < substring.Length; j++) {\n                if (str[i + j] != substring[j])
    {\n                    match = false;\n                    break;\n                }\n
    \           }\n            if (match) {\n                result++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i, 1) == substring.Substring(0, 1)) {\n                bool
    match = true;\n                for (int j = 1; j < substring.Length; j++) {\n
    \                   if (i + j >= str.Length || str.Substring(i + j, 1) != substring.Substring(j,
    1)) {\n                        match = false;\n                        break;\n
    \                   }\n                }\n                if (match) {\n                    cnt++;\n
    \               }\n            }\n        }\n        return cnt;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i, substring.Length) == substring) {\n                cnt++;\n
    \           }\n        }\n        return cnt;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <0515daad8c8242048fa925843599fab9>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <0515daad8c8242048fa925843599fab9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <0515daad8c8242048fa925843599fab9>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <0515daad8c8242048fa925843599fab9>:0 \n"
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int n = str.Length;\n        int m = substring.Length;\n
    \       long total = 0;\n        int count = 0;\n        for (int i = 0; i < n;
    i++) {\n            if (str[i] == substring[count]) {\n                count++;\n
    \               if (count == m) {\n                    total++;\n                    count
    = 0;\n                }\n            } else {\n                count = 0;\n            }\n
    \       }\n        return total;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a6687235555400392a7032e652e4a13>:0
    \n"
  stdout: ''
  timestamp: 1659976168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // >>> HowManyTimes((\"abcd\"), (\"a\"))\n        // (1L)\n
    \       // >>> HowManyTimes((\"aaaa\"), (\"a\"))\n        // (4L)\n        //
    >>> HowManyTimes((\"\"), (\"\"))\n        // (1L)\n        // >>> HowManyTimes((\"abcd\"),
    (\"d\"))\n        // (1L)\n        // >>> HowManyTimes((\"abcd\"), (\"cd\"))\n
    \       // (1L)\n        // >>> HowManyTimes((\"abc\"), (\"abc\"))\n        //
    (1L)\n        // >>> HowManyTimes((\"xabcd\"), (\"ab\"))\n        // (1L)\n        //
    >>> HowManyTimes((\"xabcd\"), (\"abx\"))\n        // (0L)\n        // >>> HowManyTimes((\"xabcd\"),
    (\"abc\"))\n        // (1L)\n        // >>> HowManyTimes((\"xabcd\"), (\"abcd\"))\n
    \       // (1L)\n        // >>> HowManyTimes((\"xabcd\"), (\"xabcd\"))\n        //
    (1L)\n        // >>> HowManyTimes((\"xabcd\"), (\"xabx\"))\n        // (0L)\n
    \       // >>> HowManyTimes((\"xabcd\"), (\"xab\"))\n        // (1L)\n        //
    >>> HowManyTimes((\"xabcd\"), (\"xabxcd\"))\n        // (0L)\n        // >>> HowManyTimes((\"xabcd\"),
    (\"xabc\"))\n        // (1L)\n        // >>> HowManyTimes((\"xabcd\"), (\"xabcdx\"))\n
    \       // (0L)\n        // >>> HowManyTimes((\"xabcd\"), (\"xxabcd\"))\n        //
    (0L)\n        // >>> HowManyTimes((\"xabcd\"), (\"axbcd\"))\n        // (0L)\n
    \       // >>> HowManyTimes((\"xabcd\"), (\"xaxbcd\"))\n        // (0L)\n        //
    >>> HowManyTimes((\"xabcd\"), (\"xxaxbcd\"))\n        // (0L)\n        // >>>
    HowManyTimes((\"xabcd\"), (\"xaxbcdx\"))\n        // (0L)\n        // >>> HowManyTimes((\"xabcd\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb8kr872m.cs(16,24): error CS0161: ''Problem.HowManyTimes(string, string)'':
    not all code paths return a value

    '
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ret = 0;\n        for (int i = 0; i < str.Length; ++i)
    {\n            if (str.Substring(i, Math.Min(substring.Length, str.Length - i))
    == substring) {\n                ++ret;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        int it = 0;\n        while (it
    < str.Length - substring.Length + 1) {\n            int ix = str.IndexOf(substring,
    it);\n            if (ix < 0) {\n                break;\n            }\n            count++;\n
    \           it = ix + 1;\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int pos = str.IndexOf(substring);\n
    \       while (pos >= 0) {\n            result++;\n            pos = str.IndexOf(substring,
    pos + 1);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976167
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var i = 0;\n        var count = 0;\n        while (true)
    {\n            var j = str.IndexOf(substring, i);\n            if (j == -1) {\n
    \               break;\n            }\n            count += 1;\n            i
    = j + 1;\n        }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int lastEnd = -1;\n        for
    (int i = 0; i <= str.Length - substring.Length; i++) {\n            bool good
    = true;\n            for (int j = 0; j < substring.Length; j++) {\n                if
    (str[i + j] != substring[j]) {\n                    good = false;\n                    break;\n
    \               }\n            }\n            if (good) {\n                if
    (i <= lastEnd) {\n                    result++;\n                } else {\n                    lastEnd
    = i + substring.Length - 1;\n                    result += 2;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa7a115c0b76469ea62271d34aad4c78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa7a115c0b76469ea62271d34aad4c78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ret = 0;\n        int len = substring.Length;\n        for
    (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i, Math.Min(len,
    str.Length - i)) == substring) {\n                ret++;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var count = 0L;\n        for (var i = 0; i < str.Length;
    i++) {\n            if (i + substring.Length > str.Length) break;\n            if
    (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long n = str.Length - substring.Length + 1;\n        long
    result = 0;\n        for (long i = 0; i < n; i++) {\n            if (str.Substring((int)i,
    substring.Length) == substring) {\n                result++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <77979c7300a54847b8c2af2540fd7e08>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <77979c7300a54847b8c2af2540fd7e08>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <77979c7300a54847b8c2af2540fd7e08>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <77979c7300a54847b8c2af2540fd7e08>:0 \n"
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int n = str.Length;\n        int m = substring.Length;\n
    \       int[] prefix = new int[m];\n        int l = 0;\n        prefix[0] = 0;\n
    \       for (int i = 1; i < m; i++) {\n            while (l > 0 && substring[l]
    != substring[i]) {\n                l = prefix[l - 1];\n            }\n            if
    (substring[l] == substring[i]) {\n                l++;\n            }\n            prefix[i]
    = l;\n        }\n        l = 0;\n        long res = 0;\n        for (int i = 0;
    i < n; i++) {\n            while (l > 0 && substring[l] != str[i]) {\n                l
    = prefix[l - 1];\n            }\n            if (substring[l] == str[i]) {\n                l++;\n
    \           }\n            if (l == m) {\n                res++;\n                l
    = prefix[l - 1];\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ret = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (i + substring.Length <= str.Length) {\n                if (str.Substring(i,
    substring.Length) == substring) {\n                    ret++;\n                }\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return new Regex(substring).Matches(str).Count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpui_21ae8.cs(17,20): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // >>> substrings(\"aaa\", \"a\")\n        // ['a', 'aa',
    'aaa']\n        // >>> substrings(\"aaa\", \"aa\")\n        // ['aa', 'aaa']\n
    \       // >>> substrings(\"aaa\", \"aaa\")\n        // ['aaa']\n        IEnumerable<string>
    substrings(string s, string t) {\n            if (s.Length >= t.Length) {\n                for
    (int i = 0; i < s.Length - t.Length + 1; i++) {\n                    string ss
    = s.Substring(i, t.Length);\n                    if (ss == t) {\n                        yield
    return ss;\n                    }\n                }\n            }\n        }\n
    \       return substrings(str, substring).Count();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e89f09b10a646609b1c45b4fb17d59c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e89f09b10a646609b1c45b4fb17d59c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Split(new[] { substring }, StringSplitOptions.None).Length
    - 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7c47b5a24bb4262bf36dfc7c97c847b>:0
    \n"
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Split(new string[] { substring }, StringSplitOptions.None).Length
    - 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96d4d867c00340aabc1e846fcaf5e401>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long r = 0;\n        int start = 0;\n        int idx = 0;\n
    \       while ((idx = str.IndexOf(substring, start)) != -1) {\n            r++;\n
    \           start = idx + 1;\n        }\n        return r;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length == 0) return 0;\n        long result
    = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] ==
    substring[0]) {\n                bool ok = true;\n                for (int j =
    1; j < substring.Length; j++) {\n                    if (i + j >= str.Length ||
    str[i + j] != substring[j]) {\n                        ok = false;\n                        break;\n
    \                   }\n                }\n                if (ok) {\n                    result++;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Count(substring);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpabkrd2gp.cs(17,26): error CS1503: Argument 2: cannot convert from ''string''
    to ''System.Func<char, bool>''

    '
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        int idx = 0;\n        while (idx
    != -1) {\n            idx = str.IndexOf(substring, idx);\n            if (idx
    != -1) {\n                count++;\n                idx++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Count(x => x == substring[0]);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84145dcfee444173a5e0073f23bf967e>:0
    \n"
  stdout: ''
  timestamp: 1659976168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long res = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            if (str.Substring(i, substring.Length) == substring) {\n                res++;\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <ef1d11a8ea714b26b55c9448c9a3b666>:0 \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long cnt = 0;\n        for (int i = 0; i <= str.Length -
    substring.Length; i++) {\n            bool good = true;\n            for (int
    j = 0; j < substring.Length; j++) {\n                if (str[i + j] != substring[j])
    {\n                    good = false;\n                    break;\n                }\n
    \           }\n            if (good) {\n                cnt++;\n            }\n
    \       }\n        return cnt;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // >>> s = \"ababaababaab\"\n        // >>> len(s)\n        //
    (12L)\n        // >>> s[3:3+5]\n        // ('abaaa')\n        // >>> s[3:3+5]
    == s[3+5:3+5+5]\n        // (True)\n        // >>> s[3:3+5] == s[3+6:3+6+5]\n
    \       // (False)\n        // >>> s[3:3+5] == s[3+7:3+7+5]\n        // (False)\n
    \       int num = str.Length - substring.Length + 1;\n        int ans = 0;\n        for
    (int i = 0; i < num; i++) {\n            if (str.Substring(i, substring.Length)
    == substring) {\n                ans++;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int N = str.Length;\n        int n = substring.Length;\n
    \       long cnt = 0;\n        for (int start = 0; start < N; start++) {\n            for
    (int end = start + n; end <= N; end++) {\n                if (str.Substring(start,
    end - start) == substring) {\n                    cnt++;\n                }\n
    \           }\n        }\n        return cnt;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <ab2cb4fd545f4637b5c0ac10d5d7de58>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <ab2cb4fd545f4637b5c0ac10d5d7de58>:0 \n"
  stdout: ''
  timestamp: 1659976166
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var count = 0L;\n        var subLen = substring.Length;\n
    \       for (var i = 0; i < str.Length; i++) {\n            if (str.Substring(i,
    subLen) == substring) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <17cfc1ddb6a9484f846ee3025298e916>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <17cfc1ddb6a9484f846ee3025298e916>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]
    in <17cfc1ddb6a9484f846ee3025298e916>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <17cfc1ddb6a9484f846ee3025298e916>:0 \n"
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var count = 0L;\n        var index = 0;\n        while (index
    >= 0) {\n            index = str.IndexOf(substring, index);\n            if (index
    >= 0) {\n                count++;\n                index++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Length - str.Replace(substring, \"\").Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int from = 0;\n        long count = 0;\n        while (true)
    {\n            int where = str.IndexOf(substring, from);\n            if (where
    < 0)\n                break;\n            count++;\n            from = where +
    1;\n        }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long res = 0;\n        int c = 0;\n        for (int i =
    0; i < str.Length; i++) {\n            if (str[i] == substring[c]) {\n                c++;\n
    \               if (c == substring.Length) {\n                    res++;\n                    c
    = 0;\n                }\n            } else {\n                c = 0;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f00c50d08ea4e2b8cbee89120b5175e>:0
    \n"
  stdout: ''
  timestamp: 1659976168
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var ans = 0L;\n        var substringLength = substring.Length;\n
    \       var strLength = str.Length;\n        for (var i = 0; i < strLength; i++)
    {\n            if (str.Substring(i, Math.Min(substringLength, strLength - i))
    == substring) {\n                ans++;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length > str.Length)\n            return 0;\n
    \       long n = str.Length - substring.Length + 1;\n        long h1 = 0;\n        long
    h2 = 0;\n        long b = 10L;\n        for (int i = 0; i < substring.Length;
    i++) {\n            h1 = (h1 * b + str[i]) % 500000023;\n            h2 = (h2
    * b + substring[i]) % 500000023;\n        }\n        List<long> powers = new List<long>();\n
    \       long p = 1;\n        for (int i = 0; i < substring.Length; i++) {\n            powers.Add(p);\n
    \           p = (p * b) % 500000023;\n        }\n        long res = 0;\n        if
    (h1 == h2)\n            res++;\n        for (int i = substring.Length; i < str.Length;
    i++) {\n            h1 = (h1 - powers[0] * str[i - substring.Length]) % 500000023;\n
    \           if (h1 < 0)\n                h1 += 500000023;\n            h1 = (h1
    * b + str[i]) % 500000023;\n            if (h1 == h2)\n                res++;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a8bd60024d4ab99ef944e6942051db>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        int n = str.Length;\n        int
    k = substring.Length;\n        for (int i = 0; i < n - k + 1; i++) {\n            bool
    match = true;\n            for (int j = 0; j < k; j++) {\n                if (str[i
    + j] != substring[j]) {\n                    match = false;\n                    break;\n
    \               }\n            }\n            if (match) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int k = substring.Length;\n        var data = new long[str.Length
    + 1];\n        var sum = new long[str.Length + 1];\n        long result = 0;\n
    \       for (int i = 0; i < str.Length; i++) {\n            data[i + 1] = str[i]
    == substring[0] ? 1 : 0;\n            sum[i + 1] = sum[i] + data[i + 1];\n        }\n
    \       for (int i = k; i <= str.Length; i++) {\n            result += data[i]
    * (sum[i - 1] - sum[i - k]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1692c21a62bd47ce952d19ab1a5fa814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1692c21a62bd47ce952d19ab1a5fa814>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Your code goes here\n        long count = 0;\n        for
    (int i = 0; i < str.Length - substring.Length + 1; i++) {\n            if (str.Substring(i,
    substring.Length) == substring) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Length - str.Replace(substring, \"\").Length
    + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68a3e2bfa9104e9fa3d537f3cede7b1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68a3e2bfa9104e9fa3d537f3cede7b1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976169
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Length - str.Replace(substring, \"\").Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f8be0a8c5e3493a8e1cb9ac8a0ce319>:0
    \n"
  stdout: ''
  timestamp: 1659976165
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int pos = 0;\n        long cnt = 0;\n        for (pos =
    str.IndexOf(substring, pos); pos != -1; pos = str.IndexOf(substring, pos)) {\n
    \           cnt++;\n            pos++;\n        }\n        return cnt;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return (str.Length - substring.Length + 1) *\n            str.Split(new
    string[] { substring }, StringSplitOptions.None).Length -\n            1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57b83f00c2f941788f318da26aa3cd8b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57b83f00c2f941788f318da26aa3cd8b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long times = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, 1) == substring.Substring(0, 1)) {\n
    \               bool good = true;\n                for (int j = 1; j < substring.Length;
    j++) {\n                    if (i + j >= str.Length || str.Substring(i + j, 1)
    != substring.Substring(j, 1)) {\n                        good = false;\n                        break;\n
    \                   }\n                }\n                if (good) {\n                    times++;\n
    \               }\n            }\n        }\n        return times;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        long curr = 0;\n        long sublen
    = substring.Length;\n        while (curr < str.Length) {\n            int i =
    str.IndexOf(substring, (int)curr);\n            if (i == -1) break;\n            count
    += 1;\n            curr = i + sublen;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9649f239844c49c1b1e1a287cf8c0ec2>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, 1) == substring) {\n                result
    += 1;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1063ab31fb148b2bd5a22908a0263df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1063ab31fb148b2bd5a22908a0263df>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int count = 0;\n        int i = 0;\n        while (true)
    {\n            int next = str.IndexOf(substring, i);\n            if (next ==
    -1) break;\n            i = next + 1;\n            count++;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int i = 0;\n        for (; i <
    str.Length - substring.Length + 1; i++) {\n            if (str.Substring(i, substring.Length)
    == substring) {\n                result++;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var strlen = str.Length;\n        var sublen = substring.Length;\n
    \       if (sublen > strlen) {\n            return 0;\n        }\n        var
    ret = 0L;\n        for (var ix = 0; ix < strlen; ix++) {\n            if (str[ix]
    == substring[0]) {\n                var kx = ix;\n                var jx = 0;\n
    \               while (kx < strlen && jx < sublen && str[kx] == substring[jx])
    {\n                    kx++;\n                    jx++;\n                }\n                if
    (jx == sublen) {\n                    ret++;\n                }\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long answer = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (i + substring.Length > str.Length) break;\n            if
    (str.Substring(i, substring.Length) == substring) {\n                answer++;\n
    \           }\n        }\n        return answer;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length > str.Length) {\n            return
    0;\n        }\n        int len = substring.Length;\n        int count = 0;\n        for
    (int i = 0; i <= str.Length - len; i++) {\n            bool flag = true;\n            for
    (int j = 0; j < len; j++) {\n                if (str[i + j] != substring[j]) {\n
    \                   flag = false;\n                    break;\n                }\n
    \           }\n            if (flag) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // START SOLUTION //\n        int i = 0;\n        int j
    = 0;\n        int count = 0;\n        while (i < str.Length) {\n            if
    (str[i] == substring[j]) {\n                j++;\n                if (j == substring.Length)
    {\n                    count++;\n                    j = 0;\n                }\n
    \           } else {\n                j = 0;\n            }\n            i++;\n
    \       }\n        return count;\n        // END SOLUTION //\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <251083791f28496095f40dea29427ad5>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long ret = 0;\n        int last = -1;\n        while (true)
    {\n            last = str.IndexOf(substring, last + 1);\n            if (last
    == -1) break;\n            ret++;\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        string s = str;\n        int n = s.Length;\n        int
    m = substring.Length;\n        long[] p = new long[n];\n        for (int i = 0;
    i < n; i++) {\n            p[i] = (i + 1) * m;\n        }\n        for (int i
    = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if
    (i != j) {\n                    p[i] = Min(p[i], Max(p[j], (long)s.Substring(i).Length
    * m) + j - i);\n                }\n            }\n        }\n        return p[n
    - 1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjglr7wax.cs(27,28): error CS0103: The name ''Min'' does not exist in the
    current context

    /tmp/tmpjglr7wax.cs(27,38): error CS0103: The name ''Max'' does not exist in the
    current context

    '
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int k = 0;\n        int j = 0;\n
    \       while (k < str.Length) {\n            if (str[k] == substring[j]) {\n
    \               if (j == substring.Length - 1) {\n                    result++;\n
    \                   j = 0;\n                } else {\n                    j++;\n
    \               }\n            } else {\n                j = 0;\n            }\n
    \           k++;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2454ca233654add8460cf30fa6ed020>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length > str.Length)\n            return 0;\n
    \       long result = 0;\n        int matches_left = str.Length - substring.Length
    + 1;\n        for (int i = 0; i < str.Length - substring.Length + 1; i++) {\n
    \           bool match = true;\n            for (int j = 0; j < substring.Length;
    j++) {\n                if (str[i + j] != substring[j]) {\n                    match
    = false;\n                    break;\n                }\n            }\n            if
    (match) {\n                result++;\n                matches_left--;\n                i
    += substring.Length - 1;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d5152f77201457fb16fb9b1ccbd310b>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        for (int pos = 0; pos < str.Length;
    pos++) {\n            int i = 0;\n            for (i = 0; i < substring.Length;
    i++) {\n                if (pos + i >= str.Length) {\n                    break;\n
    \               }\n                if (str[pos + i] != substring[i]) {\n                    break;\n
    \               }\n            }\n            if (i == substring.Length) {\n                result++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Complexity: O(N*M)\n        long nTimes = 0;\n        int
    n = str.Length;\n        int m = substring.Length;\n        for (int i = 0; i
    < n; i++) {\n            if (str[i] == substring[0]) {\n                if (n-i
    >= m) {\n                    bool isMatch = true;\n                    for (int
    j = 1; j < m; j++) {\n                        if (str[i+j] != substring[j]) {\n
    \                           isMatch = false;\n                            break;\n
    \                       }\n                    }\n                    if (isMatch)
    {\n                        nTimes++;\n                    }\n                }\n
    \           }\n        }\n        return nTimes;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var count = 0L;\n        for (var i = 0; i < str.Length;
    i++) {\n            var equal = true;\n            for (var j = 0; j < substring.Length;
    j++) {\n                if (i + j >= str.Length || str[i + j] != substring[j])
    {\n                    equal = false;\n                    break;\n                }\n
    \           }\n            if (equal) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int n = str.Length, m = substring.Length;\n        int[]
    res = new int[m + 1];\n        for (int i = 0; i < n; i++) {\n            for
    (int j = m; j > 0; j--) {\n                if (str[i] == substring[j - 1]) {\n
    \                   res[j] += res[j - 1] + 1;\n                }\n            }\n
    \       }\n        return res[m];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <490e5d1ddb2943cc8decddc76554022c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <490e5d1ddb2943cc8decddc76554022c>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (substring.Length == 0) {\n            return 0;\n        }\n
    \       return (str.Length - str.Replace(substring, \"\").Length) / substring.Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7c785b64de64469b10fadcd9152778c>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        int substringSize = substring.Length;\n
    \       int strSize = str.Length;\n        int i = 0;\n        while (i < strSize)
    {\n            int j = 0;\n            while (j < substringSize && i + j < strSize
    && str[i + j] == substring[j]) {\n                j++;\n            }\n            if
    (j == substringSize) {\n                result++;\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long occurences = 0;\n        int start = 0;\n        int
    idx = 0;\n        while ((idx = str.IndexOf(substring, start)) != -1) {\n            occurences++;\n
    \           start = idx + 1;\n        }\n        return occurences;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <8cc53bb371194160bf733bb68879c1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <8cc53bb371194160bf733bb68879c1ee>:0 \n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // Your code here.\n        return str.Length - str.Replace(substring,
    \"\").Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c00bb3451ae4a108ce6e0cd207cf195>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c00bb3451ae4a108ce6e0cd207cf195>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long N = str.Length;\n        long M = substring.Length;\n
    \       if (M == 0) return 0;\n        long[] prefix = new long[N+1];\n        for
    (long i = 0; i < N; i++) {\n            if (i >= M-1 && str.Substring((int)(i-M+1),
    (int)M) == substring) {\n                prefix[i+1] = prefix[i-M+1] + 1;\n            }
    else {\n                prefix[i+1] = prefix[i];\n            }\n        }\n        return
    prefix[N];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6c0b217dcf14d3e84def012c2d012a6>:0
    \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var count = 0L;\n        for (var i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, Math.Min(substring.Length, str.Length
    - i)) == substring) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int foundAt = str.IndexOf(substring);\n        if (foundAt
    == -1) {\n            return 0;\n        }\n        return 1 + HowManyTimes(str.Substring(foundAt
    + 1), substring);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        int n = str.Length;\n        int m = substring.Length;\n
    \       int[] pi = new int[m + 1];\n\n        int k = 0;\n        for (int i =
    1; i < m; i++) {\n            while (k > 0 && substring[k] != substring[i]) {\n
    \               k = pi[k];\n            }\n            if (substring[k] == substring[i])
    {\n                k++;\n            }\n            pi[i + 1] = k;\n        }\n\n
    \       k = 0;\n        long res = 0;\n        for (int i = 0; i < n; i++) {\n
    \           while (k > 0 && substring[k] != str[i]) {\n                k = pi[k];\n
    \           }\n            if (substring[k] == str[i]) {\n                k++;\n
    \           }\n            if (k == m) {\n                res++;\n                k
    = pi[k];\n            }\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long r = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            for (int j = 0; j < substring.Length; j++) {\n                if
    (str[i] == substring[j]) {\n                    if (substring.Length + i <= str.Length)
    {\n                        if (substring == str.Substring(i, substring.Length))
    {\n                            r++;\n                        }\n                    }\n
    \               }\n            }\n        }\n        return r;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73319035e3df4094b827669b70c654dc>:0
    \n"
  stdout: ''
  timestamp: 1659976170
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var result = 0L;\n        for (var i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                result++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <808cd09efe84405eaf0940f4426419b0>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <808cd09efe84405eaf0940f4426419b0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <808cd09efe84405eaf0940f4426419b0>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <808cd09efe84405eaf0940f4426419b0>:0 \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        var index = 0;\n        var count = 0;\n        while ((index
    = str.IndexOf(substring, index)) != -1) {\n            count++;\n            index++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long n = 0;\n        for (int i = 0; i <= str.Length - substring.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                n++;\n
    \           }\n        }\n        return n;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                result
    += 1;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <be2b1b27b99a4359827b64c3db1225e5>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <be2b1b27b99a4359827b64c3db1225e5>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]
    in <be2b1b27b99a4359827b64c3db1225e5>:0 \n  at Problem.Main (System.String[] args)
    [0x00033] in <be2b1b27b99a4359827b64c3db1225e5>:0 \n"
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        if (str.Length < substring.Length) {\n            return
    0;\n        }\n        long count = 0;\n        for (int i = 0; i < str.Length
    - substring.Length + 1; i++) {\n            if (str.Substring(i, substring.Length)
    == substring) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976169
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long res = 0;\n        for (int i = 0; i < str.Length; i++)
    {\n            int j = 0;\n            while (j < substring.Length && i + j <
    str.Length && str[i + j] == substring[j]) {\n                j++;\n            }\n
    \           if (j == substring.Length) {\n                res++;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976170
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Length - i >= substring.Length && str.Substring(i,
    substring.Length) == substring) {\n                count++;\n                i
    += substring.Length - 1;\n            }\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac56462d02fa4ea286abe9f5bb285906>:0
    \n"
  stdout: ''
  timestamp: 1659976170
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Length - i < substring.Length)\n                break;\n
    \           if (str.Substring(i, substring.Length) == substring)\n                count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976170
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        long substringLength = substring.Length;\n
    \       long lastIndex = str.Length - substringLength;\n        for (long i =
    0; i <= lastIndex; i++) {\n            if (str.Substring((int)i, (int)substringLength)
    == substring) {\n                count += 1;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976170
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long result = 0;\n        // TODO: Implement your code here\n
    \       int i = 0;\n        while (i < str.Length)\n        {\n            if
    (str.IndexOf(substring, i) == i)\n            {\n                i += substring.Length;\n
    \               result++;\n            }\n            else i++;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b73a971997664f58b3341c09fe61cc3a>:0
    \n"
  stdout: ''
  timestamp: 1659976170
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        long count = 0;\n        for (int i = 0; i < str.Length;
    i++) {\n            if (str.Substring(i, Math.Min(substring.Length, str.Length
    - i)) == substring) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976170
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        return str.Select((x, i) => str.Skip(i).Take(substring.Length))\n
    \                 .Count(x => x.SequenceEqual(substring));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976170
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    //
    (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"),
    (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string
    substring) {\n        // >>> HowManyTimes((\"\"), (\"a\"))\n        // (0L)\n
    \       // >>> HowManyTimes((\"aaa\"), (\"a\"))\n        // (3L)\n        // >>>
    HowManyTimes((\"aaaa\"), (\"aa\"))\n        // (3L)\n        return str.Split(new
    string[] { substring }, StringSplitOptions.None).Length - 1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea182daa7a544a9d9dc9569c376a00fa>:0
    \n"
  stdout: ''
  timestamp: 1659976170
