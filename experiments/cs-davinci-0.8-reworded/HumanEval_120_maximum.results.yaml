language: cs
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <3abad4b7b026442d9abc435ab7e4de48>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <3abad4b7b026442d9abc435ab7e4de48>:0 \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var sorted = arr.OrderByDescending(x
    => x).ToList();\n        return sorted.Take((int)k).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <225a174b9a7946e787080949cb4951a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <225a174b9a7946e787080949cb4951a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if(arr.Count == 0) {\n            return
    arr;\n        }\n        arr.Sort();\n        arr.Reverse();\n        return arr.GetRange(0,
    (int)k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22fe54a94d4d4a9d93786e20f4fda849>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22fe54a94d4d4a9d93786e20f4fda849>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        List<long>
    a = arr;\n        List<long> b = new List<long>();\n        long i = 0;\n        while
    (i < k) {\n            i = i + 1;\n            long x = a[0];\n            long
    j = 0;\n            while (j < a.Count) {\n                if (a[j] > x) {\n                    x
    = a[j];\n                }\n                j = j + 1;\n            }\n            a.Remove(x);\n
    \           b.Add(x);\n        }\n        return b;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqnikrwp3.cs(34,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqnikrwp3.cs(35,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) throw new Exception(\"k
    must be less than or equal to the number of elements in arr.\");\n        var
    result = arr.OrderByDescending(x => x).Take((int)k).ToList();\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fb0ce6b5e514b48ab136b1d60f93e8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fb0ce6b5e514b48ab136b1d60f93e8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count == 0) {\n            throw
    new ArgumentException(\"arr must not be empty\");\n        }\n        if (k >
    arr.Count) {\n            throw new ArgumentException(\"k must be less than or
    equal to the length of arr\");\n        }\n        if (k < 0) {\n            throw
    new ArgumentException(\"k must be non-negative\");\n        }\n        var maxHeap
    = new Heap<long>(HeapType.Max);\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (maxHeap.Count < k) {\n                maxHeap.Insert(arr[i]);\n
    \           } else {\n                if (arr[i] > maxHeap.GetRoot()) {\n                    maxHeap.PopRoot();\n
    \                   maxHeap.Insert(arr[i]);\n                }\n            }\n
    \       }\n        var result = new List<long>();\n        while (maxHeap.Count
    > 0) {\n            result.Add(maxHeap.PopRoot());\n        }\n        result.Reverse();\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqv5i5ubx.cs(34,27): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpqv5i5ubx.cs(34,38): error CS0103: The name ''HeapType'' does not exist
    in the current context

    /tmp/tmpqv5i5ubx.cs(36,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmpqv5i5ubx.cs(46,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k <= 0L) {\n            return
    (new List<long>(new long[]{}));\n        }\n        if (k >= arr.Count) {\n            return
    (new List<long>(arr));\n        }\n        List<long> ans = new List<long>();\n
    \       for (long i = 0L; i < k; i++) {\n            long idx = 0L;\n            long
    val = long.MinValue;\n            for (long j = 0L; j < arr.Count; j++) {\n                if
    (arr[(int)j] > val) {\n                    idx = j;\n                    val =
    arr[(int)j];\n                }\n            }\n            ans.Add(val);\n            arr.RemoveAt((int)idx);\n
    \       }\n        return (ans);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80d8a00364ba4179b03ed77435289dfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80d8a00364ba4179b03ed77435289dfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <784cbed60bae4e0b9ef6ac1513915584>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <784cbed60bae4e0b9ef6ac1513915584>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var sorted = arr.OrderByDescending(x
    => x).ToList();\n        return sorted.Take((int)k).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <225a174b9a7946e787080949cb4951a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <225a174b9a7946e787080949cb4951a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       if (k > arr.Count) {\n            res = new List<long>(arr);\n            res.Sort();\n
    \           return res;\n        }\n        foreach (long a in arr) {\n            if
    (res.Count < k) {\n                res.Add(a);\n                res.Sort();\n
    \           } else {\n                if (a > res[0]) {\n                    res.RemoveAt(0);\n
    \                   res.Add(a);\n                    res.Sort();\n                }\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f45c836716c5444694391eb1e5ae5ebd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f45c836716c5444694391eb1e5ae5ebd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var s = new SortedSet<long>();\n        s.Add(0);\n
    \       var result = new List<long>();\n        foreach (var elem in arr) {\n
    \           var t = new SortedSet<long>();\n            foreach (var e in s) {\n
    \               t.Add(e + elem);\n            }\n            foreach (var e in
    t) {\n                s.Add(e);\n            }\n        }\n        foreach (var
    elem in s) {\n            result.Add(elem);\n        }\n        var m = new List<long>();\n
    \       for (int i = 0; i < k; i += 1) {\n            m.Add(result[result.Count
    - i - 1]);\n        }\n        return m;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3f57d83484d42cbad6e9fcc7e610ef2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3f57d83484d42cbad6e9fcc7e610ef2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var s = new List<long>();\n        var
    max = arr.Max();\n        var min = arr.Min();\n        while (s.Count() < k)
    {\n            var c = arr.Where(x => x == max).Count();\n            if (c >
    0) {\n                s.Add(max);\n                arr.RemoveAll(x => x == max);\n
    \           }\n            max = arr.Max();\n        }\n        return s;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00091] in <fd4f5491deef433e815dc36010ec81d7>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <fd4f5491deef433e815dc36010ec81d7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00091] in <fd4f5491deef433e815dc36010ec81d7>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <fd4f5491deef433e815dc36010ec81d7>:0
    \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // return a sorted list with the maximum
    k numbers in arr.\n        return new List<long>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e31fd42d129b463885b1cf8641afd17b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e31fd42d129b463885b1cf8641afd17b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // arr (list of int)\n        // k
    (int)\n        // return (list of int)\n        // max heap\n        List<long>
    heap = new List<long>();\n        int i = 0;\n        for (i = 0; i < k; i++)
    {\n            HeapPush(ref heap, arr[i]);\n        }\n        for (i = k; i <
    arr.Count; i++) {\n            long temp = HeapPeek(heap);\n            if (arr[i]
    > temp) {\n                HeapPop(ref heap);\n                HeapPush(ref heap,
    arr[i]);\n            }\n        }\n        heap.Sort();\n        heap.Reverse();\n
    \       return heap;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkc6az943.cs(32,13): error CS0103: The name ''HeapPush'' does not exist
    in the current context

    /tmp/tmpkc6az943.cs(34,18): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkc6az943.cs(35,25): error CS0103: The name ''HeapPeek'' does not exist
    in the current context

    /tmp/tmpkc6az943.cs(37,17): error CS0103: The name ''HeapPop'' does not exist
    in the current context

    /tmp/tmpkc6az943.cs(38,17): error CS0103: The name ''HeapPush'' does not exist
    in the current context

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(e => e).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <486a3bec733c46f7b776d7ba70aeb91f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <486a3bec733c46f7b776d7ba70aeb91f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long i;\n        List<long> karr =
    new List<long>();\n        long s = 0L;\n        long e = (long)arr.Count;\n        long
    m = (long)0L;\n        long pos = (long)0L;\n        for (i = (long)0L; i < k;
    i++) {\n            m = (long)((e - s) / 2L);\n            pos = (long)(s + m);\n
    \           if (m == (long)0L) {\n                pos = s;\n            }\n            karr.Add(arr[(int)pos]);\n
    \           s = (long)(pos + 1L);\n        }\n        return karr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x0003f] in <001ae62c34bd44ef85c3c89000d622ae>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <001ae62c34bd44ef85c3c89000d622ae>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x0003f] in <001ae62c34bd44ef85c3c89000d622ae>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <001ae62c34bd44ef85c3c89000d622ae>:0
    \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // IMPLEMENT ME\n        List<long>
    result = new List<long>();\n        if (k > arr.Count) {\n            return arr;\n
    \       }\n        for (int i = 0; i < k; i++) {\n            result.Add(0);\n
    \       }\n        for (int i = 0; i < arr.Count; i++) {\n            for (int
    j = k - 1; j >= 0; j--) {\n                if (result[j] < arr[i]) {\n                    if
    (j == k - 1) {\n                        result[j] = arr[i];\n                    }
    else {\n                        result[j + 1] = result[j];\n                        result[j]
    = arr[i];\n                    }\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgql4ye_0.cs(34,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var list = new List<long>();\n        if
    (k == 0) {\n            return list;\n        }\n        long n = arr.Count;\n
    \       long i = 1;\n        long j = k;\n        while (j <= n) {\n            var
    max = FindMax(arr, i, j);\n            list.Add(max);\n            i = i + 1;\n
    \           j = j + 1;\n        }\n        return list;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk_st69rn.cs(33,23): error CS0103: The name ''FindMax'' does not exist
    in the current context

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var r = new List<long>();\n        var
    s = arr.OrderByDescending(x => x).Take((int)k).ToList();\n        for (var i =
    0; i < k; i++) {\n            r.Add(s[i]);\n        }\n        return r;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9db59dcf4de746eb95f8ff292de6b95b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9db59dcf4de746eb95f8ff292de6b95b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> max = new List<long>();\n
    \       for (int i = 0; i < k; i++) {\n            max.Add(arr[i]);\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07e1295e11c84b41a5ba46abe1f11e2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07e1295e11c84b41a5ba46abe1f11e2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69097f41bec5449d90eaeba3801cf83a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69097f41bec5449d90eaeba3801cf83a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return default(List<long>);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <6c562ae6dc864816b6e4cddfc602707e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <6c562ae6dc864816b6e4cddfc602707e>:0
    \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var lookup = new Dictionary<long, int>();\n
    \       var maxLookup = new Dictionary<long, int>();\n        var result = new
    List<long>();\n        foreach (var n in arr) {\n            if (lookup.ContainsKey(n))
    {\n                lookup[n]++;\n            } else {\n                lookup[n]
    = 1;\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            var
    max = (long)-1e9;\n            foreach (var key in lookup.Keys) {\n                if
    (key > max) {\n                    max = key;\n                }\n            }\n
    \           result.Add(max);\n            lookup[max]--;\n            if (lookup[max]
    == 0) {\n                lookup.Remove(max);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be69aa1286c4477fad10768519b497c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be69aa1286c4477fad10768519b497c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long len = arr.Count;\n        var
    arrr = arr.OrderByDescending(x => x).ToList();\n        return arrr.GetRange(0,
    (int)k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e018bd0a05cc4b69ab2acdbf5c3ad9ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e018bd0a05cc4b69ab2acdbf5c3ad9ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45ec4e7919b542bdaa49c89399fef5e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45ec4e7919b542bdaa49c89399fef5e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var heap = new List<long>();\n        foreach
    (var item in arr) {\n            if (heap.Count < k) {\n                heap.Add(item);\n
    \               var cur = heap.Count - 1;\n                while (cur > 0) {\n
    \                   var parent = (cur - 1) / 2;\n                    if (heap[parent]
    > heap[cur]) {\n                        break;\n                    }\n                    var
    temp = heap[parent];\n                    heap[parent] = heap[cur];\n                    heap[cur]
    = temp;\n                    cur = parent;\n                }\n            } else
    {\n                if (item <= heap[0]) {\n                    continue;\n                }\n
    \               heap[0] = item;\n                var cur = 0;\n                while
    (true) {\n                    var left = 2 * cur + 1;\n                    var
    right = 2 * cur + 2;\n                    var newcur = cur;\n                    if
    (left < heap.Count && heap[left] > heap[newcur]) {\n                        newcur
    = left;\n                    }\n                    if (right < heap.Count &&
    heap[right] > heap[newcur]) {\n                        newcur = right;\n                    }\n
    \                   if (newcur == cur) {\n                        break;\n                    }\n
    \                   var temp = heap[newcur];\n                    heap[newcur]
    = heap[cur];\n                    heap[cur] = temp;\n                    cur =
    newcur;\n                }\n            }\n        }\n        return heap;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <103ff6d5180343a9bb9778a424fe5055>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <103ff6d5180343a9bb9778a424fe5055>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Return the sorted list of length
    k with the maximum k numbers in arr.\n        if ((k) > (arr.Count)) {\n            throw
    new ArgumentException();\n        }\n        return arr.OrderByDescending((i)
    => (i)).Take((int)(k)).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56a5621d2e4a4aa98c511cf7b54d5a79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56a5621d2e4a4aa98c511cf7b54d5a79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0
    \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        result.AddRange(arr.OrderByDescending(x
    => x).Take((int)k));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <225a5a15e44d4c99949d9194133acee8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <225a5a15e44d4c99949d9194133acee8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c71fdcda2751479cba5565dc6ccf016c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c71fdcda2751479cba5565dc6ccf016c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // >>> arr.Sort()\n        // >>> arr[-k:]\n
    \       arr.Sort();\n        return arr.GetRange((int)(arr.Count - k), (int)k);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdef5bdf098d4667802837328989af56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdef5bdf098d4667802837328989af56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <3abad4b7b026442d9abc435ab7e4de48>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <3abad4b7b026442d9abc435ab7e4de48>:0 \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var sz = arr.Count;\n        var pq
    = new PriorityQueue<long>();\n        for (var i = 0; i < sz; i++) {\n            pq.Push(arr[i]);\n
    \       }\n        arr.Clear();\n        for (var i = 0; i < k; i++) {\n            var
    v = pq.Pop();\n            arr.Add(v);\n        }\n        return arr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8c_jnbdv.cs(26,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Implement your solution here\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b7c66fec7674771b8b2e172b4e687c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b7c66fec7674771b8b2e172b4e687c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Insert your solution here!\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <070f44492b31420d904f45d9a5b6adae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <070f44492b31420d904f45d9a5b6adae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement this function and
    return the correct output.\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecee26cadb8d4db99e7d506a8d88c3aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecee26cadb8d4db99e7d506a8d88c3aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // *** INSERT YOUR CODE HERE ***\n
    \       if (k == 0)\n            return new List<long>();\n        if (k == arr.Count)\n
    \           return arr;\n        arr.Sort();\n        arr.Reverse();\n        return
    arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <860a346acc904f7dbb5656266b9dcfab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <860a346acc904f7dbb5656266b9dcfab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return Maximum(arr, k, new List<long>());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm7m7tdt.cs(25,16): error CS1501: No overload for method ''Maximum'' takes
    3 arguments

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            throw
    new ArgumentException();\n        }\n        return arr.OrderByDescending(x =>
    x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd076acd95564a57a1219314862f5686>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd076acd95564a57a1219314862f5686>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k < 0) throw new ArgumentException(nameof(k));\n
    \       if (k > arr.Count) k = arr.Count;\n        List<long> result = new List<long>();\n
    \       if (k == 0) return result;\n        int arrCount = arr.Count;\n        int[]
    arrInts = new int[arrCount];\n        for (int i = 0; i < arrCount; i++) {\n            arrInts[i]
    = (int)arr[i];\n        }\n        result = MaxK(arrInts, (int)k);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdp6z114s.cs(34,18): error CS0103: The name ''MaxK'' does not exist in
    the current context

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       for (long i = 0; i < k; i++) {\n            long max = arr[0];\n            long
    maxindex = 0;\n            for (long j = 0; j < arr.Count; j++) {\n                if
    (arr[(int)j] > max) {\n                    max = arr[(int)j];\n                    maxindex
    = j;\n                }\n            }\n            res.Add(max);\n            arr.RemoveAt((int)maxindex);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f19eb95b5ab4074a565bbea4dd2f9ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f19eb95b5ab4074a565bbea4dd2f9ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return arr;\n        var
    result = new List<long>();\n        //Console.WriteLine(arr);\n        for (int
    i = 0; i < k; i++) {\n            var max = arr.Max();\n            result.Add(max);\n
    \           arr.Remove(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e83a61c315d48ff9df358369f918dc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e83a61c315d48ff9df358369f918dc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // If k is negative, then return an
    empty list.\n        if (k < 0) {\n            return new List<long>();\n        }\n
    \       // If k is zero, then return an empty list.\n        if (k == 0) {\n            return
    new List<long>();\n        }\n        // Sort arr in increasing order.\n        arr.Sort();\n
    \       // If k is larger than the length of arr, then return arr.\n        if
    (k >= arr.Count) {\n            return arr;\n        }\n        // Otherwise,
    return the last k elements of arr.\n        return arr.GetRange((int)(arr.Count
    - k), (int)k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0b5f68c8d944c019ba05078d940ac43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0b5f68c8d944c019ba05078d940ac43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Time: O(log(n) * n), Space: O(n)\n
    \       // Since we are returning an element in the middle of the list, we need
    to sort it first.\n        // There are various algorithms to do this. We implemented
    the one based on max heap.\n        // We start by placing all the elements in
    the max heap.\n        // We then pop the largest element and put it in the result
    list.\n        // We pop the remaining elements and put them back in the heap.\n
    \       // We do this until we get all elements sorted.\n        // We can use
    a sorted array instead of a max heap. We can insert elements in the right spot.\n
    \       // But the cost of insertion is O(log(n)) and we have n elements to insert
    so it is O(n * log(n)).\n        // After all elements are sorted, we return the
    first k of them.\n        if (k <= 0) return new List<long>();\n        if (k
    >= arr.Count) return arr;\n        // Build max heap.\n        List<long> heap
    = BuildMaxHeap(arr);\n        // Pop the largest element and put it in the result
    list.\n        List<long> res = new List<long>();\n        for (int i = 0; i <
    k; i++) {\n            res.Add(heap[0]);\n            heap[0] = heap[heap.Count
    - 1];\n            heap.RemoveAt(heap.Count - 1);\n            MaxHeapify(heap,
    0);\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmm0krrcu.cs(38,27): error CS0103: The name ''BuildMaxHeap'' does not exist
    in the current context

    /tmp/tmpmm0krrcu.cs(45,13): error CS0103: The name ''MaxHeapify'' does not exist
    in the current context

    '
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        //
    return new List<long>();\n        var queue = new SortedSet<int>();\n        var
    max = new HashSet<int>();\n        var result = new List<long>();\n        for
    (var i = 0; i < arr.Count; i++) {\n            queue.Add(i);\n            max.Add(i);\n
    \       }\n        for (var i = 0; i < k; i++) {\n            var m = queue.Max;\n
    \           result.Add(arr[m]);\n            queue.Remove(m);\n            if
    (max.Contains(m)) {\n                var order = new Dictionary<int, long>();\n
    \               foreach (var x in queue) {\n                    order[x] = arr[x];\n
    \               }\n                queue.Clear();\n                foreach (var
    x in order.OrderByDescending(x => x.Value)) {\n                    queue.Add(x.Key);\n
    \               }\n                max.Clear();\n                max.Add(queue.Max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f8e5f3cf0b4fadbc83d2d1ddb4eeef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f8e5f3cf0b4fadbc83d2d1ddb4eeef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        for
    (int i = 0; i < k; i++) {\n            var max = -1L;\n            for (int j
    = 0; j < arr.Count; j++) {\n                if (arr[j] > max) {\n                    max
    = arr[j];\n                }\n            }\n            result.Add(max);\n            arr.Remove(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39d0ac8164544ff98cef87dad4b3c0f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39d0ac8164544ff98cef87dad4b3c0f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Sort the list in ascending order\n
    \       arr.Sort();\n        // Reverse the first k elements\n        arr.Reverse(0,
    (int)k);\n        // Return the entire list\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfff17901eda44d79c2c70cbb94d5bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfff17901eda44d79c2c70cbb94d5bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var res = new List<long>();\n        while
    (k > 0) {\n            var max = 0L;\n            var idx = 0;\n            for
    (int i = 0; i < arr.Count; i++) {\n                if (arr[i] > max) {\n                    max
    = arr[i];\n                    idx = i;\n                }\n            }\n            res.Add(max);\n
    \           arr.RemoveAt(idx);\n            k -= 1;\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54d8a3e867ac4f49a9cdd49991d21436>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54d8a3e867ac4f49a9cdd49991d21436>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <3abad4b7b026442d9abc435ab7e4de48>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <3abad4b7b026442d9abc435ab7e4de48>:0 \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> max = new List<long>();\n
    \       max.AddRange(arr.GetRange(0,(int)k));\n        for (long i = k; i < arr.Count;
    i++) {\n            for (long j = 0; j < k; j++) {\n                if (arr[(int)i]
    > max[(int)j]) {\n                    max.Insert((int)j, arr[(int)i]);\n                    max.RemoveAt((int)k);\n
    \                   break;\n                }\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e953f1ef1f724bc281d40124b1e5161b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e953f1ef1f724bc281d40124b1e5161b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var maxValues = new List<long>();\n
    \       for (int i = 0; i < k; i++) {\n            maxValues.Add(arr.Max());\n
    \           arr.Remove(arr.Max());\n        }\n        return maxValues;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6175b6c70afa4e3bb0ea1e6d60cd0308>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6175b6c70afa4e3bb0ea1e6d60cd0308>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        for
    (var i = 0; i < k; i++) {\n            var maxIndex = arr.IndexOf(arr.Max());\n
    \           result.Add(arr[maxIndex]);\n            arr.RemoveAt(maxIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54be229b89c2430988eab2f40d7d3fa8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54be229b89c2430988eab2f40d7d3fa8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return new
    List<long>();\n        }\n        if (k == arr.Count) {\n            arr.Sort();\n
    \           return arr;\n        }\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9852cb928066468a8a324137c3292968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9852cb928066468a8a324137c3292968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var s = new HashSet<long>();\n        for
    (var i = 0; i < arr.Count; i++) {\n            s.Add(arr[i]);\n        }\n        var
    t = new List<long>(s);\n        var r = new List<long>();\n        for (var i
    = 0; i < k; i++) {\n            var m = t[0];\n            var p = 0;\n            for
    (var j = 1; j < t.Count; j++) {\n                if (t[j] > m) {\n                    m
    = t[j];\n                    p = j;\n                }\n            }\n            r.Add(m);\n
    \           t.RemoveAt(p);\n        }\n        return r;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c319e735a4254125818d4338eff2acec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c319e735a4254125818d4338eff2acec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <3abad4b7b026442d9abc435ab7e4de48>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <3abad4b7b026442d9abc435ab7e4de48>:0 \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var r = new List<long>();\n        var
    h = new Heap();\n        for (int i = 0; i < arr.Count; i++) {\n            h.Push(arr[i]);\n
    \       }\n        for (int i = 0; i < k; i++) {\n            r.Add(h.Pop());\n
    \       }\n        return r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp50tm6b44.cs(26,21): error CS0246: The type or namespace name ''Heap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0L) {\n            return
    new List<long>();\n        }\n        // *** start code here ***\n        var
    result = new List<long>();\n        var heap = new Heap<long>();\n        foreach
    (var item in arr) {\n            heap.Push(item);\n        }\n        while (k
    > 0L) {\n            result.Add(heap.Pop());\n            k--;\n        }\n        return
    result;\n        // *** end code here ***\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplvq0y95q.cs(30,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69c91d3c34284b79837a8a16e768cd3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69c91d3c34284b79837a8a16e768cd3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(num =>
    num).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23a6a3a47fff4e0f85558f13ae1029b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23a6a3a47fff4e0f85558f13ae1029b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        //
    Iterate through arr until we've placed k numbers into result\n        var i =
    0;\n        while(i < arr.Count && result.Count < k) {\n            // Start by
    placing the maximum numbers from arr into result\n            result.Add(arr[i]);\n
    \           i++;\n        }\n        // Sort result in ascending order\n        result.Sort();\n
    \       // Iterate through the rest of arr, comparing it to result[0]\n        while(i
    < arr.Count) {\n            // If a[i] is greater than result[0], swap it into
    result, then sort result again\n            if(arr[i] > result[0]) {\n                result[0]
    = arr[i];\n                result.Sort();\n            }\n            i++;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c167e2c3af84eb693cb7f4841b4de8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c167e2c3af84eb693cb7f4841b4de8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(e => e).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <486a3bec733c46f7b776d7ba70aeb91f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <486a3bec733c46f7b776d7ba70aeb91f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> maxarr = new List<long>();\n
    \       arr.Sort();\n        arr.Reverse();\n        for (long i = 0; i < k; i++)
    {\n            maxarr.Add(arr[(int)i]);\n        }\n        return maxarr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <073edd940f2c4e6fad0a9a9844e2afa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <073edd940f2c4e6fad0a9a9844e2afa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        for (long i = 0; i < k; i++) {\n            long
    max = 0;\n            long idx = 0;\n            for (long j = 0; j < (arr.Count
    - i); j++) {\n                if (arr[(int)j] > max) {\n                    max
    = arr[(int)j];\n                    idx = j;\n                }\n            }\n
    \           arr.Add(arr[(int)idx]);\n            arr.RemoveAt((int)idx);\n        }\n
    \       arr.RemoveRange((int)k, (int)(arr.Count - k));\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8586a6a8672465daf27bd673a65b549>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8586a6a8672465daf27bd673a65b549>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       arr.Sort();\n        result = arr.GetRange((int)(arr.Count - k), (int)k);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67ffd4ebb3d843cdbe27e212508d83a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67ffd4ebb3d843cdbe27e212508d83a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var res = new List<long>();\n        for
    (var i = 0; i < k; i++) {\n            var maxIndex = -1;\n            for (var
    j = 0; j < arr.Count; j++) {\n                if (maxIndex == -1 || arr[j] > arr[maxIndex])
    {\n                    maxIndex = j;\n                }\n            }\n            res.Add(arr[maxIndex]);\n
    \           arr.RemoveAt(maxIndex);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c1c4e4ab554a749d7a17119e8ac18e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c1c4e4ab554a749d7a17119e8ac18e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var temp = new List<long>();\n        for
    (var i = (long)0L; i < k; i++) {\n            var max = (long)-1001L;\n            var
    maxIndex = (long)-1L;\n            for (var j = (long)0L; j < arr.Count; j++)
    {\n                if (arr[(int)j] > max) {\n                    max = arr[(int)j];\n
    \                   maxIndex = j;\n                }\n            }\n            temp.Add(max);\n
    \           arr.RemoveAt((int)maxIndex);\n        }\n        return temp;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df0329b433924b3f9e744ddad5f67df0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df0329b433924b3f9e744ddad5f67df0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return Enumerable.Range(0, (int)k).Select(i
    => arr.OrderByDescending(l => l).ElementAt(i)).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14046d87fcef4508b0fc58e8b4d1d687>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14046d87fcef4508b0fc58e8b4d1d687>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // We want to get the maximum k elements
    of arr. One way to do this is to \n        // put the elements of arr into a min-heap
    and pop from the heap until we \n        // have k elements remaining. This takes
    O(nlgk) time.\n        //\n        // Another approach is to sort the elements
    of arr. This takes O(nlgn) time \n        // but is faster than the heap approach
    if n >> k.\n        //\n        // But we can do better. In this problem, we are
    given a k which is small \n        // relative to n (the length of arr). Therefore,
    we should find a sorting \n        // algorithm that is faster than O(nlgn) if
    the input size is much larger \n        // than the output size. One such algorithm
    is the quicksort algorithm.\n        //\n        // Our quicksort algorithm is
    particularly simple since we only need to \n        // sort the last k elements.
    We can avoid sorting elements before the kth \n        // element. This would
    be slow for large k values, but not for small k \n        // values.\n        //\n
    \       // The quicksort algorithm for this problem takes O(n) time.\n        //\n
    \       // This problem is related to the Kth Largest Element in an Array problem
    \n        // on LeetCode.\n        Debug.Assert(arr.Count > 0);\n        Debug.Assert(k
    > 0);\n        // The algorithm is simple enough that we can implement it without
    any \n        // helper functions.\n        // The space complexity of the algorithm
    is O(1).\n        long i = k - 1;\n        long j = arr.Count - 1;\n        long
    pivot = arr[k - 1];\n        while (true) {\n            while (arr[i] < pivot)
    {\n                // Skip elements that are less than the pivot.\n                i
    += 1;\n            }\n            while (arr[j] > pivot) {\n                //
    Skip elements that are greater than the pivot.\n                j -= 1;\n            }\n
    \           if (i >= j) {\n                // We found the pivot element.\n                break;\n
    \           }\n            // Swap the elements.\n            long temp = arr[i];\n
    \           arr[i\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxem67gpa.cs(69,18): error CS1003: Syntax error, '']'' expected

    /tmp/tmpxem67gpa.cs(69,18): error CS1002: ; expected

    /tmp/tmpxem67gpa.cs(71,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxem67gpa.cs(85,2): error CS1513: } expected

    '
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       // Put your code here\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37048dda48fe4ac1a0b270245c5e3459>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37048dda48fe4ac1a0b270245c5e3459>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        //if (k > arr.Count) {\n        //
    \   throw new System.ArgumentException(\"Input must have at least k elements\");\n
    \       //}\n        //if (k <= 0) {\n        //    throw new System.ArgumentException(\"Input
    must have at least 1 element\");\n        //}\n        //if (arr.Count <= 0) {\n
    \       //    throw new System.ArgumentException(\"Input must have at least 1
    element\");\n        //}\n        List<long> maxk = new List<long>();\n        for
    (long i = 0; i < k; i++) {\n            maxk.Add(arr[0]);\n        }\n        foreach
    (long a in arr) {\n            long min = min(maxk);\n            if (a > min)
    {\n                maxk.Remove(min);\n                maxk.Add(a);\n            }\n
    \       }\n        maxk.Sort();\n        return maxk;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpak0zvt5w.cs(39,24): error CS0149: Method name expected

    /tmp/tmpak0zvt5w.cs(39,24): error CS0165: Use of unassigned local variable ''min''

    '
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if(arr.Count <= k) return arr;\n        var
    ans = new List<long>();\n        var pq = new PriorityQueue();\n        for(var
    i = 0; i < arr.Count; i++) pq.Insert(new Item(arr[i], i));\n        for(var i
    = 0; i < k; i++) ans.Add(pq.Pop().key);\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipkxkbs0.cs(27,22): error CS0246: The type or namespace name ''PriorityQueue''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpipkxkbs0.cs(28,58): error CS0246: The type or namespace name ''Item''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015835
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long m = arr.Max();\n        long i = 1;\n        while (m > 0 && k >
    0) {\n            foreach (long a in arr) {\n                if (a / i % 10 >
    0) {\n                    result.Add(a);\n                    k -= 1;\n                }\n
    \           }\n            i *= 10;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide
    by zero.\n  at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64
    k) [0x00028] in <7c313c4b3785429bb49fb85a163d1b53>:0 \n  at Problem.Main (System.String[]
    args) [0x00017] in <7c313c4b3785429bb49fb85a163d1b53>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.DivideByZeroException: Attempted to divide by zero.\n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00028] in <7c313c4b3785429bb49fb85a163d1b53>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <7c313c4b3785429bb49fb85a163d1b53>:0
    \n"
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        //   arr: given list of integers\n
    \       //     k: length of list to return\n        // return: sorted list of
    length k with the maximum k numbers in arr\n        // Your code here\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75dbae7be9844469b4db7309dc01fd58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75dbae7be9844469b4db7309dc01fd58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> negs = new List<long>();\n
    \       foreach (long x in arr) {\n            if (x < 0) {\n                negs.Add(x);\n
    \           }\n        }\n        negs.Sort();\n        negs.Reverse();\n        List<long>
    res = new List<long>();\n        long v = k;\n        for (long i = 0; i < v;
    i++) {\n            long max = 0;\n            foreach (long x in arr) {\n                if
    (x > max) {\n                    max = x;\n                }\n            }\n
    \           if (max < 0) {\n                max = negs[0];\n                negs.RemoveAt(0);\n
    \           }\n            res.Add(max);\n            arr.Remove(max);\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f44883bab5146e89f17d5a44abb39de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f44883bab5146e89f17d5a44abb39de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new
    long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n        //
    (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),
    (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n        //
    >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,
    (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,
    (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n        //
    (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n        //
    >>> Maximum((new List<long>(new long[]\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx0tszi0f.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return new
    List<long>();\n        }\n        List<long> result = new List<long>();\n        for
    (long i = 0; i < k; i++) {\n            result.Add(arr[(int)i]);\n        }\n
    \       result.Sort();\n        for (long i = k; i < arr.Count; i++) {\n            for
    (long j = 0; j < k; j++) {\n                if (arr[(int)i] > result[(int)j])
    {\n                    result.RemoveAt((int)j);\n                    result.Add(arr[(int)i]);\n
    \                   result.Sort();\n                    break;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93f31fc8401546a99f62e4e9175cb70f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93f31fc8401546a99f62e4e9175cb70f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Given a list arr of integers and
    a positive integer k, return a sorted list \n        // of length k with the maximum
    k numbers in arr.\n        return Maximum_MaxHeap(arr, k);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa1lhdchj.cs(27,16): error CS0103: The name ''Maximum_MaxHeap'' does not
    exist in the current context

    '
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // We use a max-heap to store the values.
    This way, the top element will\n        // always be the largest number. In order
    to find the k largest numbers\n        // we can just pop the top element k times.\n
    \       List<long> heap = new List<long>();\n        for (int i = 0; i < arr.Count;
    i++) {\n            heap.Add(arr[i]);\n            SiftUp(heap, i);\n        }\n
    \       List<long> max = new List<long>();\n        for (int i = 0; i < k; i++)
    {\n            max.Add(heap[0]);\n            heap[0] = heap[heap.Count - 1];\n
    \           heap.RemoveAt(heap.Count - 1);\n            SiftDown(heap, 0);\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4tx9mjs4.cs(31,13): error CS0103: The name ''SiftUp'' does not exist in
    the current context

    /tmp/tmp4tx9mjs4.cs(38,13): error CS0103: The name ''SiftDown'' does not exist
    in the current context

    '
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // public static List<long> Maximum(List<long>
    arr, long k) {\n        //   var r = arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \       //   return r;\n        // }\n        // public static List<long> Maximum(List<long>
    arr, long k) {\n        //   arr.Sort();\n        //   arr.Reverse();\n        //
    \  return arr.Take((int)k).ToList();\n        // }\n        // public static List<long>
    Maximum(List<long> arr, long k) {\n        //   var maxArr = new List<long>();\n
    \       //   while (k > 0) {\n        //     var indexOfMax = arr.IndexOf(arr.Max());\n
    \       //     maxArr.Add(arr[indexOfMax]);\n        //     arr.RemoveAt(indexOfMax);\n
    \       //     k--;\n        //   }\n        //   return maxArr;\n        // }\n
    \       // public static List<long> Maximum(List<long> arr, long k) {\n        //
    \  return Enumerable.Range(0, (int)k).Select(x => arr.Max()).ToList();\n        //
    }\n        // public static List<long> Maximum(List<long> arr, long k) {\n        //
    \  List<long> biggestElements = new List<long>();\n        //   while (k > 0)
    {\n        //     long currentMax = long.MinValue;\n        //     foreach (long
    num in arr) {\n        //       if (num > currentMax) {\n        //         currentMax
    = num;\n        //       }\n        //     }\n        //     biggestElements.Add(currentMax);\n
    \       //     arr.Remove(currentMax);\n        //     k--;\n        //   }\n
    \       //   return biggestElements;\n        // }\n        public static List<long>
    Maximum(List<long> arr, long k) {\n          // return arr.OrderByDescending(x
    => x).Take((int)k).ToList();\n          List<long> biggestElements = new List<long>();\n
    \         for (int\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp66npn7uv.cs(62,9): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp66npn7uv.cs(65,16): error CS1525: Invalid expression term ''int''

    /tmp/tmp66npn7uv.cs(65,19): error CS1002: ; expected

    /tmp/tmp66npn7uv.cs(65,19): error CS1525: Invalid expression term ''}''

    /tmp/tmp66npn7uv.cs(65,19): error CS1026: ) expected

    /tmp/tmp66npn7uv.cs(67,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp66npn7uv.cs(81,2): error CS1513: } expected

    '
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = arr.OrderByDescending(item
    => item).Take((int)k).ToList();\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05527bb5ed9b42259e9fc7f72771af89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05527bb5ed9b42259e9fc7f72771af89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution here!\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <228bcf6121ea4c409760883c59fb42ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <228bcf6121ea4c409760883c59fb42ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return (List<long>)arr.OrderByDescending(x
    => x).Take((int)k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidCastException: Specified cast is
    not valid.\n  at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64
    k) [0x0002d] in <dafc28baab7d449bba2db83ff1456fad>:0 \n  at Problem.Main (System.String[]
    args) [0x00017] in <dafc28baab7d449bba2db83ff1456fad>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.InvalidCastException: Specified cast is not valid.\n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x0002d] in <dafc28baab7d449bba2db83ff1456fad>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <dafc28baab7d449bba2db83ff1456fad>:0
    \n"
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Complete this function.\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a812425725a7453d875feab558849f54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a812425725a7453d875feab558849f54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var minHeap = new MinHeap(arr.GetRange(0,
    (int)k));\n        for (var i = k; i < arr.Count; i++) {\n            if (arr[(int)i]
    > minHeap.Peek()) {\n                minHeap.Replace(arr[(int)i]);\n            }\n
    \       }\n        return minHeap.GetItems();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbo9_g68z.cs(25,27): error CS0246: The type or namespace name ''MinHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var res = new List<long>();\n        var
    heap = new System.Collections.Generic.SortedSet<long>();\n        foreach (var
    elem in arr) {\n            heap.Add(elem);\n            if (heap.Count > k) {\n
    \               heap.Remove(heap.Min);\n            }\n        }\n        return
    new List<long>(heap);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e009c8a61604655a3adc70aed8f1826>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e009c8a61604655a3adc70aed8f1826>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if(arr.Count == 0) {\n            return
    arr;\n        }\n        arr.Sort();\n        arr.Reverse();\n        return arr.GetRange(0,
    (int)Math.Min(k, arr.Count));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b61b05993cb44b588cb0df7ad6fe7cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b61b05993cb44b588cb0df7ad6fe7cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(a => a).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cda0ca6066e4effa6b648af18819746>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cda0ca6066e4effa6b648af18819746>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k <= 0) {\n            return new
    List<long>();\n        }\n        if (k == 1) {\n            return new List<long>
    { arr.Max() };\n        }\n        if (k == arr.Count) {\n            return arr.OrderByDescending(x
    => x).ToList();\n        }\n        // arr.Sort((x, y) => x.CompareTo(y));\n        //
    return arr.Reverse().Take((int)k).ToList();\n        return Maximum(arr, k, 0,
    arr.Count - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc91t6xz1.cs(36,16): error CS1501: No overload for method ''Maximum'' takes
    4 arguments

    '
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> maxs = new List<long>();\n
    \       // Loop invariant: maxs contains the k largest elements in arr[0 .. i-1]\n
    \       for (int i = 0; i < arr.Count; i++) {\n            // Add the element
    if possible\n            bool added = false;\n            for (int j = 0; j <
    maxs.Count; j++) {\n                if (maxs[j] < arr[i]) {\n                    maxs.Insert(j,
    arr[i]);\n                    added = true;\n                    break;\n                }\n
    \           }\n            if (!added && maxs.Count < k) {\n                maxs.Add(arr[i]);\n
    \           }\n            // Remove the smallest element if necessary\n            if
    (maxs.Count > k) {\n                maxs.RemoveAt(maxs.Count - 1);\n            }\n
    \       }\n        return maxs;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b14e43c7369442a5a57a7cacbc5018f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b14e43c7369442a5a57a7cacbc5018f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k < 1 || k > arr.Count) {\n            throw
    new Exception(\"Invalid parameter\");\n        }\n        arr.Sort();\n        arr.Reverse();\n
    \       List<long> res = new List<long>();\n        foreach (long x in arr) {\n
    \           res.Add(x);\n            if (res.Count == k) {\n                break;\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <463f7cca1e5d40bf85365730f5d87bd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <463f7cca1e5d40bf85365730f5d87bd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        //  ***** Bad Solution *****\n        //
    \n        // var l = new List<long>();\n        // while (k > 0) {\n        //
    \    long max = arr.Min();\n        //     foreach (var a in arr) {\n        //
    \        if (a > max) {\n        //             max = a;\n        //         }\n
    \       //     }\n        //     l.Add(max);\n        //     arr.Remove(max);\n
    \       //     k -= 1;\n        // }\n        // return l;\n        \n        //
    \ ***** Bad Solution *****\n        // \n        // var l = new List<long>();\n
    \       // while (k > 0) {\n        //     l.Add(arr.Max());\n        //     arr.Remove(arr.Max());\n
    \       //     k -= 1;\n        // }\n        // return l;\n        \n        //
    \ ***** Correct Solution *****\n        // \n        // return arr.OrderByDescending(a
    => a).Take((int)k).ToList();\n        \n        //  ***** Correct Solution *****\n
    \       // \n        var sortedList = arr.OrderByDescending(a => a).ToList();\n
    \       return sortedList.GetRange(0, (int)k);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2010afeacb2342f7998f701c5795c51c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2010afeacb2342f7998f701c5795c51c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        //////////////////////////////////////////////////////////\n
    \       List<long> result = new List<long>();\n        //////////////////////////////////////////////////////////\n
    \       if ((k == 0L)) {\n            return (result);\n        }\n        if
    ((k == arr.Count)) {\n            return (arr);\n        }\n        int n = (int)
    k;\n        List<long> r = new List<long>();\n        r.AddRange(arr);\n        r.Sort();\n
    \       r.Reverse();\n        result.AddRange(r.GetRange(0, n));\n        return
    (result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab1f38acccb04103bd54c27edac21750>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab1f38acccb04103bd54c27edac21750>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       for (int i = 0; i < k; i++) {\n            result.Add(long.MinValue);\n
    \       }\n        foreach (long x in arr) {\n            long i = 0;\n            while
    (i < k && result[(int)i] > x) {\n                i++;\n            }\n            result.Insert((int)i,
    x);\n            result.RemoveAt((int)k);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f9b5fcc81ec494d9869d89a95218f5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f9b5fcc81ec494d9869d89a95218f5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var n = arr.Count;\n        var stack
    = new Stack<long>();\n        var res = new List<long>();\n        var i = 0;\n
    \       while (i < n) {\n            while (stack.Count != 0 && arr[i] > stack.Peek()
    && stack.Count + n - i > k) {\n                stack.Pop();\n            }\n            if
    (stack.Count < k) {\n                stack.Push(arr[i]);\n            }\n            i
    += 1;\n        }\n        while (stack.Count != 0) {\n            res.Add(stack.Pop());\n
    \       }\n        res.Reverse();\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddeda28078dd4ae3beef63b586f119b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddeda28078dd4ae3beef63b586f119b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // your code here\n        return (new
    List<long>(new long[]{}));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89351923580d4d31a532b5f9560a6e12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89351923580d4d31a532b5f9560a6e12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        ////////////////////////////////////\n
    \       // initial solution, slow.\n        ////////////////////////////////////\n
    \       // takes too long\n        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \       ////////////////////////////////////\n        // Improved\n        ////////////////////////////////////\n
    \       // take the first k elements, sort them, then go through the rest of the
    list\n        // and if we find an element > than the minimum of the current k,
    remove that\n        // element and insert it.\n        var l = new List<long>();\n
    \       // take the first k elements.\n        l.AddRange(arr.Take((int)k));\n
    \       // sort those elements.\n        l.Sort();\n        // the minimum element
    in the sorted k.\n        var min = l[0];\n        for (var i = k; i < arr.Count;
    i++) {\n            var e = arr[(int)i];\n            if (e > min) {\n                //
    remove the minimum, then insert the new element.\n                l.RemoveAt(0);\n
    \               l.Add(e);\n                // resort.\n                l.Sort();\n
    \               // and update the minimum.\n                min = l[0];\n            }\n
    \       }\n        // sort the list.\n        l.Sort();\n        // return it.\n
    \       return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1873e993cbaf4db699945d3151288679>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1873e993cbaf4db699945d3151288679>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // We can do this with a heap...\n
    \       var heap = new MaxHeap<long>(k);\n        foreach (var el in arr) {\n
    \           heap.Insert(el);\n        }\n        return heap.GetValues();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppfvyrpqr.cs(26,24): error CS0246: The type or namespace name ''MaxHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k >= 0L);\n        Debug.Assert(k
    <= arr.Count);\n        Debug.Assert(k <= 1000L);\n        Debug.Assert(arr.All(v
    => v >= -1000L && v <= 1000L));\n        Debug.Assert(arr.Count <= 1000L);\n        var
    result = new List<long>();\n        if (k > 0L) {\n            var heap = new
    BinaryHeap<long>();\n            for (var i = 0L; i < k; i++) {\n                heap.Add(arr[(int)i]);\n
    \           }\n            for (var i = k; i < arr.Count; i++) {\n                if
    (arr[(int)i] > heap.Peek()) {\n                    heap.Replace(arr[(int)i]);\n
    \               }\n            }\n            result = heap.GetElements();\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5d2y8_z.cs(32,28): error CS0246: The type or namespace name ''BinaryHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k < 1 || k > arr.Count) {\n            return
    new List<long>();\n        }\n        // Heapify\n        long lastParentIndex
    = (k - 2) / 2;\n        for (long i = lastParentIndex; i >= 0; i--) {\n            Heapify(arr,
    i, k);\n        }\n        // Replace min with arr[i] and heapify\n        for
    (long i = k; i < arr.Count; i++) {\n            if (arr[i] > arr[0]) {\n                arr[0]
    = arr[i];\n                Heapify(arr, 0, k);\n            }\n        }\n        return
    arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ui5zlui.cs(31,13): error CS0103: The name ''Heapify'' does not exist
    in the current context

    /tmp/tmp4ui5zlui.cs(35,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4ui5zlui.cs(36,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4ui5zlui.cs(37,17): error CS0103: The name ''Heapify'' does not exist
    in the current context

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var sort = from x in arr orderby x
    descending select x;\n        return sort.Take((int)k).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d649df2449d47bb969fa41ab82106d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d649df2449d47bb969fa41ab82106d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        arr.Sort();\n        List<long> result
    = new List<long>();\n        for (long i = (long)(arr.Count() - k); i < arr.Count();
    i++) {\n            result.Add(arr[(int)i]);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5abb9f890ea3424c9c28b5bb874f7275>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5abb9f890ea3424c9c28b5bb874f7275>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       int n = arr.Count;\n        if (k <= n) {\n            result = arr.OrderByDescending(i
    => i).Take((int)k).ToList();\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <567159d0058245ca98980d0d74e0d874>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <567159d0058245ca98980d0d74e0d874>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) return new List<long>();\n
    \       if (k == arr.Count) return arr;\n        var kth = kth_Largest(arr, k);\n
    \       var res = new List<long>();\n        foreach (var i in arr) {\n            if
    (i >= kth) res.Add(i);\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn6uqwg3q.cs(27,19): error CS0103: The name ''kth_Largest'' does not exist
    in the current context

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        SortedSet<long> s = new SortedSet<long>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            s.Add(arr[i]);\n        }\n
    \       List<long> result = new List<long>();\n        while (k > 0) {\n            result.Add(s.Max);\n
    \           s.Remove(s.Max);\n            k--;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de0929d7660d42c9be4db796f64218ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de0929d7660d42c9be4db796f64218ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> copy = new List<long>(arr);\n
    \       copy.Sort();\n        copy.Reverse();\n        return copy.GetRange(0,
    (int)k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0951d95b2b244a26a67f21a6c8a10532>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0951d95b2b244a26a67f21a6c8a10532>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0, Convert.ToInt32(k));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbf279f10a544775ad2f1971a3ac52f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbf279f10a544775ad2f1971a3ac52f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    heap = new SortedList<long, List<long>>();\n        foreach (var element in arr)
    {\n            if (heap.Count < k) {\n                if (!heap.ContainsKey(element))
    {\n                    heap.Add(element, new List<long>());\n                }\n
    \               heap[element].Add(element);\n            } else {\n                if
    (element >= heap.Keys[0]) {\n                    if (!heap.ContainsKey(element))
    {\n                        heap.Add(element, new List<long>());\n                    }\n
    \                   heap[element].Add(element);\n                    var last
    = heap.Keys[0];\n                    heap.RemoveAt(0);\n                    if
    (heap.Count != 0 && heap.Keys[0] == last) {\n                        heap.RemoveAt(0);\n
    \                   }\n                }\n            }\n        }\n        for
    (var i = heap.Count - 1; i >= 0; i--) {\n            var l = heap.Values[i];\n
    \           foreach (var element in l) {\n                result.Add(element);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e13121b76e3846bfb5d471b7df5cda8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e13121b76e3846bfb5d471b7df5cda8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count == k) {\n            return
    arr;\n        }\n        long[] sorted = (arr.OrderByDescending(x => x).ToArray());\n
    \       return (new List<long>(sorted)).GetRange(0, (int)k);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dad53861a1eb44da8556eaf39b0f76d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dad53861a1eb44da8556eaf39b0f76d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Put your code here\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d735df200c864defb6f1ea45a05cbe01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d735df200c864defb6f1ea45a05cbe01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var maxKHeap = new Heap<long>(k, (a,
    b) => b.CompareTo(a));\n        foreach (var i in arr) {\n            maxKHeap.Insert(i);\n
    \       }\n        return maxKHeap.GetAll();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9qgpxuq_.cs(25,28): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2me612s_.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var l = new List<long>();\n        for
    (int i = 0; i < k; i++) {\n            long maxValue = long.MinValue;\n            int
    maxIndex = -1;\n            for (int j = 0; j < arr.Count; j++) {\n                if
    (maxValue < arr[j]) {\n                    maxValue = arr[j];\n                    maxIndex
    = j;\n                }\n            }\n            l.Add(maxValue);\n            arr.RemoveAt(maxIndex);\n
    \       }\n        return l;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2892d10111e4e1b9d4b4a57d125f41b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2892d10111e4e1b9d4b4a57d125f41b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0
    \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // return Maximum_Teacher(arr, k);\n
    \       return Maximum_Mine(arr, k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxia1a901.cs(26,16): error CS0103: The name ''Maximum_Mine'' does not exist
    in the current context

    '
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // There are two methods to solve this
    problem. \n        // The first method is to use a max-heap data structure to
    get the maximum\n        // k elements. This would be very close to linear time
    complexity.\n        // The second method uses a min-heap data structure. First,
    create a min-heap \n        // with the first k elements of the array. Then, iterate
    through the rest of \n        // the array, if the value is larger than the min
    of the heap, pop the min of \n        // the heap and push the value on to the
    heap. After the heap is populated, \n        // pop each element and add it to
    the result list. This is more complex, but \n        // it's linear time complexity.\n
    \       // We will use the second method here.\n        List<long> max = new List<long>();\n
    \       // If k is 0 or the array is empty, return the empty list.\n        if
    (k == 0 || arr.Count == 0) {\n            return max;\n        }\n        // Create
    a min-heap.\n        BinaryHeap<long> heap = new BinaryHeap<long>(arr.Take((int)k).ToList(),
    new MinHeapComparer<long>());\n        // Iterate through the rest of the array.\n
    \       for (int i = (int)k; i < arr.Count; i++) {\n            if (arr[i] > heap.Peek())
    {\n                heap.Pop();\n                heap.Push(arr[i]);\n            }\n
    \       }\n        // Add all elements to the result list.\n        while (heap.Count
    > 0) {\n            max.Add(heap.Pop());\n        }\n        // Sort the result
    list.\n        max.Sort();\n        // Return the result list.\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph1rxbngc.cs(41,9): error CS0246: The type or namespace name ''BinaryHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmph1rxbngc.cs(41,37): error CS0246: The type or namespace name ''BinaryHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmph1rxbngc.cs(41,85): error CS0246: The type or namespace name ''MinHeapComparer<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmph1rxbngc.cs(50,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new
    long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n        //
    (new List<long>(new long[]{(long)2L}))\n        // Note:\n        // 1. The length
    of the list will be in the range of [1, 1000].\n        // 2. The elements in
    the list will be in the range of [-1000, 1000].\n        // 3. 0 <= k <= len(arr)\n
    \       List<long> res = new List<long>();\n        long[] a = arr.ToArray();\n
    \       Sorting.TopK(a, a.Length, k);\n        for (int i = 0; i < k; i++) {\n
    \           res.Add(a[i]);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpscqf0da3.cs(37,9): error CS0103: The name ''Sorting'' does not exist in
    the current context

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var ls = arr.GetRange(0, (int)k);\n
    \       ls.Sort();\n        for (int i = (int)k; i < arr.Count; i++) {\n            if
    (arr[i] > ls[0]) {\n                ls.RemoveAt(0);\n                ls.Add(arr[i]);\n
    \               ls.Sort();\n            }\n        }\n        return ls;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0878fd5133cb48dda411fa8fde713f41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0878fd5133cb48dda411fa8fde713f41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        // iterate
    over the list and use priority queue to find the max k\n        // O(n * k * log
    k)\n        // HeapSort() for O(n * log n)\n        // QuickSelect for O(n)\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <1e6d90ea39164e57a7e93f1a6f791876>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <1e6d90ea39164e57a7e93f1a6f791876>:0
    \n"
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return new
    List<long>();\n        }\n        var heap = new BinaryHeap<long>();\n        foreach
    (var item in arr) {\n            heap.Push(item);\n        }\n        var res
    = new List<long>();\n        for (int i = 0; i < k; i++) {\n            res.Add(heap.Pop());\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd62m3fty.cs(28,24): error CS0246: The type or namespace name ''BinaryHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    arrlen = arr.Count;\n        for (long index = 0; index < k; index++) {\n            var
    max = (long)-1000000000L;\n            var max_index = (long)-1L;\n            for
    (long i = 0; i < arrlen; i++) {\n                if (arr[(int)i] > max) {\n                    max
    = arr[(int)i];\n                    max_index = i;\n                }\n            }\n
    \           result.Add(max);\n            arr[(int)max_index] = (long)-1000000000L;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c3caa7dbf4e4138887af889ea4db0aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c3caa7dbf4e4138887af889ea4db0aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Build max heap\n        for (int
    i = arr.Count / 2; i >= 0; i--) {\n            Heapify(arr, i, arr.Count);\n        }\n
    \       // Remove all elements greater than k\n        for (int i = arr.Count
    - 1; i >= k; i--) {\n            Swap(arr, 0, i);\n            Heapify(arr, 0,
    i);\n        }\n        return arr.GetRange(0, (int)k);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpof7she16.cs(27,13): error CS0103: The name ''Heapify'' does not exist
    in the current context

    /tmp/tmpof7she16.cs(31,13): error CS0103: The name ''Swap'' does not exist in
    the current context

    /tmp/tmpof7she16.cs(32,13): error CS0103: The name ''Heapify'' does not exist
    in the current context

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        SortedSet<long> set = new SortedSet<long>();\n
    \       foreach (long el in arr) {\n            set.Add(el);\n        }\n        List<long>
    result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(set.Max);\n
    \           set.Remove(set.Max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f391d08282f43fca3d6769f3a9c11df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f391d08282f43fca3d6769f3a9c11df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // *** Need to account for duplicates.
    ***\n        // *** Need to account for k > len(arr). ***\n        // *** Need
    to account for k = 0. ***\n        // Take the k largest elements.\n        //
    Sort them in descending order.\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e14175261b54de6a6794495a52c03e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e14175261b54de6a6794495a52c03e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Convert the array to a priority
    queue.\n        PriorityQueue<long> pq = new PriorityQueue<long>();\n        foreach
    (long num in arr) {\n            pq.Insert(num);\n        }\n        // Build
    the output.\n        List<long> output = new List<long>();\n        for (long
    i = 0; i < k; i++) {\n            output.Add(pq.Pop());\n        }\n        return
    output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp64atn28k.cs(26,9): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp64atn28k.cs(26,38): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015837
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69c91d3c34284b79837a8a16e768cd3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69c91d3c34284b79837a8a16e768cd3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Time: O(n lg n), Space: O(n)\n        return
    arr.OrderByDescending(x => x).Take((int)k).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb35943e81244f499497e62479b51c0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb35943e81244f499497e62479b51c0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45ec4e7919b542bdaa49c89399fef5e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45ec4e7919b542bdaa49c89399fef5e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> maxHeap = arr.GetRange(0,
    (int)k);\n        for (int i = (int)k; i < arr.Count; i++) {\n            long
    m = maxHeap[0];\n            if (arr[i] > m) {\n                maxHeap[0] = arr[i];\n
    \               AdjustMaxHeap(maxHeap, 0);\n            }\n        }\n        maxHeap.Sort();\n
    \       return maxHeap;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8t_riv2w.cs(30,17): error CS0103: The name ''AdjustMaxHeap'' does not
    exist in the current context

    '
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Step 1: We define a function that
    returns a list of length k.\n        //         The function takes in a list and
    a k.\n        //         The function is tail recursive.\n        // Step 2: We
    create a helper function whose type is \n        //         ((List<long>, long)
    => long) => (List<long>, long) => List<long>.\n        //         The helper function
    takes in a list, a k, and a function that takes in a list and a k and returns
    a long.\n        //         The function is tail recursive.\n        // Step 3:
    We create a function called max_comparator.\n        //         max_comparator
    has type (List<long>, long) => long.\n        //         max_comparator takes
    in a list and a k and returns a long.\n        //         max_comparator returns
    the maximum value from the list.\n        // Step 4: We create a function called
    min_comparator.\n        //         min_comparator has type (List<long>, long)
    => long.\n        //         min_comparator takes in a list and a k and returns
    a long.\n        //         min_comparator returns the minimum value from the
    list.\n        // Step 5: We create a variable called new_arr and set it equal
    to the \n        //         the result of calling the helper function with inputs
    arr, k, and max_comparator.\n        // Step 6: We return new_arr.\n        //
    \        This is the end of our function.\n        long len = (long)arr.Count;\n
    \       long max_comparator(List<long> arr, long k) {\n            long max =
    arr[0];\n            for (long i = 1; i < len; i++) {\n                if (arr[(int)i]
    > max) {\n                    max = arr[(int)i];\n                }\n            }\n
    \           return max;\n        }\n        long min_comparator(List<long> arr,
    long k) {\n            long min = arr[0];\n            for (long i = 1; i < len;
    i++) {\n                if (arr[(int)i] < min) {\n                    min = arr[(int)i];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcns5ox8q.cs(60,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpcns5ox8q.cs(74,2): error CS1513: } expected

    '
  timestamp: 1660015837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Insert the C# code here \n        long[]
    heap = new long[k];\n        for (int i = 0; i < k; i++) {\n            heap[i]
    = long.MinValue;\n        }\n        foreach (long e in arr) {\n            if
    (e <= heap[0]) {\n                continue;\n            }\n            heap[0]
    = e;\n            int p = 0;\n            while (true) {\n                int
    l = 2 * p + 1;\n                int r = 2 * p + 2;\n                int c = p;\n
    \               if (l < k && heap[l] < heap[c]) {\n                    c = l;\n
    \               }\n                if (r < k && heap[r] < heap[c]) {\n                    c
    = r;\n                }\n                if (c == p) {\n                    break;\n
    \               }\n                long t = heap[c];\n                heap[c]
    = heap[p];\n                heap[p] = t;\n                p = c;\n            }\n
    \       }\n        return new List<long>(heap);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <171e11a7392847b1ab70151d13412ce0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <171e11a7392847b1ab70151d13412ce0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k < 1)\n            return new
    List<long>();\n        if (k > arr.Count)\n            return arr;\n        if
    (k == arr.Count)\n            return arr.OrderByDescending(x => x).ToList();\n
    \       var minVal = arr.Min();\n        var maxVal = arr.Max();\n        var
    minValAbs = Math.Abs(minVal);\n        arr = arr.Select(x => x + minValAbs).ToList();\n
    \       var result = new long[k];\n        for (var i = 0; i < k; i++)\n            result[i]
    = arr[i];\n        for (var i = k; i < arr.Count; i++) {\n            var m =
    FindMin(result);\n            if (arr[i] > result[m])\n                result[m]
    = arr[i];\n        }\n        return result.Select(x => x - minValAbs).OrderByDescending(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpauy1kajo.cs(39,21): error CS0103: The name ''FindMin'' does not exist
    in the current context

    /tmp/tmpauy1kajo.cs(40,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpauy1kajo.cs(41,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03724551100d4084af7ec924953dcf76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) return new List<long>();\n
    \       if (k == arr.Count) return arr;\n        List<long> ans = new List<long>();\n
    \       long current_min = Math.Min(arr[0], arr[1]);\n        long next_min =
    current_min;\n        int to_remove = -1;\n        for (int i = 2; i < arr.Count;
    i++) {\n            long elem = arr[i];\n            if (current_min < elem) {\n
    \               // add the element\n                arr.RemoveAt(i);\n                arr.Add(current_min);\n
    \               current_min = elem;\n                to_remove = i;\n            }
    else if (next_min < elem) {\n                // add the element\n                arr.RemoveAt(i);\n
    \               arr.Add(next_min);\n                next_min = elem;\n                to_remove
    = i;\n            }\n        }\n        if (to_remove == -1) {\n            arr.Reverse();\n
    \           ans.AddRange(arr.GetRange(0, (int)k));\n        } else {\n            ans.AddRange(arr.GetRange(to_remove
    + 1, (int)k));\n        }\n        return ans;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecef65212a7945d69d17af43c7d90435>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Offset and length were out
    of bounds for the array or count is greater than the number of elements from index
    to the end of the source collection.\n  at System.Collections.Generic.List`1[T].GetRange
    (System.Int32 index, System.Int32 count) [0x00020] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64
    k) [0x000e5] in <ecef65212a7945d69d17af43c7d90435>:0 \n  at Problem.Main (System.String[]
    args) [0x00055] in <ecef65212a7945d69d17af43c7d90435>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentException: Offset and length were out of bounds for
    the array or count is greater than the number of elements from index to the end
    of the source collection.\n  at System.Collections.Generic.List`1[T].GetRange
    (System.Int32 index, System.Int32 count) [0x00020] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64
    k) [0x000e5] in <ecef65212a7945d69d17af43c7d90435>:0 \n  at Problem.Main (System.String[]
    args) [0x00055] in <ecef65212a7945d69d17af43c7d90435>:0 \n"
  stdout: ''
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int n = arr.Count;\n        if (k >
    n) k = n;\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88c3b2bfbc8141ff86d11aebc4c3deba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88c3b2bfbc8141ff86d11aebc4c3deba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Python code:\n        // def maximum(arr,
    k):\n        //     return sorted(arr)[-k:]\n        return arr.OrderByDescending(x
    => x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3edc52243c0c4931982cd945db612462>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3edc52243c0c4931982cd945db612462>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution here.\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c24ab01572541d0b6146f958c6911d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c24ab01572541d0b6146f958c6911d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Func<List<long>, long, List<long>>
    MaximumHelper = null;\n        MaximumHelper = (a, n) => {\n            if (n
    == 0) {\n                return new List<long>();\n            }\n            if
    (a.Count == 1) {\n                return a;\n            }\n            long pivot
    = a[0];\n            List<long> left = new List<long>();\n            List<long>
    right = new List<long>();\n            for (long i = 1; i < a.Count; i++) {\n
    \               if (a[(int)i] > pivot) {\n                    left.Add(a[(int)i]);\n
    \               } else {\n                    right.Add(a[(int)i]);\n                }\n
    \           }\n            if (left.Count >= n) {\n                return MaximumHelper(left,
    n);\n            } else {\n                List<long> left_res = MaximumHelper(left,
    left.Count);\n                List<long> right_res = MaximumHelper(right, n -
    left.Count);\n                left_res.Add(pivot);\n                left_res.AddRange(right_res);\n
    \               return left_res;\n            }\n        };\n        return MaximumHelper(arr,
    k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2548506a1d84250a7e36d2477b86eb6>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<Maximum>b__0
    (System.Collections.Generic.List`1[T] a, System.Int64 n) [0x0002f] in <e2548506a1d84250a7e36d2477b86eb6>:0
    \n  at Problem+<>c__DisplayClass0_0.<Maximum>b__0 (System.Collections.Generic.List`1[T]
    a, System.Int64 n) [0x000e4] in <e2548506a1d84250a7e36d2477b86eb6>:0 \n  at Problem+<>c__DisplayClass0_0.<Maximum>b__0
    (System.Collections.Generic.List`1[T] a, System.Int64 n) [0x000e4] in <e2548506a1d84250a7e36d2477b86eb6>:0
    \n  at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64
    k) [0x00020] in <e2548506a1d84250a7e36d2477b86eb6>:0 \n  at Problem.Main (System.String[]
    args) [0x00055] in <e2548506a1d84250a7e36d2477b86eb6>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.Lis"
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement this function.\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <2fd57956f89b42ed85be15259437c9b3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <2fd57956f89b42ed85be15259437c9b3>:0
    \n"
  stdout: ''
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if(arr.Count == 0) {\n            throw
    new ArgumentException(\"Empty list.\");\n        }\n        if(k < 0 || k > arr.Count)
    {\n            throw new ArgumentException(\"Expected 0 <= k <= len(arr).\");\n
    \       }\n        return arr.Take((int)k).OrderByDescending(n => n).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7edacf743ef24650b376c019c4891e54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7edacf743ef24650b376c019c4891e54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // return arr.OrderByDescending(x =>
    x).Take((int)k).ToList();\n        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \       if (k == 0) {\n            return (new List<long>(new long[] {}));\n        }\n
    \       long[] subarr = arr.GetRange(0, (int)k).ToArray();\n        Array.Sort(subarr);\n
    \       foreach (long v in arr.GetRange((int)k, arr.Count - (int)k)) {\n            int
    ind = (int)k - 1;\n            while (ind >= 0 && subarr[ind] < v) {\n                if
    (ind == (int)k - 1) {\n                    subarr[ind] = v;\n                }
    else {\n                    subarr[ind + 1] = subarr[ind];\n                    subarr[ind]
    = v;\n                }\n                ind -= 1;\n            }\n        }\n
    \       return subarr.ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1fee8af88534cd0b67d6d43097a7614>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1fee8af88534cd0b67d6d43097a7614>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if(arr.Count == 0) {\n            return
    new List<long>();\n        } else if(arr.Count == 1) {\n            return arr;\n
    \       } else {\n            // Maximum() should be running in O(k*log(n)) time,
    where n is the length of the array.\n            //\n            // This is a
    classic problem which can be solved with a heap.\n            // Since we just
    want the largest k elements we can use a max heap.\n            //\n            //
    In C#'s System.Collections.Generic.Heap there is no MaxHeap,\n            // however
    we can use a MinHeap with the negative values instead of the positive ones.\n
    \           //\n            // For example, if the input is [0, 1, 2, 3, 4, 5,
    6, 7, 8, 9],\n            // then the MinHeap will be [-0, -1, -2, -3, -4, -5,
    -6, -7, -8, -9].\n            //\n            // To keep track of the items in
    the MinHeap we use the List arr2.\n            //\n            // If we then want
    to get the Max of the first k items from the input,\n            // then we sort
    the first k items from arr2 and negate the values.\n            //\n            //
    To prove that this runs in O(k*log(n)) time we need to show that\n            //
    O(k + (n-k) + k*log(k)) = O(k*log(n))\n            //\n            // O(k + (n-k)
    + k*log(k))\n            // = O(k) + O(n-k) + O(k*log(k))\n            // = O(k)
    + O(n) + O(k*log(k)) (since O(n-k) = O(n))\n            // = O(k) + O(n) + O(k*log(k))
    (since O(n) is a constant)\n            // = O(k*log(k)) + O(n) + O(k*log(k))\n
    \           // = O(k*log(k)) + O(k*log(k)) + O(\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3buy2hii.cs(56,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3buy2hii.cs(70,2): error CS1513: } expected

    '
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dace449ddca647dd86862a1a5b07b77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <32c85cb40be349ed84a18b0da7bb4232>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <32c85cb40be349ed84a18b0da7bb4232>:0 \n"
  stdout: ''
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // we use a max-heap to store the maximum
    k numbers in arr.\n        // this is O(N + K*logK) in time and O(K) in space.\n
    \       // if we don't care about maintaining order, we can use a map to keep
    track\n        // of the maximum k elements, which is O(N) in time and O(K) in
    space.\n        // that would be a cool way to write the solution and then compare
    the\n        // performance.\n        var heap = new SortedSet<long>();\n        for
    (int i = 0; i < arr.Count; i++) {\n            heap.Add(arr[i]);\n            if
    (heap.Count > k) {\n                heap.Remove(heap.Min);\n            }\n        }\n
    \       var res = new List<long>();\n        foreach (var item in heap) {\n            res.Add(item);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e24a0d8fa2f434b98ce18c7d04aa03a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e24a0d8fa2f434b98ce18c7d04aa03a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0
    \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> ret = new List<long>();\n
    \       if (k == 0) {\n            return ret;\n        }\n        if (k > arr.Count)
    {\n            ret.AddRange(arr);\n            return ret;\n        }\n        arr.Sort();\n
    \       return arr.GetRange((int)(arr.Count - k), (int)k);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd17b481ea064f71b5ac60ed7613c87e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd17b481ea064f71b5ac60ed7613c87e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> maximum = new List<long>();\n
    \       for (long i = 0; i < k; i++) {\n            maximum.Add(arr[i]);\n        }\n
    \       maximum.Sort();\n        long maximumSize = maximum.Count;\n        for
    (long i = k; i < arr.Count; i++) {\n            long insertIndex = 0;\n            while
    (insertIndex < maximumSize && arr[i] > maximum[insertIndex]) {\n                insertIndex
    += 1;\n            }\n            if (insertIndex < maximumSize) {\n                maximum.Insert(Convert.ToInt32(insertIndex),
    arr[i]);\n                maximum.RemoveAt(Convert.ToInt32(maximumSize));\n            }\n
    \       }\n        return maximum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r4xhy9a.cs(27,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp8r4xhy9a.cs(33,53): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp8r4xhy9a.cs(33,66): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp8r4xhy9a.cs(37,66): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        IEnumerable<long> l = arr.OrderByDescending(x
    => x).Take((int)k);\n        return l.ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8c645202e194ff5b9c3f6b830fecb64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8c645202e194ff5b9c3f6b830fecb64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> ret = new List<long>();\n
    \       // Create a priority queue that pops out the smallest element each time\n
    \       // Initialize it with the first k elements\n        PriorityQueue<long>
    max_pq = new PriorityQueue<long>();\n        for (int i = 0; i < k; i++) {\n            max_pq.Push(arr[i]);\n
    \       }\n        // For each element after the first k elements, add it to the
    priority queue\n        // and remove the smallest element\n        for (int i
    = k; i < arr.Count; i++) {\n            max_pq.Push(arr[i]);\n            max_pq.Pop();\n
    \       }\n        // Pop the elements out of the priority queue, which are the
    k largest elements\n        for (int i = 0; i < k; i++) {\n            ret.Add(max_pq.Pop());\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7gfgs3dq.cs(28,9): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp7gfgs3dq.cs(28,42): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp7gfgs3dq.cs(34,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // FIND MAXIMUM K INTEGERS IN ARR\n
    \       arr.Sort();\n        arr.Reverse();\n        arr = arr.GetRange(0, (int)k);\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee2b6461dd23485aac951ab83e925a89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee2b6461dd23485aac951ab83e925a89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int n = arr.Count;\n        // create
    a max heap and insert k elements from arr\n        var heap = new SortedSet<long>();\n
    \       for (int i = 0; i < k; i++) {\n            heap.Add(arr[i]);\n        }\n
    \       // for each remaining element in arr, insert it into the heap if it's
    larger than\n        // the current smallest element\n        for (int i = k;
    i < n; i++) {\n            if (arr[i] > heap.Min) {\n                heap.Remove(heap.Min);\n
    \               heap.Add(arr[i]);\n            }\n        }\n        return heap.ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxl5z6qpq.cs(33,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <3abad4b7b026442d9abc435ab7e4de48>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <3abad4b7b026442d9abc435ab7e4de48>:0 \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Func<long, long, bool> compare = delegate(long
    a, long b) {\n            return a < b;\n        };\n        HeapSort<long> sorter
    = new HeapSort<long>(arr, compare);\n        arr = sorter.Sort().Take((int)k).ToList();\n
    \       arr.Reverse();\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy7mu71nd.cs(28,9): error CS0246: The type or namespace name ''HeapSort<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpy7mu71nd.cs(28,37): error CS0246: The type or namespace name ''HeapSort<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Declare a variable called 't' to
    store the length of the input list.\n        long t = arr.Count;\n        // If
    the length of the input list is larger than the given length k,\n        // set
    the length of the input list to the given length k.\n        if (arr.Count > k)
    {\n            t = k;\n        }\n        // Declare a variable called 'list'
    to store the list of maximum numbers.\n        List<long> list = new List<long>();\n
    \       // Declare a variable called 'x' to store the index of the maximum number
    in the input list.\n        long x = 0;\n        // Declare a variable called
    'temp' to store the maximum number in the input list.\n        long temp = 0;\n
    \       // Iterate from 0 to the length of the input list.\n        for (long
    i = 0; i < t; i++) {\n            // Initialize the maximum number to the first
    element in the input list.\n            temp = arr[0];\n            // Iterate
    from 0 to the length of the input list.\n            for (long j = 0; j < arr.Count;
    j++) {\n                // If the current element is larger than the temporary
    maximum number,\n                // set the maximum number to the current element.\n
    \               if (arr[(int)j] > temp) {\n                    temp = arr[(int)j];\n
    \                   // Set the index of the maximum number to the current index.\n
    \                   x = j;\n                }\n            }\n            // Append
    the maximum number to the list of maximum numbers.\n            list.Add(temp);\n
    \           // Remove the maximum number from the input list.\n            arr.RemoveAt((int)x);\n
    \       }\n        // Return the list of maximum numbers.\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00081] in <0341b274343a4019b4afd36d3799d451>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0341b274343a4019b4afd36d3799d451>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00081] in <0341b274343a4019b4afd36d3799d451>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0341b274343a4019b4afd36d3799d451>:0
    \n"
  stdout: ''
  timestamp: 1660015838
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <3abad4b7b026442d9abc435ab7e4de48>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <3abad4b7b026442d9abc435ab7e4de48>:0 \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (arr.Count < k) {\n            return result;\n        }\n        for
    (long i = 0; i < k; i++) {\n            long max = arr[0];\n            for (long
    j = 1; j < arr.Count; j++) {\n                if (arr[(int)j] > max) {\n                    max
    = arr[(int)j];\n                }\n            }\n            result.Add(max);\n
    \           arr.Remove(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8586be4f1f042eb8b3184bfcbefc38d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8586be4f1f042eb8b3184bfcbefc38d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Fill in the code here\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <324fb91783b64abf92740fd42da8962a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <324fb91783b64abf92740fd42da8962a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    maxHeap = new MaxHeap<long>(arr.Count);\n        foreach (var a in arr) {\n            maxHeap.Add(a);\n
    \       }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.DeleteMax());\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkf8qvs34.cs(26,27): error CS0246: The type or namespace name ''MaxHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d435cdf5edb45ea8eead931b575e602>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(arr.Count > 0);\n        Debug.Assert(k
    > 0);\n        Debug.Assert(k <= arr.Count);\n        List<long> a = new List<long>(arr);\n
    \       a.Sort();\n        a.Reverse();\n        return a.GetRange(0, (int)k);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73d78665ac1f427f98333221ebc32aec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73d78665ac1f427f98333221ebc32aec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // 1. Sort array.\n        // 2. Take
    elements from end of array.\n        arr.Sort();\n        return arr.GetRange((int)(arr.Count
    - k), (int)k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac79924a125f47f28bc4ee8e07e9cd87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac79924a125f47f28bc4ee8e07e9cd87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // We can just sort the array with
    \n        // C# List<T>.Sort() method, which is a stable sort.\n        arr.Sort();\n
    \       // This will take O(n*log(n)) time.\n        // Now we only want the last
    k elements.\n        // They will be at index arr.Count - k to arr.Count - 1.\n
    \       // So we create a new list in that range.\n        // This will take O(k)
    time.\n        return new List<long>(arr.GetRange((int)(arr.Count - k), (int)k));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f4759d9b70d45bc9cca8a68039fde79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f4759d9b70d45bc9cca8a68039fde79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // === IMPLEMENTATION ===\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0303b476004405389f9809ea7253a25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0303b476004405389f9809ea7253a25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> d = new List<long>();\n
    \       foreach (long x in arr) {\n            if (d.Count == 0) {\n                d.Add(x);\n
    \           } else {\n                int i = d.Count - 1;\n                while
    (i >= 0 && x > d[i]) {\n                    i -= 1;\n                }\n                d.Insert(i
    + 1, x);\n                if (d.Count > k) {\n                    d.RemoveAt(d.Count
    - 1);\n                }\n            }\n        }\n        return d;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efb633c349c40a1aa077df3a2f7716c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efb633c349c40a1aa077df3a2f7716c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0L) {\n            return
    new List<long>();\n        }\n        else if (k >= ((long)arr.Count)) {\n            return
    arr.OrderByDescending(x => x).ToList();\n        }\n        else {\n            var
    max = arr.OrderByDescending(x => x).Take((int)k).ToList();\n            foreach
    (var item in arr) {\n                if (item < max.Last()) {\n                    max.Add(item);\n
    \                   max = max.OrderByDescending(x => x).Take((int)k).ToList();\n
    \               }\n            }\n            return max;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <411397730822465593402b1fb66d5e36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <411397730822465593402b1fb66d5e36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if(k < 1)\n            return new List<long>();\n
    \       if(k > arr.Count)\n            k = arr.Count;\n        return arr.OrderByDescending(x
    => x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f922cd87016f4d5fa1913a12fb76aac7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f922cd87016f4d5fa1913a12fb76aac7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Let's define a mergeSort procedure,
    with the property that for a given\n        // pivot, it partitions the array
    into exactly two parts: those\n        // in front of the pivot and those equal
    to or after the pivot.\n        // The mergeSort procedure will return the index
    of the pivot.\n        //\n        // We can then recursively apply mergeSort
    to the first part of the list\n        // until we get a segment of the list of
    size k. If the returned index\n        // is less than k, it means that the kth
    element was in that segment and\n        // we recurse down the segment. If the
    returned index is greater than or\n        // equal to k, it means that the kth
    element was in the second segment and\n        // we recurse down the second segment.
    This process ends after log(n)\n        // iterations.\n        // \n        //
    Asymptotic complexity: O(n log(n))\n        // Space complexity: O(1)\n        Func<List<long>,
    long, long, long> mergeSort = null;\n        mergeSort = (List<long> list, long
    left, long right) => {\n            if (left < right) {\n                // Arbitrarily
    choose the leftmost element as the pivot\n                long pivot = list[left];\n
    \               // Put each element that is greater than the pivot in front\n
    \               // of the pivot, and each element that is less than or equal\n
    \               // to the pivot in the back of the pivot\n                long
    slow = left;\n                for (long fast = left + 1; fast <= right; fast++)
    {\n                    if (list[fast] > pivot) {\n                        slow++;\n
    \                       if (slow != fast) {\n                            long
    temp = list[slow];\n                            list[slow] = list[fast];\n                            list[fast]
    = temp;\n                        }\n                    }\n                }\n
    \               // Swap the pivot with the first element after the pivot\n                if
    (slow != left) {\n                    list[left] = list[slow];\n                    list[slow]
    = pivot;\n                }\n                // Return the index of the pivot\n
    \               return slow;\n            }\n            return left;\n        };\n
    \       // Define a function that recursively uses mergeSort to find the kth element\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd11li467.cs(44,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(50,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(53,46): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(54,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(54,47): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(55,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(61,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(61,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(62,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpd11li467.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       for (int i = 0; i < k; i++) {\n            long curr = arr[0];\n            for
    (int j = 1; j < arr.Count; j++) {\n                if (arr[j] > curr) {\n                    curr
    = arr[j];\n                }\n            }\n            res.Add(curr);\n            arr.Remove(curr);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57322eb13cc745bab97d52bc147a8832>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57322eb13cc745bab97d52bc147a8832>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Insert arr[0] into a max heap.\n
    \       // Push the rest of the elements into the heap, one at a time.\n        //
    When the heap has k elements, remove the max.\n        // Heapify.\n        //
    Return the heap.\n        if ((k < 1L) || (k > arr.Count)) {\n            throw
    new System.Exception(\"Invalid k\");\n        }\n        if (k == 1L) {\n            long
    max = arr[0];\n            foreach (long x in arr) {\n                if (x >
    max) {\n                    max = x;\n                }\n            }\n            return
    new List<long>(new long[]{max});\n        }\n        List<long> heap = new List<long>(new
    long[]{arr[0]});\n        for (int i = 1; i < arr.Count; i++) {\n            heap.Add(arr[i]);\n
    \           int j = heap.Count - 1;\n            while (true) {\n                int
    parent_idx = (j - 1) / 2;\n                if (parent_idx < 0) {\n                    break;\n
    \               }\n                if (heap[j] > heap[parent_idx]) {\n                    long
    tmp = heap[j];\n                    heap[j] = heap[parent_idx];\n                    heap[parent_idx]
    = tmp;\n                    j = parent_idx;\n                } else {\n                    break;\n
    \               }\n            }\n            if (heap.Count > k) {\n                heap[0]
    = heap[heap.Count - 1];\n                heap.RemoveAt(heap.Count - 1);\n                j
    = 0;\n                while (true) {\n                    int left_idx = 2 * j
    + 1;\n                    int right_idx = 2 * j + 2;\n                    if (left_idx
    >= heap.Count) {\n                        break;\n                    }\n                    if
    (right_idx >= heap.Count) {\n                        if (heap[left_idx] > heap[j])
    {\n                            long tmp = heap[left_idx];\n                            heap[left_idx]
    = heap[j];\n                            heap[j] = tmp\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprbtpz2la.cs(74,42): error CS1002: ; expected

    /tmp/tmprbtpz2la.cs(76,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmprbtpz2la.cs(90,2): error CS1513: } expected

    '
  timestamp: 1660015838
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO\n        List<long> result
    = new List<long>();\n        arr.Sort();\n        for (int i = arr.Count - 1;
    i >= 0; i--) {\n            if (result.Count < k) {\n                result.Add(arr[i]);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c85bc569e86e464fa14ca24a7ca58634>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c85bc569e86e464fa14ca24a7ca58634>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0
    \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(e => e).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <486a3bec733c46f7b776d7ba70aeb91f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <486a3bec733c46f7b776d7ba70aeb91f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015834
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return MaximumSolution(arr, k);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp68bz9_h6.cs(25,16): error CS0103: The name ''MaximumSolution'' does not
    exist in the current context

    '
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var ans = new List<long>();\n        if
    (k > arr.Count) {\n            return arr;\n        }\n        for (var i = 0;
    i < k; i++) {\n            var max = long.MinValue;\n            for (var j =
    0; j < arr.Count; j++) {\n                var e = arr[j];\n                if
    (e > max) {\n                    max = e;\n                }\n            }\n
    \           ans.Add(max);\n            arr.Remove(max);\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6a3d227e7934abb8532fa24c14a4b94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6a3d227e7934abb8532fa24c14a4b94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var n = arr.Count;\n        var soln
    = new List<long>();\n        var partarr = new List<long>();\n        for (int
    i = 0; i < n; i++) {\n            partarr.Add(arr[i]);\n            for (int j
    = partarr.Count - 1; j > 0; j--) {\n                if (partarr[j] > partarr[j
    - 1]) {\n                    var t = partarr[j];\n                    partarr[j]
    = partarr[j - 1];\n                    partarr[j - 1] = t;\n                }\n
    \           }\n            if (i >= k - 1) {\n                soln.Add(partarr[k
    - 1]);\n                partarr.RemoveAt(0);\n            }\n        }\n        return
    soln;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2n83ppsc.cs(38,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <3abad4b7b026442d9abc435ab7e4de48>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <3abad4b7b026442d9abc435ab7e4de48>:0 \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        arr.Sort();\n        arr.Reverse();\n
    \       return arr.GetRange(0,(int)k);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afa90f738685478ca9fca1cf80c0f2dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afa90f738685478ca9fca1cf80c0f2dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> l = new List<long>();\n
    \       arr.Sort();\n        arr.Reverse();\n        for (int i = 0; i < k; i++)
    {\n            l.Add(arr[i]);\n        }\n        return l;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea60cb7502e34fa58ff48726f9bf7252>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea60cb7502e34fa58ff48726f9bf7252>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> answer = new List<long>();\n
    \       var tempList = new List<long>(arr);\n        tempList.Sort();\n        tempList.Reverse();\n
    \       for (int i = 0; i < k; i++) {\n            answer.Add(tempList[i]);\n
    \       }\n        return answer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77208f49f7a24a40a987348f88974776>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77208f49f7a24a40a987348f88974776>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Fill this in.\n        List<long>
    arr1 = new List<long>();\n        long j = 1;\n        while (arr1.Count < k)
    {\n            foreach (long i in arr) {\n                if (i > j) {\n                    arr1.Add(i);\n
    \               }\n            }\n            j += 1;\n        }\n        return
    arr1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f00f907f8f27486ab15d3e67f99cb0cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f00f907f8f27486ab15d3e67f99cb0cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <ac759042d63c4e069fb021d9a88144a9>:0
    \n"
  stdout: ''
  timestamp: 1660015834
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (arr.Count == 0) {\n            return result;\n        }\n        if
    (arr.Count == 1) {\n            result.Add(arr[0]);\n            return result;\n
    \       }\n        if (arr.Count == 2) {\n            long a = arr[0];\n            long
    b = arr[1];\n            if (a >= b) {\n                result.Add(a);\n                result.Add(b);\n
    \           } else {\n                result.Add(b);\n                result.Add(a);\n
    \           }\n            return result;\n        }\n        Dictionary<long,
    int> visited = new Dictionary<long, int>();\n        long idx = (long)0L;\n        long
    size = (long)arr.Count;\n        while (result.Count < k) {\n            int add
    = 1;\n            if (visited.ContainsKey(idx)) {\n                add = visited[idx];\n
    \           }\n            visited[idx] = add + 1;\n            result.Add(arr[(int)idx]);\n
    \           idx = idx + (long)1L;\n            if (idx >= size) {\n                idx
    = (long)0L;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b4cc194a1e64d35b43dee4824f71049>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b4cc194a1e64d35b43dee4824f71049>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int ik = (int)k;\n        arr.Sort();\n
    \       arr.Reverse();\n        return arr.GetRange(0, ik);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b08d8fb665f465d9fe937a7876fd112>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b08d8fb665f465d9fe937a7876fd112>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k < 1 || k > arr.Count) throw new
    System.ArgumentException(\"k must be between 1 and arr.Count\");\n        if (k
    == arr.Count) return arr;\n        var res = arr.OrderByDescending(c => c).Take((int)k).ToList();\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98f3f66dcf254719bc00c413582a251e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98f3f66dcf254719bc00c413582a251e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new
    long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n        //
    (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),
    (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n        //
    >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,
    (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,
    (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n        //
    (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n        //
    >>> Maximum((new List<long>(new long[]\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx0tszi0f.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015836
