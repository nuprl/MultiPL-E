language: cs
name: HumanEval_160_do_algebra
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            long op1 = operand[i];\n          \
    \  long op2 = operand[i + 1];\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    res = op1 + op2;\n                    break;\n \
    \               case \"-\":\n                    res = op1 - op2;\n          \
    \          break;\n                case \"*\":\n                    res = op1\
    \ * op2;\n                    break;\n                case \"//\":\n         \
    \           res = op1 / op2;\n                    break;\n                case\
    \ \"**\":\n                    res = (long)Math.Pow(op1, op2);\n             \
    \       break;\n            }\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9e1f7fd938d4c4680e040bc031ed501>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9e1f7fd938d4c4680e040bc031ed501>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        int n = op.Count;\n        long res = operand[0];\n\
    \        for (int i = 0; i < n; i++) {\n            if (op[i] == \"+\") {\n  \
    \              res += operand[i + 1];\n            } else if (op[i] == \"-\")\
    \ {\n                res -= operand[i + 1];\n            } else if (op[i] == \"\
    *\") {\n                res *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                res /= operand[i + 1];\n            } else if (op[i]\
    \ == \"**\") {\n                res = (long)Math.Pow(res, operand[i + 1]);\n \
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a12869344f04cce81ce252c7af405fc>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Algebra operations are more straightforward\
    \ using recursive\n        // programming.\n        if (op.Count == 0) {\n   \
    \         return operand[0];\n        }\n        string headOp = op[0];\n    \
    \    op.RemoveAt(0);\n        long result = operand[0];\n        switch (headOp)\
    \ {\n            case \"+\":\n                result += DoAlgebra(op, operand);\n\
    \                break;\n            case \"-\":\n                result -= DoAlgebra(op,\
    \ operand);\n                break;\n            case \"*\":\n               \
    \ result *= DoAlgebra(op, operand);\n                break;\n            case\
    \ \"//\":\n                result /= DoAlgebra(op, operand);\n               \
    \ break;\n            case \"**\":\n                result = (long)Math.Pow(result,\
    \ DoAlgebra(op, operand));\n                break;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6248351659846e694629eced7a8cfac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6248351659846e694629eced7a8cfac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            long next = operand[i + 1];\n     \
    \       string nextOp = op[i];\n            switch (nextOp) {\n              \
    \  case \"+\":\n                    result += next;\n                    break;\n\
    \                case \"-\":\n                    result -= next;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ next;\n                    break;\n                case \"//\":\n          \
    \          result /= next;\n                    break;\n                case \"\
    **\":\n                    result = (long)Math.Pow(result, next);\n          \
    \          break;\n            }\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b743095637a43d398d06893b243fd1f>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return operand[0];\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60ca8a7a6c66454197a29114c2240ae0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60ca8a7a6c66454197a29114c2240ae0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Base case\n        if (op.Count == 0)\
    \ {\n            return operand[0];\n        }\n        // Recursive case\n  \
    \      else {\n            // Extract last operator and operand\n            string\
    \ oper = op[op.Count - 1];\n            long a = operand[operand.Count - 2];\n\
    \            long b = operand[operand.Count - 1];\n            // Calculate result\n\
    \            long r = 0;\n            switch (oper) {\n                case \"\
    +\":\n                    r = a + b;\n                    break;\n           \
    \     case \"-\":\n                    r = a - b;\n                    break;\n\
    \                case \"*\":\n                    r = a * b;\n               \
    \     break;\n                case \"//\":\n                    r = a / b;\n \
    \                   break;\n                case \"**\":\n                   \
    \ r = (long)Math.Pow(a, b);\n                    break;\n            }\n     \
    \       // Recursive call\n            op.RemoveAt(op.Count - 1);\n          \
    \  operand.RemoveAt(operand.Count - 1);\n            operand[operand.Count - 1]\
    \ = r;\n            return DoAlgebra(op, operand);\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5f8d10f7c2c43809500323ee85db80d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5f8d10f7c2c43809500323ee85db80d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Implement the function here\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb523771c01747089d89836db2050e80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb523771c01747089d89836db2050e80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Stack<long> stack = new Stack<long>();\n\
    \        long result = 0;\n        for (int i = 0; i < op.Count; i++) {\n    \
    \        long operand2 = operand[i+1];\n            if (op[i] == \"-\" || op[i]\
    \ == \"+\") {\n                operand2 = operand[i+1] * (op[i] == \"-\" ? -1\
    \ : 1);\n                stack.Push(operand2);\n            } else if (op[i] ==\
    \ \"*\") {\n                long operand1 = stack.Pop();\n                operand2\
    \ = operand1 * operand2;\n                stack.Push(operand2);\n            }\
    \ else if (op[i] == \"//\") {\n                long operand1 = stack.Pop();\n\
    \                operand2 = operand1 / operand2;\n                stack.Push(operand2);\n\
    \            } else if (op[i] == \"**\") {\n                long operand1 = stack.Pop();\n\
    \                operand2 = (long) Math.Pow(operand1, operand2);\n           \
    \     stack.Push(operand2);\n            }\n        }\n        result = stack.Pop();\n\
    \        while (stack.Count > 0) {\n            result += stack.Pop();\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\"\
    , (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000f3] in <0319220e12654d349b3ca823a22ffd96>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <0319220e12654d349b3ca823a22ffd96>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000f3] in <0319220e12654d349b3ca823a22ffd96>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <0319220e12654d349b3ca823a22ffd96>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var res = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    res += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    res -= operand[i + 1];\n   \
    \                 break;\n                case \"*\":\n                    res\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    res /= operand[i + 1];\n                    break;\n  \
    \              case \"**\":\n                    res = (long)Math.Pow(res, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b6f17fdb842478480c65ce6701e9e16>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long ans = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     ans += operand[i + 1];\n            } else if (op[i] == \"-\") {\n     \
    \           ans -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n\
    \                ans *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                ans /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                ans = (long)Math.Pow(ans, operand[i + 1]);\n        \
    \    }\n        }\n        return ans;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e30251ae23d64e358134ebbddee337bb>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e495c25ceeb44e084f3d37c72b3cb01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e495c25ceeb44e084f3d37c72b3cb01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var opStack = new Stack<string>();\n    \
    \    var operandStack = new Stack<long>();\n        foreach (var o in op) {\n\
    \            if (o == \"**\") {\n                opStack.Push(o);\n          \
    \  } else {\n                while (opStack.Count > 0 && !(o == \"**\" && opStack.Peek()\
    \ == \"**\")) {\n                    var op2 = opStack.Pop();\n              \
    \      var operand2 = operandStack.Pop();\n                    var operand1 =\
    \ operandStack.Pop();\n                    var res = ApplyOperator(op2, operand1,\
    \ operand2);\n                    operandStack.Push(res);\n                }\n\
    \                opStack.Push(o);\n            }\n        }\n        while (opStack.Count\
    \ > 0) {\n            var op2 = opStack.Pop();\n            var operand2 = operandStack.Pop();\n\
    \            var operand1 = operandStack.Pop();\n            var res = ApplyOperator(op2,\
    \ operand1, operand2);\n            operandStack.Push(res);\n        }\n     \
    \   return operandStack.Pop();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\"\
    , (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx1v6fn56.cs(38,31): error CS0103: The name ''ApplyOperator'' does not
    exist in the current context

    /tmp/tmpx1v6fn56.cs(48,23): error CS0103: The name ''ApplyOperator'' does not
    exist in the current context

    '
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") res += operand[i\
    \ + 1];\n            else if (op[i] == \"-\") res -= operand[i + 1];\n       \
    \     else if (op[i] == \"*\") res *= operand[i + 1];\n            else if (op[i]\
    \ == \"//\") res /= operand[i + 1];\n            else if (op[i] == \"**\") res\
    \ = (long)Math.Pow(res, operand[i + 1]);\n        }\n        return res;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76a617e83d3d48bbb39223c60b1ab779>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count != operand.Count - 1) {\n  \
    \          throw new Exception(\"operator list is not equal to operand list minus\
    \ one\");\n        }\n        if (op.Count == 0) {\n            throw new Exception(\"\
    empty operator list\");\n        }\n        if (operand.Count == 0) {\n      \
    \      throw new Exception(\"empty operand list\");\n        }\n        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += operand[i\
    \ + 1];\n                    break;\n                case \"-\":\n           \
    \         result -= operand[i + 1];\n                    break;\n            \
    \    case \"*\":\n                    result *= operand[i + 1];\n            \
    \        break;\n                case \"//\":\n                    result /= operand[i\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[i + 1]);\n                \
    \    break;\n                default:\n                    throw new Exception($\"\
    unknown operator {op[i]}\");\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acb97089123243d5bd80c60eb4213d02>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long curr = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    curr += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    curr -= operand[i + 1];\n  \
    \                  break;\n                case \"*\":\n                    curr\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    curr /= operand[i + 1];\n                    break;\n \
    \               case \"**\":\n                    curr = (long)Math.Pow(curr,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return curr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4046ce94351641c3baed87e725515893>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long tmp = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    tmp += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    tmp -= operand[i + 1];\n   \
    \                 break;\n                case \"*\":\n                    tmp\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    tmp /= operand[i + 1];\n                    break;\n  \
    \              case \"**\":\n                    tmp = (long)Math.Pow(tmp, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ tmp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c7a943ebaa243c78e289e42dcce7d26>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Stack<long> s = new Stack<long>();\n    \
    \    s.Push(operand[0]);\n        for (int i = 0; i < op.Count; i++) {\n     \
    \       long r = operand[i + 1];\n            switch (op[i]) {\n             \
    \   case \"+\": s.Push(s.Pop() + r); break;\n                case \"-\": s.Push(s.Pop()\
    \ - r); break;\n                case \"*\": s.Push(s.Pop() * r); break;\n    \
    \            case \"//\": s.Push(s.Pop() / r); break;\n                case \"\
    **\": s.Push((long)Math.Pow(s.Pop(), r)); break;\n            }\n        }\n \
    \       return s.Pop();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <531c6771b5064ca490aab38cf2dc8200>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: Implement your algorithm here\n\
    \        long ans = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            if (op[i] == \"+\") {\n                ans += operand[i + 1];\n \
    \           } else if (op[i] == \"-\") {\n                ans -= operand[i + 1];\n\
    \            } else if (op[i] == \"*\") {\n                ans *= operand[i +\
    \ 1];\n            } else if (op[i] == \"//\") {\n                ans /= operand[i\
    \ + 1];\n            } else if (op[i] == \"**\") {\n                ans = (long)Math.Pow(ans,\
    \ operand[i + 1]);\n            }\n        }\n        return ans;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e536e456f4b2449682b6083be0819c74>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Implement the solution here.\n       \
    \ // Assume the input is correct.\n        long result = operand[0];\n       \
    \ for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n       \
    \         case \"+\":\n                    result += operand[i + 1];\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand[i + 1];\n                    break;\n                case \"*\":\n\
    \                    result *= operand[i + 1];\n                    break;\n \
    \               case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f563becbea5a43b18973540cd2713754>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count == 0 || operand.Count < 2)\n\
    \            return 0;\n        long res = operand[0];\n        for (int i = 0;\
    \ i < op.Count; i++) {\n            string operation = op[i];\n            long\
    \ oper = operand[i + 1];\n            if (operation == \"+\")\n              \
    \  res += oper;\n            else if (operation == \"-\")\n                res\
    \ -= oper;\n            else if (operation == \"*\")\n                res *= oper;\n\
    \            else if (operation == \"//\")\n                res /= oper;\n   \
    \         else if (operation == \"**\")\n                res = (long)Math.Pow(res,\
    \ oper);\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9002752aa01d4a17b7c8f0cc63729ccc>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Stack<string> operators = new Stack<string>();\n\
    \        Stack<long> operands = new Stack<long>();\n        for (int i = 0; i\
    \ < op.Count; i++) {\n            if (op[i] == \"+\" || op[i] == \"-\" || op[i]\
    \ == \"*\" || op[i] == \"//\" || op[i] == \"**\") {\n                operators.Push(op[i]);\n\
    \            } else {\n                operands.Push(operand[i]);\n          \
    \  }\n        }\n        operands.Push(operand[operand.Count - 1]);\n        long\
    \ res = operands.Pop();\n        while (operators.Count > 0) {\n            string\
    \ curr = operators.Pop();\n            long next = operands.Pop();\n         \
    \   if (curr == \"+\") {\n                res += next;\n            } else if\
    \ (curr == \"-\") {\n                res -= next;\n            } else if (curr\
    \ == \"*\") {\n                res *= next;\n            } else if (curr == \"\
    //\") {\n                res /= next;\n            } else if (curr == \"**\")\
    \ {\n                res = (long)Math.Pow(res, next);\n            }\n       \
    \ }\n        return res;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000de] in <141988af84f24f72a46479a4734580fd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <141988af84f24f72a46479a4734580fd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000de] in <141988af84f24f72a46479a4734580fd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <141988af84f24f72a46479a4734580fd>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long r = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n             \
    \   r += operand[i + 1];\n            } else if (op[i] == \"-\") {\n         \
    \       r -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n     \
    \           r *= operand[i + 1];\n            } else if (op[i] == \"//\") {\n\
    \                r /= operand[i + 1];\n            } else if (op[i] == \"**\"\
    ) {\n                r = Convert.ToInt64(Math.Pow(r, operand[i + 1]));\n     \
    \       }\n        }\n        return r;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6bf6116b80d43fc87e05583cced5a55>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe7isn5l8.cs(27,24): error CS0161: ''Problem.DoAlgebra(List<string>, List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your code here\n        return 0;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4740cb282c946c7a34f0e2df2059b20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4740cb282c946c7a34f0e2df2059b20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // the code here is not important\n     \
    \   return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a2076afd3f441adb38fc9a7c8f9bc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a2076afd3f441adb38fc9a7c8f9bc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long total = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            string o = op[i];\n            long\
    \ a = operand[i];\n            long b = operand[i + 1];\n            if (o ==\
    \ \"+\") {\n                total = a + b;\n            } else if (o == \"-\"\
    ) {\n                total = a - b;\n            } else if (o == \"*\") {\n  \
    \              total = a * b;\n            } else if (o == \"//\") {\n       \
    \         total = a / b;\n            } else if (o == \"**\") {\n            \
    \    total = (long)Math.Pow(a, b);\n            }\n        }\n        return total;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db58214c4a2a4b57b56097433f219be5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db58214c4a2a4b57b56097433f219be5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return DoAlgebraRecursive(op, operand, 0,\
    \ 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ea019i6.cs(28,16): error CS0103: The name ''DoAlgebraRecursive'' does
    not exist in the current context

    '
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            long n = operand[i + 1];\n        \
    \    switch (op[i]) {\n                case \"+\":\n                    result\
    \ += n;\n                    break;\n                case \"-\":\n           \
    \         result -= n;\n                    break;\n                case \"*\"\
    :\n                    result *= n;\n                    break;\n            \
    \    case \"//\":\n                    result /= n;\n                    break;\n\
    \                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ n);\n                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d25ad7e03034754a7eca1f0fc8b6398>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     res += operand[i + 1];\n            } else if (op[i] == \"-\") {\n     \
    \           res -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n\
    \                res *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                res /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                res = (long)Math.Pow(res, operand[i + 1]);\n        \
    \    }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c60225c101e44979baafd63e327e0f5c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here.\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <550fcc9cde8541898a998587a91569f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <550fcc9cde8541898a998587a91569f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count() + 1 != operand.Count()) {\n\
    \            throw new Exception(\"Operator count and operand count do not match\"\
    );\n        }\n        long result = operand[0];\n        for (int i = 0; i <\
    \ op.Count(); i++) {\n            switch (op[i]) {\n                case \"+\"\
    :\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n                default:\n   \
    \                 throw new Exception(\"Operator not supported: \" + op[i]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04ab56b9b45c4a04a963694e1be6a40b>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        long[] ops\
    \ = operand.ToArray();\n        long ans = ops[0];\n        for (int i = 0; i\
    \ < op.Count; i++) {\n            switch (op[i]) {\n                case \"+\"\
    :\n                    ans += ops[i + 1];\n                    break;\n      \
    \          case \"-\":\n                    ans -= ops[i + 1];\n             \
    \       break;\n                case \"*\":\n                    ans *= ops[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          ans /= ops[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    ans = (long)Math.Pow(ans, ops[i + 1]);\n      \
    \              break;\n            }\n        }\n        return ans;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bafb24eee744fc4bce9ffdaa7a834b3>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here.\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <550fcc9cde8541898a998587a91569f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <550fcc9cde8541898a998587a91569f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b5d5b0d8bc48ab94bc6d9239910536>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b5d5b0d8bc48ab94bc6d9239910536>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // return operand[0] / operand[1];\n    \
    \    return (operand[0] / operand[1]);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8c677127097453aba77144977948ffa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8c677127097453aba77144977948ffa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long total = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     total += operand[i + 1];\n            } else if (op[i] == \"-\") {\n   \
    \             total -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                total *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                total /= operand[i + 1];\n            } else if (op[i]\
    \ == \"**\") {\n                total = (long)Math.Pow(total, operand[i + 1]);\n\
    \            }\n        }\n        return total;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e878b86b424b4632947dc7b0a1c19b7c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count == 0 || operand.Count < 2) {\n\
    \            throw new Exception(\"Invalid param\");\n        }\n        // Your\
    \ code here\n        // To Do\n        long result = operand[0];\n        for\
    \ (int i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n      \
    \          result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n\
    \                result -= operand[i + 1];\n            } else if (op[i] == \"\
    *\") {\n                result *= operand[i + 1];\n            } else if (op[i]\
    \ == \"//\") {\n                result /= operand[i + 1];\n            } else\
    \ if (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a9c42f58f53401a8d35c44cbba293e3>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // The idea is to evaluate the calculation\
    \ from the last operator to the first.\n        long result = operand[operand.Count\
    \ - 1]; // The result is the last value of the operand list.\n        operand.RemoveAt(operand.Count\
    \ - 1);\n        for (int i = op.Count - 1; i >= 0; i--) {\n            if (op[i]\
    \ == \"+\") {\n                result += operand[i];\n            } else if (op[i]\
    \ == \"-\") {\n                result -= operand[i];\n            } else if (op[i]\
    \ == \"*\") {\n                result *= operand[i];\n            } else if (op[i]\
    \ == \"//\") {\n                result /= operand[i];\n            } else if (op[i]\
    \ == \"**\") {\n                result = (long)Math.Pow(result, operand[i]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2053b59660f64c2d8e25d072933f8e7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2053b59660f64c2d8e25d072933f8e7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") result += operand[i\
    \ + 1];\n            else if (op[i] == \"-\") result -= operand[i + 1];\n    \
    \        else if (op[i] == \"*\") result *= operand[i + 1];\n            else\
    \ if (op[i] == \"//\") result /= operand[i + 1];\n            else if (op[i] ==\
    \ \"**\") result = (long)Math.Pow(result, operand[i + 1]);\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5af4cd5b511419e9a66c24e985bded9>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count != operand.Count - 1) {\n  \
    \          throw new ArgumentException(\"You must have one more operand than operators.\"\
    );\n        }\n        long result = operand[0];\n        for (int i = 0; i <\
    \ op.Count; i++) {\n            switch (op[i]) {\n                case \"+\":\n\
    \                    result += operand[i + 1];\n                    break;\n \
    \               case \"-\":\n                    result -= operand[i + 1];\n \
    \                   break;\n                case \"*\":\n                    result\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[i + 1];\n                    break;\n\
    \                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n                default:\n   \
    \                 throw new ArgumentException(\"Invalid operator in list.\");\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93b90f6cf7bc4d068b5aef8217762912>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        throw new NotImplementedException();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a] in <7dcb78bd13be4c6bacf9cb307ff5545c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a]\
    \ in <7dcb78bd13be4c6bacf9cb307ff5545c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        for (int i = 0; i < op.Count; i++) {\n  \
    \          switch (op[i]) {\n                case \"+\":\n                   \
    \ operand[i + 1] = operand[i] + operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    operand[i + 1] = operand[i]\
    \ - operand[i + 1];\n                    break;\n                case \"*\":\n\
    \                    operand[i + 1] = operand[i] * operand[i + 1];\n         \
    \           break;\n                case \"//\":\n                    operand[i\
    \ + 1] = operand[i] / operand[i + 1];\n                    break;\n          \
    \      case \"**\":\n                    operand[i + 1] = (long)Math.Pow(operand[i],\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return operand[operand.Count - 1];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e5f930c799041acbdb99989c2dfceb2>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your Code is Here ... Enjoy\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2w4jgv7.cs(27,24): error CS0161: ''Problem.DoAlgebra(List<string>, List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Stack<long> numbers = new Stack<long>();\n\
    \        Stack<string> operations = new Stack<string>();\n        for (int i =\
    \ 0; i < op.Count; i++) {\n            if (op[i] == \"+\" || op[i] == \"-\") {\n\
    \                operations.Push(op[i]);\n            } else if (op[i] == \"*\"\
    \ || op[i] == \"//\") {\n                operations.Push(op[i]);\n           \
    \     if (i + 1 < op.Count && (op[i + 1] == \"+\" || op[i + 1] == \"-\")) {\n\
    \                    numbers.Push(Evaluate(operations, numbers));\n          \
    \      }\n            } else if (op[i] == \"**\") {\n                if (operations.Count\
    \ > 0 && operations.Peek() == \"**\") {\n                    numbers.Push(Evaluate(operations,\
    \ numbers));\n                }\n                operations.Push(op[i]);\n   \
    \         }\n        }\n        while (operations.Count > 0) {\n            numbers.Push(Evaluate(operations,\
    \ numbers));\n        }\n        return numbers.Pop();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i3sledw.cs(36,34): error CS0103: The name ''Evaluate'' does not exist
    in the current context

    /tmp/tmp0i3sledw.cs(40,34): error CS0103: The name ''Evaluate'' does not exist
    in the current context

    /tmp/tmp0i3sledw.cs(46,26): error CS0103: The name ''Evaluate'' does not exist
    in the current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here...\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cdac2e3df384fd1b1a47b4b7d759a10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cdac2e3df384fd1b1a47b4b7d759a10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Debug.Assert(op.Count > 0);\n        Debug.Assert(operand.Count\
    \ > 1);\n        long result = operand[0];\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            string oper = op[i];\n            long num = operand[i +\
    \ 1];\n            if (oper == \"+\") {\n                result += num;\n    \
    \        } else if (oper == \"-\") {\n                result -= num;\n       \
    \     } else if (oper == \"*\") {\n                result *= num;\n          \
    \  } else if (oper == \"//\") {\n                result /= num;\n            }\
    \ else if (oper == \"**\") {\n                result = (long)Math.Pow(result,\
    \ num);\n            } else {\n                throw new Exception(\"Unknown operand\
    \ \" + oper);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5cca7b4b6664ca3a4c96f8924040885>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e495c25ceeb44e084f3d37c72b3cb01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e495c25ceeb44e084f3d37c72b3cb01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    res += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    res -= operand[i + 1];\n   \
    \                 break;\n                case \"*\":\n                    res\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    res /= operand[i + 1];\n                    break;\n  \
    \              case \"**\":\n                    res = (long)Math.Pow(res, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89c5eed54fde4cf989a78e483e4e21a6>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c147e10b7f564a19971b17be88881516>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Debug.Assert(op.Count == operand.Count -\
    \ 1);\n        Debug.Assert(op.Count >= 1);\n        Debug.Assert(operand.Count\
    \ >= 2);\n        long ret = operand[0];\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            if (op[i] == \"+\") {\n                ret += operand[i\
    \ + 1];\n            } else if (op[i] == \"-\") {\n                ret -= operand[i\
    \ + 1];\n            } else if (op[i] == \"*\") {\n                ret *= operand[i\
    \ + 1];\n            } else if (op[i] == \"//\") {\n                ret /= operand[i\
    \ + 1];\n            } else if (op[i] == \"**\") {\n                ret = (long)Math.Pow(ret,\
    \ operand[i + 1]);\n            } else {\n                throw new Exception(\"\
    Not valid operator\");\n            }\n        }\n        return ret;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <806958fc5f0d4fd99869314a29d4bb84>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e495c25ceeb44e084f3d37c72b3cb01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e495c25ceeb44e084f3d37c72b3cb01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // I want to treat this as a tree. The root\
    \ is the first two operands, and the first operation.\n        // The left child\
    \ is the result of the operation, and the third operand. The operation is the\n\
    \        // second operator. The right child is the result of the operation, and\
    \ the fourth operand.\n        // The operation is the third operator.\n     \
    \   // To build the tree, iterate through the operator list.\n        // For each\
    \ operator in the list, take the left and right child and perform the operation,\n\
    \        // and attach the result to the new left child and attach the next operand\
    \ to the new right\n        // child.\n        // Return the root.\n        long\
    \ leftChild = operand[0];\n        long rightChild = operand[1];\n        int\
    \ i = 0;\n        while (i < op.Count) {\n            long root = DoAlgebra(op[i],\
    \ leftChild, rightChild);\n            leftChild = root;\n            rightChild\
    \ = operand[i + 2];\n            i++;\n        }\n        return leftChild;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcidp6h5e.cs(41,25): error CS1501: No overload for method ''DoAlgebra''
    takes 3 arguments

    '
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Do your magic here!\n        var op1 =\
    \ operand[0];\n        var op2 = operand[1];\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            switch (op[i]) {\n                case \"+\":\n        \
    \            op1 += op2;\n                    break;\n                case \"\
    -\":\n                    op1 -= op2;\n                    break;\n          \
    \      case \"*\":\n                    op1 *= op2;\n                    break;\n\
    \                case \"//\":\n                    op1 /= op2;\n             \
    \       break;\n                case \"**\":\n                    op1 = (long)Math.Pow(op1,\
    \ op2);\n                    break;\n            }\n            op2 = operand[i\
    \ + 2];\n        }\n        return op1;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra\
    \ (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x00090] in <cbffa89123fc44f9b013d45839bb4fc9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <cbffa89123fc44f9b013d45839bb4fc9>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra\
    \ (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x00090] in <cbffa89123fc44f9b013d45839bb4fc9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <cbffa89123fc44f9b013d45839bb4fc9>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // write your code here\n        // begin\n\
    \        if (op.Count != operand.Count - 1) {\n            return 0;\n       \
    \ }\n        var stack = new Stack<long>();\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            var left = operand[i];\n            var right = operand[i\
    \ + 1];\n            switch (op[i]) {\n                case \"+\":\n         \
    \           stack.Push(left + right);\n                    break;\n          \
    \      case \"-\":\n                    stack.Push(left - right);\n          \
    \          break;\n                case \"*\":\n                    stack.Push(left\
    \ * right);\n                    break;\n                case \"//\":\n      \
    \              stack.Push(left / right);\n                    break;\n       \
    \         case \"**\":\n                    stack.Push((long)Math.Pow(left, right));\n\
    \                    break;\n            }\n        }\n        if (stack.Count\
    \ != 1) {\n            return 0;\n        }\n        return stack.Pop();\n   \
    \     // end\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e50776ff33344548a712ee3a2b02af1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e50776ff33344548a712ee3a2b02af1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long r = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    r += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    r -= operand[i + 1];\n     \
    \               break;\n                case \"*\":\n                    r *=\
    \ operand[i + 1];\n                    break;\n                case \"//\":\n\
    \                    r /= operand[i + 1];\n                    break;\n      \
    \          case \"**\":\n                    r = (long)Math.Pow(r, operand[i +\
    \ 1]);\n                    break;\n            }\n        }\n        return r;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de617f8d260543c6aa760be594d64dc2>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            long next = operand[i + 1];\n     \
    \       switch (op[i]) {\n                case \"+\":\n                    res\
    \ += next;\n                    break;\n                case \"-\":\n        \
    \            res -= next;\n                    break;\n                case \"\
    *\":\n                    res *= next;\n                    break;\n         \
    \       case \"//\":\n                    res /= next;\n                    break;\n\
    \                case \"**\":\n                    res = (long)Math.Pow(res, next);\n\
    \                    break;\n            }\n        }\n        return res;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb74039098444e20a54e7a4e6cfce52c>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            string o = op[i];\n            long\
    \ y = operand[i + 1];\n            if (o == \"+\") {\n                result +=\
    \ y;\n            } else if (o == \"-\") {\n                result -= y;\n   \
    \         } else if (o == \"*\") {\n                result *= y;\n           \
    \ } else if (o == \"//\") {\n                result /= y;\n            } else\
    \ if (o == \"**\") {\n                result = (long)Math.Pow(result, y);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84073cff5c144e9e99ade46fc265645f>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long x = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            string command = op[i];\n           \
    \ long y = operand[i + 1];\n            if (command == \"+\") {\n            \
    \    x += y;\n            } else if (command == \"-\") {\n                x -=\
    \ y;\n            } else if (command == \"*\") {\n                x *= y;\n  \
    \          } else if (command == \"//\") {\n                x /= y;\n        \
    \    } else if (command == \"**\") {\n                x = (long)Math.Pow(x, y);\n\
    \            }\n        }\n        return x;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddb5e95af3ff4af2b2162d55261833f2>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        throw new NotImplementedException();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a] in <7dcb78bd13be4c6bacf9cb307ff5545c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a]\
    \ in <7dcb78bd13be4c6bacf9cb307ff5545c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return -1;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b5afbbce13b4334b3268ef0888641e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b5afbbce13b4334b3268ef0888641e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your solution\n        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c83eb2836604ca780764dee653dd2b7>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        throw new NotImplementedException();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a] in <7dcb78bd13be4c6bacf9cb307ff5545c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a]\
    \ in <7dcb78bd13be4c6bacf9cb307ff5545c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            string t = op[i];\n            long\
    \ num = operand[i + 1];\n            if (t == \"+\") result += num;\n        \
    \    else if (t == \"-\") result -= num;\n            else if (t == \"*\") result\
    \ *= num;\n            else if (t == \"//\") result /= num;\n            else\
    \ if (t == \"**\") result = (long)Math.Pow(result, num);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ecbe6a7d95141e7ad79e071e6d81301>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count != operand.Count - 1) {\n  \
    \          throw new ArgumentException(\"Incorrect operator count\");\n      \
    \  }\n        string ops = \"**//*-+\";\n        List<long> candidates = new List<long>();\n\
    \        candidates.Add(operand[0]);\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            int op_index = ops.IndexOf(op[i]);\n            switch (op_index)\
    \ {\n                case 0:\n                    candidates.Add(Power(candidates[i],\
    \ operand[i + 1]));\n                    break;\n                case 1:\n   \
    \                 candidates.Add(FloorDivision(candidates[i], operand[i + 1]));\n\
    \                    break;\n                case 2:\n                    candidates.Add(candidates[i]\
    \ * operand[i + 1]);\n                    break;\n                case 3:\n  \
    \                  candidates.Add(candidates[i] - operand[i + 1]);\n         \
    \           break;\n                case 4:\n                    candidates.Add(candidates[i]\
    \ + operand[i + 1]);\n                    break;\n                default:\n \
    \                   break;\n            }\n        }\n        return candidates[candidates.Count\
    \ - 1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplw9p2n3f.cs(38,36): error CS0103: The name ''Power'' does not exist in
    the current context

    /tmp/tmplw9p2n3f.cs(41,36): error CS0103: The name ''FloorDivision'' does not
    exist in the current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Algorithm:\n        // 1. Go through the\
    \ operator list in reverse order, for each operator\n        //    calculate the\
    \ expected result of the operation in the right side\n        //    of the operator\
    \ and save the result in a variable\n        // 2. Calculate the final result\
    \ after all the operators are checked.\n        // 3. Return the final result.\n\
    \        // Time complexity:\n        // O(len(operator) + len(operand)), since\
    \ we go through\n        // the operator list and operand list once.\n       \
    \ // Space complexity:\n        // O(1), we use constant space to store the right\
    \ side result, and\n        // the final result.\n        // Proof of correctness:\n\
    \        // By the nature of the problem we have that the length of operator\n\
    \        // list is equal to the length of operand list minus one.\n        //\
    \ We have to do an operation every time we go through the list\n        // so\
    \ we get O(len(operand)).\n        // We also have to go through the operator\
    \ list once so we get\n        // O(len(operator)).\n        // The space complexity\
    \ for the algorithm is O(1), since we use\n        // constant space to store\
    \ the right side result and the final result.\n        // The algorithm is correct,\
    \ since the algorithm calculates the right side\n        // result every time,\
    \ and we can't escape doing an operation as the operation\n        // is done\
    \ every time we go through the operator list.\n        long right = operand[operand.Count\
    \ - 1];\n        for (int i = op.Count - 1; i >= 0; i--) {\n            switch\
    \ (op[i]) {\n                case \"//\":\n                    right = operand[i]\
    \ / right;\n                    break;\n                case \"+\":\n        \
    \            right = operand[i] + right;\n                    break;\n       \
    \         case \"-\":\n                    right = operand[i] - right;\n     \
    \               break;\n                case \"*\":\n                    right\
    \ = operand[i] * right;\n                    break;\n                case \"**\"\
    :\n                    right = (long)Math.Pow(operand[i], right);\n          \
    \          break;\n            }\n        }\n        return right;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abd4b12844134cafaa52073a907bedda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abd4b12844134cafaa52073a907bedda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count != operand.Count - 1) {\n  \
    \          return 0;\n        }\n        if (op.Count == 0) {\n            return\
    \ 0;\n        }\n        long res = operand[0];\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            switch (op[i]) {\n                case \"+\":\n        \
    \            res += operand[i + 1];\n                    break;\n            \
    \    case \"-\":\n                    res -= operand[i + 1];\n               \
    \     break;\n                case \"*\":\n                    res *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          res /= operand[i + 1];\n                    break;\n              \
    \  case \"**\":\n                    res = (long)Math.Pow(res, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return res;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16550f4cc67148ea896a9d66b393e4f4>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        //return sol_1(op, operand);\n        return\
    \ sol_2(op, operand);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwwwj27on.cs(29,16): error CS0103: The name ''sol_2'' does not exist in
    the current context

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     res += operand[i + 1];\n            } else if (op[i] == \"-\") {\n     \
    \           res -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n\
    \                res *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                res /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                res = (long)Math.Pow(res, operand[i + 1]);\n        \
    \    }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c60225c101e44979baafd63e327e0f5c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count != operand.Count - 1) {\n  \
    \          throw new Exception(\"Invalid input: length of operator list must be\
    \ equal to length of operand list minus one.\");\n        }\n        Stack<long>\
    \ nums = new Stack<long>();\n        Stack<string> opers = new Stack<string>();\n\
    \        long r = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            long y = operand[i + 1];\n            if (i == 0) {\n           \
    \     opers.Push(op[i]);\n                nums.Push(y);\n                continue;\n\
    \            }\n            string cur_op = op[i];\n            string prev_op\
    \ = opers.Peek();\n            while (opers.Count > 0 && (prec(cur_op) <= prec(prev_op)))\
    \ {\n                if (prev_op == \"+\") {\n                    r += nums.Pop();\n\
    \                } else if (prev_op == \"-\") {\n                    r -= nums.Pop();\n\
    \                } else if (prev_op == \"*\") {\n                    r *= nums.Pop();\n\
    \                } else if (prev_op == \"//\") {\n                    r /= nums.Pop();\n\
    \                } else if (prev_op == \"**\") {\n                    r = (long)Math.Pow(r,\
    \ nums.Pop());\n                }\n                opers.Pop();\n            \
    \    if (opers.Count > 0) {\n                    prev_op = opers.Peek();\n   \
    \             }\n            }\n            opers.Push(cur_op);\n            nums.Push(y);\n\
    \        }\n        while (opers.Count > 0) {\n            string prev_op = opers.Pop();\n\
    \            if (prev_op == \"+\") {\n                r += nums.Pop();\n     \
    \       } else if (prev_op == \"-\") {\n                r -= nums.Pop();\n   \
    \         } else if (prev_op == \"*\") {\n                r *= nums.Pop();\n \
    \           } else if (prev_op == \"//\") {\n                r /= nums.Pop();\n\
    \            } else if (prev_op == \"**\")\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyjm77psl.cs(73,40): error CS1525: Invalid expression term ''}''

    /tmp/tmpyjm77psl.cs(73,40): error CS1002: ; expected

    /tmp/tmpyjm77psl.cs(75,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpyjm77psl.cs(81,2): error CS1513: } expected

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: Implement\n        return 1;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccb861de970f40139ff58b5c304ace8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccb861de970f40139ff58b5c304ace8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: implement your solution here\n \
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6526de3deb44098bf7f754db6e952a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6526de3deb44098bf7f754db6e952a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return -1;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b5afbbce13b4334b3268ef0888641e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b5afbbce13b4334b3268ef0888641e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your code goes here...\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw5ecwlw1.cs(27,24): error CS0161: ''Problem.DoAlgebra(List<string>, List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            string o = op[i];\n            long\
    \ r = operand[i + 1];\n            if (o == \"+\") {\n                result +=\
    \ r;\n            } else if (o == \"-\") {\n                result -= r;\n   \
    \         } else if (o == \"*\") {\n                result *= r;\n           \
    \ } else if (o == \"//\") {\n                result /= r;\n            } else\
    \ if (o == \"**\") {\n                result = (long)Math.Pow(result, r);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f36833503f645e884958665d9255b03>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: Write your code here.\n        Stack<long>\
    \ st = new Stack<long>();\n        for (int i = 0; i < op.Count; i++) {\n    \
    \        if (op[i] == \"+\") {\n                operand[i + 1] = operand[i] +\
    \ operand[i + 1];\n            } else if (op[i] == \"-\") {\n                operand[i\
    \ + 1] = operand[i] - operand[i + 1];\n            } else if (op[i] == \"*\")\
    \ {\n                operand[i + 1] = operand[i] * operand[i + 1];\n         \
    \   } else if (op[i] == \"//\") {\n                operand[i + 1] = operand[i]\
    \ / operand[i + 1];\n            } else if (op[i] == \"**\") {\n             \
    \   operand[i + 1] = (long)Math.Pow(operand[i], operand[i + 1]);\n           \
    \ }\n        }\n        return operand[operand.Count - 1];\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02de94c1d11d41d988e1c7957678c220>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write code here.\n        long ans = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            string o = op[i];\n\
    \            long l = operand[i + 1];\n            if (o == \"+\") {\n       \
    \         ans += l;\n            } else if (o == \"-\") {\n                ans\
    \ -= l;\n            } else if (o == \"*\") {\n                ans *= l;\n   \
    \         } else if (o == \"//\") {\n                ans /= l;\n            }\
    \ else if (o == \"**\") {\n                ans = (long)Math.Pow(ans, l);\n   \
    \         }\n        }\n        return ans;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <673d27db11ca474b8d5fec96a085e26e>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var n = operand.Count;\n        Debug.Assert(op.Count\
    \ == n - 1);\n        var r = operand[0];\n        for (int i = 0; i < n - 1;\
    \ i++) {\n            switch (op[i]) {\n                case \"+\": r += operand[i\
    \ + 1]; break;\n                case \"-\": r -= operand[i + 1]; break;\n    \
    \            case \"*\": r *= operand[i + 1]; break;\n                case \"\
    //\": r /= operand[i + 1]; break;\n                case \"**\": r = (long)Math.Pow(r,\
    \ operand[i + 1]); break;\n                default: Debug.Assert(false); break;\n\
    \            }\n        }\n        return r;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0837b557bfc46dcaf75463190168e20>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") result += operand[i\
    \ + 1];\n            else if (op[i] == \"-\") result -= operand[i + 1];\n    \
    \        else if (op[i] == \"*\") result *= operand[i + 1];\n            else\
    \ if (op[i] == \"//\") result /= operand[i + 1];\n            else if (op[i] ==\
    \ \"**\") result = (long)Math.Pow(result, operand[i + 1]);\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5af4cd5b511419e9a66c24e985bded9>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Initialize the result value with the first\
    \ value in the operand list.\n        long res = operand[0];\n        // Loop\
    \ through the operator list.\n        for (int i = 0; i < op.Count; i++) {\n \
    \           // Evaluate the operation and save the result to the res variable.\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   res += operand[i + 1];\n                    break;\n                case \"\
    -\":\n                    res -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    res *= operand[i + 1];\n   \
    \                 break;\n                case \"//\":\n                    res\
    \ /= operand[i + 1];\n                    break;\n                case \"**\"\
    :\n                    res = (long)Math.Pow(res, operand[i + 1]);\n          \
    \          break;\n            }\n        }\n        // Return the result.\n \
    \       return res;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba7083c06b0d4a18af4afc409629c698>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your Solution Here\n        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            if\
    \ (op[i] == \"+\") {\n                result += operand[i + 1];\n            }\
    \ else if (op[i] == \"-\") {\n                result -= operand[i + 1];\n    \
    \        } else if (op[i] == \"*\") {\n                result *= operand[i + 1];\n\
    \            } else if (op[i] == \"//\") {\n                result /= operand[i\
    \ + 1];\n            } else if (op[i] == \"**\") {\n                result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <638d2a8b9e7a4560a7a99919fcc4c28e>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your code goes here.\n        var result\
    \ = new Stack<long>();\n        var operators = new Stack<string>();\n       \
    \ var c = 0;\n        while (true) {\n            result.Push(operand[c]);\n \
    \           c++;\n            if (c >= operand.Count) {\n                break;\n\
    \            }\n            var next = op[c - 1];\n            if (operators.Count\
    \ > 0) {\n                var _top = operators.Peek();\n                if (_top\
    \ == \"*\" || _top == \"/\") {\n                    if (next == \"+\" || next\
    \ == \"-\") {\n                        // do something\n                     \
    \   long val2 = result.Pop();\n                        long val1 = result.Pop();\n\
    \                        result.Push(operators.Pop() == \"*\" ? val1 * val2 :\
    \ val1 / val2);\n                    }\n                }\n            }\n   \
    \         operators.Push(next);\n        }\n        while (operators.Count > 0)\
    \ {\n            long val2 = result.Pop();\n            long val1 = result.Pop();\n\
    \            result.Push(operators.Pop() == \"+\" ? val1 + val2 : val1 - val2);\n\
    \        }\n        return result.Pop();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81e6728a86c4493c9c38e3ca33738053>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        throw new NotImplementedException();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a] in <7dcb78bd13be4c6bacf9cb307ff5545c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a]\
    \ in <7dcb78bd13be4c6bacf9cb307ff5545c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e495c25ceeb44e084f3d37c72b3cb01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e495c25ceeb44e084f3d37c72b3cb01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        Stack<long>\
    \ s = new Stack<long>();\n        for (int i = 0; i < op.Count; i++) {\n     \
    \       s.Push(operand[i + 1]);\n            switch (op[i]) {\n              \
    \  case \"+\":\n                    s.Push(s.Pop() + s.Pop());\n             \
    \       break;\n                case \"-\":\n                    s.Push(-s.Pop()\
    \ + s.Pop());\n                    break;\n                case \"*\":\n     \
    \               s.Push(s.Pop() * s.Pop());\n                    break;\n     \
    \           case \"//\":\n                    s.Push(s.Pop() / s.Pop());\n   \
    \                 break;\n                case \"**\":\n                    s.Push((long)Math.Pow(s.Pop(),\
    \ s.Pop()));\n                    break;\n            }\n        }\n        return\
    \ s.Pop();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000d2] in <4b62e2cbd1a14dfcac516346fafac5a8>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <4b62e2cbd1a14dfcac516346fafac5a8>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000d2] in <4b62e2cbd1a14dfcac516346fafac5a8>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <4b62e2cbd1a14dfcac516346fafac5a8>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        throw new NotImplementedException();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a] in <7dcb78bd13be4c6bacf9cb307ff5545c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a]\
    \ in <7dcb78bd13be4c6bacf9cb307ff5545c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Trivial Solution\n        var calc = new\
    \ Calculator();\n        long result = operand[0];\n        for (int i = 0; i\
    \ < op.Count; i++) {\n            switch (op[i]) {\n                case \"+\"\
    :\n                    result = calc.Add(result, operand[i + 1]);\n          \
    \          break;\n                case \"-\":\n                    result = calc.Subtract(result,\
    \ operand[i + 1]);\n                    break;\n                case \"*\":\n\
    \                    result = calc.Multiply(result, operand[i + 1]);\n       \
    \             break;\n                case \"//\":\n                    result\
    \ = calc.Divide(result, operand[i + 1]);\n                    break;\n       \
    \         case \"**\":\n                    result = calc.Exponentiate(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprvbd5nvt.cs(29,24): error CS0246: The type or namespace name ''Calculator''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // insert your code here\n        Stack<long>\
    \ number = new Stack<long>();\n        foreach (long n in operand) {\n       \
    \     number.Push(n);\n        }\n        foreach (string s in op) {\n       \
    \     if (s == \"+\") {\n                long n1 = number.Pop();\n           \
    \     long n2 = number.Pop();\n                number.Push(n1 + n2);\n       \
    \     }\n            else if (s == \"-\") {\n                long n1 = number.Pop();\n\
    \                long n2 = number.Pop();\n                number.Push(n2 - n1);\n\
    \            }\n            else if (s == \"*\") {\n                long n1 =\
    \ number.Pop();\n                long n2 = number.Pop();\n                number.Push(n1\
    \ * n2);\n            }\n            else if (s == \"//\") {\n               \
    \ long n1 = number.Pop();\n                long n2 = number.Pop();\n         \
    \       number.Push(n2 / n1);\n            }\n            else if (s == \"**\"\
    ) {\n                long n1 = number.Pop();\n                long n2 = number.Pop();\n\
    \                number.Push((long)Math.Pow(n2, n1));\n            }\n       \
    \ }\n        return number.Pop();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72647c16abff43488ab6e5591a289629>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72647c16abff43488ab6e5591a289629>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your solution here\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7874b1365ab44561837cb8118c901a2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7874b1365ab44561837cb8118c901a2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your code goes here.\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8bd453f3a81404fb27b591aafc359f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8bd453f3a81404fb27b591aafc359f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your solution goes here\n        if (op.Count\
    \ != operand.Count - 1)\n            throw new ArgumentException(\"Invalid length\
    \ of arguments\");\n        long result = operand[0];\n        for (int i = 0;\
    \ i < op.Count; i++) {\n            long tmp = operand[i + 1];\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += tmp;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= tmp;\n                    break;\n                case \"*\":\n  \
    \                  result *= tmp;\n                    break;\n              \
    \  case \"//\":\n                    result /= tmp;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.Pow(result,\
    \ tmp);\n                    break;\n                default:\n              \
    \      throw new ArgumentException(\"Invalid operation\");\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eadfa787f8ea4d6bb9e603dfcf3d59c6>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: Implement this function\n      \
    \  long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n \
    \           switch (op[i]) {\n                case \"+\":\n                  \
    \  result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0c0c3ac6aa841249b3f210fbb52846c>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        for (int i = 0; i < op.Count; i++) {\n  \
    \          if (op[i] == \"*\") {\n                long res = operand[i] * operand[i\
    \ + 1];\n                operand.RemoveAt(i);\n                operand.RemoveAt(i);\n\
    \                operand.Insert(i, res);\n                op.RemoveAt(i);\n  \
    \              i -= 1;\n            }\n        }\n        for (int i = 0; i <\
    \ op.Count; i++) {\n            if (op[i] == \"/\") {\n                long res\
    \ = operand[i] / operand[i + 1];\n                operand.RemoveAt(i);\n     \
    \           operand.RemoveAt(i);\n                operand.Insert(i, res);\n  \
    \              op.RemoveAt(i);\n                i -= 1;\n            }\n     \
    \   }\n        for (int i = 0; i < op.Count; i++) {\n            if (op[i] ==\
    \ \"**\") {\n                long res = (long)Math.Pow(operand[i], operand[i +\
    \ 1]);\n                operand.RemoveAt(i);\n                operand.RemoveAt(i);\n\
    \                operand.Insert(i, res);\n                op.RemoveAt(i);\n  \
    \              i -= 1;\n            }\n        }\n        for (int i = 0; i <\
    \ op.Count; i++) {\n            if (op[i] == \"+\") {\n                long res\
    \ = operand[i] + operand[i + 1];\n                operand.RemoveAt(i);\n     \
    \           operand.RemoveAt(i);\n                operand.Insert(i, res);\n  \
    \              op.RemoveAt(i);\n                i -= 1;\n            }\n     \
    \   }\n        for (int i = 0; i < op.Count; i++) {\n            if (op[i] ==\
    \ \"-\") {\n                long res = operand[i] - operand[i + 1];\n        \
    \        operand.RemoveAt(i);\n                operand.RemoveAt(i);\n        \
    \        operand.Insert(i, res);\n                op.RemoveAt(i);\n          \
    \      i -= 1;\n            }\n        }\n        return\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbr87_bu3.cs(78,15): error CS1525: Invalid expression term ''}''

    /tmp/tmpbr87_bu3.cs(78,15): error CS1002: ; expected

    '
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        operand.RemoveAt(0);\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i];\n    \
    \                break;\n                case \"-\":\n                    result\
    \ -= operand[i];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[i];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[i];\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long)Math.Pow(result, operand[i]);\n                    break;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <024b516ac94c4fd69ca90063a6e87cc1>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            long a = operand[i];\n            long\
    \ b = operand[i + 1];\n            string operation = op[i];\n            if (operation\
    \ == \"+\") {\n                result = a + b;\n            } else if (operation\
    \ == \"-\") {\n                result = a - b;\n            } else if (operation\
    \ == \"*\") {\n                result = a * b;\n            } else if (operation\
    \ == \"//\") {\n                result = a / b;\n            } else if (operation\
    \ == \"**\") {\n                result = (long)Math.Pow(a, b);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f86ff4ba16b64f26b2baf119e5954953>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f86ff4ba16b64f26b2baf119e5954953>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var output = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     output += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              output -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                output *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                output /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                output = (long)Math.Pow(output, operand[i\
    \ + 1]);\n            }\n        }\n        return output;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28e1ace16cef478fa4f547958cb4ac4e>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var opStack = new Stack<string>();\n    \
    \    var operandStack = new Stack<long>();\n        operandStack.Push(operand[0]);\n\
    \        for (int i = 0; i < op.Count; i++) {\n            var oper = op[i];\n\
    \            if (oper == \"*\" || oper == \"//\" || oper == \"**\") {\n      \
    \          opStack.Push(oper);\n                operandStack.Push(operand[i +\
    \ 1]);\n            } else {\n                var lastOperand = operandStack.Pop();\n\
    \                var lastOperator = opStack.Pop();\n                long a = 0;\n\
    \                switch (lastOperator) {\n                    case \"*\":\n  \
    \                      a = lastOperand * operand[i + 1];\n                   \
    \     break;\n                    case \"//\":\n                        a = lastOperand\
    \ / operand[i + 1];\n                        break;\n                    case\
    \ \"**\":\n                        a = (long)Math.Pow(lastOperand, operand[i +\
    \ 1]);\n                        break;\n                }\n                operandStack.Push(a);\n\
    \                opStack.Push(oper);\n                operandStack.Push(operand[i\
    \ + 1]);\n            }\n        }\n        long res = operandStack.Pop();\n \
    \       while (opStack.Count > 0) {\n            var lastOperator = opStack.Pop();\n\
    \            var lastOperand = operandStack.Pop();\n            switch (lastOperator)\
    \ {\n                case \"+\":\n                    res += lastOperand;\n  \
    \                  break;\n                case \"-\":\n                    res\
    \ -= lastOperand;\n                    break;\n            }\n        }\n    \
    \    return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ad081bbcaaa4449b13ff7d083bf11c4>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Stack empty.\n  at System.Collections.Generic.Stack`1[T].Pop\
    \ () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra\
    \ (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x00086] in <2ad081bbcaaa4449b13ff7d083bf11c4>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00083] in <2ad081bbcaaa4449b13ff7d083bf11c4>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x00086] in <2ad081bbcaaa4449b13ff7d083bf11c4>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00083] in <2ad081bbcaaa4449b13ff7d083bf11c4>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // return expression evaluation\n       \
    \ BigInteger result = 0;\n        BigInteger h1 = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            BigInteger h2 = operand[i + 1];\n \
    \           switch (op[i]) {\n                case \"+\":\n                  \
    \  h1 = h1 + h2;\n                    break;\n                case \"-\":\n  \
    \                  h1 = h1 - h2;\n                    break;\n               \
    \ case \"*\":\n                    h1 = h1 * h2;\n                    break;\n\
    \                case \"//\":\n                    h1 = h1 / h2;\n           \
    \         break;\n                case \"**\":\n                    h1 = BigInteger.Pow(h1,\
    \ Convert.ToInt32(h2));\n                    break;\n            }\n        }\n\
    \        result = h1;\n        return (long)result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidCastException: Specified cast is\
    \ not valid.\n  at System.Convert.ToInt32 (System.Object value) [0x00003] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000b0] in <cd0757e2b6ed418f9413179eb92d9c15>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <cd0757e2b6ed418f9413179eb92d9c15>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidCastException: Specified cast\
    \ is not valid.\n  at System.Convert.ToInt32 (System.Object value) [0x00003] in\
    \ <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T]\
    \ op, System.Collections.Generic.List`1[T] operand) [0x000b0] in <cd0757e2b6ed418f9413179eb92d9c15>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0003a] in <cd0757e2b6ed418f9413179eb92d9c15>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // op.Count == operand.Count - 1\n      \
    \  long ans = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n    \
    \        switch (op[i]) {\n                case \"+\":\n                    ans\
    \ += operand[i + 1];\n                    break;\n                case \"-\":\n\
    \                    ans -= operand[i + 1];\n                    break;\n    \
    \            case \"*\":\n                    ans *= operand[i + 1];\n       \
    \             break;\n                case \"//\":\n                    ans /=\
    \ operand[i + 1];\n                    break;\n                case \"**\":\n\
    \                    ans = (long)Math.Pow(ans, operand[i + 1]);\n            \
    \        break;\n            }\n        }\n        return ans;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f25e27830ca48b4b43d601e8574db82>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Stack<long> stack = new Stack<long>();\n\
    \        int j = 0;\n        for (int i = 0; i < op.Count; i++) {\n          \
    \  if (op[i] == \"+\") {\n                long v = stack.Pop();\n            \
    \    v += operand[j++];\n                stack.Push(v);\n            } else if\
    \ (op[i] == \"-\") {\n                long v = stack.Pop();\n                v\
    \ -= operand[j++];\n                stack.Push(v);\n            } else if (op[i]\
    \ == \"*\") {\n                long v = stack.Pop();\n                v *= operand[j++];\n\
    \                stack.Push(v);\n            } else if (op[i] == \"//\") {\n \
    \               long v = stack.Pop();\n                v /= operand[j++];\n  \
    \              stack.Push(v);\n            } else if (op[i] == \"**\") {\n   \
    \             long v = stack.Pop();\n                v = (long)Math.Pow(v, operand[j++]);\n\
    \                stack.Push(v);\n            }\n        }\n        return stack.Pop();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x0011d] in <979dee74499d4b07a427e81a0f14aa37>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <979dee74499d4b07a427e81a0f14aa37>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x0011d] in <979dee74499d4b07a427e81a0f14aa37>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <979dee74499d4b07a427e81a0f14aa37>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var operations = new Dictionary<string, Func<long,\
    \ long, long>>() {\n            {\"+\", (x, y) => x + y},\n            {\"-\"\
    , (x, y) => x - y},\n            {\"*\", (x, y) => x * y},\n            {\"//\"\
    , (x, y) => x / y},\n            {\"**\", (x, y) => (long)Math.Pow(x, y)}\n  \
    \      };\n        var rpn = new List<long>();\n        var stack = new Stack<string>();\n\
    \        foreach (var o in op) {\n            if (o != \"(\" && o != \")\") {\n\
    \                while (stack.Count > 0 &&\n                       (o == \"**\"\
    \ || stack.Peek() == \"**\" || o == \"*\" || o == \"/\" || stack.Peek() == \"\
    *\" || stack.Peek() == \"/\")) {\n                    rpn.Add(operations[stack.Pop()](rpn.Last(),\
    \ operand.Last()));\n                    operand.RemoveAt(operand.Count - 1);\n\
    \                }\n                stack.Push(o);\n            } else if (o ==\
    \ \"(\") {\n                stack.Push(o);\n            } else {\n           \
    \     while (stack.Peek() != \"(\") {\n                    rpn.Add(operations[stack.Pop()](rpn.Last(),\
    \ operand.Last()));\n                    operand.RemoveAt(operand.Count - 1);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       while (stack.Count > 0) {\n            rpn.Add(operations[stack.Pop()](rpn.Last(),\
    \ operand.Last()));\n            operand.RemoveAt(operand.Count - 1);\n      \
    \  }\n        return rpn.Last();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.DoAlgebra\
    \ (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x00138] in <b8c52526be2b4a3191f86cd110687c69>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <b8c52526be2b4a3191f86cd110687c69>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.DoAlgebra\
    \ (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x00138] in <b8c52526be2b4a3191f86cd110687c69>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <b8c52526be2b4a3191f86cd110687c69>:0 \n"
  stdout: ''
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count != operand.Count - 1)\n    \
    \        throw new ArgumentException(\"number of operators and operands\");\n\
    \        return DoAlgebra(op, operand, 0, op.Count - 1);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpta8lxnvq.cs(30,16): error CS1501: No overload for method ''DoAlgebra''
    takes 4 arguments

    '
  timestamp: 1659977779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var oper = op.First();\n        var res =\
    \ new List<long>();\n        for (int i = 0; i < operand.Count; i++) {\n     \
    \       var t = operand[i];\n            if (oper == \"+\") {\n              \
    \  res.Add(t);\n            } else if (oper == \"-\") {\n                res.Add(-t);\n\
    \            } else if (oper == \"*\") {\n                res[res.Count - 1] *=\
    \ t;\n            } else if (oper == \"//\") {\n                res[res.Count\
    \ - 1] /= t;\n            } else if (oper == \"**\") {\n                res[res.Count\
    \ - 1] = (long)Math.Pow(res[res.Count - 1], t);\n            }\n            if\
    \ (i < op.Count) {\n                oper = op[i];\n            }\n        }\n\
    \        return res.Sum();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\"\
    , (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra\
    \ (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000ef] in <6d1a05130ae84b979943a8062fc633e4>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <6d1a05130ae84b979943a8062fc633e4>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra\
    \ (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]\
    \ operand) [0x000ef] in <6d1a05130ae84b979943a8062fc633e4>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0003a] in <6d1a05130ae84b979943a8062fc633e4>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long ret = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    ret += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    ret -= operand[i + 1];\n   \
    \                 break;\n                case \"*\":\n                    ret\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    ret /= operand[i + 1];\n                    break;\n  \
    \              case \"**\":\n                    ret = (long)Math.Pow(ret, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f57ced9094dd4de59c2c65063e7a7c1f>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        int index\
    \ = 0;\n        foreach (var item in op) {\n            switch (item) {\n    \
    \            case \"+\":\n                    result += operand[index + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[index + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[index + 1];\n                \
    \    break;\n                case \"//\":\n                    result /= operand[index\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[index + 1]);\n            \
    \        break;\n            }\n            index++;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <246c4f670e8f4ab7b8ff1405933eadae>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // To get you started, here is a simple implementation\
    \ of the first type of operator.\n        if (op[0] == \"+\") {\n            return\
    \ operand[0] + operand[1];\n        }\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <efc77592107742f4888afacd4b0a8ca4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <efc77592107742f4888afacd4b0a8ca4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        throw new NotImplementedException();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a] in <7dcb78bd13be4c6bacf9cb307ff5545c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a]\
    \ in <7dcb78bd13be4c6bacf9cb307ff5545c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += operand[i\
    \ + 1];\n                    break;\n                case \"-\":\n           \
    \         result -= operand[i + 1];\n                    break;\n            \
    \    case \"*\":\n                    result *= operand[i + 1];\n            \
    \        break;\n                case \"//\":\n                    result /= operand[i\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[i + 1]);\n                \
    \    break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53118009d9d8448eb9b2fb3bfff5ccc6>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your code goes here\n        List<string>\
    \ operations = new List<string>();\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            string operation = \"\";\n            for (int j = 0; j < op.Count;\
    \ j++) {\n                if (j != i) {\n                    operation += op[j];\n\
    \                }\n            }\n            operations.Add(operation);\n  \
    \      }\n        List<long> results = new List<long>();\n        foreach (string\
    \ operation in operations) {\n            long result = operand[0];\n        \
    \    for (int i = 0; i < operation.Length; i++) {\n                switch (operation[i])\
    \ {\n                    case '+':\n                        result += operand[i\
    \ + 1];\n                        break;\n                    case '-':\n     \
    \                   result -= operand[i + 1];\n                        break;\n\
    \                    case '*':\n                        result *= operand[i +\
    \ 1];\n                        break;\n                    case '/':\n       \
    \                 result /= operand[i + 1];\n                        break;\n\
    \                    case '^':\n                        result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                        break;\n                }\n      \
    \      }\n            results.Add(result);\n        }\n        return results.Min();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d6d664c25f499e8a3118f3e6e10fa2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d6d664c25f499e8a3118f3e6e10fa2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b5d5b0d8bc48ab94bc6d9239910536>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b5d5b0d8bc48ab94bc6d9239910536>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: Implement your solution\n      \
    \  long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n \
    \           switch (op[i]) {\n                case \"+\":\n                  \
    \  result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e6cdf1eb04247d489e4f1fdc2ab4369>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    res += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    res -= operand[i + 1];\n   \
    \                 break;\n                case \"*\":\n                    res\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    res /= operand[i + 1];\n                    break;\n  \
    \              case \"**\":\n                    res = (long)Math.Pow(res, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89c5eed54fde4cf989a78e483e4e21a6>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count == 0)\n            return operand[0];\n\
    \        long val = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            string o = op[i];\n            long o2 = operand[i + 1];\n      \
    \      switch (o) {\n                case \"+\":\n                    val += o2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ val -= o2;\n                    break;\n                case \"*\":\n      \
    \              val *= o2;\n                    break;\n                case \"\
    //\":\n                    val /= o2;\n                    break;\n          \
    \      case \"**\":\n                    val = (long)Math.Pow(val, o2);\n    \
    \                break;\n            }\n        }\n        return val;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a55d04e5e45a496482daabdc3530f337>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        int k\
    \ = 0;\n        while (k < op.Count) {\n            switch (op[k]) {\n       \
    \         case \"+\": result += operand[k + 1]; break;\n                case \"\
    -\": result -= operand[k + 1]; break;\n                case \"*\": result *= operand[k\
    \ + 1]; break;\n                case \"//\": result /= operand[k + 1]; break;\n\
    \                case \"**\": result = (long)Math.Pow(result, operand[k + 1]);\
    \ break;\n            }\n            k++;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <859bdf61b0bf464bb8ab2732de478d96>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: return the evaluation of the algebric\
    \ expression\n        return 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\"\
    , (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <605d1f1be1bd481782f3687689a70701>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <605d1f1be1bd481782f3687689a70701>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Do the algebra here\n        // PRECONDITION:\
    \ \n        //  op.Count + 1 == operand.Count\n        //  op.Count > 0\n    \
    \    //  operand.Count > 1\n        //  operand[n] > 0\n        // POSTCONDITION:\n\
    \        // RETURN: The evaluation of the operand/operator\n        throw new\
    \ NotImplementedException();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\"\
    , (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a] in <79ae1436c90c495e986b5788961301c1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x0003a]\
    \ in <79ae1436c90c495e986b5788961301c1>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Add your code here.\n        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += operand[i\
    \ + 1];\n                    break;\n                case \"-\":\n           \
    \         result -= operand[i + 1];\n                    break;\n            \
    \    case \"*\":\n                    result *= operand[i + 1];\n            \
    \        break;\n                case \"//\":\n                    result /= operand[i\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[i + 1]);\n                \
    \    break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b34094055304926801f9cdc71a18d68>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     res += operand[i + 1];\n            } else if (op[i] == \"-\") {\n     \
    \           res -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n\
    \                res *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                res /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                res = (long)Math.Pow(res, operand[i + 1]);\n        \
    \    }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c60225c101e44979baafd63e327e0f5c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     res += operand[i + 1];\n            } else if (op[i] == \"-\") {\n     \
    \           res -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n\
    \                res *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                res /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                res = (long)Math.Pow(res, operand[i + 1]);\n        \
    \    }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c60225c101e44979baafd63e327e0f5c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long ans = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     ans += operand[i + 1];\n            } else if (op[i] == \"-\") {\n     \
    \           ans -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n\
    \                ans *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                ans /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                ans = (long)Math.Pow(ans, operand[i + 1]);\n        \
    \    }\n        }\n        return ans;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e30251ae23d64e358134ebbddee337bb>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long answer = operand[0];\n        if (op[0]\
    \ == \"//\") {\n            answer = operand[0] / operand[1];\n        } else\
    \ if (op[0] == \"**\") {\n            answer = (long)Math.Pow(operand[0], operand[1]);\n\
    \        } else if (op[0] == \"+\") {\n            answer = operand[0] + operand[1];\n\
    \        } else if (op[0] == \"-\") {\n            answer = operand[0] - operand[1];\n\
    \        } else if (op[0] == \"*\") {\n            answer = operand[0] * operand[1];\n\
    \        }\n        for (int i = 1; i < op.Count; i++) {\n            if (op[i]\
    \ == \"//\") {\n                answer = answer / operand[i + 1];\n          \
    \  } else if (op[i] == \"**\") {\n                answer = (long)Math.Pow(answer,\
    \ operand[i + 1]);\n            } else if (op[i] == \"+\") {\n               \
    \ answer = answer + operand[i + 1];\n            } else if (op[i] == \"-\") {\n\
    \                answer = answer - operand[i + 1];\n            } else if (op[i]\
    \ == \"*\") {\n                answer = answer * operand[i + 1];\n           \
    \ }\n        }\n        return answer;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <075de687895c40a89060811ca81cb567>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Solve here.\n        return 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fdbb432e701e453588f2c83a048be7a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fdbb432e701e453588f2c83a048be7a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = Convert.ToInt64(Math.Pow(result,\
    \ operand[i + 1]));\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c4af11b7521405bb6f4261fece5fd8d>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // operator\n        for (int i = 0; i <\
    \ op.Count; i++) {\n            // operand\n            switch (op[i]) {\n   \
    \             case \"+\":\n                    operand[i] = operand[i] + operand[i\
    \ + 1];\n                    operand.RemoveAt(i + 1);\n                    op.RemoveAt(i);\n\
    \                    i--;\n                    break;\n                case \"\
    -\":\n                    operand[i] = operand[i] - operand[i + 1];\n        \
    \            operand.RemoveAt(i + 1);\n                    op.RemoveAt(i);\n \
    \                   i--;\n                    break;\n                case \"\
    *\":\n                    operand[i] = operand[i] * operand[i + 1];\n        \
    \            operand.RemoveAt(i + 1);\n                    op.RemoveAt(i);\n \
    \                   i--;\n                    break;\n                case \"\
    //\":\n                    operand[i] = operand[i] / operand[i + 1];\n       \
    \             operand.RemoveAt(i + 1);\n                    op.RemoveAt(i);\n\
    \                    i--;\n                    break;\n                case \"\
    **\":\n                    operand[i] = (long)Math.Pow(operand[i], operand[i +\
    \ 1]);\n                    operand.RemoveAt(i + 1);\n                    op.RemoveAt(i);\n\
    \                    i--;\n                    break;\n            }\n       \
    \ }\n        return operand[0];\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\"\
    , (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3fc5df94508b41d193222e19fa7a28b7>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Implement your solution here\n       \
    \ return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07eab660b2224edfaf5690dcbb804886>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07eab660b2224edfaf5690dcbb804886>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // iterate through the list backwards, and\
    \ keep an intermediate\n        // stack.\n        Stack<long> stack = new Stack<long>();\n\
    \        for (int i = op.Count - 1; i >= 0; i--) {\n            if (op[i] == \"\
    +\") {\n                stack.Push(operand[i + 1] + operand[i]);\n           \
    \ } else if (op[i] == \"-\") {\n                stack.Push(operand[i + 1] - operand[i]);\n\
    \            } else if (op[i] == \"*\") {\n                stack.Push(operand[i\
    \ + 1] * operand[i]);\n            } else if (op[i] == \"//\") {\n           \
    \     stack.Push(operand[i + 1] / operand[i]);\n            } else if (op[i] ==\
    \ \"**\") {\n                stack.Push((long)Math.Pow(operand[i + 1], operand[i]));\n\
    \            }\n        }\n        return stack.Pop();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83e1913007be4b469d3d75f1846ccf9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83e1913007be4b469d3d75f1846ccf9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count == 0 || operand.Count == 0)\
    \ {\n            throw new Exception(\"Wrong input!\");\n        }\n        if\
    \ (op.Count != operand.Count - 1) {\n            throw new Exception(\"Wrong length\
    \ of input!\");\n        }\n        if (op.Count == 1) {\n            return DoCalculation(op[0],\
    \ operand[0], operand[1]);\n        }\n        long result = 0;\n        List<string>\
    \ newOp = new List<string>();\n        List<long> newOperand = new List<long>();\n\
    \        for (int i = 0; i < op.Count; i++) {\n            if (op[i] == \"*\"\
    \ || op[i] == \"//\" || op[i] == \"**\") {\n                result = DoCalculation(op[i],\
    \ operand[i], operand[i + 1]);\n                if (i == 0) {\n              \
    \      if (op.Count == 2) {\n                        return result;\n        \
    \            }\n                    newOp = op.GetRange(i + 1, op.Count - 1 -\
    \ i);\n                    newOperand = operand.GetRange(i + 1, operand.Count\
    \ - 1 - i);\n                    newOperand[0] = result;\n                   \
    \ break;\n                }\n                if (i == op.Count - 1) {\n      \
    \              newOp = op.GetRange(0, i);\n                    newOperand = operand.GetRange(0,\
    \ i + 1);\n                    newOperand[i] = result;\n                    break;\n\
    \                }\n                newOp = op.GetRange(0, i);\n             \
    \   newOp.AddRange(op.GetRange(i + 1, op.Count - 1 - i));\n                newOperand\
    \ = operand.GetRange(0, i);\n                newOperand.Add(result);\n       \
    \         newOperand.AddRange(operand.GetRange(i + 1, operand.Count - 1 - i));\n\
    \                break;\n            }\n        }\n        return DoAlgebra(newOp,\
    \ newOperand);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd9ll5cbx.cs(35,20): error CS0103: The name ''DoCalculation'' does not
    exist in the current context

    /tmp/tmpd9ll5cbx.cs(42,26): error CS0103: The name ''DoCalculation'' does not
    exist in the current context

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var ans = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n             \
    \   ans += operand[i + 1];\n            } else if (op[i] == \"-\") {\n       \
    \         ans -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n \
    \               ans *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                ans /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                ans = (long)Math.Pow(ans, operand[i + 1]);\n        \
    \    }\n        }\n        return ans;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9747751be52a44749b37b331862d4eab>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        //throw new NotImplementedException();\n\
    \        long i = operand[0];\n        for (int j = 0; j < op.Count; j++)\n  \
    \      {\n            switch (op[j])\n            {\n                case \"+\"\
    :\n                    i += operand[j + 1];\n                    break;\n    \
    \            case \"-\":\n                    i -= operand[j + 1];\n         \
    \           break;\n                case \"*\":\n                    i *= operand[j\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          i /= operand[j + 1];\n                    break;\n                case\
    \ \"**\":\n                    i = (long)Math.Pow(i, operand[j + 1]);\n      \
    \              break;\n            }\n        }\n        return i;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c6ac88bb9324fe99d31c89a61553379>:0 \n"
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        op.Reverse();\n        operand.Reverse();\n\
    \        long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d43860595faf49a5bb76f702a1f6188b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d43860595faf49a5bb76f702a1f6188b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    res += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    res -= operand[i + 1];\n   \
    \                 break;\n                case \"*\":\n                    res\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    res /= operand[i + 1];\n                    break;\n  \
    \              case \"**\":\n                    res = (long)Math.Pow(res, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89c5eed54fde4cf989a78e483e4e21a6>:0 \n"
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long res = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     res += operand[i + 1];\n            } else if (op[i] == \"-\") {\n     \
    \           res -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n\
    \                res *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                res /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                res = (long)Math.Pow(res, operand[i + 1]);\n        \
    \    }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c60225c101e44979baafd63e327e0f5c>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return Solution(op, operand);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphjpg3js5.cs(28,16): error CS0103: The name ''Solution'' does not exist
    in the current context

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your implementation goes here.\n     \
    \   // You can also create other functions and classes.\n        double result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            double\
    \ a = operand[i];\n            double b = operand[i + 1];\n            if (op[i]\
    \ == \"+\") {\n                result = a + b;\n            } else if (op[i] ==\
    \ \"-\") {\n                result = a - b;\n            } else if (op[i] == \"\
    *\") {\n                result = a * b;\n            } else if (op[i] == \"//\"\
    ) {\n                result = a / b;\n            } else if (op[i] == \"**\")\
    \ {\n                result = Math.Pow(a, b);\n            }\n        }\n    \
    \    return (long)result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d850390cd4c544e8b2abbe3b734b6d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d850390cd4c544e8b2abbe3b734b6d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long ans = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     ans += operand[i + 1];\n            } else if (op[i] == \"-\") {\n     \
    \           ans -= operand[i + 1];\n            } else if (op[i] == \"*\") {\n\
    \                ans *= operand[i + 1];\n            } else if (op[i] == \"//\"\
    ) {\n                ans /= operand[i + 1];\n            } else if (op[i] == \"\
    **\") {\n                ans = (long)Math.Pow(ans, operand[i + 1]);\n        \
    \    }\n        }\n        return ans;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e30251ae23d64e358134ebbddee337bb>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        if (op.Count == 0)\n            return operand[0];\n\
    \        long answer = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            string operatorString = op[i];\n            if (operatorString\
    \ == \"+\") {\n                answer += operand[i + 1];\n            } else if\
    \ (operatorString == \"-\") {\n                answer -= operand[i + 1];\n   \
    \         } else if (operatorString == \"*\") {\n                answer *= operand[i\
    \ + 1];\n            } else if (operatorString == \"//\") {\n                answer\
    \ /= operand[i + 1];\n            } else if (operatorString == \"**\") {\n   \
    \             answer = (long)Math.Pow(answer, operand[i + 1]);\n            }\n\
    \        }\n        return answer;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac870685cc49412b91f9b7f81340479e>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long temp = operand[0];\n        operand.RemoveAt(0);\n\
    \        foreach (var o in op) {\n            switch (o) {\n                case\
    \ \"+\":\n                    temp += operand[0];\n                    break;\n\
    \                case \"-\":\n                    temp -= operand[0];\n      \
    \              break;\n                case \"*\":\n                    temp *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                temp /= operand[0];\n                    break;\n           \
    \     case \"**\":\n                    temp = (long)Math.Pow(temp, operand[0]);\n\
    \                    break;\n            }\n            operand.RemoveAt(0);\n\
    \        }\n        return temp;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87175b39621949cfaf7a7b6f2082edd6>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long x = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            string opt = op[i];\n            long\
    \ y = operand[i + 1];\n            if (opt == \"+\") {\n                x += y;\n\
    \            } else if (opt == \"-\") {\n                x -= y;\n           \
    \ } else if (opt == \"*\") {\n                x *= y;\n            } else if (opt\
    \ == \"//\") {\n                x /= y;\n            } else if (opt == \"**\"\
    ) {\n                x = (long)Math.Pow(x, y);\n            }\n        }\n   \
    \     return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81d0582c16ce4df0924cf454c37da05f>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") result += operand[i\
    \ + 1];\n            else if (op[i] == \"-\") result -= operand[i + 1];\n    \
    \        else if (op[i] == \"*\") result *= operand[i + 1];\n            else\
    \ if (op[i] == \"//\") result /= operand[i + 1];\n            else if (op[i] ==\
    \ \"**\") result = (long)Math.Pow(result, operand[i + 1]);\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5af4cd5b511419e9a66c24e985bded9>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Debug.Assert(op.Count == operand.Count -\
    \ 1);\n        Debug.Assert(op.Count > 0);\n        Debug.Assert(operand.Count\
    \ > 1);\n        long a = operand[0];\n        long b = operand[1];\n        long\
    \ c = 0;\n        if (op[0] == \"+\")\n            c = a + b;\n        else if\
    \ (op[0] == \"-\")\n            c = a - b;\n        else if (op[0] == \"*\")\n\
    \            c = a * b;\n        else if (op[0] == \"//\")\n            c = a\
    \ / b;\n        else if (op[0] == \"**\")\n            c = (long)Math.Pow(a, b);\n\
    \        for (int i = 1; i < op.Count; i++) {\n            a = c;\n          \
    \  b = operand[i + 1];\n            if (op[i] == \"+\")\n                c = a\
    \ + b;\n            else if (op[i] == \"-\")\n                c = a - b;\n   \
    \         else if (op[i] == \"*\")\n                c = a * b;\n            else\
    \ if (op[i] == \"//\")\n                c = a / b;\n            else if (op[i]\
    \ == \"**\")\n                c = (long)Math.Pow(a, b);\n        }\n        return\
    \ c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff57ddd638624da082176d0ad9e8e556>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // I promise you the correct operation of\
    \ this algorithm\n        long result = operand[0];\n        for (int i = 0; i\
    \ < op.Count; i++) {\n            switch (op[i]) {\n                case \"+\"\
    :\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0e216247a214479b3be727f662b29d3>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        //  Write your code here\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa5538741df14ca1b8600b1f52ee9f85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa5538741df14ca1b8600b1f52ee9f85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write code here to return the value\n\
    \        // of the algebric expression.\n        Stack<long> stack = new Stack<long>();\n\
    \        stack.Push(operand[0]);\n        for (int i = 0; i < op.Count; i++) {\n\
    \            string s = op[i];\n            long operand1 = stack.Pop();\n   \
    \         long operand2 = operand[i + 1];\n            if (s == \"+\") {\n   \
    \             stack.Push(operand1 + operand2);\n            } else if (s == \"\
    -\") {\n                stack.Push(operand1 - operand2);\n            } else if\
    \ (s == \"*\") {\n                stack.Push(operand1 * operand2);\n         \
    \   } else if (s == \"//\") {\n                stack.Push(operand1 / operand2);\n\
    \            } else if (s == \"**\") {\n                stack.Push((long)Math.Pow(operand1,\
    \ operand2));\n            }\n        }\n        return stack.Pop();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb84a327d86e43a7ad1c0e9e9b157cad>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Debug.Assert(op.Count == operand.Count -\
    \ 1);\n        Debug.Assert(op.Count > 0);\n        Debug.Assert(operand.Count\
    \ > 1);\n        Debug.Assert(operand.All(x => x >= 0));\n        long ans = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    ans += operand[i + 1];\n   \
    \                 break;\n                case \"-\":\n                    ans\
    \ -= operand[i + 1];\n                    break;\n                case \"*\":\n\
    \                    ans *= operand[i + 1];\n                    break;\n    \
    \            case \"//\":\n                    ans /= operand[i + 1];\n      \
    \              break;\n                case \"**\":\n                    ans =\
    \ (long)Math.Pow(ans, operand[i + 1]);\n                    break;\n         \
    \       default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return ans;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9599b34d12145b2b2f47bbb90c29113>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48415f5e1f045dbadb9f99f01a98009>:0 \n"
  stdout: ''
  timestamp: 1659977777
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // put your code here!\n        if (op.Count\
    \ == 0 || operand.Count == 0)\n            return 0;\n        if (op.Count ==\
    \ 1)\n            return operand[0];\n        if (op.Count + 1 != operand.Count)\n\
    \            return 0;\n        Stack<long> eval = new Stack<long>();\n      \
    \  for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n      \
    \          case \"+\":\n                    eval.Push(operand[i] + operand[i +\
    \ 1]);\n                    break;\n                case \"-\":\n            \
    \        eval.Push(operand[i] - operand[i + 1]);\n                    break;\n\
    \                case \"*\":\n                    eval.Push(operand[i] * operand[i\
    \ + 1]);\n                    break;\n                case \"//\":\n         \
    \           eval.Push(operand[i] / operand[i + 1]);\n                    break;\n\
    \                case \"**\":\n                    eval.Push((long)Math.Pow(operand[i],\
    \ operand[i + 1]));\n                    break;\n                default:\n  \
    \                  break;\n            }\n        }\n        return eval.Pop();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d9e3ed4ad52413483a5218d65acff82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d9e3ed4ad52413483a5218d65acff82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long ans = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            string o = op[i];\n            if (o\
    \ == \"+\") {\n                ans += operand[i + 1];\n            } else if (o\
    \ == \"-\") {\n                ans -= operand[i + 1];\n            } else if (o\
    \ == \"*\") {\n                ans *= operand[i + 1];\n            } else if (o\
    \ == \"//\") {\n                ans /= operand[i + 1];\n            } else if\
    \ (o == \"**\") {\n                ans = (long)Math.Pow(ans, operand[i + 1]);\n\
    \            }\n        }\n        return ans;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb5c6b8fbeaa40298e6771fe18012fdd>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        string operators = \"+-*/%^\";\n        long\
    \ result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n       \
    \     switch (op[i]) {\n                case \"+\":\n                    result\
    \ += operand[i + 1];\n                    break;\n                case \"-\":\n\
    \                    result -= operand[i + 1];\n                    break;\n \
    \               case \"*\":\n                    result *= operand[i + 1];\n \
    \                   break;\n                case \"/\":\n                    result\
    \ /= operand[i + 1];\n                    break;\n                case \"%\":\n\
    \                    result %= operand[i + 1];\n                    break;\n \
    \               case \"^\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81cb827b38d04de3b20ffa37f8848f2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81cb827b38d04de3b20ffa37f8848f2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        Stack<long> ops = new Stack<long>();\n  \
    \      Stack<string> ops_str = new Stack<string>();\n        ops.Push(operand[0]);\n\
    \        for (int i = 0; i < op.Count; i++) {\n            ops_str.Push(op[i]);\n\
    \            ops.Push(operand[i + 1]);\n        }\n        while (ops_str.Count\
    \ > 0) {\n            string op_s = ops_str.Pop();\n            long right = ops.Pop();\n\
    \            long left = ops.Pop();\n            switch (op_s) {\n           \
    \     case \"+\":\n                    ops.Push(left + right);\n             \
    \       break;\n                case \"-\":\n                    ops.Push(left\
    \ - right);\n                    break;\n                case \"*\":\n       \
    \             ops.Push(left * right);\n                    break;\n          \
    \      case \"//\":\n                    ops.Push(left / right);\n           \
    \         break;\n                case \"**\":\n                    ops.Push((long)Math.Pow(left,\
    \ right));\n                    break;\n            }\n        }\n        return\
    \ ops.Pop();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7c9db88660c475aab8f4338d29226fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7c9db88660c475aab8f4338d29226fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <420936264173472dacdaa531a441070c>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // This is just to look at what we have.\n\
    \        Debug.Assert(op.Count + 1 == operand.Count);\n        Debug.Assert(op.Count\
    \ > 0);\n        Debug.Assert(operand.Count > 1);\n        foreach (var x in operand)\
    \ {\n            Debug.Assert(x >= 0);\n        }\n        // Your code is here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6020f3a67264d17b7dac203de081c82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6020f3a67264d17b7dac203de081c82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        int n = op.Count;\n        long ans = operand[0];\n\
    \        for (int i = 0; i < n; i++) {\n            if (op[i] == \"+\") {\n  \
    \              ans += operand[i + 1];\n            } else if (op[i] == \"-\")\
    \ {\n                ans -= operand[i + 1];\n            } else if (op[i] == \"\
    *\") {\n                ans *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                ans /= operand[i + 1];\n            } else if (op[i]\
    \ == \"**\") {\n                ans = (long)Math.Pow(ans, operand[i + 1]);\n \
    \           }\n        }\n        return ans;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7db0407da0ef4601b763bce317028ef2>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here...\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cdac2e3df384fd1b1a47b4b7d759a10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cdac2e3df384fd1b1a47b4b7d759a10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // WRITE YOUR CODE HERE\n        var result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            if\
    \ (op[i] == \"+\") {\n                result += operand[i + 1];\n            }\
    \ else if (op[i] == \"-\") {\n                result -= operand[i + 1];\n    \
    \        } else if (op[i] == \"*\") {\n                result *= operand[i + 1];\n\
    \            } else if (op[i] == \"//\") {\n                result /= operand[i\
    \ + 1];\n            } else if (op[i] == \"**\") {\n                result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06a2c8587c3646238c35e3af29093165>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        long result\
    \ = operand[0];\n        int j = 0;\n        for (int i = 1; i < operand.Count;\
    \ i++) {\n            if (op[j] == \"+\") {\n                result += operand[i];\n\
    \            } else if (op[j] == \"-\") {\n                result -= operand[i];\n\
    \            } else if (op[j] == \"*\") {\n                result *= operand[i];\n\
    \            } else if (op[j] == \"//\") {\n                result /= operand[i];\n\
    \            } else if (op[j] == \"**\") {\n                result = (long)Math.Pow(result,\
    \ operand[i]);\n            }\n            j++;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b44507657dd4b5a96af175ecbbdbac6>:0 \n"
  stdout: ''
  timestamp: 1659977781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9c4fa84f8864ab1abfcb10e979ca745>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Add your code here.\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da7fe5c13ad24346888caab8b49399e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da7fe5c13ad24346888caab8b49399e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long i = 0;\n        long j = 0;\n      \
    \  int op_len = op.Count;\n        int operand_len = operand.Count;\n        while\
    \ (j < op_len) {\n            // * and / operations come first\n            if\
    \ (op[j] == \"*\") {\n                long temp = operand[i] * operand[i + 1];\n\
    \                operand.RemoveAt(i);\n                operand.RemoveAt(i);\n\
    \                operand.Insert(i, temp);\n                op.RemoveAt(j);\n \
    \               op_len--;\n                j--;\n            } else if (op[j]\
    \ == \"/\") {\n                long temp = operand[i] / operand[i + 1];\n    \
    \            operand.RemoveAt(i);\n                operand.RemoveAt(i);\n    \
    \            operand.Insert(i, temp);\n                op.RemoveAt(j);\n     \
    \           op_len--;\n                j--;\n            } else if (op[j] == \"\
    **\") {\n                long temp = (long)Math.Pow(operand[i], operand[i + 1]);\n\
    \                operand.RemoveAt(i);\n                operand.RemoveAt(i);\n\
    \                operand.Insert(i, temp);\n                op.RemoveAt(j);\n \
    \               op_len--;\n                j--;\n            } else {\n      \
    \          i++;\n            }\n            j++;\n        }\n        i = 0;\n\
    \        j = 0;\n        op_len = op.Count;\n        operand_len = operand.Count;\n\
    \        while (j < op_len) {\n            // + and - operations come last\n \
    \           if (op[j] == \"+\") {\n                long temp = operand[i] + operand[i\
    \ + 1];\n                operand.RemoveAt(i);\n                operand.RemoveAt(i);\n\
    \                operand.Insert(i, temp);\n                op.RemoveAt(j);\n \
    \               op_len--;\n                j--;\n            } else if (op[j]\
    \ == \"-\") {\n                long temp = operand[i] - operand[i + 1];\n    \
    \            operand.RemoveAt(\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\"\
    , (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpev8cznzs.cs(79,34): error CS1026: ) expected

    /tmp/tmpev8cznzs.cs(79,34): error CS1002: ; expected

    /tmp/tmpev8cznzs.cs(81,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpev8cznzs.cs(87,2): error CS1513: } expected

    '
  timestamp: 1659977780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6cdf0e8d75a4fd7971c2c20d98bc888>:0 \n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2\
    \ + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        var a = op[0];\n        if (op.Count == 1)\
    \ {\n            return operand[0];\n        }\n        switch (a) {\n       \
    \     case \"+\":\n                op.RemoveAt(0);\n                operand[0]\
    \ = operand[0] + operand[1];\n                operand.RemoveAt(1);\n         \
    \       return DoAlgebra(op, operand);\n            case \"-\":\n            \
    \    op.RemoveAt(0);\n                operand[0] = operand[0] - operand[1];\n\
    \                operand.RemoveAt(1);\n                return DoAlgebra(op, operand);\n\
    \            case \"*\":\n                op.RemoveAt(0);\n                operand[0]\
    \ = operand[0] * operand[1];\n                operand.RemoveAt(1);\n         \
    \       return DoAlgebra(op, operand);\n            case \"//\":\n           \
    \     op.RemoveAt(0);\n                operand[0] = operand[0] / operand[1];\n\
    \                operand.RemoveAt(1);\n                return DoAlgebra(op, operand);\n\
    \            case \"**\":\n                op.RemoveAt(0);\n                operand[0]\
    \ = (long)Math.Pow(operand[0], operand[1]);\n                operand.RemoveAt(1);\n\
    \                return DoAlgebra(op, operand);\n            default:\n      \
    \          return -1;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1e5871bbc91426995e36553468dc436>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1e5871bbc91426995e36553468dc436>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977781
