language: cs
name: HumanEval_89_encrypt
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int i =
    2;\n        if (i < 2 || i > 26) return \"\";\n        string[] letters = {\"a\",
    \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",
    \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\",
    \"z\"};\n        Dictionary<string, string> d = new Dictionary<string, string>();\n
    \       for (int j = 0; j < letters.Length; j++) {\n            if (j < i) d.Add(letters[j],
    letters[letters.Length - i + j]);\n            else d.Add(letters[j], letters[j
    - i]);\n        }\n        return string.Join(\"\", (s.ToLower()).Select(c =>
    d[c.ToString()]));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75ef4e35fe6b42a28f60bc906769faef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75ef4e35fe6b42a28f60bc906769faef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    ans = \"\";\n        foreach (char c in s) {\n            ans += (char)(c + ((c
    >= 'a' && c <= 'z') ? 2 : 0));\n        }\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27c8c002481f41339fef38a702b3dadb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27c8c002481f41339fef38a702b3dadb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3b3aq2pm.cs(22,26): error CS0161: ''Problem.Encrypt(string)'': not all
    code paths return a value

    '
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    result = new char[s.Length];\n        int offset = 0;\n        for (int i = 0;
    i < s.Length; i++) {\n            offset = s[i] + (s[i] - 'a') * 2;\n            result[i]
    = (char)(offset % 123);\n        }\n        return string.Join(\"\", result);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb58f7ba65db42768d30d957248aba1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb58f7ba65db42768d30d957248aba1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // use
    string builder\n        StringBuilder result = new StringBuilder();\n        //
    encrypt by looping through each letter in string\n        foreach (char c in s)
    {\n            // if char is y or z, shift by \n            if (c == 'y' || c
    == 'z') {\n                result.Append((char)(c - 24));\n            }\n            //
    if char is A or B, shift by 2\n            else if (c == 'A' || c == 'B') {\n
    \               result.Append((char)(c + 24));\n            }\n            //
    shift by 2 in all other cases\n            else {\n                result.Append((char)(c
    + 2));\n            }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d31f7dcdb744364ac02dbee401931b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d31f7dcdb744364ac02dbee401931b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            sb.Append((char)(((c
    + 2 - 'a') % 26) + 'a'));\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4898ba709b174b1f985a4de84555e60f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4898ba709b174b1f985a4de84555e60f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Input:
    \"hi\"\n        // Output: \"lm\"\n        String output = \"\";\n        String
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String newAlphabet = \"cdefghijklmnopqrstuvwxyzab\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i]))
    {\n                int index = alphabet.IndexOf(s[i]);\n                output
    += newAlphabet[index];\n            } else {\n                output += s[i];\n
    \           }\n        }\n        return output;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6413fa42507e40f3816066608909d061>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6413fa42507e40f3816066608909d061>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    String.Join(\"\", s.Select(c => (char)((c - 'a' + 2) % 26 + 'a')));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15bc5f12c9ee4d96b5682366cfdbfc40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15bc5f12c9ee4d96b5682366cfdbfc40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        string str =
    \"\";\n        for (int i = 0; i < s.Length; i++) {\n            for (int j =
    0; j < alphabet.Length; j++) {\n                if (s[i] == alphabet[j]) {\n                    str
    += alphabet[(j + 2) % alphabet.Length];\n                }\n            }\n        }\n
    \       return str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a3c1a4eaf043d69d2c6612032fdb60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a3c1a4eaf043d69d2c6612032fdb60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // method
    variables\n        string alpha = \"abcdefghijklmnopqrstuvwxyz\";\n        string
    encrypted = \"\";\n        int pos = 0;\n        // encrypt the string\n        for
    (int i = 0; i < s.Length; i++) {\n            pos = Array.IndexOf(alpha.ToCharArray(),
    s[i]);\n            encrypted += alpha[(pos + 2) * 2];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80440412040e4faf90b916aef73deac7>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00027] in <80440412040e4faf90b916aef73deac7>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <80440412040e4faf90b916aef73deac7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00027]
    in <80440412040e4faf90b916aef73deac7>:0 \n  at Problem.Main (System.String[] args)
    [0x0001b] in <80440412040e4faf90b916aef73deac7>:0 \n"
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    encrypted = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char
    cur = s[i];\n            if (cur >= 'A' && cur <= 'Z') {\n                if (cur
    >= 'X') {\n                    encrypted += (char)(cur - 24);\n                }
    else if (cur >= 'V') {\n                    encrypted += (char)(cur - 22);\n                }
    else {\n                    encrypted += (char)(cur + 24);\n                }\n
    \           } else if (cur >= 'a' && cur <= 'z') {\n                if (cur >=
    'x') {\n                    encrypted += (char)(cur - 24);\n                }
    else if (cur >= 'v') {\n                    encrypted += (char)(cur - 22);\n                }
    else {\n                    encrypted += (char)(cur + 24);\n                }\n
    \           } else {\n                encrypted += cur;\n            }\n        }\n
    \       return encrypted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cde8158699d482aacd09b0827969ce6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cde8158699d482aacd09b0827969ce6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var alphabet
    = \"abcdefghijklmnopqrstuvwxyz\";\n        var result = new StringBuilder();\n
    \       foreach (var l in s) {\n            if (l == 'z') {\n                result.Append('b');\n
    \           } else if (l == 'y') {\n                result.Append('a');\n            }
    else {\n                result.Append(alphabet[alphabet.IndexOf(l) + 2]);\n            }\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <585d26aae87f4fb48b76e1b0a1e6234e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <585d26aae87f4fb48b76e1b0a1e6234e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        var dict = alphabet.Select((l,
    i) => new {l, i}).ToDictionary(li => li.l, li => li.i);\n        var str1 = new
    StringBuilder();\n        var str2 = new StringBuilder();\n        for (int i
    = 0; i < s.Length; i += 2) {\n            var index = dict[s[i]];\n            str1.Append(alphabet[(index
    + 2 * 2) % 26]);\n        }\n        for (int i = 1; i < s.Length; i += 2) {\n
    \           var index = dict[s[i]];\n            str2.Append(alphabet[(index +
    2 * 2) % 26]);\n        }\n        return str1.ToString() + str2.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ce28ed688d446cc9163e8842c714f82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ce28ed688d446cc9163e8842c714f82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        string output
    = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int index =
    Array.IndexOf(alphabet, s[i]);\n            if (index >= 0) {\n                index
    = (index + (2 * 2)) % alphabet.Length;\n                output += alphabet[index];\n
    \           } else {\n                output += s[i];\n            }\n        }\n
    \       return output;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    lower = \"abcdefghijklmnopqrstuvwxyz\";\n        string upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n
    \       string result = \"\";\n        foreach (char c in s) {\n            if
    (Char.IsLower(c)) {\n                result += lower[(lower.IndexOf(c) + 2) %
    26];\n            } else if (Char.IsUpper(c)) {\n                result += upper[(upper.IndexOf(c)
    + 2) % 26];\n            } else {\n                result += c;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e70464194eda456ebfcbacf25877ccc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e70464194eda456ebfcbacf25877ccc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var alphabet
    = \"abcdefghijklmnopqrstuvwxyz\";\n        var output = \"\";\n        for (int
    i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           output += alphabet[(index + 3) % 26];\n        }\n        return output;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d94dc383cdc4075b6ce13e73dfad613>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d94dc383cdc4075b6ce13e73dfad613>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    ans = new StringBuilder();\n        Dictionary<char, char> dict = new Dictionary<char,
    char>();\n        dict.Add('a', 'c');\n        dict.Add('b', 'd');\n        dict.Add('c',
    'e');\n        dict.Add('d', 'f');\n        dict.Add('e', 'g');\n        dict.Add('f',
    'h');\n        dict.Add('g', 'i');\n        dict.Add('h', 'j');\n        dict.Add('i',
    'k');\n        dict.Add('j', 'l');\n        dict.Add('k', 'm');\n        dict.Add('l',
    'n');\n        dict.Add('m', 'o');\n        dict.Add('n', 'p');\n        dict.Add('o',
    'q');\n        dict.Add('p', 'r');\n        dict.Add('q', 's');\n        dict.Add('r',
    't');\n        dict.Add('s', 'u');\n        dict.Add('t', 'v');\n        dict.Add('u',
    'w');\n        dict.Add('v', 'x');\n        dict.Add('w', 'y');\n        dict.Add('x',
    'z');\n        dict.Add('y', 'a');\n        dict.Add('z', 'b');\n        for (int
    i = 0; i < s.Length; i++) {\n            ans.Append(dict[s[i]]);\n        }\n
    \       return ans.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54d2517e896347609ee0a748e3e0f7a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54d2517e896347609ee0a748e3e0f7a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <b089443378a24033b468db28e85942f7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <b089443378a24033b468db28e85942f7>:0
    \n"
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    newArr = new char[s.Length];\n        int num = 0;\n        foreach (char c in
    s) {\n            num = c - 97;\n            num = (num + 2) % 26;\n            newArr[s.IndexOf(c)]
    = (char)(num + 97);\n        }\n        return new string(newArr);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec65e0ea58994a208908e84fc96461dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec65e0ea58994a208908e84fc96461dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    encrypted = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            //
    ASCII codes are shifted by 'a' to a zero base.\n            int c = s[i] - 'a';\n
    \           // Shift by two places.\n            c = (c + 2 * 2) % 26;\n            //
    Shift back to ASCII codes.\n            c += 'a';\n            encrypted += (char)c;\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        //Ascii
    value for A is 65 and Z is 90. Therefore, we can rotate letters\n        //by
    adding the letter to the next two letters.\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n
    \       string result = \"\";\n        int index = 0;\n        //Changes the input
    to lowercase and converts each letter to its index in the alphabet.\n        //It
    then rotates the letter and adds it to the result string.\n        foreach (char
    c in s.ToLower()) {\n            if (c >= 'a' && c <= 'z') {\n                index
    = c - 'a';\n                result += alphabet[(index + 2) % 26];\n            }\n
    \           else {\n                result += c;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <803bc42c298147ae97a8b482f6e62529>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <803bc42c298147ae97a8b482f6e62529>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
    'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n
    \       string result = \"\";\n        foreach (char letter in s) {\n            int
    index = Array.IndexOf(alphabet, letter);\n            index += (2 * 2);\n            index
    = index % 26;\n            result += alphabet[index];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Create
    an array containing the alphabet\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n
    \       // Store the result in an empty string\n        string result = \"\";\n
    \       // Iterate through each character in the input string\n        foreach
    (char c in s) {\n            // Find the index of the current character\n            int
    index = Array.IndexOf(alphabet, c);\n            // Add the corresponding encrypted
    character to the result\n            result += alphabet[(index + 4) % 26];\n        }\n
    \       // Return the result\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var alphabet
    = \"abcdefghijklmnopqrstuvwxyz\";\n        var encrypted = \"\";\n        foreach
    (var c in s) {\n            encrypted += alphabet[(alphabet.IndexOf(c) + (2 *
    2)) % alphabet.Length];\n        }\n        return encrypted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            result += alphabet[alphabet.IndexOf(s[i])
    + 2 * 2];\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00021] in
    <054cb556460441a8a0686d3f3f392dae>:0 \n  at Problem.Main (System.String[] args)
    [0x00069] in <054cb556460441a8a0686d3f3f392dae>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.Encrypt (System.String s) [0x00021] in <054cb556460441a8a0686d3f3f392dae>:0
    \n  at Problem.Main (System.String[] args) [0x00069] in <054cb556460441a8a0686d3f3f392dae>:0
    \n"
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var sb
    = new StringBuilder();\n        foreach (var c in s) {\n            int cint =
    (int)c;\n            // all lowercase letters are in the unicode range:\n            //
    U+0061 to U+007A\n            if (cint >= 97 && cint <= 122) {\n                //
    add two to the number and rotate it around the\n                // unicode range
    for lowercase letters if it needs to\n                // go over\n                cint
    += 2;\n                if (cint > 122) {\n                    cint -= 26;\n                }\n
    \           }\n            sb.Append((char)cint);\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0248a4e637b1476c9c4f53c294ab08a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0248a4e637b1476c9c4f53c294ab08a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var sb
    = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            sb.Append((char)(s[i]
    + 2 * 2));\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <794324a9670a4a549f4138c0aecdef96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <794324a9670a4a549f4138c0aecdef96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var alphabet
    = \"abcdefghijklmnopqrstuvwxyz\";\n        var alphabetHash = alphabet.Aggregate(new
    Dictionary<char,int>(), (acc, charr) => { acc[charr] = acc.Count + 1; return acc;
    });\n        var sb = new StringBuilder();\n        foreach (var letter in s)
    {\n            var charr = letter;\n            var isCapital = char.IsUpper(charr);\n
    \           charr = char.ToLower(charr);\n            var newIndex = (alphabetHash[charr]
    + 2 * 2) % alphabet.Length;\n            charr = alphabet[newIndex - 1];\n            if
    (isCapital) {\n                charr = char.ToUpper(charr);\n            }\n            sb.Append(charr);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        char[]
    letters = s.ToCharArray();\n        for (int i = 0; i < letters.Length; i++) {\n
    \           result += alphabet[(alphabet.IndexOf(letters[i]) + 2 * 2) % 26];\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alpha = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        char[] alphabet
    = s.ToCharArray();\n        int[] letters = new int[alphabet.Length];\n        char[]
    final = new char[alphabet.Length];\n        for (int i = 0; i < alphabet.Length;
    i++) {\n            for (int j = 0; j < alpha.Length; j++) {\n                if
    (alphabet[i] == alpha[j]) {\n                    letters[i] = j;\n                }\n
    \           }\n        }\n        for (int i = 0; i < letters.Length; i++) {\n
    \           letters[i] += 2 * 2;\n            if (letters[i] > 25) {\n                letters[i]
    -= 26;\n            }\n        }\n        for (int i = 0; i < letters.Length;
    i++) {\n            final[i] = alpha[letters[i]];\n        }\n        return new
    string(final);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string nAlphabet = \"\";\n
    \       string encrypted = \"\";\n        for (int i = 2; i < alphabet.Length;
    i += 2) {\n            nAlphabet += alphabet[i];\n        }\n        for (int
    i = 0; i < alphabet.Length - 2; i += 2) {\n            nAlphabet += alphabet[i];\n
    \       }\n        for (int i = 0; i < s.Length; i++) {\n            encrypted
    += nAlphabet[alphabet.IndexOf(s[i])];\n        }\n        return encrypted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b61daf3421e4a78bb95cfab85a1eabf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b61daf3421e4a78bb95cfab85a1eabf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    ca = s.ToCharArray();\n        char[] enc = new char[ca.Length];\n        for
    (int i = 0; i < ca.Length; i++) {\n            enc[i] = (char)((ca[i] - 'a' +
    2 * 2) % 26 + 'a');\n        }\n        return new string(enc);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    str = \"abcdefghijklmnopqrstuvwxyz\";\n        string alphabet = s;\n        string
    answer = \"\";\n        int counter = 0;\n        int j = 2;\n        while (alphabet.Length
    > j) {\n            answer += alphabet[j];\n            j += 2;\n        }\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9508993d27d44bf6a15ce53ed2d64ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9508993d27d44bf6a15ce53ed2d64ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    newString = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n
    \           //If it is not a letter, add it as is\n            if (!Char.IsLetter(s[i]))
    {\n                newString.Append(s[i]);\n            }\n            //If it
    is a letter\n            else {\n                //If it is lower case\n                if
    (Char.IsLower(s[i])) {\n                    //If it is y, wrap around to b\n                    if
    (s[i] == 'y') {\n                        newString.Append('b');\n                    }\n
    \                   //If it is z, wrap around to c\n                    else if
    (s[i] == 'z') {\n                        newString.Append('c');\n                    }\n
    \                   //Else, shift down by 2\n                    else {\n                        newString.Append((char)(s[i]
    + 2));\n                    }\n                }\n                //If it is upper
    case\n                else {\n                    //If it is Y, wrap around to
    B\n                    if (s[i] == 'Y') {\n                        newString.Append('B');\n
    \                   }\n                    //If it is Z, wrap around to C\n                    else
    if (s[i] == 'Z') {\n                        newString.Append('C');\n                    }\n
    \                   //Else, shift down by 2\n                    else {\n                        newString.Append((char)(s[i]
    + 2));\n                    }\n                }\n            }\n        }\n        return
    newString.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c34ede81afe245fca97565677c7928f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c34ede81afe245fca97565677c7928f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
    'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n
    \       string lcS = s.ToLower();\n        string ans = \"\";\n        for (int
    i = 0; i < lcS.Length; i++) {\n            if (lcS[i] == 'z') {\n                ans
    += 'b';\n            } else if (lcS[i] == 'y') {\n                ans += 'a';\n
    \           } else {\n                int pos = Array.IndexOf(alphabet, lcS[i]);\n
    \               ans += alphabet[pos + 2];\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97da410d18084898b51a6eebec00dc5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97da410d18084898b51a6eebec00dc5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var m =
    \"\";\n        var r = new System.Random();\n        foreach (var i in s) {\n
    \           m += $\"{(char)('a' + (i + r.Next(1, 26)) % 26)}\";\n        }\n        return
    m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7e6320dfe0746b29e44681df0637c37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7e6320dfe0746b29e44681df0637c37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        List<string>
    list = new List<string>();\n        Dictionary<string, string> dic = new Dictionary<string,
    string>();\n        string [] c = s.Split(' ');\n        string temp = \"\";\n
    \       int i = 0;\n        // Constructing dictionary\n        for (char k =
    'a'; k <= 'z'; k++) {\n            dic.Add(k.ToString(), ((char)('a' + (k - 'a'
    + 2) % 26)).ToString());\n        }\n        // populating the list\n        foreach
    (string str in c) {\n            foreach (char l in str) {\n                if
    (dic.ContainsKey(l.ToString())) {\n                    temp += dic[l.ToString()];\n
    \               }\n                else {\n                    temp += l;\n                }\n
    \           }\n            list.Add(temp);\n            temp = \"\";\n        }\n
    \       return String.Join(\" \", list);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f43e7ea2bed40e9972a3b301ac1c8ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f43e7ea2bed40e9972a3b301ac1c8ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        int offset = 2;\n        foreach (char c in s) {\n            result
    += (char)(c + offset);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f93947864e444a5e83f94d9a0ebcb657>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f93947864e444a5e83f94d9a0ebcb657>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Put
    your code here\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29f64fa7e71c4753806ddd35c65c86de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29f64fa7e71c4753806ddd35c65c86de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var result
    = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n
    \           int shift = c - 'a';\n            shift = (shift * 2) % 26;\n            c
    = (char)('a' + shift);\n            result += c;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b7e0624edd74df68580c2fa74a1f518>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b7e0624edd74df68580c2fa74a1f518>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3956e77791e4a7fabbca25e6913c1c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3956e77791e4a7fabbca25e6913c1c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // create
    a stringbuilder so we can build a string.\n        // we will use this to store
    our encrypted string\n        StringBuilder encrypted = new StringBuilder();\n
    \       // for each character in the string we are given\n        foreach (char
    c in s) {\n            // if the char is the alphabet\n            if (IsAlpha(c))
    {\n                // add the corresponding letter 2 places down to the stringbuilder\n
    \               encrypted.Append(MoveLetter(c, 2));\n            }\n            //
    otherwise\n            else {\n                // add the character to the stringbuilder\n
    \               encrypted.Append(c);\n            }\n        }\n        // return
    the encrypted string\n        return encrypted.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp43599kf.cs(29,17): error CS0103: The name ''IsAlpha'' does not exist
    in the current context

    /tmp/tmpp43599kf.cs(31,34): error CS0103: The name ''MoveLetter'' does not exist
    in the current context

    '
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    a = \"abcdefghijklmnopqrstuvwxyz\";\n        string b = \"cdefghijklmnopqrstuvwxyzab\";\n
    \       string c = \"\";\n        foreach (char ch in s) {\n            c += b[a.IndexOf(ch)];\n
    \       }\n        return c;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <534196d3e8ba4ecdbe8415b53598dad7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <534196d3e8ba4ecdbe8415b53598dad7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    answer = \"\";\n        char[] alphabet = { 'a', 'b', 'c', 'd', 'e', 'f', 'g',
    'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
    'x', 'y', 'z' };\n        for (int i = 0; i < s.Length; i++) {\n            for
    (int j = 0; j < alphabet.Length; j++) {\n                if (s[i] == alphabet[j])
    {\n                    answer += alphabet[(j + 2) % 26];\n                }\n
    \           }\n        }\n        return answer;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16adaeb8b9544afdb85a4d6c97ae9ee3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16adaeb8b9544afdb85a4d6c97ae9ee3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    new string((from c in s select Encrypt(c)).ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp80j5kr3s.cs(23,55): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = string.Empty;\n        foreach (char c in s) {\n            int i = c
    - 'a';\n            int newI = (i + (i / 2) * 2) % 26;\n            result +=
    (char)(newI + 'a');\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccd082caf1a9415294936056356366a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccd082caf1a9415294936056356366a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int i =
    0;\n        int rotation = 1;\n        string newString = \"\";\n        foreach
    (char c in s) {\n            int charValue = (int)c;\n            int newValue
    = charValue + rotation;\n            char newChar = (char)newValue;\n            newString
    += newChar;\n            rotation *= 2;\n        }\n        return newString;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6820868ef10944b9bfb4aadcda4b2d18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6820868ef10944b9bfb4aadcda4b2d18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Initialize
    encrypted string\n        string encrypted = \"\";\n        for (int i = 0; i
    < s.Length; i++) {\n            // shift by 2, 2 times\n            encrypted
    += (char)((s[i] - 'a' + 2 * 2) % 26 + 'a');\n        }\n        return encrypted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        String
    result = \"\";\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        for
    (int i = 0; i < s.Length; i++) {\n            for (int j = 0; j < alphabet.Length;
    j++) {\n                if (s[i] == alphabet[j]) {\n                    if (j
    + (2 * 2) > alphabet.Length - 1) {\n                        result += alphabet[j
    + (2 * 2) - alphabet.Length];\n                    } else {\n                        result
    += alphabet[j + (2 * 2)];\n                    }\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
    'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n
    \       StringBuilder sb = new StringBuilder();\n        foreach (char c in s)
    {\n            if (alphabet.Contains(c)) {\n                sb.Append(alphabet[(Array.IndexOf(alphabet,
    c) + alphabet.Length - 2) % alphabet.Length]);\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fc11de5584a4a75ad625a8537c105f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fc11de5584a4a75ad625a8537c105f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        Dictionary<char,
    char> d = new Dictionary<char, char>();\n        StringBuilder sb = new StringBuilder();\n
    \       d.Add('a', 'c');\n        d.Add('b', 'd');\n        d.Add('c', 'e');\n
    \       d.Add('d', 'f');\n        d.Add('e', 'g');\n        d.Add('f', 'h');\n
    \       d.Add('g', 'i');\n        d.Add('h', 'j');\n        d.Add('i', 'k');\n
    \       d.Add('j', 'l');\n        d.Add('k', 'm');\n        d.Add('l', 'n');\n
    \       d.Add('m', 'o');\n        d.Add('n', 'p');\n        d.Add('o', 'q');\n
    \       d.Add('p', 'r');\n        d.Add('q', 's');\n        d.Add('r', 't');\n
    \       d.Add('s', 'u');\n        d.Add('t', 'v');\n        d.Add('u', 'w');\n
    \       d.Add('v', 'x');\n        d.Add('w', 'y');\n        d.Add('x', 'z');\n
    \       d.Add('y', 'a');\n        d.Add('z', 'b');\n        d.Add(' ', ' ');\n
    \       foreach (char c in s) {\n            sb.Append(d[c]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99f22e0e4470468c9507ad5423ba8cfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99f22e0e4470468c9507ad5423ba8cfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    ans = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            if
    (s[i] == 'y') {\n                ans[i] = 'a';\n            } else if (s[i] ==
    'z') {\n                ans[i] = 'b';\n            } else {\n                ans[i]
    = (char)(s[i] + 2);\n            }\n        }\n        return new string(ans);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ba02a8bf2ad4efe8db0f76494aa09bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ba02a8bf2ad4efe8db0f76494aa09bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        // ASCII a is 97, z is 122.\n        // ASCII
    A is 65, Z is 90.\n        foreach (char c in s) {\n            int charVal =
    c;\n            if (charVal > 96 && charVal < 123) {\n                charVal
    = charVal + ((int)Math.Pow(2,2));\n                if (charVal > 122) {\n                    charVal
    = charVal - 26;\n                }\n            } else if (charVal > 64 && charVal
    < 91) {\n                charVal = charVal + ((int)Math.Pow(2,2));\n                if
    (charVal > 90) {\n                    charVal = charVal - 26;\n                }\n
    \           }\n            sb.Append((char)charVal);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    answer = new StringBuilder();\n        foreach (char c in s) {\n            int
    val = Convert.ToInt32(c);\n            val = ((val + 2) * 2) % 256;\n            answer.Append(Convert.ToChar(val));\n
    \       }\n        return answer.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a2b55115ef3481c90ca573f456caf6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a2b55115ef3481c90ca573f456caf6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <ad56903a7c1946b68dde3ffca16d5ffc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <ad56903a7c1946b68dde3ffca16d5ffc>:0
    \n"
  stdout: ''
  timestamp: 1659976150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code goes here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpudbq2jvl.cs(22,26): error CS0161: ''Problem.Encrypt(string)'': not all
    code paths return a value

    '
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int n =
    s.Length;\n        char[] ret = new char[n];\n        for (int i = 0; i < n; i++)
    {\n            int add = (int)s[i] + 2*2;\n            if (add > (int)'z') {\n
    \               add -= 26;\n            }\n            ret[i] = (char)add;\n        }\n
    \       return new string(ret);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        Dictionary<char,
    char> dict = new Dictionary<char, char>();\n        char[] alphabet = {'a', 'b',
    'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
    's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] offset = {'c', 'd', 'e',
    'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
    'v', 'w', 'x', 'y', 'z', 'a', 'b'};\n        for (int i = 0; i < alphabet.Length;
    i++) {\n            dict.Add(alphabet[i], offset[i]);\n        }\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += dict[s[i]];\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4074245c62204fcebb03585a77bbca23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4074245c62204fcebb03585a77bbca23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int shift
    = 2 * 2;\n        StringBuilder sb = new StringBuilder();\n        // encrypt\n
    \       foreach (char c in s) {\n            int currentChar = (int)c;\n            //
    A-Z\n            if (currentChar >= 65 && currentChar <= 90) {\n                int
    newChar = currentChar + shift;\n                if (newChar > 90) {\n                    newChar
    = 65 + (newChar - 90) - 1;\n                }\n                sb.Append((char)newChar);\n
    \           }\n            // a-z\n            else if (currentChar >= 97 && currentChar
    <= 122) {\n                int newChar = currentChar + shift;\n                if
    (newChar > 122) {\n                    newChar = 97 + (newChar - 122) - 1;\n                }\n
    \               sb.Append((char)newChar);\n            }\n            // special\n
    \           else {\n                sb.Append(c);\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        if (s == null) {\n            return null;\n        }\n        string
    encrypted = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            encrypted
    += (char)(s[i] + (s[i] - 'a') * 2);\n        }\n        return encrypted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12542ddf909d40228367b8f4c48cccbc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12542ddf909d40228367b8f4c48cccbc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // \n        char[]
    output = new char[s.Length];\n        char[] input = s.ToCharArray();\n        for
    (int i = 0; i < input.Length; i++) {\n            int to = input[i] - 'a';\n            int
    fro = to - 2 * 2;\n            if (fro < 0) {\n                fro += 26;\n            }\n
    \           output[i] = (char)(fro + 'a');\n        }\n        return new string(output);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <783de02fd1ef442ab275ee333e58c90f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <783de02fd1ef442ab275ee333e58c90f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    Code Here\n        // Set the alphabet\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n
    \       string new_string = \"\";\n        // Find the length of the string.\n
    \       int count = s.Length;\n        for (int i = 0; i < count; i++) {\n            //
    Set the index to the current letter in the string\n            int index = alphabet.IndexOf(s[i]);\n
    \           // Set the letter of the new string to the corresponding \n            //
    letter shifted down by two.\n            new_string += alphabet[(index + 2) %
    26];\n        }\n        return new_string;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfe740c2136f40c98a03d09733e010a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfe740c2136f40c98a03d09733e010a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    a = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder sb = new StringBuilder();\n
    \       foreach (char c in s) {\n            char c2 = c;\n            int d =
    a.IndexOf(c);\n            if (d != -1) {\n                d = (d + (d * 2)) %
    26;\n                c2 = a[d];\n            }\n            sb.Append(c2);\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <535c38e817ca4386b4de514ef1f21a40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <535c38e817ca4386b4de514ef1f21a40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    new string(s.Select(x => (char)(((x - 97) * 4 + 2) % 26 + 97)).ToArray());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <620968a6bbde42bb8f6f3b525410d19e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <620968a6bbde42bb8f6f3b525410d19e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            sb.Append((char)(c
    + 2*2));\n        }\n        return sb.ToString();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8182a638e82f46d68d473f8bd29dbad1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8182a638e82f46d68d473f8bd29dbad1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int offset
    = 2 * 2; // 4 places\n        // Create a string builder to hold the encrypted
    string\n        StringBuilder encryptedString = new StringBuilder();\n        foreach
    (char c in s) {\n            // Get the ASCII code for the current character.\n
    \           int ascii = (int)c;\n            // Shift each character by 4 places.\n
    \           ascii += offset;\n            // Convert back to a character and append
    to the string builder.\n            encryptedString.Append((char)ascii);\n        }\n
    \       return encryptedString.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c51d0c665ada4bbaa8d7330c349c6b80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c51d0c665ada4bbaa8d7330c349c6b80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // TODO:
    Program me\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0be2b7be72eb4eb2b8196c207da4d154>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0be2b7be72eb4eb2b8196c207da4d154>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            int i
    = (int)c;\n            // shift down by 2 * 2\n            i += 4;\n            //
    wrap around if needed\n            i %= 26;\n            // shift to start of
    alphabet\n            i += (int)'a';\n            sb.Append((char)i);\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <939c26d7602446979867eb1cc3c59e53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <939c26d7602446979867eb1cc3c59e53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    string.Empty;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a10553a6d3491dafd9078d7a52aafd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a10553a6d3491dafd9078d7a52aafd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var encrypted
    = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            encrypted +=
    (char)(((int)s[i] + 2 * 2 - 97) % 26 + 97);\n        }\n        return encrypted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    letters = s.ToCharArray();\n        for (int i = 0; i < letters.Length; i++) {\n
    \           letters[i] = (char)(letters[i] + 2 * 2);\n        }\n        return
    new string(letters);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cb40c3782ac4a8d8bf1e5c9444bea5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cb40c3782ac4a8d8bf1e5c9444bea5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string[] newAlphabet = new
    string[26];\n        for (int i = 0; i < 26; i++) {\n            if (i + 2 * 2
    >= 26) {\n                newAlphabet[i] = alphabet[i + 2 * 2 - 26];\n            }
    else {\n                newAlphabet[i] = alphabet[i + 2 * 2];\n            }\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < s.Length; i++) {\n            sb.Append(newAlphabet[alphabet.IndexOf(s[i])]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7qjud913.cs(27,34): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp7qjud913.cs(29,34): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    ans = \"\";\n        foreach (char c in s) {\n            int a = Convert.ToInt32(c);\n
    \           a = a - 96;\n            a = (a + 8) % 26;\n            if (a == 0)
    a = 26;\n            ans += Convert.ToChar(a + 96);\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <002b0cc8447e403a8b9b7bffb7a9b65f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <002b0cc8447e403a8b9b7bffb7a9b65f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    chars = s.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n            char
    c = chars[i];\n            char newChar = (char)(c + (int)(c - 'a') * 2);\n            if
    (newChar > 'z') {\n                newChar = (char)(newChar - 'z' + 'a' - 1);\n
    \           }\n            chars[i] = newChar;\n        }\n        return new
    string(chars);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <402573a207574dc79ea989c8dc909098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <402573a207574dc79ea989c8dc909098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        string to_return = \"\";\n        string to_convert =
    \"abcdefghijklmnopqrstuvwxyz\";\n        List<string> token = new List<string>();\n
    \       for (int i = 0; i < s.Length; i++) {\n            string x = \"\";\n            x
    += s[i];\n            token.Add(x);\n        }\n        foreach (string c in token)
    {\n            int index = (to_convert.IndexOf(c) + 2 * 2) % to_convert.Length;\n
    \           result += to_convert[index];\n        }\n        to_return = result;\n
    \       return to_return;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Lower
    case the string\n        string str = s.ToLower();\n        string e = \"\";\n
    \       // Loop through the string\n        for (int i = 0; i < str.Length; i++)
    {\n            int x = (int)str[i];\n            // If the char is greater than
    or equal to 97 (a) and less than or equal to 109 (m)\n            if (x >= 97
    && x <= 109) {\n                // Add two to the char\n                e += (char)(x
    + 2);\n            }\n            // If the char is greater than or equal to 110
    (n) and less than or equal to 122 (z)\n            else if (x >= 110 && x <= 122)
    {\n                // Subtract 20 from the char\n                e += (char)(x
    - 20);\n            }\n            // If the char is not a letter\n            else
    {\n                // Add the char to the encrypted string\n                e
    += (char)x;\n            }\n        }\n        // Return the encrypted string\n
    \       return e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ef1e613a1b741b79db82a53a11e1630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ef1e613a1b741b79db82a53a11e1630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    String.Join(\"\", s.Select(x => (((x + 2) - 'a') % 26) + 'a'));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <deb82673fe6842329446d5d1d3f4d1e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <deb82673fe6842329446d5d1d3f4d1e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            sb.Append((char)(s[i]
    + (2 * 2)));\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c5150e28faf49e4a9b0521f2ef7fe4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c5150e28faf49e4a9b0521f2ef7fe4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var sb
    = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            sb.Append((char)(s[i]
    + 2 * 2));\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <794324a9670a4a549f4138c0aecdef96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <794324a9670a4a549f4138c0aecdef96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    charAry = s.ToCharArray();\n        char[] encryptAry = new char[charAry.Length];\n
    \       for (int i = 0; i < charAry.Length; i++) {\n            char letter =
    charAry[i];\n            if (char.IsLetter(letter)) {\n                letter
    = (char)(letter + 2);\n                if (char.IsUpper(charAry[i])) {\n                    if
    (letter > 'Z') {\n                        letter = (char)(letter - 26);\n                    }\n
    \               } else {\n                    if (letter > 'z') {\n                        letter
    = (char)(letter - 26);\n                    }\n                }\n            }\n
    \           encryptAry[i] = letter;\n        }\n        return new string(encryptAry);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a063ce9f6de94b84a6118ee331e1d3b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a063ce9f6de94b84a6118ee331e1d3b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    rtn = \"\";\n        int temp;\n        foreach (char c in s) {\n            temp
    = c - 97;\n            temp = (temp + 2) % 26;\n            rtn += (char)(temp
    + 97);\n        }\n        return rtn;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0ee7d9af70a49a7a5f9fa1df2e944ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0ee7d9af70a49a7a5f9fa1df2e944ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int x = (alphabet.IndexOf(s[i])
    + 2) * 2;\n            if (x > 25) {\n                x -= 26;\n            }\n
    \           result += alphabet[x];\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a55d53ed40064d93bd793daa872c85ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a55d53ed40064d93bd793daa872c85ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)((s[i] - 'a' + 2 * 2) % 26 + 'a');\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = string.Empty;\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n
    \       char[] alphabetShift = \"cdefghijklmnopqrstuvwxyzab\".ToCharArray();\n
    \       Dictionary<char, char> alphabetDict = new Dictionary<char, char>();\n
    \       for (int i = 0; i < alphabet.Length; i++) {\n            alphabetDict.Add(alphabet[i],
    alphabetShift[i]);\n        }\n        foreach (char c in s) {\n            result
    += alphabetDict[c];\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d7b48a9e15c44c1a37e2ee134370175>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d7b48a9e15c44c1a37e2ee134370175>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // ROT
    stands for rotate by 13 places\n        // http://en.wikipedia.org/wiki/ROT13\n
    \       s = s.ToLower();\n        string encrypted = \"\";\n        foreach (char
    c in s) {\n            // The next character is stored in the encrypted string\n
    \           // If the character is a space, leave it be\n            if (c !=
    ' ') {\n                // If the letter is a letter, get the next 2 letters\n
    \               // 'z' has to loop back to 'a'\n                if (c == 'z')
    {\n                    encrypted += 'b';\n                } else if (c == 'y')
    {\n                    encrypted += 'a';\n                } else {\n                    //
    Get the next 2 letters \n                    encrypted += (char)((int)c + 2);\n
    \               }\n            } else {\n                encrypted += c;\n            }\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <649950a2fe6b4b3e929b1093a92f803d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <649950a2fe6b4b3e929b1093a92f803d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    output = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = (int)s[i] - 96;\n            index = (index * 2) % 26;\n            if
    (index == 0) index = 26;\n            output[i] = (char)(index + 96);\n        }\n
    \       return new string(output);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b336f15fc47f46f3b72e112e44f66b4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b336f15fc47f46f3b72e112e44f66b4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alpha = \"abcdefghijklmnopqrstuvwxyz\";\n        string newString = \"\";\n        foreach
    (char c in s) {\n            int index = alpha.IndexOf(c);\n            index
    += (index + index);\n            newString += alpha[index];\n        }\n        return
    newString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b66698edf4046b49da7bda8d305e82c>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00032] in <4b66698edf4046b49da7bda8d305e82c>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <4b66698edf4046b49da7bda8d305e82c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00032]
    in <4b66698edf4046b49da7bda8d305e82c>:0 \n  at Problem.Main (System.String[] args)
    [0x0001b] in <4b66698edf4046b49da7bda8d305e82c>:0 \n"
  stdout: ''
  timestamp: 1659976151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // create
    an empty string to store the encrypted message\n        string encrypted_message
    = \"\";\n        // for each character in the string\n        foreach (char c
    in s) {\n            // get the unicode number for the character\n            int
    unicode_number = (int)c;\n            // if the unicode number is a character\n
    \           if (unicode_number >= 97 && unicode_number <= 122) {\n                //
    if the character is \"a\" or \"z\"\n                if (unicode_number == 97 ||
    unicode_number == 122) {\n                    // add two to the unicode number\n
    \                   unicode_number += 2;\n                    // if the unicode
    number is out of the bounds of the lowercase characters\n                    if
    (unicode_number > 122) {\n                        // subtract 26 from the unicode
    number\n                        unicode_number -= 26;\n                    }\n
    \               }\n                // else if the character is \"b\" or \"y\"\n
    \               else if (unicode_number == 98 || unicode_number == 121) {\n                    //
    add four to the unicode number\n                    unicode_number += 4;\n                    //
    if the unicode number is out of the bounds of the lowercase characters\n                    if
    (unicode_number > 122) {\n                        // subtract 26 from the unicode
    number\n                        unicode_number -= 26;\n                    }\n
    \               }\n                // else if the character is \"c\" or \"x\"\n
    \               else if (unicode_number == 99 || unicode_number == 120) {\n                    //
    add six to the unicode number\n                    unicode_number += 6;\n                    //
    if the unicode number is out of the bounds of the lowercase characters\n                    if
    (unicode_number > 122) {\n                        // subtract 26 from the unicode
    number\n                        unicode_number -= 26;\n                    }\n
    \               }\n                // else if the character is \"d\" or \"w\"\n
    \               else if (unicode_number == 100 || unicode_number == 119) {\n                    //
    add eight to the unicode number\n                    unicode_number += 8;\n                    //
    if the unicode number is out of the bounds of the lowercase characters\n                    if
    (unicode_number > 122) {\n                        // subtract 26 from the unic\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxz27d4z1.cs(69,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxz27d4z1.cs(80,2): error CS1513: } expected

    '
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // your
    code here\n        // do not worry about the number of arguments or the types
    of arguments\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a3bdfcd1bdd4868b9c6bf1435b737c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a3bdfcd1bdd4868b9c6bf1435b737c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        // Iterate through the characters in the string and perform
    the\n        // encryption algorithm. \n        for (int i = 0; i < s.Length;
    i++) {\n            // Convert each character to a number between 0 and 25.\n
    \           int charVal = (int)s[i] - 97;\n            // Perform the encryption
    algorithm.\n            int newCharVal = (charVal + (2 * (charVal + 1))) % 26;\n
    \           // Convert it back to a character and add it to the result.\n            result
    += (char)(newCharVal + 97);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f84bd87a3a04118987a59dc0f0ca13d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f84bd87a3a04118987a59dc0f0ca13d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n
    \       for (int i = 0; i < s.Length; i++) {\n            for (int j = 0; j <
    alphabet.Length; j++) {\n                if (s[i] == alphabet[j]) {\n                    result
    += alphabet[j + 4];\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Encrypt (System.String s) [0x0002f] in
    <f34e6e0aafa947c781719ab28d053bb2>:0 \n  at Problem.Main (System.String[] args)
    [0x00069] in <f34e6e0aafa947c781719ab28d053bb2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.Encrypt (System.String s) [0x0002f] in <f34e6e0aafa947c781719ab28d053bb2>:0
    \n  at Problem.Main (System.String[] args) [0x00069] in <f34e6e0aafa947c781719ab28d053bb2>:0
    \n"
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    input = s.ToCharArray();\n        char[] output = new char[input.Length];\n        int
    j = 0;\n        int k = 0;\n        foreach (char c in input) {\n            output[j]
    = (char)((int)c + (k*2));\n            if (k == 1) {\n                k = 0;\n
    \           } else {\n                k++;\n            }\n            j++;\n
    \       }\n        return new string(output);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b9b910b977c43188c575b0f416b3193>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b9b910b977c43188c575b0f416b3193>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    encrypted = new StringBuilder();\n        foreach (char c in s) {\n            encrypted.Append((char)(c
    + 2 * 2));\n        }\n        return encrypted.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb922ec2e2424154b940a651b9f449c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb922ec2e2424154b940a651b9f449c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3956e77791e4a7fabbca25e6913c1c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3956e77791e4a7fabbca25e6913c1c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3956e77791e4a7fabbca25e6913c1c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3956e77791e4a7fabbca25e6913c1c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(((int)c)
    + 2*2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <082176d3e783422596eb1ffc4a0d470a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <082176d3e783422596eb1ffc4a0d470a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char
    ch = s[i];\n            if (ch == 'z') {\n                result += 'b';\n            }
    else if (ch == 'y') {\n                result += 'a';\n            } else {\n
    \               int code = (int)ch + 2;\n                result += (char)code;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <988f1c4c3cb442eeb1225b00ada5e66e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <988f1c4c3cb442eeb1225b00ada5e66e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <ad56903a7c1946b68dde3ffca16d5ffc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <ad56903a7c1946b68dde3ffca16d5ffc>:0
    \n"
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        int i;\n        char[] charArray = s.ToCharArray();\n
    \       // Rotate each element and save\n        for (i = 0; i < charArray.Length;
    i++) {\n            result += (char)((charArray[i] - 'a' + 2) % 26 + 'a');\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae144fa575b24ad0a0cb31b115fe5af7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae144fa575b24ad0a0cb31b115fe5af7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        Dictionary<char, int> encryptedDict
    = new Dictionary<char, int>();\n        Dictionary<char, int> alphabetDict = new
    Dictionary<char, int>();\n        int charIndex = 0;\n        foreach (char c
    in alphabet) {\n            alphabetDict.Add(c, charIndex);\n            charIndex++;\n
    \       }\n        foreach (char c in s) {\n            int index = alphabetDict[c];\n
    \           if (index < 24) {\n                encryptedDict.Add(c, index + 4);\n
    \           } else if (index == 24) {\n                encryptedDict.Add(c, 0);\n
    \           } else if (index == 25) {\n                encryptedDict.Add(c, 1);\n
    \           }\n        }\n        StringBuilder sb = new StringBuilder();\n        foreach
    (KeyValuePair<char, int> kvp in encryptedDict) {\n            char encryptedChar
    = alphabet[kvp.Value];\n            sb.Append(encryptedChar);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same
    key has already been added. Key: f\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.Encrypt (System.String s) [0x00076] in <091ad1f077a948f9bb0eb854189fda3b>:0
    \n  at Problem.Main (System.String[] args) [0x00069] in <091ad1f077a948f9bb0eb854189fda3b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the
    same key has already been added. Key: f\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.Encrypt (System.String s) [0x00076] in <091ad1f077a948f9bb0eb854189fda3b>:0
    \n  at Problem.Main (System.String[] args) [0x00069] in <091ad1f077a948f9bb0eb854189fda3b>:0
    \n"
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    \"ewhjklnop\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdf20d7e71ff438b9e76107914961bb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdf20d7e71ff438b9e76107914961bb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    temp = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (((int)s[i]
    - 'a') + 2 > 25) {\n                temp += (char)(((int)s[i] - 'a') - 24 + 'a');\n
    \           } else {\n                temp += (char)(((int)s[i] - 'a') + 2 + 'a');\n
    \           }\n        }\n        return temp;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5008accecf34e1bbea686aa331fdf80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5008accecf34e1bbea686aa331fdf80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var encrypted
    = \"\";\n        foreach (var c in s) {\n            encrypted += (char)(((c -
    'a') + (2 * 2)) % 26 + 'a');\n        }\n        return encrypted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Initialize
    a new string to return\n        string encrypted_string = \"\";\n        // Go
    through every character in the string and encrypt it\n        for (int i = 0;
    i < s.Length; i++) {\n            // Only shift lowercase letters to avoid changing
    capitalization and numbers\n            if (Char.IsLower(s[i])) {\n                //
    If the character is a 'z' or 'y', wrap it around to the beginning of the alphabet\n
    \               if (s[i] == 'z') {\n                    encrypted_string += \"b\";\n
    \               } else if (s[i] == 'y') {\n                    encrypted_string
    += \"a\";\n                } else {\n                    // Encode the character
    and add it to the return string\n                    encrypted_string += Char.ConvertFromUtf32(Char.ConvertToUtf32(s[i],
    0) + 2 * 2);\n                }\n            } else {\n                // If the
    character isn't a lowercase letter, leave it unchanged\n                encrypted_string
    += s[i];\n            }\n        }\n        // Return the encrypted string\n        return
    encrypted_string;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuzlc7w4r.cs(36,89): error CS1503: Argument 2: cannot convert from ''int''
    to ''char''

    '
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var result
    = \"\";\n        var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        var index
    = 2;\n        for (int i = 0; i < s.Length; i++) {\n            result += alphabet[(alphabet.IndexOf(s[i])
    + index) % alphabet.Length];\n            index *= 2;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca8c92f7d3f14ced944bc0a2a6257583>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca8c92f7d3f14ced944bc0a2a6257583>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int len
    = s.Length;\n        string result = \"\";\n        char[] c = s.ToCharArray();\n
    \       for (int i = 0; i < len; i++) {\n            char ch = c[i];\n            if
    (ch >= 'a' && ch <= 'z') {\n                if (ch + 2 > 'z') {\n                    result
    += (char)(ch - 24);\n                } else {\n                    result += (char)(ch
    + 2);\n                }\n            } else if (ch >= 'A' && ch <= 'Z') {\n                if
    (ch + 2 > 'Z') {\n                    result += (char)(ch - 24);\n                }
    else {\n                    result += (char)(ch + 2);\n                }\n            }
    else {\n                result += ch;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e42fb0661558424c88130bdbb2a3bad6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e42fb0661558424c88130bdbb2a3bad6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Convert
    the String to a char array.\n        char[] charArray = s.ToCharArray();\n        //
    Encrypt the characters.\n        for (int i = 0; i < charArray.Length; i++) {\n
    \           // Change the char.\n            charArray[i] = (char)((int)charArray[i]
    + 2 * 2);\n        }\n        // Return the encrypted string.\n        return
    new string(charArray);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1db60e655bd546cc998316807e7631a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1db60e655bd546cc998316807e7631a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        Dictionary<char,
    char> alpha = new Dictionary<char, char>();\n        for (int i = 0; i < 26; i++)
    {\n            alpha.Add((char)(97 + i), (char)(i < 24 ? 97 + i + 2 : 97 + (i
    + 2) % 26));\n        }\n        string encrypted = \"\";\n        foreach (char
    c in s) {\n            encrypted += alpha[c];\n        }\n        return encrypted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4631ad2d21fc47bfba6d5b6649ddef0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4631ad2d21fc47bfba6d5b6649ddef0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <695760984f114abb92c8ec059fe6fa05>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <695760984f114abb92c8ec059fe6fa05>:0 \n"
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51702fd4c9ed486ebeaf449795c7d0ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51702fd4c9ed486ebeaf449795c7d0ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        if (s.Length
    == 0) return s;\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n
    \       char[] s_array = s.ToCharArray();\n        char[] ret = new char[s.Length];\n
    \       for (int i = 0; i < s.Length; i++) {\n            int idx = Array.IndexOf(alphabet,
    s_array[i]);\n            if (idx + 2 * 2 < 26) ret[i] = alphabet[idx + 2 * 2];\n
    \           else ret[i] = alphabet[(idx + 2 * 2) % 26];\n        }\n        return
    new string(ret);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            char encryptedChar
    = (char)((int)c + 4);\n            sb.Append(encryptedChar);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f79d621c2244034acfb5c97b68542d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f79d621c2244034acfb5c97b68542d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        Dictionary<char,
    int> dic = new Dictionary<char, int>();\n        int j = 0;\n        foreach (char
    c in alphabet) {\n            dic.Add(c, j);\n            j++;\n        }\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = dic[s[i]];\n            index = (index + 2 * 2) % 26;\n            result
    += alphabet[index];\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    cypher = \"\";\n        foreach (char c in s) {\n            cypher += (char)(c
    + 4);\n        }\n        return cypher;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53d888ebd57a430ea5c258d6d9b6eee6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53d888ebd57a430ea5c258d6d9b6eee6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        char[] alphaArray = alphabet.ToCharArray();\n
    \       char[] sArray = s.ToCharArray();\n        char[] newSArray = new char[sArray.Length];\n
    \       for (int i = 0; i < sArray.Length; i++) {\n            int currentIndex
    = Array.IndexOf(alphaArray, sArray[i]);\n            if (currentIndex + 2 * 2
    > 25) {\n                newSArray[i] = alphaArray[(currentIndex + 2 * 2) - 25
    - 1];\n            } else {\n                newSArray[i] = alphaArray[currentIndex
    + 2 * 2];\n            }\n        }\n        string newS = new string(newSArray);\n
    \       return newS;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    charArray = s.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++)
    {\n            charArray[i] = (char)(((int)charArray[i] + (charArray[i] - 'a')
    * 2) % 26 + 'a');\n        }\n        return new string(charArray);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7621f1ef97045e99388aa85df63b6ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7621f1ef97045e99388aa85df63b6ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int[] alpha
    = new int[26];\n        for (int i = 0; i < 26; i++) {\n            alpha[i] =
    i + 97;\n        }\n        string result = \"\";\n        for (int i = 0; i <
    s.Length; i++) {\n            if (s[i] + 2 > 122) {\n                int val =
    s[i] + 2 - 122;\n                result += (char)(val + 96);\n            } else
    {\n                result += (char)(s[i] + 2);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a380f0f288824b44a830773b7119485a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a380f0f288824b44a830773b7119485a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <695760984f114abb92c8ec059fe6fa05>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <695760984f114abb92c8ec059fe6fa05>:0 \n"
  stdout: ''
  timestamp: 1659976151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var input
    = s.ToCharArray();\n        var output = new char[input.Length];\n        for
    (int i = 0; i < input.Length; i++) {\n            char letter = input[i];\n            letter
    = (char)(letter + 2 * 2);\n            output[i] = letter;\n        }\n        return
    new string(output);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9efca6909d2446eb7e21bf2dac82600>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9efca6909d2446eb7e21bf2dac82600>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // // StringBuilder
    sb = new StringBuilder();\n        // string res = \"\";\n        // foreach (char
    c in s) {\n        //     int temp = (int)c;\n        //     if (temp >= 97 &&
    temp <= 122) {\n        //         if (temp + 2 > 122) {\n        //             temp
    = (temp + 2) - 26;\n        //         } else {\n        //             temp +=
    2;\n        //         }\n        //     } else if (temp >= 65 && temp <= 90)
    {\n        //         if (temp + 2 > 90) {\n        //             temp = (temp
    + 2) - 26;\n        //         } else {\n        //             temp += 2;\n        //
    \        }\n        //     }\n        //     // sb.Append((char)temp);\n        //
    \    res += (char)temp;\n        // }\n        // return res;\n        return
    new string(s.Select(x => (char)(x + 2)).ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13ece9cc6ce04efab8d5c39effef4dc4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13ece9cc6ce04efab8d5c39effef4dc4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        foreach
    (char c in s) {\n            if (c == 'z') {\n                result += 'b';\n
    \           } else if (c == 'y') {\n                result += 'a';\n            }
    else {\n                result += alphabet[alphabet.IndexOf(c) + 2];\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0fd78a1434e45de94a32e890647671f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0fd78a1434e45de94a32e890647671f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    s1 = \"abcdefghijklmnopqrstuvwxyz\";\n        string s2 = \"\";\n        for (int
    i = 2; i < s1.Length; i++) {\n            s2 += s1[i];\n        }\n        s2
    += s1[0];\n        s2 += s1[1];\n        string alphabet1 = \"abcdefghijklmnopqrstuvwxyz\";\n
    \       string alphabet2 = \"efghijklmnopqrstuvwxyzabcd\";\n        string result
    = \"\";\n        foreach (char c in s) {\n            int index = alphabet1.IndexOf(c);\n
    \           if (index == -1) {\n                result += c;\n            } else
    {\n                result += alphabet2[index];\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    s2 = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char c =
    s[i];\n            c = (char)(c + 2 * 2);\n            s2 += c;\n        }\n        return
    s2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f21a85722fd4098b841e8c94a58a0cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f21a85722fd4098b841e8c94a58a0cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    String.Join(\"\", s.Select(ch => (char)(ch + 4)));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23844c04c0104c1497a0903b33306588>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23844c04c0104c1497a0903b33306588>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var output
    = new StringBuilder();\n        foreach (var c in s) {\n            output.Append((char)(((c
    - 'a') * 4 + 2) % 26 + 'a'));\n        }\n        return output.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <211d97dd9ff54e12ac520039e216d95c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <211d97dd9ff54e12ac520039e216d95c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alph = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypt = \"\";\n        int
    index = 0;\n        foreach (char c in s) {\n            if (index + 2 >= alph.Length)
    {\n                encrypt += alph[alph.Length - (index - alph.Length)];\n            }
    else {\n                encrypt += alph[index + 2];\n            }\n            index++;\n
    \       }\n        return encrypt;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db8b03cb484c4032a67a4b6b4979e4dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db8b03cb484c4032a67a4b6b4979e4dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here!\n        string encrypted = \"\";\n        for (int i = 0; i < s.Length;
    i++) {\n            encrypted += ((char)(s[i] + 4));\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4361406e5ad4f70929f0f79fe5709aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4361406e5ad4f70929f0f79fe5709aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    outstring = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n
    \           outstring[i] = (char)((s[i] - 'a' + 2 * 2) % 26 + 'a');\n        }\n
    \       return new string(outstring);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // TODO:
    Your code here\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string
    coded_alphabet = \"cdefghijklmnopqrstuvwxyzab\";\n        string new_string =
    \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int idx = alphabet.IndexOf(s[i]);\n
    \           new_string += coded_alphabet[idx];\n        }\n        return new_string;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46e22d35ad2f44519d5e702f3f5c2019>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46e22d35ad2f44519d5e702f3f5c2019>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    a = \"abcdefghijklmnopqrstuvwxyz\";\n        string b = \"cdefghijklmnopqrstuvwxyzab\";\n
    \       string r = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            r
    += b[a.IndexOf(s[i])];\n        }\n        return r;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea972e6f6f904608949b1d62ca13bb6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea972e6f6f904608949b1d62ca13bb6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        Dictionary<char, char> dict
    = new Dictionary<char, char>();\n        int shift = 2;\n        for (int i =
    0; i < 26; i++) {\n            dict.Add(alphabet[i], alphabet[(i + shift) % 26]);\n
    \       }\n        return string.Join(\"\", s.Select(x => dict[x]));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <157e6f0047e14a22ac0ad2c5b9cc92ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <157e6f0047e14a22ac0ad2c5b9cc92ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <ad56903a7c1946b68dde3ffca16d5ffc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <ad56903a7c1946b68dde3ffca16d5ffc>:0
    \n"
  stdout: ''
  timestamp: 1659976150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Write
    your code here...\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d1a713384b24ffe82ec8c7d7681b9f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d1a713384b24ffe82ec8c7d7681b9f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
    'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n
    \       string result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n
    \           int index = s[i] - 'a';\n            index = (index + 2) * 2;\n            result
    += alphabet[index];\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86f077d1b7a44a9b89d86d0e5402d3b6>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00030] in <86f077d1b7a44a9b89d86d0e5402d3b6>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <86f077d1b7a44a9b89d86d0e5402d3b6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00030]
    in <86f077d1b7a44a9b89d86d0e5402d3b6>:0 \n  at Problem.Main (System.String[] args)
    [0x0001b] in <86f077d1b7a44a9b89d86d0e5402d3b6>:0 \n"
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        //Your
    code here\n        var str = \"abcdefghijklmnopqrstuvwxyz\";\n        var alphabet
    = new Dictionary<char, int>();\n        for (int i = 0; i < str.Length; i++) {\n
    \           alphabet.Add(str[i], i);\n        }\n        return string.Join(\"\",
    s.Select(c => alphabet[c] < 24 ? str[alphabet[c] + 2] : str[alphabet[c] - 24]));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <999739214e3240e48adad4b1f56afa3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <999739214e3240e48adad4b1f56afa3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    Code Here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcztm7emr.cs(22,26): error CS0161: ''Problem.Encrypt(string)'': not all
    code paths return a value

    '
  timestamp: 1659976152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int length
    = s.Length;\n        char[] a = s.ToCharArray();\n        for (int i = 0; i <
    length; i++) {\n            char k = a[i];\n            if (k != 'z' && k != 'y')
    {\n                if (k != 'z' && k != 'y') {\n                    if (k != 'z'
    && k != 'y') {\n                        if (k != 'z' && k != 'y') {\n                            if
    (k != 'z' && k != 'y') {\n                                if (k != 'z' && k !=
    'y') {\n                                    if (k != 'z' && k != 'y') {\n                                        if
    (k != 'z' && k != 'y') {\n                                            if (k !=
    'z' && k != 'y') {\n                                                if (k != 'z'
    && k != 'y') {\n                                                    if (k != 'z'
    && k != 'y') {\n                                                        if (k
    != 'z' && k != 'y') {\n                                                            if
    (k != 'z' && k != 'y') {\n                                                                if
    (k != 'z' && k != 'y') {\n                                                                    if
    (k != 'z' && k != 'y') {\n                                                                        if
    (k != 'z' && k != 'y') {\n                                                                            if
    (k != 'z' && k != 'y') {\n                                                                                if
    (k != 'z' && k != 'y') {\n                                                                                    if
    (k != 'z' && k != 'y') {\n                                                                                        if
    (k != 'z' && k != 'y') {\n                                                                                            if
    (k != 'z' && k != 'y') {\n                                                                                                if
    (k != 'z' && k != 'y') {\n                                                                                                    if
    (k != 'z' && k != 'y') {\n                                                                                                        if
    (k != 'z' && k != 'y') {\n                                                                                                            if
    (k != 'z' && k != 'y') {\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1584nc7n.cs(53,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp1584nc7n.cs(64,2): error CS1513: } expected

    '
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Use
    a for loop to iterate through the string to get the char.\n        // Turn the
    char into an int and add two to it.\n        // If the char is a space add 32.\n
    \       // If the int is too big, get its modulus of 32.\n        // Cast the
    int back to a char.\n        // Return the encrypted string.\n        char[] array
    = s.ToCharArray();\n        for (int i = 0; i < array.Length; i++) {\n            int
    ascii = (int)array[i];\n            if (ascii == 32) {\n                ascii
    += 32;\n            } else {\n                ascii += 2;\n                if
    (ascii > 126) {\n                    ascii %= 32;\n                }\n            }\n
    \           array[i] = (char)ascii;\n        }\n        return new string(array);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1046c5d06be489facae06711ec3f8e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1046c5d06be489facae06711ec3f8e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    encrypted = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n
    \           encrypted[i] = (char)(s[i] + 2 * 2);\n        }\n        return new
    string(encrypted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef3098ae37ea481083c440e11df12d67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef3098ae37ea481083c440e11df12d67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int shift
    = 2;\n        char[] x = s.ToCharArray();\n        for (int i = 0; i < x.Length;
    i++) {\n            char c = x[i];\n            c = (char)(c + shift);\n            x[i]
    = c;\n        }\n        return new string(x);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1964ee9313548d3bff4e6778418e996>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1964ee9313548d3bff4e6778418e996>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    output = \"\";\n        int length = s.Length;\n        char[] a = s.ToCharArray();\n
    \       int i = 0;\n        while (i < length) {\n            char c = a[i];\n
    \           int code = (int)c;\n            if (code >= 97 && code <= 109) {\n
    \               code += 20;\n            } else if (code >= 110 && code <= 122)
    {\n                code -= 20;\n            }\n            char ch = (char)code;\n
    \           output += ch;\n            i++;\n        }\n        return output;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7bd09dc962d4d109ac6bce7b3017129>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7bd09dc962d4d109ac6bce7b3017129>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alp = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n        char[]
    word = s.ToCharArray();\n        for (int i = 0; i < word.Length; i++) {\n            int
    index = Array.IndexOf(alp, word[i]);\n            if (index < 24) {\n                word[i]
    = alp[index + 2];\n            } else if (index == 24) {\n                word[i]
    = alp[0];\n            } else if (index == 25) {\n                word[i] = alp[1];\n
    \           }\n        }\n        return new string(word);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <956b13f81f8b468fb9e0567a204635a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <956b13f81f8b468fb9e0567a204635a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // TODO:
    Create your function here.\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65d52ea5e74f44ea8317568b997c058c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65d52ea5e74f44ea8317568b997c058c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += Char.ConvertFromUtf32(s[i] + 2 * 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84106271671a4bb1b4c9cda7b22ecb7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84106271671a4bb1b4c9cda7b22ecb7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int idx = alphabet.IndexOf(s[i]);\n
    \           int j = (idx + 2 * (i + 1)) % 26;\n            result += alphabet[j];\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <730912a92613403c8573616f76c08c08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <730912a92613403c8573616f76c08c08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Put
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba08a096033c48a097bd7e4363ca700d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba08a096033c48a097bd7e4363ca700d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)(s[i] + 2 * 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e5f058eb8814f97bd9cd3410f888e39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e5f058eb8814f97bd9cd3410f888e39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // The
    characters should be mapped to the characters in the \n        // rotated alphabet
    as shown below.\n        // Normal alphabet:        \n        // a b c d e f g
    h i j k l m n o p q r s t u v w x y z\n        // Alphabet rotated 4: \n        //
    e f g h i j k l m n o p q r s t u v w x y z a b c d \n        // Complete the
    function\n        var orig = new Dictionary<char, int>()\n        {\n            {'a',
    1}, {'b', 2}, {'c', 3}, {'d', 4}, {'e', 5}, {'f', 6}, {'g', 7}, {'h', 8}, {'i',
    9},\n            {'j', 10}, {'k', 11}, {'l', 12}, {'m', 13}, {'n', 14}, {'o',
    15}, {'p', 16}, {'q', 17}, {'r', 18},\n            {'s', 19}, {'t', 20}, {'u',
    21}, {'v', 22}, {'w', 23}, {'x', 24}, {'y', 25}, {'z', 26}\n        };\n        var
    rotated = new Dictionary<int, char>()\n        {\n            {1, 'e'}, {2, 'f'},
    {3, 'g'}, {4, 'h'}, {5, 'i'}, {6, 'j'}, {7, 'k'}, {8, 'l'}, {9, 'm'},\n            {10,
    'n'}, {11, 'o'}, {12, 'p'}, {13, 'q'}, {14, 'r'}, {15, 's'}, {16, 't'}, {17, 'u'},
    {18, 'v'},\n            {19, 'w'}, {20, 'x'}, {21, 'y'}, {22, 'z'}, {23, 'a'},
    {24, 'b'}, {25, 'c'}, {26, 'd'}\n        };\n        var res = \"\";\n        foreach
    (var c in s) {\n            res\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprt9rzy5e.cs(44,16): error CS1002: ; expected

    /tmp/tmprt9rzy5e.cs(46,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmprt9rzy5e.cs(57,2): error CS1513: } expected

    '
  timestamp: 1659976152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    newS = s.ToCharArray();\n        for (int i = 0; i < newS.Length; i++) {\n            newS[i]
    = (char)((int)newS[i] + 2);\n        }\n        return new string(newS);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b6f3b3f9930477ab74860eda9802518>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b6f3b3f9930477ab74860eda9802518>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    res = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int tmp
    = s[i] + 2 * 2;\n            if (tmp > 'z')\n                tmp -= 26;\n            res
    += (char)tmp;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            int i
    = Array.IndexOf(alphabet, c);\n            if (i == -1) {\n                sb.Append(c);\n
    \           } else {\n                sb.Append(alphabet[(i+2)%alphabet.Length]);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjf9lriek.cs(25,35): error CS0103: The name ''alphabet'' does not exist
    in the current context

    /tmp/tmpjf9lriek.cs(29,27): error CS0103: The name ''alphabet'' does not exist
    in the current context

    /tmp/tmpjf9lriek.cs(29,42): error CS0103: The name ''alphabet'' does not exist
    in the current context

    '
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    res = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            res +=
    (char)((s[i] - 96 + 4) % 26 + 96);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    string.Join(\"\", s.Select(x => ROTATE(x, 4)));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyldxtcb6.cs(23,46): error CS0103: The name ''ROTATE'' does not exist in
    the current context

    '
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    e = s.ToCharArray();\n        string sol = \"\";\n        foreach (char c in e)
    {\n            int i = c - 'a';\n            int f = i + 2 * 2;\n            int
    g = f % 26;\n            char d = (char)(g + 'a');\n            sol += d;\n        }\n
    \       return sol;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Input:
    a string s\n        // Output: return string encrypted with the alphabet being
    rotated.\n        // create character array of all alphabet\n        char[] alphabet
    = new char[26] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        //
    create an empty string to store our encrypted string\n        string encrypted
    = \"\";\n        // iterate through our input string\n        for (int i = 0;
    i < s.Length; i++) {\n            // check if the character is within our alphabet\n
    \           if (s[i] >= 'a' && s[i] <= 'z') {\n                // if so, then
    find the index of our alphabet\n                int index = (int)s[i] - (int)'a';\n
    \               // Shift down by two multiplied to two places.\n                //
    shift the index by 2 * 2\n                index = (index + (2 * 2)) % 26;\n                //
    add the character to our encrypted string\n                encrypted += alphabet[index];\n
    \           }\n            // if not, then add the character to our encrypted
    string\n            else {\n                encrypted += s[i];\n            }\n
    \       }\n        // return the encrypted string\n        return encrypted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // TODO:
    Implement\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a383b4ee7d4aa0be1bbbb04cf04a23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a383b4ee7d4aa0be1bbbb04cf04a23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var sb
    = new StringBuilder();\n        foreach (var c in s) {\n            sb.Append((char)((c
    + 2 * 2 - 97) % 26 + 97));\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    str = \"\";\n        foreach (char c in s) {\n            char d = (char)(c +
    2 * 2);\n            if (d > 'z') {\n                d = (char)(c - (26 - 2 *
    2));\n            }\n            str += d;\n        }\n        return str;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        char[] array = s.ToCharArray();\n        foreach
    (char c in array) {\n            if (c >= 'x') {\n                sb.Append((char)(c
    - 24));\n            } else if (c >= 'v') {\n                sb.Append((char)(c
    - 22));\n            } else if (c >= 't') {\n                sb.Append((char)(c
    - 20));\n            } else if (c >= 'r') {\n                sb.Append((char)(c
    - 18));\n            } else if (c >= 'p') {\n                sb.Append((char)(c
    - 16));\n            } else if (c >= 'n') {\n                sb.Append((char)(c
    - 14));\n            } else if (c >= 'l') {\n                sb.Append((char)(c
    - 12));\n            } else if (c >= 'j') {\n                sb.Append((char)(c
    - 10));\n            } else if (c >= 'h') {\n                sb.Append((char)(c
    - 8));\n            } else if (c >= 'f') {\n                sb.Append((char)(c
    - 6));\n            } else if (c >= 'd') {\n                sb.Append((char)(c
    - 4));\n            } else if (c >= 'b') {\n                sb.Append((char)(c
    - 2));\n            } else {\n                sb.Append(c);\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e90cba43a9b49f585152a7cb59fe93d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e90cba43a9b49f585152a7cb59fe93d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var alphabet
    = \"abcdefghijklmnopqrstuvwxyz\";\n        var newS = new StringBuilder();\n        foreach
    (var c in s) {\n            var i = alphabet.IndexOf(c);\n            newS.Append(alphabet[(i
    + 2 * 2) % alphabet.Length]);\n        }\n        return newS.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    string.Join(\"\",\n            s.Select(e => ((e - 'a' + 8) % 26) + 'a'));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a015cfde1dce458eb4be8e432ee8aaa7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a015cfde1dce458eb4be8e432ee8aaa7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)((s[i] + 2 * 2 - 'a') % 26 + 'a');\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <b20eff27203e4dc5932f03b28a180872>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <b20eff27203e4dc5932f03b28a180872>:0
    \n"
  stdout: ''
  timestamp: 1659976153
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        if (s.Length
    == 0) {\n            return s;\n        }\n        return Encrypt(s.Substring(0,
    s.Length - 1)) + CipherAlphabet[(Alphabet.IndexOf(s[s.Length - 1]) + CipherAlphabet.Length)
    % CipherAlphabet.Length];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1u76hz_a.cs(26,56): error CS0103: The name ''CipherAlphabet'' does not
    exist in the current context

    /tmp/tmp1u76hz_a.cs(26,72): error CS0103: The name ''Alphabet'' does not exist
    in the current context

    /tmp/tmp1u76hz_a.cs(26,108): error CS0103: The name ''CipherAlphabet'' does not
    exist in the current context

    /tmp/tmp1u76hz_a.cs(26,133): error CS0103: The name ''CipherAlphabet'' does not
    exist in the current context

    '
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] sToArray
    = s.ToArray();\n        for (int i = 0; i < sToArray.Length; i++) {\n            for
    (int j = 0; j < alphabet.Length; j++) {\n                if (sToArray[i] == alphabet[j])
    {\n                    sToArray[i] = alphabet[(j + (2 * 2)) % alphabet.Length];\n
    \               }\n            }\n        }\n        return new string(sToArray);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce4bc64f58ab4534a3a46426e3d65ad4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce4bc64f58ab4534a3a46426e3d65ad4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code goes here!\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <29c0e6bea2e34873b2c57982764809a0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <29c0e6bea2e34873b2c57982764809a0>:0
    \n"
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d755f065a44cf8b49a0ea5c308e284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabets = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        Dictionary<char,
    char> map = new Dictionary<char, char>();\n        char[] result = new char[s.Length];\n
    \       for (int i = 0; i < alphabets.Length; i++) {\n            map.Add(alphabets[i],
    alphabets[(i + 2) % alphabets.Length]);\n        }\n        for (int i = 0; i
    < s.Length; i++) {\n            result[i] = map[s[i]];\n        }\n        return
    new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4bbcd99abbc4a2a92c32b4133786437>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4bbcd99abbc4a2a92c32b4133786437>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    ca = s.ToCharArray();\n        for (int i = 0; i < ca.Length; i++) {\n            int
    c = ca[i];\n            if (c == 105) {\n                ca[i] = 108;\n            }
    else if (c == 104) {\n                ca[i] = 107;\n            } else if (c <
    97) {\n                ca[i] = (char)(c + (2 * 2));\n            } else {\n                ca[i]
    = (char)(c + 2);\n            }\n        }\n        return new string(ca);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbf12vx7b.cs(27,25): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbf12vx7b.cs(29,25): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    key = \"abcdefghijklmnopqrstuvwxyz\";\n        string nKey = \"cdefghijklmnopqrstuvwxyzab\";\n
    \       StringBuilder sb = new StringBuilder();\n        foreach (char c in s)
    {\n            int i = key.IndexOf(c);\n            sb.Append(nKey[i]);\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aff93b00b6df4ef0b7a275b33cd37fbc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aff93b00b6df4ef0b7a275b33cd37fbc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n        string
    s2 = \"\";\n        foreach (char c in s) {\n            int i = Array.IndexOf(alphabet,
    c);\n            if (i < 24) {\n                i += 2;\n            } else {\n
    \               i -= 24;\n            }\n            s2 += alphabet[i];\n        }\n
    \       return s2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f58da5895a7d4b3a8ddc98261aa4aafc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f58da5895a7d4b3a8ddc98261aa4aafc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var a =
    \"abcdefghijklmnopqrstuvwxyz\";\n        var b = a.Substring(2, 24) + a.Substring(0,
    2);\n        string l = \"\";\n        foreach (char c in s) {\n            l
    += b[a.IndexOf(c)];\n        }\n        return l;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bc6e5a4f664095be2d5e08d9399798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bc6e5a4f664095be2d5e08d9399798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        foreach
    (char c in s) {\n            int i = (alphabet.IndexOf(c) + 2 * 2) % 26;\n            result
    += alphabet[i];\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alp = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n        string
    ret = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i]
    >= 'a' && s[i] <= 'z') {\n                int idx = (s[i] - 'a' + 2 * 2) % 26;\n
    \               ret += alp[idx];\n            } else {\n                ret +=
    s[i];\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        int n =
    s.Length;\n        char[] result = new char[n];\n        for (int i = 0; i < n;
    i++) {\n            result[i] = (char)(s[i] + 2 * 2);\n        }\n        return
    new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1442ed4803a046beaeba7ec20b6b1003>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1442ed4803a046beaeba7ec20b6b1003>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var e =
    \"\";\n        // Loop through each character of the string\n        for (int
    i = 0; i < s.Length; i++) {\n            // Add 2 to the character to get the
    encrypted character\n            e += (char)(s[i] + 2);\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04303ab9b8704fb8a32c8898eb04dd42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04303ab9b8704fb8a32c8898eb04dd42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    c = s.ToCharArray();\n        char[] t = new char[c.Length];\n        for (int
    i = 0; i < c.Length; i++) {\n            if (((c[i] - 'a') + 4) > 25) {\n                t[i]
    = (char)('a' + ((c[i] - 'a') + 4) - 26);\n            } else {\n                t[i]
    = (char)(c[i] + 4);\n            }\n        }\n        return new string(t);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // your
    code here\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa7cedc2b2b04de28c56ff29ebde3020>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa7cedc2b2b04de28c56ff29ebde3020>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3956e77791e4a7fabbca25e6913c1c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3956e77791e4a7fabbca25e6913c1c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        char[] encrypted = s.ToCharArray();\n
    \       char[] stringAlphabet = alphabet.ToCharArray();\n        for (int i =
    0; i < encrypted.Length; i++) {\n            int index = Array.IndexOf(stringAlphabet,
    encrypted[i]);\n            encrypted[i] = stringAlphabet[(index + (2 * (i + 1)))
    % 26];\n        }\n        return new string(encrypted);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e744a708b66405fb3998a1932047da0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e744a708b66405fb3998a1932047da0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            char first_shift
    = (char)(c + 2);\n            char second_shift = (char)(first_shift + 2);\n            result
    += second_shift;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2fc5fb5a6af43b0b610c45975e620ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2fc5fb5a6af43b0b610c45975e620ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        var new_str
    = \"\";\n        var key = (int)Math.Pow(2, 2);\n        foreach (var c in s)
    {\n            var ascii = (int)c;\n            if (ascii < 123 && ascii > 96)
    {\n                ascii = (ascii + key) > 122 ? 96 + (ascii + key) % 122 : ascii
    + key;\n            }\n            new_str += (char)ascii;\n        }\n        return
    new_str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        List<char>
    list = new List<char>();\n        foreach (char c in s) {\n            list.Add(c);\n
    \       }\n        List<char> newList = new List<char>();\n        foreach (char
    c in list) {\n            if (c > 110) {\n                newList.Add((char)(((int)c
    + 2) - 26));\n            } else {\n                newList.Add((char)((int)c
    + 2));\n            }\n        }\n        string newString = new string(newList.ToArray());\n
    \       return newString;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd33b335ef7f4c4cacf59dbdd189e67e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd33b335ef7f4c4cacf59dbdd189e67e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    newS = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char c
    = s[i];\n            if (c >= 'a' && c <= 'y') {\n                c = (char)(c
    + 2);\n            } else if (c == 'z') {\n                c = 'b';\n            }
    else if (c == ' ') {\n                c = ' ';\n            } else if (c == '.')
    {\n                c = '.';\n            } else if (c == ',') {\n                c
    = ',';\n            } else if (c == '?') {\n                c = '?';\n            }
    else if (c == '!') {\n                c = '!';\n            } else if (c == '\\'')
    {\n                c = '\\'';\n            } else if (c == '+') {\n                c
    = '+';\n            } else if (c == '-') {\n                c = '-';\n            }
    else if (c == '*') {\n                c = '*';\n            } else if (c == '/')
    {\n                c = '/';\n            } else if (c == '\\\\') {\n                c
    = '\\\\';\n            } else if (c == '_') {\n                c = '_';\n            }
    else if (c == ':') {\n                c = ':';\n            } else if (c == ';')
    {\n                c = ';';\n            } else if (c == '<') {\n                c
    = '<';\n            } else if (c == '>') {\n                c = '>';\n            }
    else if (c == '(') {\n                c = '(';\n            } else if (c == ')')
    {\n                c = ')';\n            } else if (c == '=') {\n                c
    = '=';\n            } else if (c == '0') {\n                c = '2';\n            }
    else if (c == '1') {\n                c = '3';\n            } else if (c == '2')
    {\n                c = '4';\n            } else if (c == '3') {\n               \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoi8781qz.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpoi8781qz.cs(88,2): error CS1513: } expected

    '
  timestamp: 1659976153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            sb.Append((char)((s[i]
    - 'a' + 2 * 2) % 26 + 'a'));\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Code
    here.\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string
    newString = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int
    newIndex = alphabet.IndexOf(s[i]) + 2 * 2;\n            if (newIndex >= alphabet.Length)
    {\n                newIndex = newIndex - alphabet.Length;\n            }\n            newString
    += alphabet[newIndex];\n        }\n        return newString;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Create
    our dictionary\n        Dictionary<char, char> d = new Dictionary<char, char>();\n
    \       // Create a string to use as a basis for our alphabet\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        // For each letter in our
    alphabet\n        for (int i = 0; i < alphabet.Length; i++) {\n            //
    If the index is the last two letters of the alphabet\n            if (i >= alphabet.Length
    - 2) {\n                // Create a new string with the last two letters at the
    front\n                string endStr = alphabet.Substring(i);\n                string
    newStr = alphabet.Substring(0, i);\n                string newAlphabet = endStr
    + newStr;\n                // Add the letter to the dictionary with the new letter\n
    \               d.Add(alphabet[i], newAlphabet[i]);\n            } else {\n                //
    Otherwise add the letter to the dictionary with the next two letters\n                d.Add(alphabet[i],
    alphabet[i + 2]);\n            }\n        }\n        // Create a string builder
    to build our new string\n        StringBuilder sb = new StringBuilder();\n        //
    For each letter in our string\n        for (int i = 0; i < s.Length; i++) {\n
    \           // If it is lowercase\n            if (char.IsLower(s[i])) {\n                //
    Add the lowercase letter to the string builder\n                sb.Append(d[s[i]]);\n
    \           } else {\n                // Otherwise add the uppercase letter to
    the string builder\n                sb.Append(char.ToUpper(d[char.ToLower(s[i])]));\n
    \           }\n        }\n        // Return the new string\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1b9eb997d724b8abbd80ebd8db00138>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1b9eb997d724b8abbd80ebd8db00138>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // check
    for empty string\n        if (string.IsNullOrEmpty(s)) {\n            return string.Empty;\n
    \       }\n        string result = \"\";\n        foreach (char c in s) {\n            if
    (c == 'z') {\n                result += 'b';\n            } else if (c == 'y')
    {\n                result += 'a';\n            } else {\n                result
    += (char)(c + 2);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37871f7c6f3a403fb3fc19016b1e93c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37871f7c6f3a403fb3fc19016b1e93c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Solution
    code here...\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa9f50387d9d41d8a968e7e1f820f39c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa9f50387d9d41d8a968e7e1f820f39c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            int
    result = s[i] + 2 * 2;\n            sb.Append((char)result);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0156ff4e58046ebb1da9818d0add516>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0156ff4e58046ebb1da9818d0add516>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    encrypted = \"\";\n        foreach (char c in s) {\n            char e = (char)(c
    + 2 * 2);\n            if (e > 'z') {\n                e = (char)(e - 26);\n            }\n
    \           encrypted += e;\n        }\n        return encrypted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alpha = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            result += alpha[(alpha.IndexOf(s[i])
    + 2 * 2) % 26];\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            if (char.IsLetter(c)) {\n                int offset = (int)c
    - 97;\n                offset = (offset + 2) % 26;\n                result +=
    Convert.ToChar(offset + 97);\n            } else {\n                result +=
    c;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0b734af87774797b53361b430212cde>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0b734af87774797b53361b430212cde>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        //Check:
    Does string contain valid characters?\n        List<string> alphabet = new List<string>();\n
    \       List<string> numbers = new List<string>();\n        for (int i = 0; i
    < 26; i++) {\n            alphabet.Add(Convert.ToString((char)(i + 97)));\n            numbers.Add(Convert.ToString(i
    + 1));\n        }\n        string result = \"\";\n        for (int i = 0; i <
    s.Length; i++) {\n            if (alphabet.Contains(s[i].ToString())) {\n                int
    index = alphabet.IndexOf(s[i].ToString());\n                int left = index -
    2;\n                int right = index + 2;\n                if (left < 0) {\n
    \                   left = 24;\n                }\n                if (right >
    25) {\n                    right = 25;\n                }\n                int
    multi = int.Parse(numbers[left]) * int.Parse(numbers[right]);\n                int
    shift = multi % 26;\n                int newIndex = index + shift;\n                if
    (newIndex > 25) {\n                    newIndex = newIndex - 26;\n                }\n
    \               result += alphabet[newIndex];\n            }\n            else
    {\n                result += s[i];\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f9292bb8ff4606a65b84f6eb4a297f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f9292bb8ff4606a65b84f6eb4a297f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976154
