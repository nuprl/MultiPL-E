name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
  \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
  )\n    public static string StrongestExtension(string class_name, List<string> extensions)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        int cap = 0;\n        int sm = 0;\n        int str = 0;\n \
    \       string strongest = \"\";\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            cap = extensions[i].Count(char.IsUpper);\n            sm\
    \ = extensions[i].Count(char.IsLower);\n            if (cap - sm > str) {\n  \
    \              str = cap - sm;\n                strongest = extensions[i];\n \
    \           }\n        }\n        return class_name + \".\" + strongest;", '        throw
    new NotImplementedException();', "        var class_name_extensions = extensions.Select(ext\
    \ => class_name + \".\" + ext);\n        var strongest_extension = class_name_extensions.OrderByDescending(ext\
    \ => strength(ext)).First();\n        return strongest_extension;", "        string\
    \ strongest_extension = \"\";\n        decimal best_ratio = 0.0m;\n        decimal\
    \ current_ratio = 0.0m;\n        foreach (string extension in extensions) {\n\
    \            current_ratio = (decimal)CountUppercase(extension) - (decimal)CountLowercase(extension);\n\
    \            if (current_ratio > best_ratio) {\n                best_ratio = current_ratio;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Assume\
    \ the class_name does not have any uppercase letters.\n        int strongest_extension_capital_count\
    \ = 0;\n        int strongest_extension_lowercase_count = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            //\
    \ Count the number of uppercase letters in the extension.\n            int extension_capital_count\
    \ = 0;\n            int extension_lowercase_count = 0;\n            foreach (char\
    \ letter in extension) {\n                if (char.IsUpper(letter)) {\n      \
    \              extension_capital_count += 1;\n                } else {\n     \
    \               extension_lowercase_count += 1;\n                }\n         \
    \   }\n            // Calculate the strength of the extension.\n            float\
    \ extension_strength = (float)extension_capital_count - extension_lowercase_count;\n\
    \            // Check if the extension is the strongest extension.\n         \
    \   if (extension_strength > strongest_extension_capital_count - strongest_extension_lowercase_count)\
    \ {\n                strongest_extension_capital_count = extension_capital_count;\n\
    \                strongest_extension_lowercase_count = extension_lowercase_count;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        //implement\
    \ your code here\n        double maxStrength = double.MinValue;\n        string\
    \ maxExtension = \"\";\n        for (int i = 0; i < extensions.Count; i++) {\n\
    \            string currentExtension = extensions[i];\n            int upperCaseCount\
    \ = 0;\n            int lowerCaseCount = 0;\n            for (int j = 0; j < currentExtension.Length;\
    \ j++) {\n                if (char.IsUpper(currentExtension[j])) {\n         \
    \           upperCaseCount++;\n                } else {\n                    lowerCaseCount++;\n\
    \                }\n            }\n            double currentStrength = upperCaseCount\
    \ - lowerCaseCount;\n            if (currentStrength > maxStrength) {\n      \
    \          maxStrength = currentStrength;\n                maxExtension = currentExtension;\n\
    \            }\n        }\n        return class_name + \".\" + maxExtension;",
  "        string strongest_extension = \"\";\n        float strongest_extension_strength\
    \ = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n            float\
    \ extension_strength = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (Char.IsUpper(extensions[i][j])) {\n            \
    \        extension_strength++;\n                } else {\n                   \
    \ extension_strength--;\n                }\n            }\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension = extensions[i];\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string best_extension = \"\";\n        float strength = 0;\n        foreach\
    \ (string extension in extensions) {\n            float extension_strength = 0;\n\
    \            for (int i = 0; i < extension.Length; i++) {\n                if\
    \ (char.IsUpper(extension[i])) {\n                    extension_strength++;\n\
    \                } else {\n                    extension_strength--;\n       \
    \         }\n            }\n            if (extension_strength > strength) {\n\
    \                strength = extension_strength;\n                best_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ best_extension;", '        throw new NotImplementedException();', "        var\
    \ strengths = extensions.Select(s => ((double)s.Count(c => char.IsUpper(c))) -\
    \ ((double)s.Count(c => char.IsLower(c)))).ToList();\n        var best = strengths.IndexOf(strengths.Max());\n\
    \        return class_name + \".\" + extensions[best];", "        // >>> StrongestExtension((\"\
    my_class\"), (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"\
    CC\"})))\n        // (\"my_class.AA\")\n        string str_ext = \"\";\n     \
    \   string str_ext_name = \"\";\n        foreach (string ext in extensions) {\n\
    \            int up_count = 0;\n            int down_count = 0;\n            for\
    \ (int i = 0; i < ext.Length; i++) {\n                if (Char.IsUpper(ext[i]))\
    \ {\n                    up_count++;\n                } else {\n             \
    \       down_count++;\n                }\n            }\n            if (up_count\
    \ - down_count >= str_ext.Length) {\n                str_ext = ext;\n        \
    \        str_ext_name = ext;\n            }\n        }\n        return $\"{class_name}.{str_ext_name}\"\
    ;", "        int max_power = int.MinValue;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            string\
    \ upper_case = extension.ToUpper();\n            string lower_case = extension.ToLower();\n\
    \            int max_length = Math.Max(upper_case.Length, lower_case.Length);\n\
    \            int num_upper = 0;\n            int num_lower = 0;\n            for\
    \ (int i = 0; i < max_length; i++) {\n                if (i < upper_case.Length)\
    \ {\n                    if (Char.IsUpper(upper_case[i])) {\n                \
    \        num_upper++;\n                    }\n                }\n            \
    \    if (i < lower_case.Length) {\n                    if (Char.IsLower(lower_case[i]))\
    \ {\n                        num_lower++;\n                    }\n           \
    \     }\n            }\n            int current_power = num_upper - num_lower;\n\
    \            if (current_power > max_power) {\n                max_power = current_power;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Insert\
    \ your solution here\n        return \"\";", "        var candidates = extensions.OrderByDescending(ext\
    \ => CalcStrength(ext)).ToList();\n        var strongest = candidates.First();\n\
    \        return $\"{class_name}.{strongest}\";", "        string best_extension\
    \ = \"\";\n        double best_extension_strength = 0;\n        foreach (string\
    \ s in extensions) {\n            double strength = 0;\n            foreach (char\
    \ c in s) {\n                if (char.IsUpper(c)) {\n                    strength\
    \ += 1;\n                } else {\n                    strength -= 1;\n      \
    \          }\n            }\n            if (strength > best_extension_strength)\
    \ {\n                best_extension_strength = strength;\n                best_extension\
    \ = s;\n            }\n        }\n        return class_name + \".\" + best_extension;",
  "        var strength = -2;\n        var strongest_extension = \"\";\n        foreach\
    \ (var ext in extensions) {\n            var upper = ext.Where(x => char.IsUpper(x)).Count();\n\
    \            var lower = ext.Where(x => char.IsLower(x)).Count();\n          \
    \  var current_strength = upper - lower;\n            if (current_strength > strength)\
    \ {\n                strength = current_strength;\n                strongest_extension\
    \ = ext;\n            }\n        }\n        return $\"{class_name}.{strongest_extension}\"\
    ;", "        List<string> extensions_lower = new List<string>();\n        foreach\
    \ (string ext in extensions) {\n            extensions_lower.Add(ext.ToLower());\n\
    \        }\n        List<string> extensions_upper = new List<string>();\n    \
    \    foreach (string ext in extensions) {\n            extensions_upper.Add(ext.ToUpper());\n\
    \        }\n        int max_strength = -99999;\n        int max_strength_index\
    \ = -1;\n        for (int i = 0; i < extensions.Count; i++) {\n            int\
    \ strength = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n\
    \                if (extensions_lower[i][j] != extensions[i][j]) {\n         \
    \           strength++;\n                }\n                if (extensions_upper[i][j]\
    \ != extensions[i][j]) {\n                    strength--;\n                }\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                max_strength_index = i;\n            }\n      \
    \  }\n        return class_name + \".\" + extensions[max_strength_index];", '        return
    class_name + "." + extensions.OrderByDescending(x => Strength(x)).First();', " \
    \       int max = int.MinValue;\n        string maxext = string.Empty;\n     \
    \   foreach (string ext in extensions) {\n            int upper = 0;\n       \
    \     int lower = 0;\n            foreach (char c in ext) {\n                if\
    \ (char.IsUpper(c)) {\n                    upper++;\n                } else {\n\
    \                    lower++;\n                }\n            }\n            int\
    \ res = upper - lower;\n            if (res > max) {\n                max = res;\n\
    \                maxext = ext;\n            }\n        }\n        return string.Format(\"\
    {0}.{1}\", class_name, maxext);", "        string strongest = \"\";\n        float\
    \ strongest_strength = 0;\n        foreach (string str in extensions) {\n    \
    \        float strength = 0;\n            float lower = 0;\n            float\
    \ upper = 0;\n            foreach (char c in str) {\n                if (char.IsLower(c))\
    \ {\n                    lower++;\n                } else {\n                \
    \    upper++;\n                }\n            }\n            strength = upper\
    \ - lower;\n            if (strength > strongest_strength) {\n               \
    \ strongest = str;\n                strongest_strength = strength;\n         \
    \   }\n        }\n        return class_name + \".\" + strongest;", "        double\
    \ maxStrength = double.MinValue;\n        string maxExtension = \"\";\n      \
    \  foreach (string extension in extensions) {\n            double strength = GetStrength(extension);\n\
    \            if (strength > maxStrength) {\n                maxStrength = strength;\n\
    \                maxExtension = extension;\n            }\n        }\n       \
    \ return class_name + \".\" + maxExtension;", "        string strongest_extension\
    \ = extensions[0];\n        int strongest_strength = 0;\n        foreach (string\
    \ ext in extensions) {\n            int cap = ext.Count(char.IsUpper);\n     \
    \       int sm = ext.Count(char.IsLower);\n            int strength = cap - sm;\n\
    \            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = ext;\n            }\n   \
    \     }\n        return String.Format(\"{0}.{1}\", class_name, strongest_extension);",
  "        // We'll use a linear search algorithm to find the highest strength extension.\n\
    \        // We'll want to maintain the name of the strongest extension we've seen\
    \ so far.\n        string strongest_extension = \"\";\n        // We want to initialize\
    \ this to an arbitrarily small value.\n        float strength = -1e6f;\n     \
    \   foreach (string extension in extensions) {\n            float extension_strength\
    \ = Strength(extension);\n            if (extension_strength > strength) {\n \
    \               strongest_extension = extension;\n                strength = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        float strength = -1;\n        string extension = \"\";\n        foreach\
    \ (string ext in extensions) {\n            float ext_strength = CalcStrength(ext);\n\
    \            if (ext_strength > strength) {\n                strength = ext_strength;\n\
    \                extension = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "        // Write your code here.\n        return class_name;",
  "        var letter_count = new Func<string, (int, int)>((ext) => {\n          \
    \  var lower_count = 0;\n            var upper_count = 0;\n            foreach\
    \ (var l in ext) {\n                if (Char.IsUpper(l)) {\n                 \
    \   upper_count += 1;\n                } else {\n                    lower_count\
    \ += 1;\n                }\n            }\n            return (upper_count, lower_count);\n\
    \        });\n        var strengths = new Dictionary<string, double>();\n    \
    \    foreach (var ext in extensions) {\n            var strength = letter_count(ext);\n\
    \            strengths[ext] = strength.Item1 - strength.Item2;\n        }\n  \
    \      var strongest = strengths.Aggregate((l, r) => l.Value > r.Value ? l : r).Key;\n\
    \        return class_name + \".\" + strongest;", "        int[] strength = new\
    \ int[extensions.Count];\n        for (int i = 0; i < extensions.Count; i++) {\n\
    \            int upper = 0;\n            int lower = 0;\n            for (int\
    \ j = 0; j < extensions[i].Length; j++) {\n                if (Char.IsUpper(extensions[i][j]))\n\
    \                    upper++;\n                else if (Char.IsLower(extensions[i][j]))\n\
    \                    lower++;\n            }\n            strength[i] = upper\
    \ - lower;\n        }\n        int max_strength = 0;\n        int index = 0;\n\
    \        for (int i = 0; i < strength.Length; i++) {\n            if (strength[i]\
    \ > max_strength) {\n                max_strength = strength[i];\n           \
    \     index = i;\n            }\n        }\n        return class_name + \".\"\
    \ + extensions[index];", "        string strongest_extension = \"\";\n       \
    \ float strength = -1;\n        float max_strength = -1;\n        for (int i =\
    \ 0; i < extensions.Count; i++) {\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength++;\n                } else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength--;\n    \
    \            }\n            }\n            if (strength > max_strength) {\n  \
    \              max_strength = strength;\n                strongest_extension =\
    \ extensions[i];\n            }\n            strength = -1;\n        }\n     \
    \   return class_name + \".\" + strongest_extension;", "        int index = 0;\n\
    \        int maxStrength = 0;\n        for (int i = 0; i < extensions.Count; i++)\
    \ {\n            int upperCase = 0;\n            int lowerCase = 0;\n        \
    \    for (int j = 0; j < extensions[i].Length; j++) {\n                if (Char.IsUpper(extensions[i][j]))\
    \ {\n                    upperCase++;\n                } else {\n            \
    \        lowerCase++;\n                }\n            }\n            int strength\
    \ = upperCase - lowerCase;\n            if (strength > maxStrength) {\n      \
    \          maxStrength = strength;\n                index = i;\n            }\n\
    \        }\n        return class_name + \".\" + extensions[index];", "       \
    \ int cap = 0;\n        int sm = 0;\n        string str = \"\";\n        string\
    \ temp = \"\";\n        for (int i = 0; i < extensions.Count; i++) {\n       \
    \     for (int j = 0; j < extensions[i].Length; j++) {\n                if (char.IsUpper(extensions[i][j]))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > str.Length)\
    \ {\n                str = extensions[i];\n            }\n            cap = 0;\n\
    \            sm = 0;\n        }\n        return string.Format(\"{0}.{1}\", class_name,\
    \ str);", "        // >>> your code here <<<\n        var res = extensions.Select(s\
    \ => new {s, r = s.Count(c => char.IsUpper(c)) - s.Count(c => char.IsLower(c))}).Max();\n\
    \        return class_name + \".\" + res.s;", "        var class_ext = new Dictionary<string,\
    \ int>();\n        var strongest = \"\";\n        var count = 0;\n        foreach\
    \ (var extension in extensions) {\n            var upper = extension.Where(x =>\
    \ char.IsUpper(x)).Count();\n            var lower = extension.Where(x => char.IsLower(x)).Count();\n\
    \            class_ext.Add(extension, upper - lower);\n        }\n        foreach\
    \ (var item in class_ext) {\n            if (item.Value > count) {\n         \
    \       count = item.Value;\n                strongest = item.Key;\n         \
    \   }\n        }\n        return class_name + \".\" + strongest;", "        string\
    \ best_extension = extensions[0];\n        float best_strength = extension_strength(extensions[0]);\n\
    \        foreach (string extension in extensions) {\n            float strength\
    \ = extension_strength(extension);\n            if (strength > best_strength)\
    \ {\n                best_strength = strength;\n                best_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ best_extension;", "        double strongest_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        for (int i = 0; i < extensions.Count; i++) {\n            double\
    \ strength = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n\
    \                if (char.IsUpper(extensions[i][j])) {\n                    strength\
    \ += 1;\n                } else {\n                    strength -= 1;\n      \
    \          }\n            }\n            if (strength > strongest_strength) {\n\
    \                strongest_strength = strength;\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n        return class_name + \".\"\
    \ + strongest_extension;", "        int maxStrength = int.MinValue;\n        string\
    \ strongestExtension = string.Empty;\n        foreach (string extension in extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            foreach (char\
    \ c in extension) {\n                if (char.IsUpper(c)) {\n                \
    \    cap++;\n                } else {\n                    sm++;\n           \
    \     }\n            }\n            int strength = cap - sm;\n            if (strength\
    \ > maxStrength) {\n                maxStrength = strength;\n                strongestExtension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongestExtension;", "        if (extensions.Count == 0)\n            return\
    \ class_name;\n        var extensions_strengths = extensions.Select(ext => {\n\
    \            var cap = ext.Count(ch => ch.IsUpper());\n            var sm = ext.Count(ch\
    \ => ch.IsLower());\n            return (double)cap / sm;\n        });\n     \
    \   var index = extensions_strengths.IndexOf(extensions_strengths.Max());\n  \
    \      return $\"{class_name}.{extensions[index]}\";", "        string strongest_extension\
    \ = extensions[0];\n        float strength = 0.0f;\n        for (int i = 0; i\
    \ < extensions.Count; i++) {\n            float extension_strength = 0.0f;\n \
    \           for (int j = 0; j < extensions[i].Length; j++) {\n               \
    \ if (Char.IsUpper(extensions[i][j])) {\n                    extension_strength\
    \ += 1.0f;\n                } else {\n                    extension_strength -=\
    \ 1.0f;\n                }\n            }\n            extension_strength /= extensions[i].Length;\n\
    \            if (extension_strength > strength) {\n                strength =\
    \ extension_strength;\n                strongest_extension = extensions[i];\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        //return class_name + \".\" + extensions[0];\n        string best = \"\"\
    ;\n        int score = -10000000;\n        foreach (string s in extensions) {\n\
    \            int sscore = 0;\n            foreach (char c in s) {\n          \
    \      if (c >= 'A' && c <= 'Z') {\n                    sscore++;\n          \
    \      } else if (c >= 'a' && c <= 'z') {\n                    sscore--;\n   \
    \             }\n            }\n            if (sscore > score) {\n          \
    \      score = sscore;\n                best = s;\n            }\n        }\n\
    \        return class_name + \".\" + best;", "        string strongest_extension\
    \ = \"\";\n        float strength = -1;\n        foreach (string ext in extensions)\
    \ {\n            float curr_strength = (float)ext.Where(char.IsUpper).Count()\
    \ - (float)ext.Where(char.IsLower).Count();\n            if (curr_strength > strength)\
    \ {\n                strength = curr_strength;\n                strongest_extension\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        int best_extension_index = 0;\n        float best_strength = -1;\n    \
    \    float strength;\n        int cap_count;\n        int sm_count;\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            cap_count = 0;\n     \
    \       sm_count = 0;\n            for (int j = 0; j < extensions[i].Length; j++)\
    \ {\n                if (char.IsUpper(extensions[i][j])) {\n                 \
    \   cap_count++;\n                } else {\n                    sm_count++;\n\
    \                }\n            }\n            strength = (float)cap_count / (float)sm_count;\n\
    \            if (strength > best_strength) {\n                best_strength =\
    \ strength;\n                best_extension_index = i;\n            }\n      \
    \  }\n        return class_name + \".\" + extensions[best_extension_index];",
  "        int index = 0;\n        float strength = 0;\n        for (int i = 0; i\
    \ < extensions.Count; i++) {\n            int caps = 0;\n            int sm =\
    \ 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n         \
    \       if (Char.IsUpper(extensions[i][j])) {\n                    caps++;\n \
    \               } else {\n                    sm++;\n                }\n     \
    \       }\n            float new_strength = (float)caps - (float)sm;\n       \
    \     if (new_strength > strength) {\n                strength = new_strength;\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", '        throw new NotImplementedException();',
  "        var ext_strength = extensions.Select(ext => Tuple.Create(ext, ext.Count(c\
    \ => char.IsUpper(c)) - ext.Count(c => char.IsLower(c)))).ToArray();\n       \
    \ var max_strength = ext_strength.Max(e => e.Item2);\n        var strongest_ext\
    \ = ext_strength.Where(e => e.Item2 == max_strength).OrderBy(e => e.Item1).First();\n\
    \        return $\"{class_name}.{strongest_ext.Item1}\";", "        // TODO\n\
    \        return null;", "        // Write your code here\n        throw new NotImplementedException(\"\
    Waiting to be implemented.\");", "        // your code here\n        int strength\
    \ = 0;\n        string name = \"\";\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            string e = extensions[i];\n            int caps = 0;\n \
    \           int small = 0;\n            for (int j = 0; j < e.Length; j++) {\n\
    \                if (char.IsUpper(e[j])) {\n                    caps++;\n    \
    \            } else {\n                    small++;\n                }\n     \
    \       }\n            int s = caps - small;\n            if (s > strength) {\n\
    \                strength = s;\n                name = e;\n            }\n   \
    \     }\n        string result = class_name + \".\" + name;\n        return result;",
  "        // your code here\n        var extension = \"\";\n        var strength\
    \ = 0.0;\n        for (var i = 0; i < extensions.Count; i++) {\n            var\
    \ str = extensions[i];\n            var cap = 0;\n            var sm = 0;\n  \
    \          for (var j = 0; j < str.Length; j++) {\n                if (str[j]\
    \ >= 'A' && str[j] <= 'Z') {\n                    cap++;\n                } else\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ var new_strength = cap - sm;\n            if (new_strength > strength) {\n \
    \               strength = new_strength;\n                extension = str;\n \
    \           }\n        }\n        return class_name + \".\" + extension;", " \
    \       return class_name + \".\" + extensions.Aggregate((x, y) => {\n       \
    \     var strength1 = Strength(x);\n            var strength2 = Strength(y);\n\
    \            if (strength1 < strength2) {\n                return y;\n       \
    \     } else if (strength1 > strength2) {\n                return x;\n       \
    \     } else {\n                return x;\n            }\n        });", "    \
    \    int strong = 0;\n        string ext = \"\";\n        foreach (string s in\
    \ extensions) {\n            int cp = 0;\n            int cs = 0;\n          \
    \  for (int i = 0; i < s.Length; i++) {\n                if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n                    cp++;\n                } else {\n           \
    \         cs++;\n                }\n            }\n            if (cp - cs > strong)\
    \ {\n                strong = cp - cs;\n                ext = s;\n           \
    \ }\n        }\n        return class_name + \".\" + ext;", "        //Your code\
    \ goes here\n        return null;", "        var extension = extensions.Select(s\
    \ => new {extension_name = s, strength = s.Where(c => char.IsUpper(c)).Count()\
    \ - s.Where(c => char.IsLower(c)).Count() }).OrderByDescending(e => e.strength).First();\n\
    \        return class_name + \".\" + extension.extension_name;", "        // REPLACE\
    \ THE BODY OF THIS METHOD WITH YOUR OWN IMPLEMENTATION\n        // TODO: Implement\
    \ solution\n        if (extensions.Count == 0) {\n            return class_name;\n\
    \        }\n        var maxStrength = 0.0;\n        var maxStrengthExtension =\
    \ \"\";\n        foreach (var extension in extensions) {\n            var strength\
    \ = CalcStrength(extension);\n            if (strength > maxStrength) {\n    \
    \            maxStrength = strength;\n                maxStrengthExtension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + maxStrengthExtension;",
  "        float max = 0;\n        string res = \"\";\n        foreach (string i in\
    \ extensions) {\n            int low = 0;\n            int cap = 0;\n        \
    \    foreach (char c in i) {\n                if (char.IsLower(c)) {\n       \
    \             low++;\n                } else {\n                    cap++;\n \
    \               }\n            }\n            float ratio = (float)cap / (float)low;\n\
    \            if (ratio > max) {\n                max = ratio;\n              \
    \  res = i;\n            }\n        }\n        return class_name + \".\" + res;",
  "        var map = new Dictionary<double, string>();\n        foreach (var ext in\
    \ extensions) {\n            var num = ext.Count(char.IsUpper) - ext.Count(char.IsLower);\n\
    \            if (!map.ContainsKey(num)) {\n                map.Add(num, ext);\n\
    \            }\n        }\n        var x = map.Keys.Max();\n        return $\"\
    {class_name}.{map[x]}\";", "        double lowest = 1.0;\n        int index =\
    \ 0;\n        for (int i = 0; i < extensions.Count; i++) {\n            int upper\
    \ = extensions[i].Count(x => char.IsUpper(x));\n            int lower = extensions[i].Count(x\
    \ => char.IsLower(x));\n            double value = (double)upper / (double)lower;\n\
    \            if (value < lowest) {\n                lowest = value;\n        \
    \        index = i;\n            }\n        }\n        return class_name + \"\
    .\" + extensions[index];", "        int maxstrength = 0;\n        string result\
    \ = \"\";\n        int n = extensions.Count;\n        int[] strength = new int[n];\n\
    \        for (int i = 0; i < n; i++) {\n            string ext = extensions[i];\n\
    \            int x = 0;\n            int y = 0;\n            foreach (char c in\
    \ ext) {\n                if (c.ToString() == c.ToString().ToUpper()) {\n    \
    \                x++;\n                } else {\n                    y++;\n  \
    \              }\n            }\n            strength[i] = x - y;\n          \
    \  if (strength[i] > maxstrength) {\n                maxstrength = strength[i];\n\
    \                result = class_name + \".\" + ext;\n            }\n        }\n\
    \        return result;", "        double strongestStrength = -99999;\n      \
    \  string strongestExtension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            double strength = (double)extension.Where(x => char.IsUpper(x)).Count()\
    \ - (double)extension.Where(x => char.IsLower(x)).Count();\n            if (strength\
    \ > strongestStrength) {\n                strongestStrength = strength;\n    \
    \            strongestExtension = extension;\n            }\n        }\n     \
    \   return class_name + \".\" + strongestExtension;", "        string strongest_extension\
    \ = extensions[0];\n        int strongest_strength = -100;\n        foreach (string\
    \ extension in extensions) {\n            int strength = ExtensionStrength(extension);\n\
    \            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return $\"{class_name}.{strongest_extension}\";", "      \
    \  string extension = \"\";\n        double strength = 0;\n        foreach (string\
    \ s in extensions) {\n            double temp_strength = CalculateStrength(s);\n\
    \            if (temp_strength > strength) {\n                strength = temp_strength;\n\
    \                extension = s;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "        string[] arr = new string[extensions.Count];\n\
    \        int[] array = new int[extensions.Count];\n        for (int i = 0; i <\
    \ extensions.Count; i++) {\n            arr[i] = extensions[i];\n            array[i]\
    \ = 0;\n        }\n        for (int i = 0; i < extensions.Count; i++) {\n    \
    \        int length = extensions[i].Length;\n            int count_upper = 0;\n\
    \            int count_lower = 0;\n            for (int j = 0; j < length; j++)\
    \ {\n                if (Char.IsUpper(extensions[i][j])) {\n                 \
    \   count_upper++;\n                }\n                else {\n              \
    \      count_lower++;\n                }\n            }\n            array[i]\
    \ = count_upper - count_lower;\n        }\n        int index = Array.IndexOf(array,\
    \ array.Max());\n        class_name = class_name + \".\" + arr[index];\n     \
    \   return class_name;", "        string strongest = \"\";\n        double strength\
    \ = Double.MinValue;\n        foreach (string extension in extensions) {\n   \
    \         double local_strength = 0;\n            foreach (char c in extension)\
    \ {\n                if (Char.IsUpper(c)) {\n                    local_strength\
    \ += 1;\n                } else {\n                    local_strength -= 1;\n\
    \                }\n            }\n            if (local_strength > strength)\
    \ {\n                strength = local_strength;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       var highest = 0.0;\n        var strongest = \"\";\n        foreach (var\
    \ e in extensions) {\n            var capitals = e.Count(c => c >= 'A' && c <=\
    \ 'Z');\n            var smalls = e.Count(c => c >= 'a' && c <= 'z');\n      \
    \      var strength = capitals - smalls;\n            if (strength > highest)\
    \ {\n                highest = strength;\n                strongest = e;\n   \
    \         }\n        }\n        return class_name + \".\" + strongest;", "   \
    \     // insert code here\n        return \"\";", '        return "";', "    \
    \    var strong_extension = extensions.OrderByDescending(ext => CountUpperCase(ext)\
    \ - CountLowerCase(ext)).First();\n        return $\"{class_name}.{strong_extension}\"\
    ;", "        if (extensions.Count == 0) {\n            return class_name;\n  \
    \      }\n        int cap = 0;\n        int sm = 0;\n        string best_name\
    \ = \"\";\n        float best_strength = 0;\n        foreach (string s in extensions)\
    \ {\n            sm = 0;\n            cap = 0;\n            foreach (char c in\
    \ s) {\n                if (char.IsUpper(c)) {\n                    cap += 1;\n\
    \                } else {\n                    sm += 1;\n                }\n \
    \           }\n            float strength = cap - sm;\n            if (strength\
    \ > best_strength) {\n                best_strength = strength;\n            \
    \    best_name = s;\n            }\n        }\n        return class_name + \"\
    .\" + best_name;", "        var ret = class_name;\n        int strong = -100;\n\
    \        foreach (var extension in extensions) {\n            var str = strength(extension);\n\
    \            if (str > strong) {\n                strong = str;\n            \
    \    ret = string.Format(\"{0}.{1}\", class_name, extension);\n            }\n\
    \        }\n        return ret;", '        return class_name + "." + string.Join("",
    extensions);', "        // >>> print(StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"}))))\n        // my_class.AA\n\
    \        int max = 0;\n        int max_i = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            int cap = 0;\n            int small = 0;\n            foreach\
    \ (char c in extensions[i]) {\n                if (c >= 'A' && c <= 'Z') {\n \
    \                   cap++;\n                } else if (c >= 'a' && c <= 'z') {\n\
    \                    small++;\n                }\n            }\n            int\
    \ strength = cap - small;\n            if (strength > max) {\n               \
    \ max = strength;\n                max_i = i;\n            }\n        }\n    \
    \    return class_name + \".\" + extensions[max_i];", "        int cnt = 0;\n\
    \        int max = 0;\n        int ind = 0;\n        int found = 0;\n        int\
    \ max_ind = 0;\n        string answer = \"\";\n        while (found == 0) {\n\
    \            while (cnt < extensions.Count) {\n                foreach (char letter\
    \ in extensions[cnt]) {\n                    if (Char.IsUpper(letter)) {\n   \
    \                     max += 1;\n                    }\n                    else\
    \ if (Char.IsLower(letter)) {\n                        max -= 1;\n           \
    \         }\n                }\n                if (max > max_ind) {\n       \
    \             max_ind = max;\n                    ind = cnt;\n               \
    \ }\n                cnt += 1;\n                max = 0;\n            }\n    \
    \        found = 1;\n        }\n        answer = class_name + \".\" + extensions[ind];\n\
    \        return answer;", "        int strongest_extension_index = 0;\n      \
    \  float strongest_extension_value = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            float strength = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_extension_value) {\n                strongest_extension_value =\
    \ strength;\n                strongest_extension_index = i;\n            }\n \
    \       }\n        return class_name + \".\" + extensions[strongest_extension_index];",
  "        var start = class_name + \".\";\n        extensions.Add(start);\n     \
    \   extensions.Sort();\n        var strongest = extensions[extensions.Count -\
    \ 1];\n        return strongest;", "        string r = extensions[0];\n      \
    \  float c = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n      \
    \      float c1 = extension_strength(extensions[i]);\n            if (c1 > c)\
    \ {\n                c = c1;\n                r = extensions[i];\n           \
    \ }\n        }\n        return class_name + \".\" + r;", "        int CAP = 0;\n\
    \        int SM = 0;\n        int maxStrength = 0;\n        int strength = 0;\n\
    \        string chosen_extension = \"\";\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            for (int j = 0; j < extensions[i].Length; j++) {\n     \
    \           if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n      \
    \              CAP++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    SM++;\n          \
    \      }\n            }\n            strength = CAP - SM;\n            if (strength\
    \ > maxStrength) {\n                maxStrength = strength;\n                chosen_extension\
    \ = extensions[i];\n            }\n            CAP = 0;\n            SM = 0;\n\
    \        }\n        return class_name + \".\" + chosen_extension;", "        string\
    \ s = class_name;\n        List<string> ext = extensions;\n        int strongest\
    \ = 0;\n        int strength = 0;\n        int ind = 0;\n        string s2 = \"\
    \";\n        //The list of extensions is traversed and the strength of each\n\
    \        //extension is calculated and stored in the strongest variable\n    \
    \    //if the strength is greater than the previous calculated strength.\n   \
    \     //The index of the strongest extension is stored in the ind variable.\n\
    \        for (int i = 0; i < ext.Count; i++) {\n            string x = ext[i];\n\
    \            int letters = 0;\n            int uppercase = 0;\n            int\
    \ lowercase = 0;\n            for (int j = 0; j < x.Length; j++) {\n         \
    \       char y = x[j];\n                if (Char.IsLetter(y)) {\n            \
    \        letters++;\n                    if (Char.IsUpper(y)) {\n            \
    \            uppercase++;\n                    }\n                    else {\n\
    \                        lowercase++;\n                    }\n               \
    \ }\n            }\n            strength = uppercase - lowercase;\n          \
    \  if (strength > strongest) {\n                strongest = strength;\n      \
    \          ind = i;\n            }\n        }\n        //The index of the strongest\
    \ extension is used to get the string\n        //of the strongest extension.\n\
    \        s2 = ext[ind];\n        return s + \".\" + s2;", "        var s = new\
    \ StringBuilder();\n        var current_cap = 0;\n        var current_sm = 0;\n\
    \        var current_pos = 0;\n        var cap = 0;\n        var sm = 0;\n   \
    \     var pos = 0;\n        while (pos < extensions.Count) {\n            cap\
    \ = 0;\n            sm = 0;\n            foreach (var c in extensions[pos]) {\n\
    \                if (char.IsUpper(c)) {\n                    cap++;\n        \
    \        } else {\n                    sm++;\n                }\n            }\n\
    \            if (cap - sm > current_cap - current_sm) {\n                current_cap\
    \ = cap;\n                current_sm = sm;\n                current_pos = pos;\n\
    \            }\n            pos++;\n        }\n        s.Append(class_name).Append(\"\
    .\").Append(extensions[current_pos]);\n        return s.ToString();", "      \
    \  double max = 0;\n        string res = class_name;\n        foreach (string\
    \ s in extensions) {\n            double s_strength = calcStrength(s);\n     \
    \       if (s_strength > max) {\n                max = s_strength;\n         \
    \       res = class_name + \".\" + s;\n            }\n        }\n        return\
    \ res;", "        var strongest = extensions[0];\n        var strongest_strength\
    \ = ComputeStrength(strongest);\n        for (int i = 1; i < extensions.Count;\
    \ i++) {\n            var strength = ComputeStrength(extensions[i]);\n       \
    \     if (strength > strongest_strength) {\n                strongest = extensions[i];\n\
    \                strongest_strength = strength;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest;", "        string best_extension\
    \ = extensions[0];\n        int max_diff = best_extension.Count(char.IsUpper)\
    \ - best_extension.Count(char.IsLower);\n        for (int i = 1; i < extensions.Count;\
    \ i++) {\n            int diff = extensions[i].Count(char.IsUpper) - extensions[i].Count(char.IsLower);\n\
    \            if (diff > max_diff) {\n                max_diff = diff;\n      \
    \          best_extension = extensions[i];\n            }\n        }\n       \
    \ return string.Format(\"{0}.{1}\", class_name, best_extension);", "        int\
    \ strength = -1;\n        string strongest = \"\";\n        foreach (string ext\
    \ in extensions) {\n            int tempStrength = 0;\n            for (int i\
    \ = 0; i < ext.Length; i++) {\n                if (char.IsUpper(ext[i])) {\n \
    \                   tempStrength++;\n                } else {\n              \
    \      tempStrength--;\n                }\n            }\n            if (tempStrength\
    \ > strength) {\n                strength = tempStrength;\n                strongest\
    \ = ext;\n            }\n        }\n        return string.Format(\"{0}.{1}\",\
    \ class_name, strongest);", "        var strongest = new Tuple<string, double>(\"\
    \", 0);\n        foreach (var ext in extensions) {\n            var strength =\
    \ \n                (ext.Count(char.IsUpper) - ext.Count(char.IsLower)) / (double)ext.Length;\n\
    \            if (strength > strongest.Item2) {\n                strongest = new\
    \ Tuple<string, double>(ext, strength);\n            }\n        }\n        return\
    \ class_name + \".\" + strongest.Item1;", "        // Implement your code here\n\
    \        throw new NotImplementedException();", "        int max_strength = 0;\n\
    \        int best_index = 0;\n        for (int i = 0; i < extensions.Count; i++)\
    \ {\n            int cur_strength = extensions[i].Count(char.IsUpper) - extensions[i].Count(char.IsLower);\n\
    \            if (cur_strength > max_strength) {\n                max_strength\
    \ = cur_strength;\n                best_index = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions[best_index];", '        return
    class_name + "." + extensions[extensions.Select((s, i) => new Tuple<string, int>(s,
    i)).Max(t => Math.Abs(t.Item1.Count(c => char.IsUpper(c)) - t.Item1.Count(c =>
    char.IsLower(c)))).Item2];', "        // your code here\n        string strongest\
    \ = \"\";\n        double strength = 0;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(char.IsUpper);\n      \
    \      int sm = extension.Count(char.IsLower);\n            if (cap - sm > strength)\
    \ {\n                strength = cap - sm;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       if (extensions.Count == 0) {\n            return class_name;\n       \
    \ }\n        string strongest = extensions[0];\n        int high_strength = 0;\n\
    \        int strength = 0;\n        foreach (string extension in extensions) {\n\
    \            strength = 0;\n            foreach (char letter in extension) {\n\
    \                if (Char.IsUpper(letter)) {\n                    strength++;\n\
    \                } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength > high_strength) {\n                high_strength\
    \ = strength;\n                strongest = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest;", "        // TODO: Implement\
    \ your solution here\n        return \"\";", '        throw new NotImplementedException();',
  "        string strongest_extension = \"\";\n        double strongest_extension_strength\
    \ = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n            int\
    \ num_uppercase = extensions[i].Count(c => char.IsUpper(c));\n            int\
    \ num_lowercase = extensions[i].Count(c => char.IsLower(c));\n            double\
    \ strength = (double)num_uppercase - (double)num_lowercase;\n            if (strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength;\n                strongest_extension = extensions[i];\n        \
    \    }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        int extension_strength = 0;\n        string strongest_extension = \"\"\
    ;\n        foreach (string extension in extensions) {\n            int extension_uppercase\
    \ = 0;\n            int extension_lowercase = 0;\n            foreach (char c\
    \ in extension) {\n                if (Char.IsUpper(c)) {\n                  \
    \  extension_uppercase++;\n                } else {\n                    extension_lowercase++;\n\
    \                }\n            }\n            int extension_strength_curr = extension_uppercase\
    \ - extension_lowercase;\n            if (extension_strength_curr > extension_strength)\
    \ {\n                extension_strength = extension_strength_curr;\n         \
    \       strongest_extension = extension;\n            }\n        }\n        string\
    \ result = class_name + \".\" + strongest_extension;\n        return result;",
  "        string cls = class_name;\n        int max = 0;\n        foreach (string\
    \ ext in extensions) {\n            int lower = ext.Count(char.IsLower);\n   \
    \         int upper = ext.Count(char.IsUpper);\n            if (upper - lower\
    \ > max) {\n                max = upper - lower;\n                cls = class_name\
    \ + \".\" + ext;\n            }\n        }\n        return cls;", "        var\
    \ strongest = extensions.Select(ext => new {\n            Extension = ext,\n \
    \           Strength = UpperCaseLetters(ext) - LowerCaseLetters(ext)\n       \
    \ }).Aggregate((s1, s2) => s1.Strength >= s2.Strength ? s1 : s2);\n        return\
    \ class_name + \".\" + strongest.Extension;", "        string result = null;\n\
    \        double strength = -1;\n        foreach (string extension in extensions)\
    \ {\n            int caps = 0;\n            int smalls = 0;\n            foreach\
    \ (char c in extension) {\n                if (Char.IsUpper(c)) {\n          \
    \          caps++;\n                } else {\n                    smalls++;\n\
    \                }\n            }\n            double extension_strength = caps\
    \ - smalls;\n            if (extension_strength > strength) {\n              \
    \  strength = extension_strength;\n                result = class_name + \".\"\
    \ + extension;\n            }\n        }\n        return result;", "        if\
    \ (extensions.Count == 0)\n            return class_name;\n        int cap_count\
    \ = 0;\n        int small_count = 0;\n        string strongest_extension = extensions[0];\n\
    \        foreach (var ext in extensions) {\n            cap_count = 0;\n     \
    \       small_count = 0;\n            foreach (var ch in ext) {\n            \
    \    if (char.IsUpper(ch))\n                    cap_count++;\n               \
    \ else\n                    small_count++;\n            }\n            if (cap_count\
    \ > small_count) {\n                if (cap_count > strong_extension_count) {\n\
    \                    strongest_extension = ext;\n                    strong_extension_count\
    \ = cap_count;\n                }\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        int strong = 0;\n        string str\
    \ = \"\";\n        foreach (string s in extensions) {\n            int l = 0;\n\
    \            int r = 0;\n            foreach (char c in s) {\n               \
    \ if (char.IsUpper(c)) {\n                    r++;\n                } else {\n\
    \                    l++;\n                }\n            }\n            if (r\
    \ - l > strong) {\n                strong = r - l;\n                str = s;\n\
    \            }\n        }\n        return class_name + \".\" + str;", "      \
    \  // Write your code here!\n        Debug.Assert(true);\n        return \"\";",
  '        return "";', "        int maxStrength = 0;\n        string strongestExtension\
    \ = \"\";\n        // Your code goes here.\n        foreach (string ext in extensions)\
    \ {\n            int caps = 0;\n            int sm = 0;\n            foreach (char\
    \ letter in ext) {\n                if (char.IsUpper(letter)) {\n            \
    \        caps++;\n                } else {\n                    sm++;\n      \
    \          }\n            }\n            int strength = caps - sm;\n         \
    \   if (strength > maxStrength) {\n                maxStrength = strength;\n \
    \               strongestExtension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + strongestExtension;", "        string strongest = \"\"\
    ;\n        double strongest_strength = 0;\n        foreach (string ext in extensions)\
    \ {\n            double uppercase = 0;\n            double lowercase = 0;\n  \
    \          foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n\
    \                    uppercase++;\n                } else {\n                \
    \    lowercase++;\n                }\n            }\n            double strength\
    \ = uppercase - lowercase;\n            if (strength > strongest_strength) {\n\
    \                strongest = ext;\n                strongest_strength = strength;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       string strongest = class_name;\n        double strongestStrength = 0;\n\
    \        foreach (string s in extensions) {\n            double upper = 0;\n \
    \           double lower = 0;\n            foreach (char c in s) {\n         \
    \       if (char.IsUpper(c)) {\n                    upper++;\n               \
    \ } else {\n                    lower++;\n                }\n            }\n \
    \           double strength = upper - lower;\n            if (strength > strongestStrength)\
    \ {\n                strongestStrength = strength;\n                strongest\
    \ = class_name + \".\" + s;\n            }\n        }\n        return strongest;",
  "        var strongest_extension = extensions[0];\n        float strength = 0.0f;\n\
    \        float new_strength = 0.0f;\n        foreach (var ext in extensions) {\n\
    \            strength = 0.0f;\n            for (int i = 0; i < ext.Length; i++)\
    \ {\n                if (Char.IsUpper(ext[i])) {\n                    strength\
    \ += 1.0f;\n                } else {\n                    strength -= 1.0f;\n\
    \                }\n            }\n            new_strength = strength;\n    \
    \        if (new_strength > strength) {\n                strength = new_strength;\n\
    \                strongest_extension = ext;\n            }\n        }\n      \
    \  return $\"{class_name}.{strongest_extension}\";", "        // Your code here\n\
    \        return \"\";", "        float strongest_extension_strength = float.MinValue;\n\
    \        string strongest_extension_name = \"\";\n        int strongest_extension_name_index\
    \ = 0;\n        foreach (string extension in extensions) {\n            float\
    \ extension_strength = \n            (float)extension.Where(char.IsUpper).Count()\
    \ - \n            (float)extension.Where(char.IsLower).Count();\n            if\
    \ (extension_strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension_name = extension;\n\
    \                strongest_extension_name_index = extensions.IndexOf(extension);\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension_name;",
  "        // Insert code here\n        return class_name + \".AA\";", "        //\
    \ Your code goes here!\n        return null;", "        // write your code here\n\
    \        int max_strength = -1;\n        string strongest_extension = \"\";\n\
    \        foreach (string extension in extensions) {\n            int uppercase_letters\
    \ = 0;\n            int lowercase_letters = 0;\n            for (int i = 0; i\
    \ < extension.Length; i++) {\n                if (char.IsUpper(extension[i]))\
    \ {\n                    uppercase_letters++;\n                } else {\n    \
    \                lowercase_letters++;\n                }\n            }\n    \
    \        int current_strength = uppercase_letters - lowercase_letters;\n     \
    \       if (current_strength > max_strength) {\n                max_strength =\
    \ current_strength;\n                strongest_extension = extension;\n      \
    \      }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        return class_name + \".\" + extensions.Aggregate(\"\", (acc, next) => {\n\
    \            float strength = 0;\n            for (int i = 0; i < next.Length;\
    \ i++) {\n                if (Char.IsUpper(next[i])) {\n                    strength\
    \ += 1;\n                } else {\n                    strength -= 1;\n      \
    \          }\n            }\n            return acc == \"\" || (strength >= 0\
    \ && strength > Strength(acc)) ? next : acc;\n        });", "        float max\
    \ = extensions.Max(x => (x.Count(c => char.IsUpper(c)) - x.Count(c => char.IsLower(c))));\n\
    \        return $\"{class_name}.{extensions.First(x => x.Count(c => char.IsUpper(c))\
    \ - x.Count(c => char.IsLower(c)) == max)}\";", "        var strongest = 0;\n\
    \        var strongest_index = 0;\n        for (var i = 0; i < extensions.Count;\
    \ i++) {\n            var ext = extensions[i];\n            var strength = 0;\n\
    \            for (var j = 0; j < ext.Length; j++) {\n                if (Char.IsUpper(ext[j]))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > strongest) {\n                strongest = strength;\n                strongest_index\
    \ = i;\n            }\n        }\n        return String.Format(\"{0}.{1}\", class_name,\
    \ extensions[strongest_index]);", "        // your code goes here\n        string\
    \ strongest = \"\";\n        float strength = -1.0f;\n        foreach (string\
    \ ext in extensions) {\n            float temp = (float)CalculateStrength(ext);\n\
    \            if (temp > strength) {\n                strength = temp;\n      \
    \          strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        string ext = \"\";\n        int x = 0;\n   \
    \     foreach (string s in extensions) {\n            if (s.Length > 0) {\n  \
    \              int y = 0;\n                for (int i = 0; i < s.Length; i++)\
    \ {\n                    if (Char.IsUpper(s[i])) {\n                        y++;\n\
    \                    }\n                }\n                int z = 0;\n      \
    \          for (int i = 0; i < s.Length; i++) {\n                    if (Char.IsLower(s[i]))\
    \ {\n                        z++;\n                    }\n                }\n\
    \                if (y - z > x) {\n                    x = y - z;\n          \
    \          ext = s;\n                }\n            }\n        }\n        return\
    \ class_name + \".\" + ext;", "        string strongest = \"\";\n        double\
    \ strength = 0;\n        foreach (string ext in extensions) {\n            int\
    \ CAP = 0;\n            int SM = 0;\n            foreach (char c in ext) {\n \
    \               if (char.IsUpper(c)) {\n                    CAP++;\n         \
    \       } else {\n                    SM++;\n                }\n            }\n\
    \            double new_strength = CAP - SM;\n            if (new_strength > strength)\
    \ {\n                strength = new_strength;\n                strongest = ext;\n\
    \            }\n        }\n        return string.Format(\"{0}.{1}\", class_name,\
    \ strongest);", "        string strongest = \"\";\n        var strength = -1f;\n\
    \        foreach (var extension in extensions) {\n            var s = 0;\n   \
    \         foreach (var c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    s++;\n                } else {\n                    s--;\n\
    \                }\n            }\n            if (s > strength) {\n         \
    \       strength = s;\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;", "        double max_strength\
    \ = -1;\n        string strongest_extension = \"\";\n        foreach (string ext\
    \ in extensions) {\n            int count_cap = 0;\n            int count_small\
    \ = 0;\n            foreach (char c in ext) {\n                if (c <= 'Z' &&\
    \ c >= 'A') {\n                    count_cap++;\n                } else if (c\
    \ <= 'z' && c >= 'a') {\n                    count_small++;\n                }\n\
    \            }\n            double strength = ((double)count_cap - (double)count_small);\n\
    \            if (strength >= max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = ext;\n            }\n        }\n      \
    \  return class_name + \".\" + strongest_extension;", "        int max_strength\
    \ = int.MinValue;\n        string strongest_extension = \"\";\n        foreach\
    \ (string s in extensions) {\n            int strength = 0;\n            foreach\
    \ (char c in s) {\n                if (char.IsUpper(c)) {\n                  \
    \  strength++;\n                } else {\n                    strength--;\n  \
    \              }\n            }\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest_extension\
    \ = s;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        float maxStrength = float.MinValue;\n        string maxExtension = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            float strength\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > maxStrength) {\n                maxStrength = strength;\n                maxExtension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ maxExtension;", "        // TODO: Implement this.\n        float max_strength\
    \ = -float.MaxValue;\n        string strongest_extension = null;\n        foreach\
    \ (string extension in extensions) {\n            float strength = Strength(extension);\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        int Max =\
    \ int.MinValue;\n        string strongest = \"\";\n        foreach (string i in\
    \ extensions) {\n            int cap = 0;\n            int sm = 0;\n         \
    \   foreach (char j in i) {\n                if (char.IsUpper(j)) {\n        \
    \            cap++;\n                } else {\n                    sm++;\n   \
    \             }\n            }\n            if (cap - sm > Max) {\n          \
    \      Max = cap - sm;\n                strongest = i;\n            }\n      \
    \  }\n        return class_name + \".\" + strongest;", "        return $\"{class_name}.{extensions.Select(ext\
    \ => (CAP: ext.Count(c => char.IsUpper(c)), SM: ext.Count(c => char.IsLower(c)),\
    \ ext))\n                                               .OrderByDescending(x =>\
    \ x.CAP - x.SM)\n                                               .ThenBy(x => x.ext)\n\
    \                                               .First().ext}\";", '        throw
    new NotImplementedException();', "        return class_name + \".\" + extensions.Select(ext\
    \ => new {ext, strenght = ext.Count(c => char.IsUpper(c)) - ext.Count(c => char.IsLower(c))})\n\
    \                                            .OrderByDescending(o => o.strenght)\n\
    \                                            .ThenBy(o => o.ext)\n           \
    \                                 .First().ext;", "        string strongest =\
    \ extensions[0];\n        double strength = ((double)strongest.Where(c => Char.IsUpper(c)).Count()\
    \ -\n                (double)strongest.Where(c => Char.IsLower(c)).Count()) /\
    \ (double)strongest.Length;\n        foreach (string ext in extensions) {\n  \
    \          double current = ((double)ext.Where(c => Char.IsUpper(c)).Count() -\n\
    \                (double)ext.Where(c => Char.IsLower(c)).Count()) / (double)ext.Length;\n\
    \            if (current > strength) {\n                strength = current;\n\
    \                strongest = ext;\n            }\n        }\n        return string.Format(\"\
    {0}.{1}\", class_name, strongest);", "        if (extensions.Count > 0) {\n  \
    \          int max = 0;\n            int max_index = 0;\n            for (int\
    \ i = 0; i < extensions.Count; i++) {\n                int caps = 0;\n       \
    \         int smalls = 0;\n                for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                    if (Char.IsUpper(extensions[i][j])) {\n        \
    \                caps++;\n                    } else {\n                     \
    \   smalls++;\n                    }\n                }\n                if (caps\
    \ - smalls > max) {\n                    max = caps - smalls;\n              \
    \      max_index = i;\n                }\n            }\n            return class_name\
    \ + \".\" + extensions[max_index];\n        } else {\n            return class_name;\n\
    \        }", "        // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n        // (\"\
    my_class.AA\")\n        string res = \"\";\n        int max = -3, cap = 0, sm\
    \ = 0;\n        foreach (string ext in extensions) {\n            // if (ext ==\
    \ \"Be\") {\n            //     Debug.WriteLine(ext);\n            // }\n    \
    \        cap = ext.Count(c => Char.IsUpper(c));\n            sm = ext.Count(c\
    \ => Char.IsLower(c));\n            // Debug.WriteLine(ext + \" = \" + cap + \"\
    \ - \" + sm);\n            if (cap - sm > max) {\n                max = cap -\
    \ sm;\n                res = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + res;", "        int max_upper = -1;\n        int max_lower = -1;\n\
    \        string max_str = \"\";\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            int upper = 0;\n            int lower = 0;\n           \
    \ string word = extensions[i];\n            for (int j = 0; j < word.Length; j++)\
    \ {\n                if (word[j] >= 'A' && word[j] <= 'Z') {\n               \
    \     upper++;\n                } else {\n                    lower++;\n     \
    \           }\n            }\n            int strength = upper - lower;\n    \
    \        if (strength > max_upper) {\n                max_upper = strength;\n\
    \                max_lower = lower;\n                max_str = word;\n       \
    \     } else if (strength == max_upper) {\n                if (lower < max_lower)\
    \ {\n                    max_lower = lower;\n                    max_str = word;\n\
    \                }\n            }\n        }\n        return class_name + \".\"\
    \ + max_str;", "        string name=\"\";\n        double cap=0, sm=0, max=0;\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            if (i == 0)\
    \ {\n                name = extensions[i];\n                max = Strength(extensions[i]);\n\
    \            }\n            else {\n                if (Strength(extensions[i])\
    \ > max) {\n                    name = extensions[i];\n                    max\
    \ = Strength(extensions[i]);\n                }\n            }\n        }\n  \
    \      return class_name + \".\" + name;", "        int best_strength = 0;\n \
    \       string best_extension = null;\n        foreach (string extension in extensions)\
    \ {\n            int cap = CountUpper(extension);\n            int sm = CountLower(extension);\n\
    \            int strength = cap - sm;\n            if (strength > best_strength)\
    \ {\n                best_strength = strength;\n                best_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ best_extension;", "        var strongest = extensions.Select(s => new { Name\
    \ = s, Strength = s.Count(c => char.IsUpper(c)) - s.Count(c => char.IsLower(c))\
    \ }).OrderByDescending(x => x.Strength).ThenBy(x => x.Name).First();\n       \
    \ return string.Format(\"{0}.{1}\", class_name, strongest.Name);", '        return
    class_name + "." + extensions[0];', "        string ext = extensions[0];\n   \
    \     int strength = 0;\n        int temp_strength = 0;\n        for (int i =\
    \ 0; i < extensions.Count; i++) {\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (char.IsUpper(extensions[i][j])) {\n            \
    \        temp_strength++;\n                }\n                else {\n       \
    \             temp_strength--;\n                }\n            }\n           \
    \ if (temp_strength > strength) {\n                strength = temp_strength;\n\
    \                ext = extensions[i];\n            }\n            temp_strength\
    \ = 0;\n        }\n        return $\"{class_name}.{ext}\";", "        int numUppercase\
    \ = 0;\n        int numLowercase = 0;\n        int maxStrength = 0;\n        string\
    \ strongestExtension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            // Calculate extension strength\n            numUppercase = extension.Where(c\
    \ => char.IsUpper(c)).Count();\n            numLowercase = extension.Where(c =>\
    \ char.IsLower(c)).Count();\n            if (numUppercase - numLowercase > maxStrength)\
    \ {\n                strongestExtension = extension;\n                maxStrength\
    \ = numUppercase - numLowercase;\n            }\n        }\n        string result\
    \ = class_name + \".\" + strongestExtension;\n        return result;", '        throw
    new NotImplementedException();', '        return "";', "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        string strongest = \"\"\
    ;\n        float strength = -1;\n        foreach (string ext in extensions) {\n\
    \            float s = CountCaps(ext) - CountSmalls(ext);\n            if (s >\
    \ strength) {\n                strength = s;\n                strongest = ext;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       int caps = 0;\n        int sm = 0;\n        int index = 0;\n        double\
    \ biggest = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n       \
    \     for (int j = 0; j < extensions[i].Length; j++) {\n                if (Char.IsUpper(extensions[i][j]))\
    \ {\n                    caps++;\n                } else {\n                 \
    \   sm++;\n                }\n            }\n            if (caps - sm > biggest)\
    \ {\n                biggest = caps - sm;\n                index = i;\n      \
    \      }\n            caps = 0;\n            sm = 0;\n        }\n        return\
    \ class_name + \".\" + extensions[index];", "        var bestStrength = 0;\n \
    \       var bestExtension = \"\";\n        foreach (var ext in extensions) {\n\
    \            var strength = GetStrength(ext);\n            if (strength > bestStrength)\
    \ {\n                bestStrength = strength;\n                bestExtension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + bestExtension;",
  "        string strongest_extension = \"\";\n        float max_strength = 0;\n \
    \       foreach (string extension in extensions) {\n            float strength\
    \ = 0;\n            foreach (char letter in extension) {\n                if (Char.IsUpper(letter))\n\
    \                    strength++;\n                else if (Char.IsLower(letter))\n\
    \                    strength--;\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        if (extensions.Count == 0)\n            return\
    \ class_name;\n        double[] strength = new double[extensions.Count];\n   \
    \     // find strengths of extensions\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = ExtensionStrength(extensions[i]);\n      \
    \  }\n        // find index of the strongest extension\n        int max_index\
    \ = 0;\n        for (int i = 1; i < extensions.Count; i++) {\n            if (strength[i]\
    \ > strength[max_index])\n                max_index = i;\n        }\n        return\
    \ class_name + \".\" + extensions[max_index];", '        return "";', "      \
    \  // your code goes here\n        if (extensions.Count == 0)\n            return\
    \ class_name;\n        double max = -1000;\n        int index = 0;\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            int upper = 0;\n     \
    \       int lower = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n\
    \                    upper++;\n                else\n                    lower++;\n\
    \            }\n            double strength = upper - lower;\n            if (strength\
    \ > max) {\n                max = strength;\n                index = i;\n    \
    \        }\n        }\n        return class_name + \".\" + extensions[index];",
  "        int max = int.MinValue;\n        int max_i = -1;\n        for (int i =\
    \ 0; i < extensions.Count; i++) {\n            int uppercase = extensions[i].Count(Char.IsUpper);\n\
    \            int lowercase = extensions[i].Count(Char.IsLower);\n            int\
    \ strength = uppercase - lowercase;\n            if (strength > max) {\n     \
    \           max = strength;\n                max_i = i;\n            }\n     \
    \   }\n        return class_name + \".\" + extensions[max_i];", '        return
    "";', "        var max = extensions.Max(e => char.IsUpper(e.First()) ? e.Count(c\
    \ => char.IsUpper(c)) - e.Count(c => char.IsLower(c)) : -1);\n        return $\"\
    {class_name}.{extensions.First(e => char.IsUpper(e.First()) ? e.Count(c => char.IsUpper(c))\
    \ - e.Count(c => char.IsLower(c)) == max : false)}\";", '        return class_name
    + "." + extensions.Select(ext => new { ext, stren = ext.Count(c => char.IsUpper(c))
    - ext.Count(c => char.IsLower(c)) }).Aggregate((a, b) => a.stren > b.stren ? a
    : b).ext;', "        int best_strength = 0;\n        string best_extension = \"\
    \";\n        foreach (string extension in extensions) {\n            int strength\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > best_strength) {\n                best_strength = strength;\n            \
    \    best_extension = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + best_extension;", "        double best_value = 0;\n        string\
    \ best_extension = \"\";\n        foreach (string e in extensions) {\n       \
    \     int cap = 0;\n            int sm = 0;\n            foreach (char c in e)\
    \ {\n                if (char.IsUpper(c)) cap++;\n                else sm++;\n\
    \            }\n            double value = (double)cap / (double)sm;\n       \
    \     if (value > best_value) {\n                best_value = value;\n       \
    \         best_extension = e;\n            }\n        }\n        return class_name\
    \ + \".\" + best_extension;", "        // Your code here\n        return \"\";",
  "        var strongest_strength = -1;\n        var strongest_extension = \"\";\n\
    \        foreach (var extension in extensions) {\n            var strength = 0;\n\
    \            foreach (var letter in extension) {\n                if (Char.IsUpper(letter))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;", "        // Your code\
    \ goes here\n        int[] strength = new int[extensions.Count];\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (Char.IsUpper(extensions[i][j])) {\n            \
    \        strength[i]++;\n                } else {\n                    strength[i]--;\n\
    \                }\n            }\n        }\n        int strongest = 0;\n   \
    \     for (int i = 1; i < strength.Length; i++) {\n            if (strength[i]\
    \ > strength[strongest]) {\n                strongest = i;\n            }\n  \
    \      }\n        return class_name + \".\" + extensions[strongest];", "     \
    \   // >>> YOUR CODE HERE\n        return \"\";", "        float maxStrength =\
    \ 0;\n        string ans = \"\";\n        foreach (string extension in extensions)\
    \ {\n            float strength = 0;\n            foreach (char c in extension)\
    \ {\n                if (c.ToString() == c.ToString().ToUpper()) {\n         \
    \           strength++;\n                } else {\n                    strength--;\n\
    \                }\n            }\n            if (strength > maxStrength) {\n\
    \                maxStrength = strength;\n                ans = extension;\n \
    \           }\n        }\n        return class_name + \".\" + ans;", "       \
    \ // your code here\n        string StrongestExtension = \"\";\n        double\
    \ strength = 0;\n        for (int i = 0; i < extensions.Count; i++)\n        {\n\
    \            int CAPS = 0;\n            int SMALL = 0;\n            for (int j\
    \ = 0; j < extensions[i].Length; j++)\n            {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z')\n                {\n                    CAPS++;\n\
    \                }\n                else\n                {\n                \
    \    SMALL++;\n                }\n            }\n            if (Math.Abs(CAPS\
    \ - SMALL) > strength)\n            {\n                strength = Math.Abs(CAPS\
    \ - SMALL);\n                StrongestExtension = extensions[i];\n           \
    \ }\n        }\n        return class_name + \".\" + StrongestExtension;", "  \
    \      int max_strength = -2;\n        string strongest_extension = \"\";\n  \
    \      foreach (string extension in extensions) {\n            int caps = 0;\n\
    \            int sm = 0;\n            foreach (char c in extension) {\n      \
    \          if (char.IsUpper(c)) {\n                    caps++;\n             \
    \   } else {\n                    sm++;\n                }\n            }\n  \
    \          int strength = caps - sm;\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = -1;\n        string strongest\
    \ = \"\";\n        foreach (string s in extensions) {\n            int upper =\
    \ 0;\n            int lower = 0;\n            for (int i = 0; i < s.Length; i++)\
    \ {\n                if (char.IsUpper(s[i])) {\n                    upper++;\n\
    \                } else {\n                    lower++;\n                }\n \
    \           }\n            double curr_strength = (double)upper - (double)lower;\n\
    \            if (curr_strength > strength) {\n                strength = curr_strength;\n\
    \                strongest = s;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        int max = int.MinValue;\n        int current\
    \ = 0;\n        string strong = \"\";\n        foreach (string item in extensions)\
    \ {\n            current = FindStrength(item);\n            if (current > max)\
    \ {\n                max = current;\n                strong = item;\n        \
    \    }\n        }\n        return class_name + \".\" + strong;", "        var\
    \ ordered_extensions = extensions.OrderByDescending(ext => (new Regex(\"[A-Z]\"\
    ).Matches(ext).Count - new Regex(\"[a-z]\").Matches(ext).Count)).ThenBy(ext =>\
    \ extensions.IndexOf(ext));\n        return class_name + \".\" + ordered_extensions.First();",
  "        int topStrength = 0;\n        string topExtension = \"\";\n        foreach\
    \ (string ext in extensions) {\n            int strength = 0;\n            foreach\
    \ (char c in ext) {\n                if (Char.IsUpper(c)) {\n                \
    \    strength++;\n                } else {\n                    strength--;\n\
    \                }\n            }\n            if (strength > topStrength) {\n\
    \                topStrength = strength;\n                topExtension = ext;\n\
    \            }\n        }\n        return String.Format(\"{0}.{1}\", class_name,\
    \ topExtension);", "        // Algorithm: pick the strongest extension\n     \
    \   // count the number of uppercase and lowercase letters\n        // in the\
    \ extension name\n        // the extension with the greatest strength will\n \
    \       // be chosen\n        // the strength is given by the fraction CAP - SM\n\
    \        // where CAP is the number of uppercase letters\n        // and SM is\
    \ the number of lowercase letters\n        // in the extension name\n        //\
    \ if there are more extensions with the same\n        // strength, choose the\
    \ one that appears first\n        string best_extension = \"\";\n        double\
    \ best_strength = -1000.0;\n        double cap_count = 0.0;\n        double sm_count\
    \ = 0.0;\n        foreach (string extension in extensions) {\n            cap_count\
    \ = 0.0;\n            sm_count = 0.0;\n            foreach (char letter in extension)\
    \ {\n                if (Char.IsUpper(letter)) {\n                    cap_count++;\n\
    \                } else {\n                    sm_count++;\n                }\n\
    \            }\n            if ((cap_count - sm_count) > best_strength) {\n  \
    \              best_strength = cap_count - sm_count;\n                best_extension\
    \ = extension;\n            }\n        }\n        return String.Format(\"{0}.{1}\"\
    , class_name, best_extension);", "        int n = extensions.Count;\n        string\
    \ ans = class_name;\n        double stren = -1e12;\n        for (int i = 0; i\
    \ < n; i++) {\n            double cap = 0;\n            double sm = 0;\n     \
    \       for (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') cap++;\n                else sm++;\n    \
    \        }\n            if (cap - sm > stren) {\n                stren = cap -\
    \ sm;\n                ans = class_name + \".\" + extensions[i];\n           \
    \ }\n        }\n        return ans;", "        // Given a class name and a list\
    \ of extensions, find the strongest extension (CAP - SM)\n        string strongest_extension\
    \ = \"\";\n        float max_strength = 0.0f;\n        // For each extension,\
    \ check if it is stronger than the current strongest extension\n        foreach\
    \ (string extension in extensions) {\n            // Calculate the strength of\
    \ the extension:\n            // Count the number of CAPITAL letters\n       \
    \     int cap_count = 0;\n            for (int i = 0; i < extension.Length; i++)\
    \ {\n                if (char.IsUpper(extension[i])) cap_count++;\n          \
    \  }\n            // Count the number of lowercase letters\n            int sm_count\
    \ = 0;\n            for (int i = 0; i < extension.Length; i++) {\n           \
    \     if (char.IsLower(extension[i])) sm_count++;\n            }\n           \
    \ // Check the strength\n            float strength = (float)cap_count - (float)sm_count;\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        if (extensions.Count\
    \ == 0)\n            return class_name;\n        string best = extensions[0];\n\
    \        double bstrength = Strength(best);\n        foreach (string ext in extensions)\
    \ {\n            double strength = Strength(ext);\n            if (strength >\
    \ bstrength) {\n                best = ext;\n                bstrength = strength;\n\
    \            }\n        }\n        return class_name + \".\" + best;", "     \
    \   // Your code here.\n        double best_strength = 0;\n        string best_name\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ CAP = extension.Count(c => c >= 'A' && c <= 'Z');\n            int SM = extension.Count(c\
    \ => c >= 'a' && c <= 'z');\n            double strength = CAP - SM;\n       \
    \     if (strength >= best_strength) {\n                best_strength = strength;\n\
    \                best_name = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + best_name;", "        double maxStrength = -1.0;\n    \
    \    string bestExtension = \"\";\n        foreach (string ext in extensions)\
    \ {\n            double strength = (double)ext.Where(c => char.IsUpper(c)).Count()\
    \ - (double)ext.Where(c => char.IsLower(c)).Count();\n            if (strength\
    \ > maxStrength) {\n                maxStrength = strength;\n                bestExtension\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + bestExtension;",
  "        int cap = 0;\n        int sm = 0;\n        float ratio = 0;\n        string\
    \ strong = \"\";\n        float strongRatio = 0;\n        foreach (string ext\
    \ in extensions) {\n            cap = 0;\n            sm = 0;\n            foreach\
    \ (char c in ext) {\n                if (char.IsUpper(c)) {\n                \
    \    cap++;\n                } else {\n                    sm++;\n           \
    \     }\n            }\n            ratio = cap - sm;\n            if (ratio >\
    \ strongRatio) {\n                strongRatio = ratio;\n                strong\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strong;",
  "\t\tint strongest = 0;\n\t\tstring strongest_extension = \"\";\n\t\tforeach (string\
    \ ext in extensions) {\n\t\t\tint ext_strength = 0;\n\t\t\tforeach (char c in\
    \ ext) {\n\t\t\t\tif (Char.IsUpper(c)) {\n\t\t\t\t\text_strength++;\n\t\t\t\t\
    } else {\n\t\t\t\t\text_strength--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ext_strength\
    \ > strongest) {\n\t\t\t\tstrongest = ext_strength;\n\t\t\t\tstrongest_extension\
    \ = ext;\n\t\t\t}\n\t\t}\n\t\treturn class_name + \".\" + strongest_extension;",
  '        throw new NotImplementedException();', "        if (extensions.Count ==\
    \ 0)\n            return class_name;\n        string strongest = extensions[0];\n\
    \        int strongest_strength = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            int strenght = GetStrength(extensions[i]);\n           \
    \ if (strenght > strongest_strength) {\n                strongest = extensions[i];\n\
    \                strongest_strength = strenght;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest;", "        // TODO: implement as\
    \ you see fit\n        return null;", "        int max_diff = int.MinValue;\n\
    \        string strongest_extension = null;\n        foreach (string extension\
    \ in extensions) {\n            int diff = ExtensionStrength(extension);\n   \
    \         if (diff > max_diff) {\n                max_diff = diff;\n         \
    \       strongest_extension = extension;\n            }\n        }\n        if\
    \ (strongest_extension == null) {\n            return class_name;\n        }\n\
    \        return String.Format(\"{0}.{1}\", class_name, strongest_extension);",
  "        var res = extensions[0];\n        var maxStrength = 0.0;\n        foreach\
    \ (var ext in extensions) {\n            var strength = ext.Count(c => char.IsUpper(c))\
    \ - ext.Count(c => char.IsLower(c));\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                res = ext;\n   \
    \         }\n        }\n        return class_name + \".\" + res;", "        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use Console.WriteLine()\n        // Example:\n        // Console.WriteLine(\"\
    Hello world!\");\n        int cap = 0;\n        int sm = 0;\n        float tmp\
    \ = 0;\n        string result = \"\";\n        float max = 0;\n        foreach\
    \ (string i in extensions) {\n            foreach (char x in i) {\n          \
    \      if (Char.IsUpper(x)) {\n                    cap++;\n                }\n\
    \                else if (Char.IsLower(x)) {\n                    sm++;\n    \
    \            }\n            }\n            tmp = (float)cap - (float)sm;\n   \
    \         if (tmp > max) {\n                max = tmp;\n                result\
    \ = i;\n            }\n            cap = 0;\n            sm = 0;\n        }\n\
    \        Console.WriteLine(class_name + \".\" + result);\n        return class_name\
    \ + \".\" + result;", "        int i, strength, cap, sm, min_i;\n        string\
    \ min_ext;\n        // Base case\n        if (extensions.Count == 0) {\n     \
    \       return class_name;\n        }\n        // Initialize at first extension\n\
    \        cap = 0;\n        sm = 0;\n        for (i = 0; i < extensions[0].Length;\
    \ i++) {\n            if (Char.IsUpper(extensions[0][i])) {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   min_i = 0;\n        min_ext = extensions[0];\n        // Try all other extensions\n\
    \        for (i = 1; i < extensions.Count; i++) {\n            strength = 0;\n\
    \            for (int j = 0; j < extensions[i].Length; j++) {\n              \
    \  if (Char.IsUpper(extensions[i][j])) {\n                    strength++;\n  \
    \              } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength < cap - sm) {\n                min_i\
    \ = i;\n                min_ext = extensions[i];\n                cap = strength;\n\
    \                sm = -strength;\n            }\n        }\n        return StrongestExtension(class_name\
    \ + \".\" + min_ext, extensions.Take(min_i).Concat(extensions.Skip(min_i + 1)).ToList());",
  '        throw new NotImplementedException();', "        int strongest = -100;\n\
    \        string strongest_extension = \"\";\n        foreach (string s in extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            foreach (char\
    \ c in s) {\n                if (char.IsUpper(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            int strength = cap - sm;\n            if (strength > strongest)\
    \ {\n                strongest = strength;\n                strongest_extension\
    \ = s;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        if (extensions.Count == 0)\n            return class_name;\n        int\
    \ bestStrength = 0;\n        string strongestExtension = null;\n        foreach\
    \ (string extension in extensions) {\n            int strength = 0;\n        \
    \    for (int i = 0; i < extension.Length; i++) {\n                if (char.IsUpper(extension[i]))\n\
    \                    strength++;\n                else if (char.IsLower(extension[i]))\n\
    \                    strength--;\n            }\n            if (strength > bestStrength)\
    \ {\n                bestStrength = strength;\n                strongestExtension\
    \ = extension;\n            }\n        }\n        return string.Format(\"{0}.{1}\"\
    , class_name, strongestExtension);", "        // Your code here\n        var best\
    \ = extensions[0];\n        var best_strength = (double)num_caps(best) / num_small(best);\n\
    \        for (int i = 1; i < extensions.Count; i++) {\n            var strength\
    \ = (double)num_caps(extensions[i]) / num_small(extensions[i]);\n            if\
    \ (strength > best_strength) {\n                best = extensions[i];\n      \
    \          best_strength = strength;\n            }\n        }\n        return\
    \ class_name + \".\" + best;", "        string theOne = extensions[0];\n     \
    \   var best = new Tuple<double, string>(extensions[0].Count(char.IsUpper) - extensions[0].Count(char.IsLower),\
    \ extensions[0]);\n        for (int i = 1; i < extensions.Count; i++) {\n    \
    \        var cur = new Tuple<double, string>(extensions[i].Count(char.IsUpper)\
    \ - extensions[i].Count(char.IsLower), extensions[i]);\n            if (cur.Item1\
    \ > best.Item1) {\n                best = cur;\n            }\n        }\n   \
    \     return class_name + \".\" + best.Item2;", "        Debug.Assert(class_name.Length\
    \ > 0);\n        Debug.Assert(extensions.Count > 0);\n        foreach (string\
    \ ext in extensions) {\n            Debug.Assert(ext.Length > 0);\n        }\n\
    \        int cnt = extensions.Count;\n        int[] caps = new int[cnt];\n   \
    \     int[] smalls = new int[cnt];\n        for (int i = 0; i < cnt; i++) {\n\
    \            caps[i] = count_caps(extensions[i]);\n            smalls[i] = count_smalls(extensions[i]);\n\
    \        }\n        int[] strength = new int[cnt];\n        for (int i = 0; i\
    \ < cnt; i++) {\n            strength[i] = caps[i] - smalls[i];\n        }\n \
    \       int max = strength.Max();\n        int idx = strength.ToList().IndexOf(max);\n\
    \        return class_name + \".\" + extensions[idx];", "        // >>> Write\
    \ your code here <<<\n        int cap, sm, max_strength;\n        string extension,\
    \ max_extension;\n        max_strength = -10000;\n        max_extension = \"\"\
    ;\n        foreach (string ext in extensions) {\n            cap = 0;\n      \
    \      sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > max_strength)\
    \ {\n                max_strength = cap - sm;\n                max_extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + max_extension;",
  '        return "";', "        float max_stregth = 0.0f;\n        int max_stregth_index\
    \ = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n            float\
    \ current_stregth = 0.0f;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (Char.IsUpper(extensions[i][j])) {\n            \
    \        current_stregth += 1.0f;\n                } else {\n                \
    \    current_stregth -= 1.0f;\n                }\n            }\n            if\
    \ (current_stregth > max_stregth) {\n                max_stregth = current_stregth;\n\
    \                max_stregth_index = i;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions[max_stregth_index];", '        throw new NotImplementedException();',
  "        string result;\n        float max = -100;\n        string strongest = \"\
    \";\n        for (int i = 0; i < extensions.Count; i++) {\n            string\
    \ s = extensions[i];\n            float strength = -100;\n            int caps\
    \ = 0;\n            int lowers = 0;\n            for (int j = 0; j < s.Length;\
    \ j++) {\n                if (Char.IsUpper(s[j]))\n                    caps++;\n\
    \                else\n                    lowers++;\n            }\n        \
    \    strength = caps - lowers;\n            if (strength > max) {\n          \
    \      max = strength;\n                strongest = s;\n            }\n      \
    \  }\n        result = class_name + \".\" + strongest;\n        return result;",
  "        int best_extension_index = 0;\n        double best_extension_strength =\
    \ -double.MaxValue;\n        int best_extension_cap = 0;\n        int best_extension_sm\
    \ = 0;\n        double extension_strength = 0;\n        int current_extension_cap\
    \ = 0;\n        int current_extension_sm = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            current_extension_cap = 0;\n            current_extension_sm\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (char.IsUpper(extensions[i][j])) {\n                    current_extension_cap++;\n\
    \                } else {\n                    current_extension_sm++;\n     \
    \           }\n            }\n            extension_strength = current_extension_cap\
    \ - current_extension_sm;\n            if (extension_strength > best_extension_strength)\
    \ {\n                best_extension_strength = extension_strength;\n         \
    \       best_extension_index = i;\n                best_extension_cap = current_extension_cap;\n\
    \                best_extension_sm = current_extension_sm;\n            }\n  \
    \      }\n        return class_name + \".\" + extensions[best_extension_index];",
  "        double max_strength = 0;\n        string max_extension = \"\";\n      \
    \  foreach (string extension in extensions) {\n            double current_strength\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    current_strength += 1;\n                } else {\n  \
    \                  current_strength -= 1;\n                }\n            }\n\
    \            if (current_strength > max_strength) {\n                max_strength\
    \ = current_strength;\n                max_extension = extension;\n          \
    \  }\n        }\n        return class_name + \".\" + max_extension;", "      \
    \  // This is a stub. \n        return (\"\");", "        string strongest_extension\
    \ = null;\n        var strongest_ratio = 0.0;\n        foreach (var ext in extensions)\
    \ {\n            var caps = 0;\n            var lower = 0;\n            foreach\
    \ (var letter in ext) {\n                if (char.IsUpper(letter)) {\n       \
    \             caps++;\n                } else {\n                    lower++;\n\
    \                }\n            }\n            var ratio = caps - lower;\n   \
    \         if (ratio > strongest_ratio) {\n                strongest_ratio = ratio;\n\
    \                strongest_extension = ext;\n            }\n        }\n      \
    \  return class_name + \".\" + strongest_extension;", "        string result =\
    \ class_name;\n        double strength = 0;\n        foreach (string s in extensions)\
    \ {\n            double str = 0;\n            foreach (char c in s) {\n      \
    \          if (char.IsUpper(c)) {\n                    str++;\n              \
    \  } else {\n                    str--;\n                }\n            }\n  \
    \          if (Math.Abs(str) > strength) {\n                strength = Math.Abs(str);\n\
    \                result = class_name + \".\" + s;\n            }\n        }\n\
    \        return result;", "        // Insert code here\n        throw new NotImplementedException();",
  "        // >>> Your code here <<<\n        return class_name;", "        string\
    \ strongest = \"\";\n        double strongest_strength = 0;\n        foreach (string\
    \ extension in extensions) {\n            double current_strength = 0;\n     \
    \       for (int i = 0; i < extension.Length; i++) {\n                if (char.IsUpper(extension[i]))\n\
    \                    current_strength++;\n                else if (char.IsLower(extension[i]))\n\
    \                    current_strength--;\n            }\n            if (current_strength\
    \ > strongest_strength) {\n                strongest = extension;\n          \
    \      strongest_strength = current_strength;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest;", "        float strength = 0;\n \
    \       string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            float current_strength = GetStrength(extension);\n\
    \            if (current_strength > strength) {\n                strength = current_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        int max =\
    \ Int32.MinValue;\n        string result = class_name;\n        foreach (string\
    \ e in extensions) {\n            int caps = 0;\n            int smalls = 0;\n\
    \            foreach (char c in e) {\n                if (char.IsUpper(c))\n \
    \                   caps++;\n                else\n                    smalls++;\n\
    \            }\n            if (caps - smalls > max) {\n                max =\
    \ caps - smalls;\n                result = class_name + \".\" + e;\n         \
    \   }\n        }\n        return result;", "        List<string> classes = new\
    \ List<string>();\n        List<double> str = new List<double>();\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            string str1 = extensions[i];\n\
    \            double count1 = 0;\n            double count2 = 0;\n            for\
    \ (int j = 0; j < str1.Length; j++) {\n                if (char.IsUpper(str1[j]))\
    \ {\n                    count1++;\n                }\n                else if\
    \ (char.IsLower(str1[j])) {\n                    count2++;\n                }\n\
    \            }\n            str.Add(count1 - count2);\n            classes.Add(extensions[i]);\n\
    \        }\n        int max = 0;\n        for (int i = 0; i < str.Count; i++)\
    \ {\n            if (str[i] > str[max]) {\n                max = i;\n        \
    \    }\n        }\n        return class_name + \".\" + classes[max];", "     \
    \   // Your code goes here\n        var max = 0;\n        var max_str = \"\";\n\
    \        foreach (var extension in extensions) {\n            int uppercase_count\
    \ = 0;\n            int lowercase_count = 0;\n            foreach (var letter\
    \ in extension) {\n                if (Char.IsUpper(letter)) {\n             \
    \       uppercase_count++;\n                } else {\n                    lowercase_count++;\n\
    \                }\n            }\n            if (uppercase_count - lowercase_count\
    \ > max) {\n                max = uppercase_count - lowercase_count;\n       \
    \         max_str = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + max_str;", "        // Write your code here\n        return \"\";",
  "        string strongest_extension = \"\";\n        double strength = -99999;\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            double cur_strength\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            cur_strength++;\n                } else {\n                    cur_strength--;\n\
    \                }\n            }\n            if (cur_strength > strength) {\n\
    \                strength = cur_strength;\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n        return class_name + \".\"\
    \ + strongest_extension;", '        // your code here', "        var strongest\
    \ = extensions[0];\n        var strongest_strength = 0;\n        foreach (var\
    \ ext in extensions) {\n            var strength = ext.Count(c => Char.IsUpper(c))\
    \ - ext.Count(c => Char.IsLower(c));\n            if (strength > strongest_strength)\
    \ {\n                strongest = ext;\n                strongest_strength = strength;\n\
    \            }\n        }\n        return $\"{class_name}.{strongest}\";"]
stop_tokens:
- "\n    }\n"
