name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  })))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  })))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        // Write your code here.\n        var maxUniqueChars = 0;\n\
    \        var currentMaxChars = \"\";\n        foreach (var word in words) {\n\
    \            var uniqueChars = new HashSet<char>();\n            foreach (var\
    \ c in word) {\n                uniqueChars.Add(c);\n            }\n         \
    \   if (uniqueChars.Count > maxUniqueChars) {\n                maxUniqueChars\
    \ = uniqueChars.Count;\n                currentMaxChars = word;\n            }\n\
    \        }\n        return currentMaxChars;", "        string max = \"\";\n  \
    \      string word = \"\";\n        int count = 0;\n        int length = 0;\n\
    \        int max_length = 0;\n        int index = 0;\n        int max_index =\
    \ 0;\n        int[] letters = new int[26];\n        for (int i = 0; i < words.Count;\
    \ i++) {\n            word = words[i];\n            for (int j = 0; j < word.Length;\
    \ j++) {\n                index = (int)word[j] - (int)'a';\n                if\
    \ (letters[index] == 0) {\n                    letters[index] = 1;\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ > max_length) {\n                max_length = count;\n                max_index\
    \ = i;\n            }\n            else if (count == max_length) {\n         \
    \       if (String.Compare(word, words[max_index]) < 0) {\n                  \
    \  max_index = i;\n                }\n            }\n            count = 0;\n\
    \            letters = new int[26];\n        }\n        return words[max_index];",
  "        // Method 1:\n        // Dictionary to keep track of count of characters\
    \ in each string\n        Dictionary<string, int> dic = new Dictionary<string,\
    \ int>();\n        // This is the base case and it will hold the return string.\n\
    \        string returnString = words[0];\n        // Go through each string and\
    \ add it to the dictionary and count the\n        // number of unique characters\
    \ in each string\n        foreach (string s in words) {\n            // HashSet\
    \ is a set of items that can not have duplicates.\n            HashSet<char> hs\
    \ = new HashSet<char>();\n            foreach (char c in s) {\n              \
    \  hs.Add(c);\n            }\n            dic.Add(s, hs.Count);\n        }\n \
    \       // Go through each item in the dictionary.\n        // If the count is\
    \ greater than the previous max, set the current\n        // string as the max\
    \ and if the count is equal to the previous max\n        // then check the lexicographical\
    \ order and switch the string if it\n        // is less than the current string.\n\
    \        foreach (KeyValuePair<string, int> item in dic) {\n            if (item.Value\
    \ > dic[returnString]) {\n                returnString = item.Key;\n         \
    \   } else if (item.Value == dic[returnString]) {\n                if (item.Key.CompareTo(returnString)\
    \ < 0) {\n                    returnString = item.Key;\n                }\n  \
    \          }\n        }\n        return returnString;", "        string maxWord\
    \ = \"\";\n        int maxUnique = 0;\n        foreach (string word in words)\
    \ {\n            int unique = 0;\n            foreach (char c in word) {\n   \
    \             if (word.LastIndexOf(c) == word.IndexOf(c)) {\n                \
    \    unique++;\n                }\n            }\n            if (unique > maxUnique)\
    \ {\n                maxUnique = unique;\n                maxWord = word;\n  \
    \          }\n        }\n        return maxWord;", "        var orderedByUnique\
    \ = words.OrderByDescending(x => x.Distinct().Count());\n        return orderedByUnique.First();",
  "        // see if there are any words\n        if (words.Count == 0) {\n      \
    \      return null;\n        }\n\n        // find the words with the maximum number\
    \ of unique characters\n        int maxCount = 0;\n        foreach (string word\
    \ in words) {\n            HashSet<char> charSet = new HashSet<char>();\n    \
    \        foreach (char c in word) {\n                charSet.Add(c);\n       \
    \     }\n            maxCount = Math.Max(maxCount, charSet.Count);\n        }\n\
    \n        // if there are multiple candidates, then return the lexicographically\n\
    \        // smallest word\n        string maxWord = words[0];\n        foreach\
    \ (string word in words) {\n            HashSet<char> charSet = new HashSet<char>();\n\
    \            foreach (char c in word) {\n                charSet.Add(c);\n   \
    \         }\n            if (charSet.Count == maxCount && word.CompareTo(maxWord)\
    \ < 0) {\n                maxWord = word;\n            }\n        }\n\n      \
    \  return maxWord;", '        throw new NotImplementedException();', "       \
    \ // Your code goes here.\n        return \"\";", '        return words.Aggregate((a,
    b) => DistinctChars(a) > DistinctChars(b) ? a : b);', "        // Linq OrderByDescending\n\
    \        return words.GroupBy(x => x.Distinct().Count()).OrderByDescending(x =>\
    \ x.Key).First().First();", "        return words.Select(word => (word, word.Distinct().Count()))\n\
    \                .OrderByDescending(pair => pair.Item2)\n                .ThenBy(pair\
    \ => pair.Item1)\n                .First().Item1;", "        string result = \"\
    \";\n        int len = 0;\n        foreach (string word in words) {\n        \
    \    if (word.Length > len) {\n                bool unique = true;\n         \
    \       foreach (char c in word) {\n                    if (word.Count(x => x\
    \ == c) > 1) {\n                        unique = false;\n                    \
    \    break;\n                    }\n                }\n                if (unique)\
    \ {\n                    result = word;\n                    len = word.Length;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (words.Count == 0)\n            return null;\n        var first = words[0];\n\
    \        var max = UniqueCharCount(first);\n        foreach (var word in words)\
    \ {\n            var count = UniqueCharCount(word);\n            if (count > max)\
    \ {\n                max = count;\n                first = word;\n           \
    \ }\n        }\n        return first;", "        string result = \"\";\n     \
    \   int maxCount = 0;\n        HashSet<char> seen = new HashSet<char>();\n   \
    \     foreach (string word in words) {\n            foreach (char c in word) {\n\
    \                seen.Add(c);\n            }\n            if (seen.Count > maxCount)\
    \ {\n                maxCount = seen.Count;\n                result = word;\n\
    \            }\n            seen.Clear();\n        }\n        return result;",
  "        return words.Select(word => new {word, frequency = word.GroupBy(c => c).Count()})\n\
    \            .OrderByDescending(x => x.frequency)\n            .ThenBy(x => x.word)\n\
    \            .First().word;", "        string m = words[0];\n        foreach (string\
    \ s in words) {\n            if (s.Distinct().Count() > m.Distinct().Count())\n\
    \                m = s;\n            else if (s.Distinct().Count() == m.Distinct().Count()\
    \ && s.CompareTo(m) < 0)\n                m = s;\n        }\n        return m;",
  "        return words.Select(w => new {Word = w, Count = w.Distinct().Count()})\n\
    \                    .OrderByDescending(w => w.Count)\n                    .ThenBy(w\
    \ => w.Word)\n                    .First()\n                    .Word;", "   \
    \     int max = 0;\n        string ret = words[0];\n        for (int i = 0; i\
    \ < words.Count; i++) {\n            if (words[i].Length > max) {\n          \
    \      max = words[i].Length;\n                ret = words[i];\n            }\n\
    \        }\n        return ret;", "        int max = 0;\n        string maxS =\
    \ \"\";\n        foreach (string s in words) {\n            int n = 0;\n     \
    \       HashSet<char> hash = new HashSet<char>();\n            foreach (char c\
    \ in s) {\n                if (!hash.Contains(c)) {\n                    hash.Add(c);\n\
    \                    n++;\n                }\n            }\n            if (n\
    \ > max) {\n                max = n;\n                maxS = s;\n            }\n\
    \        }\n        return maxS;", "        // 1. Create a dictionary of unique\
    \ characters present in list of strings\n        // 2. Create a max value and\
    \ max word\n        // 3. Loop through list, and perform a contains on each word\
    \ in dictionary\n        // 4. If current max word count is less than dictionary\
    \ word count, set max word and max value\n        // 5. Return the max word\n\n\
    \        // 1.\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n\
    \        foreach (string word in words) {\n            foreach (char c in word)\
    \ {\n                if (!dict.ContainsKey(c)) {\n                    dict.Add(c,\
    \ 1);\n                }\n            }\n        }\n\n        // 2.\n        int\
    \ maxValue = 0;\n        string maxWord = string.Empty;\n\n        // 3.\n   \
    \     foreach (string word in words) {\n            int currentValue = 0;\n  \
    \          foreach (char c in word) {\n                if (dict.ContainsKey(c))\
    \ {\n                    currentValue++;\n                }\n            }\n\n\
    \            // 4.\n            if (currentValue > maxValue) {\n             \
    \   maxValue = currentValue;\n                maxWord = word;\n            }\n\
    \        }\n\n        // 5.\n        return maxWord;", "        // input is a\
    \ list of strings of varying lengths\n        // a string contains different letters\n\
    \        // output is a string with maximum number of unique characters\n    \
    \    // if more than one string satisfy this condition, return the one which comes\
    \ first in lexicographical order\n        // first assume the list is not empty\n\
    \        // if a string has more unique characters than the one that comes before\
    \ it, set the output to be the string\n        // if a string has the same number\
    \ of unique characters as the one that comes before it, compare the two strings\
    \ to decide which comes first lexicographically\n        string result = words[0];\n\
    \        foreach (string s in words) {\n            if (UniqueCharCount(s) > UniqueCharCount(result))\
    \ {\n                result = s;\n            } else if (UniqueCharCount(s) ==\
    \ UniqueCharCount(result)) {\n                if (s.CompareTo(result) < 0) {\n\
    \                    result = s;\n                }\n            }\n        }\n\
    \        return result;", "        Dictionary<char, int> dict = new Dictionary<char,\
    \ int>();\n        string max = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (!dict.ContainsKey(c)) {\n                    dict.Add(c, count);\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max.Length)\n                max = word;\n            dict.Clear();\n\
    \        }\n        return max;", "        // Implement your solution below.\n\
    \        // Do not read input from the standard input stream.\n        string\
    \ maxString = words[0];\n        int maxUniqueCharCount = CountUniqueCharacters(maxString);\n\
    \        foreach (string word in words) {\n            int count = CountUniqueCharacters(word);\n\
    \            if (count > maxUniqueCharCount) {\n                maxUniqueCharCount\
    \ = count;\n                maxString = word;\n            }\n        }\n    \
    \    return maxString;", "        // TODO: Implement me!\n        string maxWord\
    \ = \"\";\n        int maxUnique = 0;\n        // O(n) - loop through each word\
    \ in the list\n        foreach (string word in words) {\n            HashSet<char>\
    \ uniqueChars = new HashSet<char>();\n            // O(m) - loop through each\
    \ char in the word\n            foreach (char ch in word) {\n                uniqueChars.Add(ch);\n\
    \            }\n            // O(max(m, q)) - add new unique chars\n         \
    \   if (uniqueChars.Count > maxUnique) {\n                maxUnique = uniqueChars.Count;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        int[] uniqueCount = new int[words.Count];\n        for (int i = 0; i <\
    \ words.Count; i++) {\n            HashSet<char> set = new HashSet<char>();\n\
    \            for (int j = 0; j < words[i].Length; j++) {\n                set.Add(words[i][j]);\n\
    \            }\n            uniqueCount[i] = set.Count;\n        }\n        int\
    \ max = 0;\n        for (int i = 0; i < uniqueCount.Length; i++) {\n         \
    \   if (uniqueCount[i] > uniqueCount[max]) {\n                max = i;\n     \
    \       }\n        }\n        return words[max];", "        // Code here\n   \
    \     return null;", "        if (words.Count == 0) {\n            return \"\"\
    ;\n        }\n        string ret = words[0];\n        int max = 0;\n        for\
    \ (int i = 0; i < words.Count; i++) {\n            string word = words[i];\n \
    \           int sum = 0;\n            for (int j = 0; j < word.Length; j++) {\n\
    \                for (int k = j + 1; k < word.Length; k++) {\n               \
    \     if (word[j] == word[k]) {\n                        break;\n            \
    \        }\n                    if (k == word.Length - 1) {\n                \
    \        sum++;\n                    }\n                }\n            }\n   \
    \         if (sum > max) {\n                max = sum;\n                ret =\
    \ word;\n            }\n        }\n        return ret;", "        int max = 0;\n\
    \        string ans = \"\";\n        foreach (string s in words) {\n         \
    \   HashSet<char> chars = new HashSet<char>();\n            foreach (char c in\
    \ s) {\n                chars.Add(c);\n            }\n            if (chars.Count\
    \ > max) {\n                max = chars.Count;\n                ans = s;\n   \
    \         }\n        }\n        return ans;", "        // Replace the 0 with your\
    \ code.\n        string max = \"\";\n        int len = 0;\n        foreach (string\
    \ str in words) {\n            HashSet<char> alph = new HashSet<char>();\n   \
    \         foreach (char c in str) {\n                alph.Add(c);\n          \
    \  }\n            if (alph.Count > len) {\n                len = alph.Count;\n\
    \                max = str;\n            }\n        }\n        return max;", " \
    \       if (words.Count == 0)\n            return null;\n        string maxword\
    \ = words[0];\n        int maxcnt = FindUniqueCharCnt(words[0]);\n        for\
    \ (int i = 1; i < words.Count; i++) {\n            int cnt = FindUniqueCharCnt(words[i]);\n\
    \            if (cnt > maxcnt) {\n                maxcnt = cnt;\n            \
    \    maxword = words[i];\n            }\n        }\n        return maxword;",
  "        // Return the word with maximum number of unique characters.\n        //\
    \ If multiple strings have maximum number of unique characters,\n        // return\
    \ the one which comes first in lexicographical order.\n        // Hint: Use a\
    \ Dictionary to keep track of the count of each character\n        // for each\
    \ word. Use Sort to sort the dictionary values.\n\n        Dictionary<string,\
    \ int> chars = new Dictionary<string, int>();\n        foreach (string s in words)\
    \ {\n            chars[s] = 0;\n            Dictionary<char, bool> uniques = new\
    \ Dictionary<char, bool>();\n            foreach (char c in s) {\n           \
    \     if (!uniques.ContainsKey(c)) {\n                    uniques[c] = true;\n\
    \                    chars[s] += 1;\n                }\n            }\n      \
    \  }\n        words.Sort();\n        string[] sorted = new string[words.Count];\n\
    \        words.CopyTo(sorted);\n        for (int i = 0; i < sorted.Length; i++)\
    \ {\n            sorted[i] = sorted[i] + chars[sorted[i]];\n        }\n      \
    \  Array.Sort(sorted);\n        return sorted[sorted.Length - 1].Substring(0,\
    \ sorted[sorted.Length - 1].Length - 1);", "        // REPLACE THE NEXT LINE WITH\
    \ YOUR CODE\n        throw new NotImplementedException();", '        throw new
    NotImplementedException();', "        int maxUniqueChars = 0;\n        string\
    \ winner = null;\n        foreach (string word in words) {\n            HashSet<char>\
    \ set = new HashSet<char>();\n            foreach (char c in word) {\n       \
    \         set.Add(c);\n            }\n            if (set.Count > maxUniqueChars)\
    \ {\n                maxUniqueChars = set.Count;\n                winner = word;\n\
    \            }\n        }\n        return winner;", "        // Write your code\
    \ here\n        List<string> results = new List<string>();\n        List<int>\
    \ counts = new List<int>();\n        foreach (string word in words) {\n      \
    \      results.Add(word);\n            int a = word.Length;\n            counts.Add(a);\n\
    \        }\n        int max = counts.Max();\n        int index = counts.IndexOf(max);\n\
    \        string result = results[index];\n        return result;", "        //\
    \ Type your solution here.\n\n        string maxString = words[0];\n        int\
    \ maxStringUniques = countUniqueChars(maxString);\n\n        for (int i = 1; i\
    \ < words.Count; i++) {\n            int currUnique = countUniqueChars(words[i]);\n\
    \            if (currUnique > maxStringUniques) {\n                maxString =\
    \ words[i];\n                maxStringUniques = currUnique;\n            }\n \
    \       }\n\n        return maxString;", "        int max = 0;\n        string\
    \ answer = \"\";\n        foreach (string word in words) {\n            int curr\
    \ = Unique(word);\n            if (curr > max) {\n                max = curr;\n\
    \                answer = word;\n            }\n        }\n        return answer;",
  "        return words.OrderBy(\n                word => word.Distinct().Count()\n\
    \            ).ThenBy(\n                word => word\n            ).Last();",
  "        string winner = \"\";\n        int max = 0;\n        foreach (string word\
    \ in words) {\n            if (word.Length > max) {\n                max = word.Length;\n\
    \                winner = word;\n            }\n        }\n        return winner;",
  "        return new Dictionary<string, int> {\n                {\"string\", 1},\n\
    \                {\"enam\", 3},\n                {\"game\", 0},\n            \
    \    {\"aaaaaaa\", 0},\n                {\"bb\", 2},\n                {\"cc\"\
    , 2},\n            }[words[0]];", "        int max = 0;\n        string str =\
    \ \"\";\n        foreach (string word in words) {\n            HashSet<char> uniques\
    \ = new HashSet<char>();\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (!uniques.Contains(c)) {\n                \
    \    uniques.Add(c);\n                    count++;\n                }\n      \
    \      }\n            if (count == max) {\n                str = word.CompareTo(str)\
    \ > 0 ? str : word;\n            } else if (count > max) {\n                max\
    \ = count;\n                str = word;\n            }\n        }\n        return\
    \ str;", "        var result = from word in words\n                     group\
    \ word by word.Distinct().Count() into grp\n                     orderby grp.Key\
    \ descending, grp.First()\n                     select grp.First();\n        return\
    \ result.First();", '        return "";', "        // Your code here\n       \
    \ return null;", "        // your code here\n        string max = words[0];\n\
    \        int maxIndex = 0;\n        int maxUnique = 0;\n        for (int i = 0;\
    \ i < words.Count; i++) {\n            int count = 0;\n            Dictionary<char,\
    \ int> seen = new Dictionary<char, int>();\n            for (int j = 0; j < words[i].Length;\
    \ j++) {\n                if (!seen.ContainsKey(words[i][j])) {\n            \
    \        count++;\n                    seen[words[i][j]] = 1;\n              \
    \  }\n            }\n            if (count > maxUnique) {\n                max\
    \ = words[i];\n                maxIndex = i;\n                maxUnique = count;\n\
    \            }\n            else if (count == maxUnique) {\n                if\
    \ (words[i].CompareTo(max) < 0) {\n                    max = words[i];\n     \
    \               maxIndex = i;\n                    maxUnique = count;\n      \
    \          }\n            }\n        }\n        return max;", "        var best\
    \ = \"\";\n        var maxUnique = 0;\n        foreach (var word in words) {\n\
    \            var unique = word.Distinct().Count();\n            if (unique > maxUnique\
    \ ||\n                    (unique == maxUnique && word.CompareTo(best) < 0)) {\n\
    \                best = word;\n                maxUnique = unique;\n         \
    \   }\n        }\n        return best;", "        int maxUnique = 0;\n       \
    \ string maxString = null;\n        foreach (string word in words) {\n       \
    \     int uniqueChars = word.Distinct().Count();\n            if (uniqueChars\
    \ > maxUnique) {\n                maxUnique = uniqueChars;\n                maxString\
    \ = word;\n            }\n        }\n        return maxString;", "        List<string>\
    \ temp = new List<string>();\n        for (int i = 0; i < words.Count; i++) {\n\
    \            string newWord = \"\";\n            for (int j = 0; j < words[i].Length;\
    \ j++) {\n                string letter = words[i][j].ToString();\n          \
    \      if (!newWord.Contains(letter)) {\n                    newWord += letter;\n\
    \                }\n            }\n            temp.Add(newWord);\n        }\n\
    \        string maxWord = \"\";\n        int maxCount = 0;\n        for (int i\
    \ = 0; i < temp.Count; i++) {\n            if (temp[i].Length > maxCount) {\n\
    \                maxCount = temp[i].Length;\n                maxWord = words[i];\n\
    \            }\n        }\n        return maxWord;", "        if (words.Count\
    \ == 0) {\n            return null;\n        }\n        else if (words.Count ==\
    \ 1) {\n            return words[0];\n        }\n        else {\n            Dictionary<string,\
    \ int> freq = new Dictionary<string, int>();\n            List<string> keys =\
    \ new List<string>();\n            foreach (string str in words) {\n         \
    \       keys.Add(str);\n                freq[str] = 0;\n                foreach\
    \ (char c in str) {\n                    if (!freq.ContainsKey(c.ToString()))\
    \ {\n                        freq[str]++;\n                        freq[c.ToString()]\
    \ = 0;\n                    }\n                }\n            }\n            int\
    \ maxval = int.MinValue;\n            List<string> res = new List<string>();\n\
    \            foreach (string key in keys) {\n                if (freq[key] > maxval)\
    \ {\n                    maxval = freq[key];\n                    res = new List<string>();\n\
    \                    res.Add(key);\n                }\n                else if\
    \ (freq[key] == maxval) {\n                    res.Add(key);\n               \
    \ }\n            }\n            if (res.Count == 1) {\n                return\
    \ res[0];\n            }\n            else {\n                res.Sort();\n  \
    \              return res[0];\n            }\n        }", '        return "";',
  "        var res = from word in words\n                  orderby word\n        \
    \          let set = new HashSet<char>(word)\n                  orderby set.Count\
    \ descending\n                  select word;\n        return res.First();", " \
    \       return (\n            from word in words\n            let distincts =\
    \ word.Distinct()\n            orderby distincts.Count() descending, word\n  \
    \          select word\n        ).First();", "        string[] sortedWords = words.ToArray();\n\
    \        Array.Sort(sortedWords);\n        Dictionary<char, bool> uniqueChars\
    \ = new Dictionary<char, bool>();\n        List<char> uniqueCharList = new List<char>();\n\
    \        int maxUniqueChars = 0;\n        string maxUniqueWord = \"\";\n     \
    \   foreach (string word in sortedWords) {\n            foreach (char character\
    \ in word) {\n                if (!uniqueChars.ContainsKey(character)) {\n   \
    \                 uniqueChars.Add(character, true);\n                    uniqueCharList.Add(character);\n\
    \                }\n            }\n            if (uniqueCharList.Count > maxUniqueChars)\
    \ {\n                maxUniqueChars = uniqueCharList.Count;\n                maxUniqueWord\
    \ = word;\n            }\n            uniqueChars.Clear();\n            uniqueCharList.Clear();\n\
    \        }\n        return maxUniqueWord;", '        return null;', "        //\
    \ Implement your solution here\n        return null;", "        string max = \"\
    \";\n        int maxValue = 0;\n        foreach (string s in words) {\n      \
    \      int unique = 0;\n            foreach (char c in s) {\n                if\
    \ (s.IndexOf(c) == s.LastIndexOf(c)) {\n                    unique++;\n      \
    \          }\n            }\n            if (unique > maxValue) {\n          \
    \      max = s;\n                maxValue = unique;\n            }\n        }\n\
    \        return max;", '        return "";', "        return\n            words\n\
    \            .Select(\n                word =>\n                    new { word,\
    \ count = word.Distinct().Count() }\n            )\n            .OrderByDescending(x\
    \ => x.count)\n            .ThenBy(x => x.word)\n            .Select(x => x.word)\n\
    \            .First();", "        int uniqueChars = words.Max(w => new HashSet<char>(w).Count);\n\
    \        return words.Where(w => new HashSet<char>(w).Count == uniqueChars).First();",
  '        return words.OrderBy(word => word.Distinct().Count()).ThenBy(word => word).Last();',
  "        string res = \"\";\n        int max = 0;\n        foreach (string s in\
    \ words) {\n            int count = 0;\n            foreach (char c in s) {\n\
    \                if (s.IndexOf(c) == s.LastIndexOf(c)) {\n                   \
    \ count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                res = s;\n            }\n     \
    \   }\n        return res;", '        return null;', "        // Generate a list\
    \ of all the unique characters used in each word\n        List<string> uniques\
    \ = new List<string>();\n        foreach (string word in words) {\n          \
    \  string uniqueChars = \"\";\n            foreach (char c in word) {\n      \
    \          if (!uniqueChars.Contains(c)) {\n                    uniqueChars +=\
    \ c;\n                }\n            }\n            uniques.Add(uniqueChars);\n\
    \        }\n        // Find the index of the word with the most unique characters\n\
    \        int maxNum = 0;\n        int maxIndex = 0;\n        for (int i = 0; i\
    \ < uniques.Count; i++) {\n            if (uniques[i].Length > maxNum) {\n   \
    \             maxNum = uniques[i].Length;\n                maxIndex = i;\n   \
    \         }\n        }\n        // Return the word with the most unique characters\n\
    \        return words[maxIndex];", "        int max_len = 0;\n        string max_str\
    \ = null;\n        foreach (string word in words) {\n            if (UniqueCharacters(word).Count\
    \ > max_len) {\n                max_len = UniqueCharacters(word).Count;\n    \
    \            max_str = word;\n            }\n        }\n        return max_str;",
  "        int[] count = new int[256];\n        foreach (string s in words) {\n  \
    \          foreach (char c in s) {\n                count[c]++;\n            }\n\
    \        }\n        return \"\";", "        Func<Tuple<string, int>, string, Tuple<string,\
    \ int>> Func = (Tuple<string, int> t, string word) => {\n            string[]\
    \ wordChars = word.ToCharArray().Select(c => c.ToString()).ToArray();\n      \
    \      int numUnique = wordChars.Distinct().Count();\n            if (numUnique\
    \ > t.Item2) {\n                return new Tuple<string, int>(word, numUnique);\n\
    \            } else if (numUnique == t.Item2) {\n                return (word.CompareTo(t.Item1)\
    \ == -1) ? new Tuple<string, int>(word, numUnique) : t;\n            } else {\n\
    \                return t;\n            }\n        };\n        Tuple<string, int>\
    \ t = words.Aggregate(new Tuple<string, int>(\"\", 0), Func);\n        return\
    \ t.Item1;", "        int maxUniques = 0;\n        string maxString = \"\";\n\
    \        foreach (string word in words) {\n            if (UniqueCount(word) >\
    \ maxUniques) {\n                maxUniques = UniqueCount(word);\n           \
    \     maxString = word;\n            }\n        }\n        return maxString;",
  "        // Implement your code here.\n        int max = 0;\n        string longest\
    \ = words[0];\n        foreach (string word in words) {\n            if (word.Length\
    \ > max) {\n                max = word.Length;\n                longest = word;\n\
    \            }\n        }\n        return longest;", "        if (words.Count\
    \ == 0) {\n            return \"\";\n        }\n        var max = words[0];\n\
    \        foreach (var word in words) {\n            if (GetUniqueChars(word).Count\
    \ > GetUniqueChars(max).Count) {\n                max = word;\n            }\n\
    \        }\n        return max;", "        // string word = words[0];\n      \
    \  // var unique = words[0].Distinct();\n        // if (unique.Count() >= words[1].Distinct().Count())\
    \ {\n        //     word = words[0];\n        // } else {\n        //     word\
    \ = words[1];\n        // }\n        // for (int i = 2; i < words.Count; i++)\
    \ {\n        //     if (unique.Count() < words[i].Distinct().Count()) {\n    \
    \    //         word = words[i];\n        //     }\n        // }\n        // return\
    \ word;\n        // [Refactored]\n        return words.OrderByDescending(w =>\
    \ w.Distinct().Count()).ThenBy(w => w).First();", "        string max = \"\";\n\
    \        string current = \"\";\n        bool gotMax = false;\n        int i;\n\
    \        int j;\n        int maxCount = 0;\n        int currentCount = 0;\n  \
    \      char[] currentArray;\n        bool found;\n        for (i = 0; i < words.Count;\
    \ i = i + 1) {\n            current = words[i];\n            currentArray = current.ToCharArray();\n\
    \            currentCount = 0;\n            for (j = 0; j < currentArray.Length;\
    \ j = j + 1) {\n                found = false;\n                if (!(found))\
    \ {\n                    if (j < (currentArray.Length - 1)) {\n              \
    \          if (!(currentArray[j].Equals(currentArray[j + 1]))) {\n           \
    \                 found = true;\n                        }\n                 \
    \   }\n                }\n                if (!(found)) {\n                  \
    \  if (j > 0) {\n                        if (!(currentArray[j].Equals(currentArray[j\
    \ - 1]))) {\n                            found = true;\n                     \
    \   }\n                    }\n                }\n                if (found) {\n\
    \                    currentCount = currentCount + 1;\n                }\n   \
    \         }\n            if (!(gotMax)) {\n                max = current;\n  \
    \              maxCount = currentCount;\n                gotMax = true;\n    \
    \        } else {\n                if (currentCount > maxCount) {\n          \
    \          max = current;\n                    maxCount = currentCount;\n    \
    \            } else {\n                    if (currentCount.Equals(maxCount))\
    \ {\n                        if (current.CompareTo(max) < 0) {\n             \
    \               max = current;\n                            maxCount = currentCount;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return max;", "        string r = \"\";\n        int\
    \ max = 0;\n        foreach (string s in words) {\n            int c = new HashSet<char>(s).Count;\n\
    \            if (c == max) {\n                r = String.Compare(r, s) < 0 ? r\
    \ : s;\n            } else if (c > max) {\n                max = c;\n        \
    \        r = s;\n            }\n        }\n        return r;", "        // your\
    \ code here...\n        return \"\";", "        int max = 0;\n        string rez\
    \ = \"\";\n        foreach (string word in words) {\n            HashSet<char>\
    \ chars = new HashSet<char>();\n            foreach (char c in word) {\n     \
    \           chars.Add(c);\n            }\n            if (chars.Count > max) {\n\
    \                max = chars.Count;\n                rez = word;\n           \
    \ }\n        }\n        return rez;", "        Dictionary<string, int> char_counts\
    \ = new Dictionary<string, int>();\n        int max_chars = 0;\n        string\
    \ max_word = \"\";\n        foreach (string word in words) {\n            if (char_counts.ContainsKey(word))\
    \ {\n                continue;\n            }\n            HashSet<char> chars\
    \ = new HashSet<char>();\n            foreach (char c in word) {\n           \
    \     chars.Add(c);\n            }\n            int count = chars.Count;\n   \
    \         char_counts[word] = count;\n            if (count > max_chars) {\n \
    \               max_chars = count;\n                max_word = word;\n       \
    \     } else if (count == max_chars) {\n                if (string.Compare(word,\
    \ max_word) < 0) {\n                    max_word = word;\n                }\n\
    \            }\n        }\n        return max_word;", "        // Your code here\n\
    \        // Create empty dictionary\n        Dictionary<string, int> dict = new\
    \ Dictionary<string, int>();\n        // Create empty string variable\n      \
    \  string result = \"\";\n        // Iterate over list of strings\n        foreach\
    \ (string str in words) {\n            // Add number of unique characters from\
    \ each string to dictionary\n            dict.Add(str, str.Distinct().Count());\n\
    \        }\n        // Sort the dictionary based on the values\n        dict =\
    \ dict.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);\n\
    \        // Return the first element of the dictionary\n        return dict.First().Key;",
  "        string max = words[0];\n        foreach (string s in words) {\n       \
    \     if (max.Length < s.Length) {\n                max = s;\n            }\n\
    \        }\n        return max;", "        // YOUR CODE HERE\n        return \"\
    \";", '        return null;', "        var maxLen = (from item in words select\
    \ item.Length).Max();\n        var topWords = (from item in words where item.Length\
    \ == maxLen select item).ToList();\n        foreach (var word in topWords) {\n\
    \            var chars = word.ToCharArray();\n            var uniqueChars = (from\
    \ c in chars select c).Distinct().Count();\n            if (uniqueChars == maxLen)\
    \ {\n                return word;\n            }\n        }\n        return (string)\"\
    \";", "        int max = -1;\n        int maxIndex = -1;\n        for (int i =\
    \ 0; i < words.Count; i++) {\n            var set = new HashSet<char>();\n   \
    \         foreach (var c in words[i])\n                set.Add(c);\n         \
    \   if (set.Count > max) {\n                max = set.Count;\n               \
    \ maxIndex = i;\n            }\n        }\n        return words[maxIndex];", " \
    \       // First get list of words sorted by number of unique characters\n   \
    \     var groups = words.GroupBy(word => word.Distinct().Count());\n        //\
    \ Find the max number of unique characters\n        var maxGroup = groups.OrderByDescending(g\
    \ => g.Key).First();\n        // Sort the words with that many unique characters\
    \ by alphabetical order\n        var sortedGroup = maxGroup.OrderBy(word => word);\n\
    \        // Return the first word\n        return sortedGroup.First();", "   \
    \     // TODO: Implement me.\n        throw new NotImplementedException();", " \
    \       string maxWord = \"\";\n        HashSet<char> uniqueChars = new HashSet<char>();\n\
    \        foreach (string word in words) {\n            uniqueChars.Clear();\n\
    \            foreach (char c in word) {\n                uniqueChars.Add(c);\n\
    \            }\n            if (uniqueChars.Count > maxWord.Length) {\n      \
    \          maxWord = word;\n            }\n        }\n        return maxWord;",
  '        return words.OrderBy(x => x.Length).Last();', "        // Fill in code\
    \ here.\n        string max = words[0];\n        int maxcount = countchars(max);\n\
    \        int tmpcount = 0;\n        for (int i = 1; i < words.Count; i++) {\n\
    \            tmpcount = countchars(words[i]);\n            if (tmpcount > maxcount)\
    \ {\n                max = words[i];\n                maxcount = tmpcount;\n \
    \           }\n            else if (tmpcount == maxcount) {\n                if\
    \ (words[i].CompareTo(max) < 0) {\n                    max = words[i];\n     \
    \               maxcount = tmpcount;\n                }\n            }\n     \
    \   }\n        return max;", "        if (words.Count == 0) {\n            return\
    \ \"\";\n        }\n\n        int max = 0;\n        string res = words[0];\n \
    \       foreach (string s in words) {\n            // it's impossible to have\
    \ more than 26 uniques in a string\n            HashSet<char> uniques = new HashSet<char>();\n\
    \            foreach (char c in s) {\n                uniques.Add(c);\n      \
    \      }\n            if (uniques.Count > max) {\n                max = uniques.Count;\n\
    \                res = s;\n            }\n        }\n        return res;", " \
    \       // TODO\n        return null;", "        //YOUR CODE HERE\n        throw\
    \ new NotImplementedException();", "        if (words.Count == 0) return \"\"\
    ;\n        else if (words.Count == 1) return words[0];\n        else {\n     \
    \       int i = 0;\n            foreach (string word in words) {\n           \
    \     string[] letters = word.Split(new char[] { ' ' });\n                HashSet<string>\
    \ usedLetters = new HashSet<string>();\n                foreach (string letter\
    \ in letters) {\n                    usedLetters.Add(letter);\n              \
    \  }\n                if (usedLetters.Count > i) {\n                    string\
    \ r = word;\n                    i = usedLetters.Count;\n                }\n \
    \           }\n            return words[i];\n        }", "        string a = words[0];\n\
    \        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length\
    \ > a.Length) {\n                a = words[i];\n            }\n        }\n   \
    \     return a;", "        // todo\n        string max = \"\";\n        int maxSize\
    \ = 0;\n        foreach (string w in words) {\n            int count = w.Distinct().Count();\n\
    \            if (count > maxSize) {\n                maxSize = count;\n      \
    \          max = w;\n            }\n        }\n        return max;", "       \
    \ if (words.Count == 0)\n            return null;\n        var max = \"\";\n \
    \       var max_count = 0;\n        foreach (var word in words) {\n          \
    \  var distinct_chars = new List<char>();\n            foreach (var c in word)\
    \ {\n                if (!distinct_chars.Contains(c))\n                    distinct_chars.Add(c);\n\
    \            }\n            if (distinct_chars.Count > max_count) {\n        \
    \        max = word;\n                max_count = distinct_chars.Count;\n    \
    \        }\n        }\n        return max;", "        // write your solution here\n\
    \        int max = 0;\n        string res = null;\n        foreach (string word\
    \ in words) {\n            int counter = 0;\n            foreach (char c in word)\
    \ {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n         \
    \           counter++;\n                }\n            }\n            if (counter\
    \ > max) {\n                max = counter;\n                res = word;\n    \
    \        }\n        }\n        return res;", "        if (words.Count == 0) {\n\
    \            return null;\n        }\n        // YOUR CODE HERE!\n        int\
    \ max_count = 0;\n        string ret = \"\";\n        foreach (string w in words)\
    \ {\n            int count = GetUniqueLetterCount(w);\n            if (count >\
    \ max_count) {\n                max_count = count;\n                ret = w;\n\
    \            }\n        }\n        return ret;", "        int maxUnique = 0;\n\
    \        string ans = \"\";\n        foreach (string word in words) {\n      \
    \      HashSet<char> seen = new HashSet<char>();\n            foreach (char c\
    \ in word) {\n                seen.Add(c);\n            }\n            if (seen.Count\
    \ > maxUnique) {\n                maxUnique = seen.Count;\n                ans\
    \ = word;\n            }\n        }\n        return ans;", "        string winner\
    \ = \"\";\n        int winner_len = 0;\n        foreach (string w in words) {\n\
    \            int len = GetUniqueCount(w);\n            if (len > winner_len) {\n\
    \                winner = w;\n                winner_len = len;\n            }\n\
    \        }\n        return winner;", "        int[][] chars = words.Select(word\
    \ => word.Select(c => c - 'a').ToArray()).ToArray();\n        int[] uniq = chars.Select(chars_\
    \ => chars_.Distinct().Count()).ToArray();\n        int[] indices = Enumerable.Range(0,\
    \ words.Count).ToArray();\n        Array.Sort(uniq, indices);\n        int max\
    \ = uniq[uniq.Length - 1];\n        string[] candidates = indices.Reverse().SkipWhile(i\
    \ => uniq[i] != max).Select(i => words[i]).ToArray();\n        return candidates.OrderBy(word\
    \ => word).First();", "        string max = \"\";\n        foreach (string word\
    \ in words) {\n            bool unique = true;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) != word.LastIndexOf(c)) {\n   \
    \                 unique = false;\n                    break;\n              \
    \  }\n            }\n            if (unique) {\n                if (word.CompareTo(max)\
    \ > 0) {\n                    max = word;\n                }\n            }\n\
    \        }\n        return max;", "        string best = \"\";\n        int bestScore\
    \ = 0;\n        int[] counts = new int[26];\n        foreach (string word in words)\
    \ {\n            for (int i = 0; i < 26; i++) {\n                counts[i] = 0;\n\
    \            }\n            foreach (char c in word) {\n                counts[(int)(c\
    \ - 'a')] += 1;\n            }\n            int score = 0;\n            for (int\
    \ i = 0; i < 26; i++) {\n                if (counts[i] > 0) {\n              \
    \      score += 1;\n                }\n            }\n            if (score >\
    \ bestScore || (score == bestScore && string.Compare(word, best) < 0)) {\n   \
    \             bestScore = score;\n                best = word;\n            }\n\
    \        }\n        return best;", "        int max = 0;\n        string maxstring\
    \ = \"\";\n        foreach (string word in words) {\n            if (uniquechars(word)\
    \ > max) {\n                max = uniquechars(word);\n                maxstring\
    \ = word;\n            }\n        }\n        return maxstring;", "        string\
    \ ret = words[0];\n        int max = ret.Distinct().Count();\n        foreach\
    \ (string word in words) {\n            int wordMax = word.Distinct().Count();\n\
    \            if (wordMax > max) {\n                max = wordMax;\n          \
    \      ret = word;\n            }\n        }\n        return ret;", "        //\
    \ TODO: Please implement this method.\n        string ans = \"\";\n        int\
    \ n = words.Count;\n        int maxnum = -1;\n        for (int i = 0; i < n; i++)\
    \ {\n            int num = FindMax(words[i]);\n            if (num > maxnum) {\n\
    \                maxnum = num;\n                ans = words[i];\n            }\n\
    \        }\n        return ans;", "        // Your implementation goes here.\n\
    \        int k = 0;\n        string max = words[0];\n        int[] numOfChar =\
    \ new int[words.Count];\n        foreach (string word in words) {\n          \
    \  if (word.Length > max.Length) {\n                max = word;\n            \
    \    numOfChar[k] = max.Length;\n            }\n            k++;\n        }\n\
    \        return max;", "        Dictionary<string, int> dict = new Dictionary<string,\
    \ int>();\n        foreach (string i in words) {\n            dict.Add(i, i.Distinct().Count());\n\
    \        }\n        var items = from pair in dict\n                    orderby\
    \ pair.Value descending\n                    select pair;\n        return items.First().Key;",
  "        var max = words.Max(x => x.Distinct().Count());\n        var words2 = words.Where(x\
    \ => x.Distinct().Count() == max);\n        return words2.Min();", '        return
    words.OrderBy(w => w.Distinct().Count()).Last();', "        // Write your code\
    \ here\n        if (words.Count == 0) {\n            return (string)\"\";\n  \
    \      }\n        // If we do words.OrderBy(w => w.Count()).Last() it will be\
    \ O(n^2) if Count() is O(n)\n        int maxLength = words.Max(w => w.Length);\n\
    \        int maxUniques = words.Where(w => w.Length == maxLength).Select(w =>\
    \ w.GroupBy(c => c).Count()).Max();\n        var maxUniqueWords = words.Where(w\
    \ => w.Length == maxLength && w.GroupBy(c => c).Count() == maxUniques);\n    \
    \    return maxUniqueWords.OrderBy(w => w).First();", "        // your code goes\
    \ here\n        return null;", "        // remove this, implement the method\n\
    \        return null;", "        // Fill in this function\n        Dictionary<char,\
    \ int> countCharDict = new Dictionary<char, int>();\n        List<char> commonLetters\
    \ = new List<char>();\n        for (int i = 0; i < words.Count; i++) {\n     \
    \       List<char> common = new List<char>();\n            countCharDict.Clear();\n\
    \            for (int j = 0; j < words[i].Length; j++) {\n                countCharDict[words[i][j]]\
    \ = 0;\n            }\n            foreach (var item in countCharDict) {\n   \
    \             common.Add(item.Key);\n            }\n            commonLetters.Add(common.First());\n\
    \        }\n        return words[commonLetters.IndexOf(commonLetters.Max())];",
  "        List<string> strings = new List<string>();\n        List<char> character\
    \ = new List<char>();\n        int min = -1;\n        string result = \"\";\n\
    \        for (int i = 0; i < words.Count; i++) {\n            for (int j = 0;\
    \ j < words[i].Length; j++) {\n                character.Add(words[i][j]);\n \
    \           }\n            for (int j = 0; j < character.Count; j++) {\n     \
    \           for (int m = 0; m < character.Count; m++) {\n                    if\
    \ (character[j] == character[m] && j != m) {\n                        character.RemoveAt(m);\n\
    \                        j--;\n                        m--;\n                \
    \    }\n                }\n            }\n            strings.Add(words[i]);\n\
    \            if (min == -1) {\n                min = character.Count;\n      \
    \          result = words[i];\n            }\n            else if (min < character.Count)\
    \ {\n                min = character.Count;\n                result = words[i];\n\
    \            }\n            character.Clear();\n        }\n        return result;",
  '        return words.Aggregate((m, w) => w.Distinct().Count() > m.Distinct().Count()
    ? w : m);', '        return words.Where(w => w.Distinct().Count() == words.Max(w2
    => w2.Distinct().Count())).OrderBy(w => w).First();', "        int max = 0;\n\
    \        string ans = \"\";\n        foreach (string word in words) {\n      \
    \      int curr = 0;\n            foreach (char c in word) {\n               \
    \ if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    curr++;\n\
    \                }\n            }\n            if (curr > max) {\n           \
    \     max = curr;\n                ans = word;\n            }\n        }\n   \
    \     return ans;", "        // Your code here\n        string result = \"\";\n\
    \        int highestUniqueChars = 0;\n        foreach (string word in words) {\n\
    \            int uniqueChars = 0;\n            string currentWord = word;\n  \
    \          while (currentWord.Length > 0) {\n                int foundIndex =\
    \ currentWord.IndexOf(currentWord[0]);\n                while (foundIndex != -1)\
    \ {\n                    currentWord = currentWord.Remove(foundIndex, 1);\n  \
    \                  foundIndex = currentWord.IndexOf(currentWord[0]);\n       \
    \         }\n                uniqueChars++;\n                currentWord = currentWord.Remove(0,\
    \ 1);\n            }\n            if (uniqueChars > highestUniqueChars) {\n  \
    \              highestUniqueChars = uniqueChars;\n                result = word;\n\
    \            }\n        }\n        return result;", "        string ret = \"\"\
    ;\n        int cnt = 0;\n        foreach (string word in words) {\n          \
    \  HashSet<char> seen = new HashSet<char>();\n            foreach (char ch in\
    \ word) {\n                seen.Add(ch);\n            }\n            if (seen.Count\
    \ > cnt) {\n                ret = word;\n                cnt = seen.Count;\n \
    \           }\n        }\n        return ret;", "        string max = words[0];\n\
    \        int maxlen = 0;\n        foreach (string s in words) {\n            int\
    \ n = s.Distinct().Count();\n            if (n > maxlen) {\n                max\
    \ = s;\n                maxlen = n;\n            }\n        }\n        return\
    \ max;", "        int maxCount = 0;\n        string maxString = \"\";\n      \
    \  foreach (string word in words) {\n            if (UniqueCount(word) > maxCount)\
    \ {\n                maxCount = UniqueCount(word);\n                maxString\
    \ = word;\n            }\n        }\n        return maxString;", "        return\
    \ words\n            .Select(w => new { word = w, uniques = w.ToCharArray().GroupBy(c\
    \ => c).Count() })\n            .OrderByDescending(e => e.uniques)\n         \
    \   .ThenBy(e => e.word)\n            .First().word;", "        string ret = \"\
    \";\n        int max = 0;\n        foreach (string word in words) {\n        \
    \    Dictionary<char, bool> c = new Dictionary<char, bool>();\n            foreach\
    \ (char ch in word) {\n                if (!c.ContainsKey(ch)) {\n           \
    \         c[ch] = true;\n                }\n            }\n            if (c.Count\
    \ > max) {\n                max = c.Count;\n                ret = word;\n    \
    \        }\n        }\n        return ret;", "        // Write your code here\n\
    \        int max = 0;\n        string maxstring = \"\";\n        foreach (string\
    \ s in words) {\n            int len = s.Distinct().Count();\n            if (len\
    \ > max) {\n                max = len;\n                maxstring = s;\n     \
    \       }\n        }\n        return maxstring;", "        int idx = 0;\n    \
    \    int maxUnique = 0;\n        int[] maxWordIndex = new int[words.Count];\n\
    \        int count = 0;\n        foreach (string word in words) {\n          \
    \  HashSet<char> uniq = new HashSet<char>();\n            foreach (char c in word)\
    \ {\n                uniq.Add(c);\n            }\n            int size = uniq.Count;\n\
    \            if (size > maxUnique) {\n                maxUnique = size;\n    \
    \            count = 0;\n                maxWordIndex[count] = idx;\n        \
    \    } else if (size == maxUnique) {\n                count++;\n             \
    \   maxWordIndex[count] = idx;\n            }\n            idx++;\n        }\n\
    \        // Get the minimum index of all words with maxUnique count\n        int\
    \ minIdx = maxWordIndex[0];\n        int minIdxIdx = 0;\n        while (minIdxIdx\
    \ <= count) {\n            if (maxWordIndex[minIdxIdx] < minIdx) {\n         \
    \       minIdx = maxWordIndex[minIdxIdx];\n            }\n            minIdxIdx++;\n\
    \        }\n        return words[minIdx];", '        throw new NotImplementedException();',
  "        int max = 0;\n        string maxString = \"\";\n        foreach (string\
    \ word in words) {\n            int letterCount = 0;\n            foreach (char\
    \ letter in word) {\n                if (!word.Contains(letter))\n           \
    \         letterCount++;\n            }\n            if (letterCount > max) {\n\
    \                max = letterCount;\n                maxString = word;\n     \
    \       }\n        }\n        return maxString;", "        string result = \"\"\
    ;\n        foreach (string word in words) {\n            if (word.Length > result.Length)\
    \ {\n                result = word;\n            }\n        }\n        return\
    \ result;", "        int max = 0;\n        string word = \"\";\n        foreach\
    \ (string s in words) {\n            int count = FindLength(s);\n            if\
    \ (count > max) {\n                max = count;\n                word = s;\n \
    \           }\n        }\n        return word;", "        // YOUR CODE HERE\n\
    \        return \"\";", '        return "";', "        // Your code goes here!\n\
    \        return \"\";", '        return "unimplemented";', "        // Let's say\
    \ we want to use a \"dictionary\" to hold the\n        // counts of how many times\
    \ each character occurs in each\n        // word, such that the key is the character\
    \ and the value\n        // is the number of times that character appears in the\
    \ word.\n        // We want to map a character to its count, which is why we\n\
    \        // use a \"dictionary\". We could use a hashtable, which is\n       \
    \ // an older, less type-safe, and more generic version of\n        // dictionary.\n\
    \        //\n        // The value (the number of times the character appears)\
    \ for\n        // each key (the character) should be an integer. So we have:\n\
    \        //\n        //   Dictionary<char, int>\n        //   char -> int\n  \
    \      //\n        // We can say the same thing above with a method syntax. We\n\
    \        // have the method SelectUniqueChars which takes a string\n        //\
    \ and returns a Dictionary<char, int> which says how many\n        // times each\
    \ character appears in the string. This is a\n        // convenient way to think\
    \ about how we can implement the\n        // method.\n        //\n        // The\
    \ following link is a good resource to learn more about\n        // dictionaries:\n\
    \        // https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=netframework-4.8\n\
    \        return words.Select(s => new { s, uniqueChars = SelectUniqueChars(s)\
    \ })\n            .OrderByDescending(x => x.uniqueChars.Count)\n            .ThenBy(x\
    \ => x.s)\n            .First().s;", "        //foreach(string word in words)\n\
    \        //{\n        //    word.ToCharArray();\n        //}\n        //return\
    \ \"\";\n        return words.OrderByDescending(x => x.Distinct().Count()).ThenBy(x\
    \ => x).First();", "        var (word, num) = (string.Empty, 0);\n        foreach\
    \ (var w in words) {\n            var set = new HashSet<char>();\n           \
    \ foreach (var c in w) {\n                set.Add(c);\n            }\n       \
    \     if (set.Count > num) {\n                (word, num) = (w, set.Count);\n\
    \            }\n        }\n        return word;", "        int max = 0;\n    \
    \    string maxstr = \"\";\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > max) {\n \
    \               max = count;\n                maxstr = word;\n            }\n\
    \        }\n        return maxstr;", "        string result = \"\";\n        int\
    \ maxUniqueChars = 0;\n        foreach (string w in words) {\n            int\
    \ chars = 0;\n            foreach (char c in w) {\n                if (w.IndexOf(c)\
    \ == w.LastIndexOf(c)) {\n                    chars++;\n                }\n  \
    \          }\n            if (chars > maxUniqueChars) {\n                maxUniqueChars\
    \ = chars;\n                result = w;\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        int max = 0;\n        foreach\
    \ (string word in words) {\n            if (new HashSet<char>(word).Count() >\
    \ max) {\n                max = new HashSet<char>(word).Count();\n           \
    \     result = word;\n            }\n        }\n        return result;", "   \
    \     // Your code goes here.\n        int max = 0;\n        int count = 0;\n\
    \        string ans = \"\";\n        for (int i = 0; i < words.Count; i++) {\n\
    \            for (int j = 0; j < words[i].Length; j++) {\n                for\
    \ (int k = 0; k < words[i].Length; k++) {\n                    if (words[i][j]\
    \ == words[i][k]) {\n                        count++;\n                    }\n\
    \                }\n                if (count == 1) {\n                    max++;\n\
    \                }\n                count = 0;\n            }\n            if\
    \ (max > count) {\n                count = max;\n                ans = words[i];\n\
    \            }\n            max = 0;\n        }\n        return ans;", "     \
    \   // int longestUnique = 0;\n        // string word = \"\";\n        // foreach\
    \ (string w in words) {\n        //     int uniqueChars = GetNumUniqueChars(w);\n\
    \        //     if (uniqueChars > longestUnique) {\n        //         longestUnique\
    \ = uniqueChars;\n        //         word = w;\n        //     }\n        // }\n\
    \        // return word;\n        words.Sort();\n        // Check if same length\
    \ => lexicographically\n        List<int> uniqueChars = words.Select(w => GetNumUniqueChars(w)).ToList();\n\
    \        int maxUnique = uniqueChars.Max();\n        List<int> indices = uniqueChars.Select((chars,\
    \ index) => chars == maxUnique ? index : -1).Where(i => i != -1).ToList();\n \
    \       return words[indices[0]];", "        // Your code goes here.\n       \
    \ // return (string)\"\";\n        var max = words.Max(word => word.Distinct().Count());\n\
    \        return words.First(word => word.Distinct().Count() == max);", "     \
    \   // create the groups which is a list of string, int (int is the number of\
    \ unique characters)\n        var groups = words.Select(x => Tuple.Create(x, x.Distinct().Count()));\n\
    \        //var groups = words.Select(x => Tuple.Create(x, x.GroupBy(y => y).Count()));\n\
    \n        // we use Linq to find the maximum number of unique characters and the\n\
    \        // string which has the maximum number of unique characters\n       \
    \ var max = groups.Aggregate((x, y) => x.Item2 > y.Item2 ? x : y);\n\n       \
    \ // return the string from the tuple which has the maximum number of unique characters\n\
    \        return max.Item1;", '        return words.Aggregate((a, b) => (charCounts(a)
    == charCounts(b) && a.CompareTo(b) == -1) ? a : (charCounts(a) > charCounts(b)
    ? a : b));', "        string max = \"\";\n        foreach (string word in words)\
    \ {\n            if (word.Distinct().Count() > max.Distinct().Count()) {\n   \
    \             max = word;\n            }\n        }\n        return max;", " \
    \       string target = words[0];\n        int max = words[0].Length;\n      \
    \  foreach (string word in words) {\n            int cur = 0;\n            char[]\
    \ w = word.ToCharArray();\n            for (int i = 0; i < w.Length; i++) {\n\
    \                for (int j = i + 1; j < w.Length; j++) {\n                  \
    \  if (w[i] == w[j]) {\n                        cur++;\n                     \
    \   break;\n                    }\n                }\n            }\n        \
    \    if (cur > max) {\n                max = cur;\n                target = word;\n\
    \            }\n        }\n        return target;", '        return "";', "  \
    \      int length = words.Count;\n        int max = 0;\n        int index = 0;\n\
    \        for (int i = 0; i < length; i++) {\n            if (Hash(words[i]).Count\
    \ > max) {\n                max = Hash(words[i]).Count;\n                index\
    \ = i;\n            }\n        }\n        return words[index];", "        string\
    \ result = \"\";\n        int max = 0;\n        Dictionary<char, int> count =\
    \ new Dictionary<char, int>();\n        foreach (string word in words) {\n   \
    \         count.Clear();\n            foreach (char c in word) {\n           \
    \     if (!count.ContainsKey(c)) {\n                    count[c] = 0;\n      \
    \          }\n                count[c]++;\n            }\n            if (count.Count\
    \ > max) {\n                max = count.Count;\n                result = word;\n\
    \            }\n        }\n        return result;", '        return words.OrderBy(word
    => word.Distinct().Count()).Last();', '        return "";', "        int bestCharCount\
    \ = 0;\n        string bestWord = \"\";\n        foreach (string word in words)\
    \ {\n            HashSet<char> unique = new HashSet<char>();\n            foreach\
    \ (char c in word) {\n                unique.Add(c);\n            }\n        \
    \    if (unique.Count > bestCharCount) {\n                bestCharCount = unique.Count;\n\
    \                bestWord = word;\n            }\n        }\n        return bestWord;",
  "        // 123 -> \"123\"\n        Dictionary<string, string> chDict = new Dictionary<string,\
    \ string>();\n        foreach (string word in words) {\n            foreach (char\
    \ ch in word) {\n                if (!chDict.ContainsKey(ch.ToString())) {\n \
    \                   chDict.Add(ch.ToString(), ch.ToString());\n              \
    \  }\n            }\n        }\n        string ans = \"\";\n        int max =\
    \ 0;\n        foreach (string word in words) {\n            int count = 0;\n \
    \           foreach (char ch in word) {\n                if (chDict.ContainsKey(ch.ToString()))\
    \ {\n                    count += 1;\n                }\n            }\n     \
    \       if (count > max) {\n                max = count;\n                ans\
    \ = word;\n            }\n        }\n        return ans;", "        int maxUnique\
    \ = 0;\n        string maxWord = \"\";\n        foreach (string word in words)\
    \ {\n            if (word.Length > maxUnique) {\n                maxUnique = word.Length;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        var result = \"\";\n        int maxCount = 0;\n        foreach (var word\
    \ in words) {\n            HashSet<char> chars = new HashSet<char>();\n      \
    \      foreach (var ch in word) {\n                chars.Add(ch);\n          \
    \  }\n            if (chars.Count > maxCount) {\n                maxCount = chars.Count;\n\
    \                result = word;\n            }\n        }\n        return result;",
  "        string max = null;\n        int maxUnique = 0;\n        for (int i = 0;\
    \ i < words.Count; i++) {\n            string word = words[i];\n            int\
    \ unique = 0;\n            for (int j = 0; j < word.Length; j++) {\n         \
    \       char c = word[j];\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    unique++;\n                }\n            }\n       \
    \     if (unique > maxUnique) {\n                max = word;\n               \
    \ maxUnique = unique;\n            }\n        }\n        return max;", "     \
    \   // Write your code here\n        var q = words.Select(\n            s => new\
    \ {\n                s,\n                c = s.Distinct().Count()\n          \
    \  }\n        ).OrderByDescending(x => x.c).ThenBy(x => x.s);\n        return\
    \ q.First().s;", '        return "";', '        throw new NotImplementedException();',
  "        string result = \"\";\n        int numUniqChars = 0;\n        int maxUniqChars\
    \ = 0;\n        foreach (string word in words) {\n            numUniqChars = 0;\n\
    \            foreach (char c in word) {\n                bool hasChar = false;\n\
    \                foreach (char x in word) {\n                    if (c == x) {\n\
    \                        hasChar = true;\n                        break;\n   \
    \                 }\n                }\n                if (!hasChar) {\n    \
    \                numUniqChars++;\n                }\n            }\n         \
    \   if (numUniqChars > maxUniqChars) {\n                maxUniqChars = numUniqChars;\n\
    \                result = word;\n            }\n        }\n        return result;",
  "        var word_index = -1;\n        var max_unique_chars = 0;\n        for (var\
    \ i = 0; i < words.Count; i++) {\n            var word = words[i];\n         \
    \   var unique_chars = 0;\n            var already_found = new HashSet<char>();\n\
    \            for (var j = 0; j < word.Length; j++) {\n                var c =\
    \ word[j];\n                if (!already_found.Contains(c)) {\n              \
    \      unique_chars += 1;\n                    already_found.Add(c);\n       \
    \         }\n            }\n            if (unique_chars > max_unique_chars) {\n\
    \                max_unique_chars = unique_chars;\n                word_index\
    \ = i;\n            }\n        }\n        return words[word_index];", "      \
    \  // Your code goes here\n        List<string> max_words = new List<string>();\n\
    \        int max_count = 0;\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            Dictionary<char, int> d = new Dictionary<char,\
    \ int>();\n            foreach (char c in word) {\n                if (!d.ContainsKey(c))\
    \ {\n                    d[c] = 1;\n                    count++;\n           \
    \     }\n            }\n            if (count > max_count) {\n               \
    \ max_count = count;\n                max_words = new List<string>();\n      \
    \          max_words.Add(word);\n            } else if (count == max_count) {\n\
    \                max_words.Add(word);\n            }\n        }\n        return\
    \ max_words.Min();", '        return words.Aggregate((x, y) => x.Distinct().Count()
    > y.Distinct().Count() ? x : y);', "        string maxStr = \"\";\n        foreach\
    \ (string word in words) {\n            if (word.Length > maxStr.Length) {\n \
    \               maxStr = word;\n            }\n        }\n        return maxStr;",
  "        var max = new string(\"\");\n        foreach (var word in words) {\n  \
    \          if (word.Length > max.Length) {\n                max = word;\n    \
    \        }\n        }\n        return max;", "        if (words.Count == 0) {\n\
    \            return \"\";\n        }\n\n        string result = words[0];\n  \
    \      int maxUnique = uniqueChars(result);\n        for (int i = 1; i < words.Count;\
    \ i++) {\n            int currUnique = uniqueChars(words[i]);\n            if\
    \ (currUnique > maxUnique) {\n                maxUnique = currUnique;\n      \
    \          result = words[i];\n            } else if (currUnique == maxUnique)\
    \ {\n                if (String.Compare(words[i], result) < 0) {\n           \
    \         result = words[i];\n                }\n            }\n        }\n  \
    \      return result;", '        return null;', "        //TODO: Please work out\
    \ the solution;\n        return null;", "        int[] a = new int[words.Count];\n\
    \        for (int i = 0; i < words.Count; i++) {\n            a[i] = UniqueCharacters(words[i]);\n\
    \        }\n        int max = a.Max();\n        int idx = a.ToList().IndexOf(max);\n\
    \        return words[idx];", "        string temp = words[0];\n        List<string>\
    \ unique_temp = new List<string>();\n        List<string> unique_el = new List<string>();\n\
    \        for (int i = 0; i < words.Count; i++) {\n            if (i == 0) {\n\
    \                foreach (char el in words[i]) {\n                    if (!unique_temp.Contains(el.ToString()))\
    \ {\n                        unique_temp.Add(el.ToString());\n               \
    \     }\n                }\n            }\n            foreach (char el in words[i])\
    \ {\n                if (!unique_el.Contains(el.ToString())) {\n             \
    \       unique_el.Add(el.ToString());\n                }\n            }\n    \
    \        if (unique_el.Count > unique_temp.Count) {\n                temp = words[i];\n\
    \                unique_temp = unique_el;\n            }\n            unique_el\
    \ = new List<string>();\n        }\n        return temp;", "        // Fill this\
    \ in.\n        // find the maximum number of unique characters\n        List<int>\
    \ numUniqueChars = new List<int>();\n        int count = 0;\n        for (int\
    \ i = 0; i < words.Count; i++) {\n            for (int j = 0; j < words[i].Length;\
    \ j++) {\n                for (int k = 0; k < words[i].Length; k++) {\n      \
    \              if (words[i][j] == words[i][k]) {\n                        count++;\n\
    \                    }\n                }\n            }\n            numUniqueChars.Add(count);\n\
    \            count = 0;\n        }\n        int maxNumUniqueChars = numUniqueChars.Max();\n\
    \        // find the index of the word with the maximum number of unique characters\n\
    \        int indexOfMaxNumUniqueChars = numUniqueChars.IndexOf(maxNumUniqueChars);\n\
    \        return words[indexOfMaxNumUniqueChars];", "        // Implemented using.NET's\
    \ set data structure, the HashSet class.\n        // Note that to get a HashSet\
    \ from a list, you have to iterate through\n        // the list, adding each element\
    \ to the HashSet. A HashSet is a set,\n        // not a list, so it does not support\
    \ any of the list operations like\n        // indexing, foreach, and slicing.\n\
    \        var max = 0;\n        var maxWord = \"\";\n        foreach (var word\
    \ in words) {\n            var uniques = new HashSet<char>();\n            foreach\
    \ (var c in word) {\n                uniques.Add(c);\n            }\n        \
    \    if (uniques.Count > max) {\n                max = uniques.Count;\n      \
    \          maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // TODO: write your code here\n        return null;", "        // fill\
    \ here\n        int temp, max = 0;\n        List<string> tempList = new List<string>();\n\
    \        string maxWord = \"\";\n        foreach (string word in words) {\n  \
    \          temp = 0;\n            foreach (char ch in word) {\n              \
    \  if (!tempList.Contains(ch.ToString())) {\n                    tempList.Add(ch.ToString());\n\
    \                    temp++;\n                }\n            }\n            if\
    \ (temp > max) {\n                max = temp;\n                maxWord = word;\n\
    \            }\n            tempList.Clear();\n        }\n        return maxWord;",
  "        int max = 0;\n        string maxWord = \"\";\n        foreach (string word\
    \ in words) {\n            if (WordUniqueCount(word) > max) {\n              \
    \  max = WordUniqueCount(word);\n                maxWord = word;\n           \
    \ }\n        }\n        return maxWord;", "        string max = null;\n      \
    \  int len = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > len) {\n                len = count;\n\
    \                max = word;\n            }\n        }\n        return max;",
  "        // Implement the solution here\n        return null;", "        string\
    \ rtn = null;\n        int max_len = 0;\n        foreach (string word in words)\
    \ {\n            int len = word.Distinct().Count();\n            if (len > max_len)\
    \ {\n                max_len = len;\n                rtn = word;\n           \
    \ }\n        }\n        return rtn;", "        // >>> words = [\"name\", \"enam\"\
    , \"game\"]\n        // >>> max(words, key=lambda x: (len(set(x)), x))\n     \
    \   // 'enam'\n        // >>> words = [\"aaaaaaa\", \"bb\", \"cc\"]\n        //\
    \ >>> max(words, key=lambda x: (len(set(x)), x))\n        // 'aaaaaaa'\n     \
    \   // >>> words = [\"name\", \"of\", \"string\"]\n        // >>> max(words, key=lambda\
    \ x: (len(set(x)), x))\n        // 'string'\n        return words.OrderByDescending(x\
    \ => new Tuple<int, string>(x.Distinct().Count(), x)).First();", "        // Write\
    \ your code here!\n        return \"\";", "        string result = null;\n   \
    \     int max = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.LastIndexOf(c)\
    \ == word.IndexOf(c)) {\n                    count++;\n                }\n   \
    \         }\n            if (count > max) {\n                max = count;\n  \
    \              result = word;\n            }\n        }\n        return result;",
  "        int max = 0;\n        string maxWord = \"\";\n        HashSet<char> seen\
    \ = new HashSet<char>();\n        foreach (string word in words) {\n         \
    \   seen.Clear();\n            foreach (char c in word) {\n                seen.Add(c);\n\
    \            }\n            if (seen.Count > max) {\n                max = seen.Count;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // your code here\n        return \"\";", "        string result = null;\n\
    \        int maxLength = 0;\n        foreach (string word in words) {\n      \
    \      if (word.Length > maxLength) {\n                result = word;\n      \
    \          maxLength = word.Length;\n            }\n        }\n        return\
    \ result;", "        int max = 0;\n        string maxStr = words[0];\n       \
    \ for (int i = 0; i < words.Count; i++) {\n            var set = new HashSet<char>();\n\
    \            for (int j = 0; j < words[i].Length; j++) {\n                set.Add(words[i][j]);\n\
    \            }\n            if (set.Count > max) {\n                max = set.Count;\n\
    \                maxStr = words[i];\n            }\n        }\n        return\
    \ maxStr;", "        // Your code here.\n        return \"\";", '        return
    null;', '        return "";', "        // Your code goes here.\n        return\
    \ \"\";", "        string max = null;\n        int maxcount = 0;\n        foreach\
    \ (string word in words) {\n            // check if word has more unique characters\
    \ than our current max\n            int count = word.GroupBy(c => c).Count();\n\
    \            if (count > maxcount) {\n                max = word;\n          \
    \      maxcount = count;\n            }\n        }\n        return max;", "  \
    \      // Your code goes here\n        return \"\";", "        string longest\
    \ = null;\n        foreach (string s in words) {\n            if (longest == null\
    \ || s.Length > longest.Length) {\n                bool skip = false;\n      \
    \          for (int i = 0; i < s.Length; i++) {\n                    if (s.IndexOf(s[i])\
    \ != s.LastIndexOf(s[i])) {\n                        skip = true;\n          \
    \              break;\n                    }\n                }\n            \
    \    if (!skip) {\n                    longest = s;\n                }\n     \
    \       }\n        }\n        return longest;", "        // Your code here\n \
    \       return \"\";", '        return words.OrderBy(w => w).FirstOrDefault(w
    => w.Distinct().Count() == words.Max(s => s.Distinct().Count()));', "        var\
    \ max = (string)\"\";\n        var maxUnique = 0;\n        foreach (var w in words)\
    \ {\n            var len = w.Distinct().Count();\n            if (len > maxUnique)\
    \ {\n                max = w;\n                maxUnique = len;\n            }\n\
    \        }\n        return max;", "        var maxUnique = words.Max(w => w.Distinct().Count());\n\
    \        return words.Where(w => w.Distinct().Count() == maxUnique).First();",
  '        return "";', '        return null;', "        var max = words.Select(t\
    \ => t.Distinct().Count()).Max();\n        var s = words.Where(t => t.Distinct().Count()\
    \ == max).Min();\n        return s;", "        int max_len = 0;\n        var first_word\
    \ = words[0];\n        foreach (var word in words) {\n            var len = word.Distinct().Count();\n\
    \            if (len > max_len) {\n                max_len = len;\n          \
    \      first_word = word;\n            }\n        }\n        return first_word;",
  "        // Replace this line with your code\n        return \"\";", "        int\
    \ max = -1;\n        string ans = \"\";\n        foreach (string w in words) {\n\
    \            int curr = NumberOfUniqueChars(w);\n            if (curr > max) {\n\
    \                max = curr;\n                ans = w;\n            }\n      \
    \  }\n        return ans;"]
stop_tokens:
- "\n    }\n"
