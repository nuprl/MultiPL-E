language: cs
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ result = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n     \
    \       if (l[i] > result) {\n                result = l[i];\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count > 0) {\n            long max = l[0];\n            for (int i = 1; i\
    \ < l.Count; i++) {\n                max = Math.Max(max, l[i]);\n            }\n\
    \            return max;\n        } else {\n            return 0;\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        long n = (long)l.Count;\n        long i = 0L;\n       \
    \ while ((i < n)) {\n            long x = l[(int)(i)];\n            if ((x > max))\
    \ {\n                max = x;\n            }\n            i = (i + 1L);\n    \
    \    }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count() == 0) {\n            throw new Exception(\"MaxElement of empty list.\"\
    );\n        }\n        long max_elem = l[0];\n        for (int i = 1; i < l.Count();\
    \ i++) {\n            if (l[i] > max_elem) {\n                max_elem = l[i];\n\
    \            }\n        }\n        return max_elem;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long x in l) {\n            if (x > max) {\n \
    \               max = x;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = l[0];\n        foreach (long i in l) {\n            if (i > m) {\n     \
    \           m = i;\n            }\n        }\n        return m;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((x, y) => x > y ? x : y);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) return 0;\n        long result = l[0];\n        for (int i =\
    \ 1; i < l.Count; i++) {\n            if (l[i] > result) result = l[i];\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ result = long.MinValue;\n        foreach (long element in l) {\n           \
    \ if (element > result) {\n                result = element;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((res, el) => el > res ? el : res);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L,\
    \ (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((x, y) => x > y ? x : y);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ returnMe = l[0];\n        foreach (long i in l) {\n            if (i > returnMe)\
    \ {\n                returnMe = i;\n            }\n        }\n        return returnMe;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ res = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > res) res = l[i];\n        }\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new ArgumentException(\"Cannot return maximum\
    \ of empty list\");\n        }\n        long max = l[0];\n        for (int i =\
    \ 1; i < l.Count; i++) {\n            if (l[i] > max) {\n                max =\
    \ l[i];\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxVal = l[0];\n        foreach (long v in l) {\n            if (v > maxVal)\
    \ {\n                maxVal = v;\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new Exception(\"l cannot be empty\");\n\
    \        }\n        long ret = l[0];\n        foreach (long i in l) {\n      \
    \      if (i > ret) {\n                ret = i;\n            }\n        }\n  \
    \      return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long i in l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxEl = long.MinValue;\n        foreach (long el in l) {\n            if (el\
    \ > maxEl) {\n                maxEl = el;\n            }\n        }\n        return\
    \ maxEl;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > m) {\n                m = l[i];\n            }\n        }\n        return\
    \ m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) max = l[i];\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int x = 0; x < l.Count; x++) {\n            if (l[x]\
    \ > max) {\n                max = l[x];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = l[0];\n        foreach (long e in l) {\n            if (e > m) {\n     \
    \           m = e;\n            }\n        }\n        return m;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        var\
    \ ans = long.MinValue;\n        foreach (var n in l) {\n            if (n > ans)\
    \ {\n                ans = n;\n            }\n        }\n        return ans;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxEl = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > maxEl) {\n                maxEl = l[i];\n            }\n        }\n      \
    \  return maxEl;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    if (l[i] > max) {\n                max = l[i];\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long i in l) {\n            if (i > max) {\n \
    \               max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            return 0L;\n        }\n        else {\n      \
    \      long max = l[0];\n            for (int i = 1; i < l.Count; i++) {\n   \
    \             if (l[i] > max) {\n                    max = l[i];\n           \
    \     }\n            }\n            return max;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = long.MinValue;\n        foreach (long e in l) {\n            if (e > m)\
    \ {\n                m = e;\n            }\n        }\n        return m;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long i in l) {\n            if (i > max) {\n \
    \               max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((curmax, x) => (x > curmax) ? x : curmax);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxValue = long.MinValue;\n        foreach (long value in l) {\n           \
    \ if (value > maxValue) {\n                maxValue = value;\n            }\n\
    \        }\n        return maxValue;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxValue = l[0];\n        foreach (long value in l) {\n            maxValue\
    \ = Math.Max(maxValue, value);\n        }\n        return maxValue;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long x in l) {\n            if (x > max) {\n \
    \               max = x;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ MaxVal = l[0];\n        foreach (long x in l) {\n            if (x > MaxVal)\
    \ {\n                MaxVal = x;\n            }\n        }\n        return MaxVal;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ans = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > ans) {\n                ans = l[i];\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    if (l[i] > max) {\n                max = l[i];\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0)\n            throw new Exception(\"ArgumentException\");\n  \
    \      else {\n            long m = l[0];\n            foreach (long v in l) {\n\
    \                if (v > m)\n                    m = v;\n            }\n     \
    \       return m;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long e in l) {\n            if (e > max)\
    \ {\n                max = e;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = l[0];\n        foreach (long elem in l) {\n            if (elem > m) {\n\
    \                m = elem;\n            }\n        }\n        return m;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maximum = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (l[i] > maximum) {\n                maximum = l[i];\n            }\n       \
    \ }\n        return maximum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ans = (long)((long)l[(int)0L]);\n        long i = (long)1L;\n        for (;\
    \ i < (long)l.Count; i++) {\n            if (l[(int)i] > ans) {\n            \
    \    ans = l[(int)i];\n            }\n        }\n        return ans;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ ((l.Count == 0)) {\n            throw new System.Exception(\"List is empty\"\
    );\n        }\n\n        long max = l[0];\n        for (long i = 0; (i < l.Count);\
    \ i++) {\n            if ((l[(int)(i)] > max)) {\n                max = l[(int)(i)];\n\
    \            }\n\n        }\n\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L,\
    \ (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        var\
    \ res = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > res) {\n                res = l[i];\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ret = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    if (l[i] > ret) {\n                ret = l[i];\n            }\n        }\n\
    \        return ret;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    if (l[i] > max) {\n                max = l[i];\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxValue = l[0];\n        foreach (long value in l) {\n            maxValue\
    \ = (maxValue > value) ? maxValue : value;\n        }\n        return maxValue;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > m) {\n                m = l[i];\n            }\n        }\n        return\
    \ m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long i in l) {\n            if (i > max) {\n \
    \               max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long x in l) {\n            if (x > max) {\n \
    \               max = x;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) { throw new Exception(\"There are no elements in the given list.\"\
    ); }\n        long result = l[0];\n        foreach (long x in l) {\n         \
    \   if (x > result) { result = x; }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > m) {\n                m = l[i];\n            }\n        }\n        return\
    \ m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maximum = long.MinValue;\n        foreach (long element in l) {\n          \
    \  maximum = Math.Max(maximum, element);\n        }\n        return maximum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((long)l[0], (x, y) => x > y ? x : y);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long x in l) {\n            if (x > max)\
    \ {\n                max = x;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        long j = 0;\n        for (long i = 0; i < l.Count; i++)\
    \ {\n            if (l[(int)i] > max) {\n                max = l[(int)i];\n  \
    \              j = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long i in l) {\n            if (i > max)\
    \ max = i;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxElement = l[0];\n        for (int i = 1; i < l.Count; i++) {\n          \
    \  if (l[i] > maxElement) maxElement = l[i];\n        }\n        return maxElement;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long i in l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxEl = (long)0L;\n        foreach (long item in l) {\n            if (item\
    \ > maxEl) {\n                maxEl = item;\n            }\n        }\n      \
    \  return maxEl;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long x in l)\n            if (x > max)\n\
    \                max = x;\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L,\
    \ (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxElement = l[0];\n        for (int ii = 0; ii < l.Count; ++ii) {\n       \
    \     maxElement = Math.Max(maxElement, l[ii]);\n        }\n        return maxElement;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long e in l) {\n            if (e > max) {\n \
    \               max = e;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxValue = long.MinValue;\n        foreach (long value in l) {\n           \
    \ if (value > maxValue) {\n                maxValue = value;\n            }\n\
    \        }\n        return maxValue;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = (long)l[(int)0L];\n        foreach (long value in l) {\n            if\
    \ (value > max) {\n                max = value;\n            }\n        }\n  \
    \      return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((a, b) => a > b ? a : b);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long item in l) {\n            if (item\
    \ > max) {\n                max = item;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maximum = l[0];\n        foreach (long e in l) {\n            if (e > maximum)\
    \ {\n                maximum = e;\n            }\n        }\n        return maximum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ tmp = (long)l[(int)0L];\n        foreach (var item in l) {\n            if (item\
    \ > tmp) {\n                tmp = item;\n            }\n        }\n        return\
    \ tmp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxValue = long.MinValue;\n        foreach (long x in l) {\n            if (x\
    \ > maxValue) maxValue = x;\n        }\n        return maxValue;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if(l.Count\
    \ == 0) {\n            throw new Exception(\"MaxElement called on empty list\"\
    );\n        }\n        long m = l[0];\n        foreach(long e in l) {\n      \
    \      if(e > m) {\n                m = e;\n            }\n        }\n       \
    \ return m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max_element = long.MinValue;\n        foreach (long value in l) {\n        \
    \    if (value > max_element) {\n                max_element = value;\n      \
    \      }\n        }\n        return max_element;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L,\
    \ (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new Exception(\"Empty list\");\n       \
    \ }\n        long ans = l[0];\n        foreach (long elem in l) {\n          \
    \  if (elem > ans) {\n                ans = elem;\n            }\n        }\n\
    \        return ans;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long v in l) {\n            if (v > max) {\n \
    \               max = v;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        var\
    \ max = l[0];\n        foreach (var x in l) {\n            if (x > max) {\n  \
    \              max = x;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        var\
    \ max = long.MinValue;\n        foreach (var i in l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ret = long.MinValue;\n        foreach (long i in l) {\n            if (i > ret)\
    \ {\n                ret = i;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long x in l) {\n            if (x > max)\
    \ {\n                max = x;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = long.MinValue;\n        foreach (long x in l) {\n            if (x > m)\
    \ {\n                m = x;\n            }\n        }\n        return m;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long value in l) {\n            if (value > max)\
    \ {\n                max = value;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    if (l[i] > max) {\n                max = l[i];\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxEl = l[0];\n        foreach (long el in l) {\n            if (el > maxEl)\
    \ {\n                maxEl = el;\n            }\n        }\n        return maxEl;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ret = 0L;\n        long index = 0L;\n        long n = (long)l.Count;\n     \
    \   long i = 0L;\n        while ((i < n)) {\n            if (((index == 0L) ||\
    \ (l[(int)(index)] < l[(int)(i)]))) {\n                index = i;\n          \
    \  }\n            i = (i + 1L);\n        }\n        ret = l[(int)(index)];\n \
    \       return ret;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long i in l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long element in l) {\n            if\
    \ (element > max) {\n                max = element;\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long x in l) {\n            if (x > max)\
    \ {\n                max = x;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 1) {\n            return l[0];\n        }\n        else {\n    \
    \        long max_tail = MaxElement(l.GetRange(1, l.Count - 1));\n           \
    \ if (l[0] > max_tail) {\n                return l[0];\n            }\n      \
    \      else {\n                return max_tail;\n            }\n        }\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new Exception(\"Can't get max element of\
    \ an empty list\");\n        }\n        long max = l[0];\n        foreach (long\
    \ element in l) {\n            if (element > max) {\n                max = element;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L,\
    \ (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ (l).Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long x in l)\n            if (x > max)\n     \
    \           max = x;\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long element in l) {\n            if\
    \ (element > max) {\n                max = element;\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            return 0L;\n        }\n        long m = l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] > m) {\n  \
    \              m = l[i];\n            }\n        }\n        return m;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new ArgumentException(\"Empty list\");\n\
    \        }\n        long result = l[0];\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            result = Math.Max(result, l[i]);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long e in l) {\n            if (e > max) {\n \
    \               max = e;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    if (l[i] > max) {\n                max = l[i];\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((x, y) => x > y ? x : y);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new Exception(\"The list is empty.\");\n\
    \        }\n        long r = l[0];\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] > r) {\n                r = l[i];\n            }\n \
    \       }\n        return r;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long x in l) {\n            if (x > max) {\n \
    \               max = x;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long i in l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Concat(new long[]{(long)0L}).Max();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    if (l[i] > max) {\n                max = l[i];\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new System.Exception(\"Cannot find maximum\
    \ element of an empty list.\");\n        }\n        var max = l[0];\n        foreach\
    \ (var x in l) {\n            if (x > max) {\n                max = x;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long value in l) {\n            if (value\
    \ > max)\n                max = value;\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            return 0L;\n        } else {\n            long\
    \ cur = l[0];\n            for (int i = 1; i < l.Count; i++) {\n             \
    \   cur = Math.Max(cur, l[i]);\n            }\n            return cur;\n     \
    \   }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ result = long.MinValue;\n        foreach (long e in l) {\n            if (e\
    \ > result) {\n                result = e;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long item in l) {\n            if (item\
    \ > max) {\n                max = item;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max_ = (long)l[(int)0L];\n        foreach (var i_ in l) {\n            if (i_\
    \ > max_) {\n                max_ = i_;\n            }\n        }\n        return\
    \ max_;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        long m = l[0];\n        foreach (long x in l) {\n           \
    \ if (x > m) {\n                m = x;\n            }\n        }\n        return\
    \ m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ result = 0L;\n        result = l[0];\n        foreach (long x in l) {\n    \
    \        if (x > result) {\n                result = x;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ cMax = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > cMax) {\n                cMax = l[i];\n            }\n        }\n        return\
    \ cMax;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max_el = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (l[i] > max_el) {\n                max_el = l[i];\n            }\n        }\n\
    \        return max_el;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((x, y) => (x > y) ? x : y);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        var\
    \ max = l[0];\n        foreach (var elem in l) {\n            if (elem > max)\
    \ {\n                max = elem;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ res = l[0];\n        foreach (long i in l)\n            if (i > res)\n     \
    \           res = i;\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ans = long.MinValue;\n        foreach (long v in l) {\n            if (v > ans)\
    \ {\n                ans = v;\n            }\n        }\n        return ans;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ result = (long)long.MinValue;\n        foreach (long i in l) {\n           \
    \ if (i > result) {\n                result = i;\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long element in l) {\n            if\
    \ (element > max) {\n                max = element;\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    max = Math.Max(max, l[i]);\n        }\n        return max;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new Exception(\"wtf\");\n        }\n   \
    \     long m = l[0];\n        foreach (long e in l) {\n            if (e > m)\
    \ {\n                m = e;\n            }\n        }\n        return m;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((a, b) => (a > b) ? a : b);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ best = l[0];\n        foreach (long item in l) {\n            if (item > best)\
    \ {\n                best = item;\n            }\n        }\n        return best;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ret = long.MinValue;\n        foreach (long x in l) {\n            if (x > ret)\
    \ {\n                ret = x;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++)\n            if (l[i]\
    \ > max)\n                max = l[i];\n        return max;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count() == 0) {\n            throw new Exception(\"Empty list\");\n     \
    \   }\n        else {\n            long m = l[0];\n            foreach (long x\
    \ in l) {\n                if (x > m) {\n                    m = x;\n        \
    \        }\n            }\n            return m;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max_elem = l[0];\n        foreach (long e in l) {\n            if (e > max_elem)\
    \ {\n                max_elem = e;\n            }\n        }\n        return max_elem;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = l[0];\n        foreach (long v in l)\n            if (v > m)\n         \
    \       m = v;\n        return m;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long x in l) {\n            if (x > max) max =\
    \ x;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxi = long.MinValue;\n        foreach (long v in l) {\n            if (v >\
    \ maxi) maxi = v;\n        }\n        return maxi;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L,\
    \ (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) max = l[i];\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long i in l) {\n            if (i > max)\
    \ max = i;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        for (int i = 0; i < l.Count; i++) {\n        \
    \    max = Math.Max(max, l[i]);\n        }\n        return max;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ans = long.MinValue;\n        foreach (long e in l) {\n            if (e > ans)\
    \ {\n                ans = e;\n            }\n        }\n        return ans;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ result = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            result\
    \ = (result >= l[i]) ? result : l[i];\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new ArgumentException(\"Input list empty\"\
    );\n        } else {\n            long max = l[0];\n            for (int i = 1;\
    \ i < l.Count; i++) {\n                if (l[i] > max) {\n                   \
    \ max = l[i];\n                }\n            }\n            return max;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0)\n            throw new Exception(\"Empty list\");\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max)\n                max = l[i];\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long i in l)\n            if (i > max)\n     \
    \           max = i;\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Aggregate((a, b) => a > b ? a : b);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long num in l) {\n            if (num\
    \ > max) {\n                max = num;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ result = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            result\
    \ = Math.Max(result, l[i]);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ret = l[0];\n        for (int x = 0; x < l.Count; x++) {\n            ret =\
    \ Math.Max(ret, l[x]);\n        }\n        return ret;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max;\n        max = l[0];\n        foreach (long x in l) {\n            if (x\
    \ > max) {\n                max = x;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = l[0];\n        foreach (long x in l) {\n            if (x > m) {\n     \
    \           m = x;\n            }\n        }\n        return m;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long i in l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        var\
    \ iter = l.GetEnumerator();\n        iter.MoveNext();\n        var result = iter.Current;\n\
    \        while (iter.MoveNext()) {\n            if (iter.Current > result) {\n\
    \                result = iter.Current;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        long result = l[0];\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] > result) {\n                result = l[i];\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxElem = l[0];\n        foreach (long element in l) {\n            if (element\
    \ > maxElem) {\n                maxElem = element;\n            }\n        }\n\
    \        return maxElem;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        var\
    \ max_val = (long) l[(int) 0L];\n        foreach (var elem in l) {\n         \
    \   if (elem > max_val) {\n                max_val = elem;\n            }\n  \
    \      }\n        return max_val;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxElem = l[0];\n        foreach (long elem in l) {\n            if (elem >\
    \ maxElem) {\n                maxElem = elem;\n            }\n        }\n    \
    \    return maxElem;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\
    \ == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ _max = (long)l[(int)0L];\n        foreach (var x in l) {\n            if (x\
    \ > _max) {\n                _max = x;\n            }\n        }\n        return\
    \ _max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long v in l)\n            if (v > max)\n\
    \                max = v;\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L,\
    \ (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            max =\
    \ Math.Max(max, l[i]);\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new Exception(\"Can't call MaxElement on\
    \ an empty list.\");\n        }\n        long MaxSoFar = l[0];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > MaxSoFar) {\n           \
    \     MaxSoFar = l[i];\n            }\n        }\n        return MaxSoFar;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ans = long.MinValue;\n        foreach (long e in l) {\n            if (e > ans)\
    \ {\n                ans = e;\n            }\n        }\n        return ans;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015716
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long i in l) {\n            if (i > max) {\n \
    \               max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        if\
    \ (l.Count == 0) {\n            throw new ArgumentException(\"MaxElement of empty\
    \ list.\");\n        }\n        long maxElem = l[0];\n        foreach (long elem\
    \ in l) {\n            if (elem > maxElem) {\n                maxElem = elem;\n\
    \            }\n        }\n        return maxElem;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L,\
    \ (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            max =\
    \ max > l[i] ? max : l[i];\n        }\n        return max;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = long.MinValue;\n        foreach (long x in l) {\n            if (x > m)\
    \ {\n                m = x;\n            }\n        }\n        return m;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        var\
    \ max = l[0];\n        foreach (var elem in l) {\n            if (elem > max)\
    \ {\n                max = elem;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015715
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ res = long.MinValue;\n        foreach (long i in l) {\n            if (i > res)\
    \ {\n                res = i;\n            }\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ans = long.MinValue;\n        foreach (long x in l)\n            ans = Math.Max(ans,\
    \ x);\n        return ans;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long m in l) {\n            if (m > max)\
    \ {\n                max = m;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ ret = long.MinValue;\n        foreach (long elem in l) {\n            if (elem\
    \ > ret) {\n                ret = elem;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = l[0];\n        foreach (long i in l) {\n            if (i > max) max =\
    \ i;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        Debug.Assert(l.Count\
    \ >= 1);\n        long max_element = l[0];\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > max_element) {\n                max_element =\
    \ l[i];\n            }\n        }\n        return max_element;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        return\
    \ l.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max_element = l[0];\n        foreach (long element in l) {\n            if (element\
    \ > max_element) {\n                max_element = element;\n            }\n  \
    \      }\n        return max_element;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max_ = l[0];\n        foreach (long e in l) {\n            if (e > max_) {\n\
    \                max_ = e;\n            }\n        }\n        return max_;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ r = long.MinValue;\n        foreach (long i in l) {\n            if (i > r)\
    \ {\n                r = i;\n            }\n        }\n        return r;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long l1 in l) {\n            if (l1 >\
    \ max) {\n                max = l1;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ m = long.MinValue;\n        foreach (long x in l) {\n            if (x > m)\
    \ {\n                m = x;\n            }\n        }\n        return m;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015714
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ maxElem = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            maxElem\
    \ = Math.Max(maxElem, l[i]);\n        }\n        return maxElem;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015717
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ max = long.MinValue;\n        foreach (long i in l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
    \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
    \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015713
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    //\
    \ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
    \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
    \    // (123L)\n    public static long MaxElement(List<long> l) {\n        long\
    \ __retval__MaxElement22 = (long)0L;\n        if (((l.Count) > (0L))) {\n    \
    \        long largest = (long)l[(int)(0L)];\n            {\n                int\
    \ __loop1_iteration = 0;\n                var __loop1_result =\n             \
    \       (from __loop1_tmp_item___noname1 in EnumerableExtensions.Enumerate((0L),\
    \ (l.Count), true)\n                    from __loop1_tmp_item_i in EnumerableExtensions.Enumerate((0L),\
    \ (l.Count), true)\n                    select\n                        new\n\
    \                        {\n                            __loop1_item___noname1\
    \ = __loop1_tmp_item___noname1,\n                            __loop1_item_i =\
    \ __loop1_tmp_item_i,\n                        }).ToArray();\n               \
    \ foreach (var __loop1_item in __loop1_result)\n                {\n          \
    \          var __noname1 = __loop1_item.__loop1_item___noname1;\n            \
    \        var i = __loop1_item.__loop1_item_i;\n                    ++__loop1_iteration;\n\
    \                    if ((((long)l[(int)(i)]) > (largest))) {\n              \
    \          largest = (long)l[(int)(i)];\n                    }\n             \
    \   }\n            }\n            __retval__MaxElement22 = largest;\n        }\n\
    \        return __retval__MaxElement22;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L,\
    \ (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L,\
    \ (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmdeqddcw.cs(21,57): error CS0103: The name ''EnumerableExtensions'' does
    not exist in the current context

    /tmp/tmpmdeqddcw.cs(22,48): error CS0103: The name ''EnumerableExtensions'' does
    not exist in the current context

    '
  timestamp: 1660015717
