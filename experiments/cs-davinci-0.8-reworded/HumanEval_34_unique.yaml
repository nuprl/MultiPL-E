name: HumanEval_34_unique
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique elements in a list\n    // >>> Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))\n    public static List<long>\
  \ Unique(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"
completions: ['        return new List<long>(new HashSet<long>(l));', "        var\
    \ nl = new List<long>();\n        foreach (var i in l) {\n            if (!nl.Contains(i))\
    \ {\n                nl.Add(i);\n            }\n        }\n        nl.Sort();\n\
    \        return nl;", '        return l.GroupBy(x => x).Select(x => x.First()).ToList();',
  "        l.Sort();\n        long last = l[0];\n        var nl = new List<long>();\n\
    \        nl.Add(last);\n        for (int i = 1; i < l.Count; i++) {\n        \
    \    if (l[i] != last) {\n                last = l[i];\n                nl.Add(last);\n\
    \            }\n        }\n        return nl;", "        List<long> u = new List<long>();\n\
    \        foreach (long v in l) {\n            if (!u.Contains(v)) {\n        \
    \        u.Add(v);\n            }\n        }\n        u.Sort();\n        return\
    \ u;", "        l.Sort();\n        var r = new List<long>();\n        long last\
    \ = l[0];\n        r.Add(last);\n        for (long i = (long)1L; i < l.Count;\
    \ i++) {\n            if (l[i] != last) {\n                r.Add(l[i]);\n    \
    \            last = l[i];\n            }\n        }\n        return r;", "   \
    \     l.Sort();\n        List<long> result = new List<long>();\n        for (int\
    \ i = 0; i < l.Count; i++) {\n            if (i > 0 && l[i] == l[i - 1]) {\n \
    \               continue;\n            }\n            result.Add(l[i]);\n    \
    \    }\n        return result;", "        l.Sort();\n        return l.Distinct().ToList();",
  "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (l[i - 1] == l[i]) {\n                l.RemoveAt(i);\n                i -= 1;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        var\
    \ result = new List<long>();\n        foreach (var i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        l.Sort();\n        for (int i = l.Count - 1; i > 0; i--)\
    \ {\n            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n   \
    \         }\n        }\n        return l;", '        return l.Distinct().OrderBy(v
    => v).ToList();', '        return l.Distinct().OrderBy(x => x).ToList();', " \
    \       l.Sort();\n        long last = l[0];\n        int i = 1;\n        while\
    \ (i < l.Count) {\n            if (l[i] == last) {\n                l.RemoveAt(i);\n\
    \            } else {\n                last = l[i];\n                i += 1;\n\
    \            }\n        }\n        return l;", '        return l.Distinct().OrderBy(x
    => x).ToList();', "        l.Sort();\n        var last = l[0];\n        var nl\
    \ = new List<long>();\n        nl.Add(last);\n        for (var i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] != last) {\n                last = l[i];\n    \
    \            nl.Add(last);\n            }\n        }\n        return nl;", " \
    \       l.Sort();\n        for (int i = l.Count - 1; i > 0; i--) {\n         \
    \   if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n            }\n \
    \       }\n        return l;", "        List<long> ul = new List<long>();\n  \
    \      foreach (long i in l) {\n            if (!ul.Contains(i)) ul.Add(i);\n\
    \        }\n        ul.Sort();\n        return ul;", "        List<long> uniq\
    \ = new List<long>();\n        l.Sort();\n        foreach (long x in l) {\n  \
    \          if (uniq.Count == 0 || uniq[uniq.Count - 1] != x) {\n             \
    \   uniq.Add(x);\n            }\n        }\n        return uniq;", "        l.Sort();\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            if (i == 0 || l[i - 1] != l[i]) {\n                result.Add(l[i]);\n\
    \            }\n        }\n        return result;", "        l.Sort();\n     \
    \   int i = 0;\n        int j = 1;\n        while (j < l.Count) {\n          \
    \  if (l[i] == l[j]) {\n                j++;\n            } else {\n         \
    \       i++;\n                l[i] = l[j];\n                j++;\n           \
    \ }\n        }\n        return l.GetRange(0, i + 1);", "        List<long> temp\
    \ = new List<long>();\n        temp.AddRange(l);\n        temp.Sort();\n     \
    \   for (int i = 1; i < temp.Count; i++) {\n            if (temp[i] == temp[i\
    \ - 1]) {\n                temp.RemoveAt(i);\n                i -= 1;\n      \
    \      }\n        }\n        return temp;", "        var res = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var e in l) {\n    \
    \        if (!set.Contains(e)) {\n                res.Add(e);\n              \
    \  set.Add(e);\n            }\n        }\n        res.Sort();\n        return\
    \ res;", "        List<long> result = new List<long>();\n        l.Sort();\n \
    \       int i = 0;\n        while (i < l.Count) {\n            result.Add(l[i]);\n\
    \            i = i + 1;\n            while (i < l.Count && l[i - 1] == l[i]) {\n\
    \                i = i + 1;\n            }\n        }\n        return result;",
  "        // TODO: What about the case when l is empty?\n        var r = new List<long>();\n\
    \        r.Add(l[0]);\n        for (int i = 1; i < l.Count; i++) {\n         \
    \   if (l[i] != l[i - 1]) {\n                r.Add(l[i]);\n            }\n   \
    \     }\n        return r;", "        l.Sort();\n        long last = l[0];\n \
    \       for (int i = 1; i < l.Count; i++) {\n            if (l[i] == last) {\n\
    \                l.RemoveAt(i);\n                i--;\n            } else {\n\
    \                last = l[i];\n            }\n        }\n        return l;", " \
    \       l.Sort();\n        return l.Distinct().ToList();", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        List<long> uni = new List<long>();\n   \
    \     for (int i = 0; i < l.Count; i++) {\n            if (uni.Contains(l[i]))\
    \ {\n                continue;\n            }\n            uni.Add(l[i]);\n  \
    \      }\n        uni.Sort();\n        return uni;", '        return l.Distinct().OrderBy(x
    => x).ToList();', "        l.Sort();\n        List<long> result = new List<long>();\n\
    \        foreach (long element in l) {\n            if (result.Count == 0 || result[result.Count\
    \ - 1] != element) {\n                result.Add(element);\n            }\n  \
    \      }\n        return result;", "        l.Sort();\n        List<long> u =\
    \ new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n           \
    \ if (i == 0 || l[i - 1] != l[i]) {\n                u.Add(l[i]);\n          \
    \  }\n        }\n        return u;", "        l.Sort();\n        for (int i =\
    \ l.Count - 1; i > 0; i--) {\n            if (l[i] == l[i - 1]) {\n          \
    \      l.RemoveAt(i);\n            }\n        }\n        return l;", "       \
    \ l.Sort();\n        var ret = new List<long>();\n        long last = -1;\n  \
    \      foreach (var i in l) {\n            if (i != last) {\n                ret.Add(i);\n\
    \                last = i;\n            }\n        }\n        return ret;", '        return
    l.Distinct().OrderBy(x => x).ToList();', "        l.Sort();\n        return l.Distinct().ToList();",
  '        return l.Distinct().OrderBy(x => x).ToList();', "        List<long> r =\
    \ new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n           \
    \ if (r.Contains(l[i])) {\n                continue;\n            }\n        \
    \    r.Add(l[i]);\n        }\n        r.Sort();\n        return r;", "       \
    \ List<long> result = new List<long>();\n        foreach (long elem in l) {\n\
    \            if (!result.Contains(elem)) {\n                result.Add(elem);\n\
    \            }\n        }\n        result.Sort();\n        return result;", '        return
    l.Distinct().OrderBy(i => i).ToList();', "        l.Sort();\n        List<long>\
    \ res = new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n     \
    \       if (i == 0 || l[i] != l[i - 1]) {\n                res.Add(l[i]);\n  \
    \          }\n        }\n        return res;", "        List<long> ans = new List<long>();\n\
    \        foreach (long x in l) {\n            if (!ans.Contains(x)) {\n      \
    \          ans.Add(x);\n            }\n        }\n        ans.Sort();\n      \
    \  return ans;", "        List<long> ret = new List<long>();\n        ret.Add(l[0]);\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1])\
    \ {\n                ret.Add(l[i]);\n            }\n        }\n        return\
    \ ret;", "        var d = new Dictionary<long, bool>();\n        foreach (var\
    \ e in l) {\n            d[e] = true;\n        }\n        return new List<long>(d.Keys);",
  '        return l.Distinct().OrderBy(x => x).ToList();', "        l.Sort();\n  \
    \      var u = new List<long>();\n        var ul = l.Count;\n        if (ul ==\
    \ 0) return u;\n        u.Add(l[0]);\n        for (var i = 1L; i < ul; i++) {\n\
    \            if (l[(int)i] != l[(int)(i - 1L)]) {\n                u.Add(l[(int)i]);\n\
    \            }\n        }\n        return u;", "        var s = new HashSet<long>();\n\
    \        foreach (var e in l) {\n            s.Add(e);\n        }\n        var\
    \ a = new List<long>();\n        foreach (var e in s) {\n            a.Add(e);\n\
    \        }\n        a.Sort();\n        return a;", "        l.Sort();\n      \
    \  for (int i = l.Count - 1; i > 0; i--) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        long p = -1;\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            if (l[i] == p) {\n                l.RemoveAt(i);\n     \
    \           i -= 1;\n            } else {\n                p = l[i];\n       \
    \     }\n        }\n        return l;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        result.Sort();\n\
    \        return result;", '        return l.Distinct().OrderBy(x => x).ToList();',
  '        return l.Distinct().OrderBy(x => x).ToList();', "        l.Sort();\n  \
    \      return l.Distinct().ToList();", "        var r = new List<long>();\n  \
    \      r.Add(l[0]);\n        foreach (var e in l) {\n            if (r[r.Count\
    \ - 1] != e) {\n                r.Add(e);\n            }\n        }\n        return\
    \ r;", "        l.Sort();\n        long last = -1;\n        var ret = new List<long>();\n\
    \        foreach (var i in l) {\n            if (i != last) {\n              \
    \  ret.Add(i);\n                last = i;\n            }\n        }\n        return\
    \ ret;", "        List<long> res = new List<long>();\n        foreach (long x\
    \ in l) {\n            if (!res.Contains(x)) {\n                res.Add(x);\n\
    \            }\n        }\n        res.Sort();\n        return res;", "      \
    \  l.Sort();\n        int j = 0;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[j] != l[i]) {\n                j++;\n                l[j] =\
    \ l[i];\n            }\n        }\n        return l.GetRange(0, j + 1);", "  \
    \      var s = new HashSet<long>();\n        var r = new List<long>();\n     \
    \   foreach (var x in l) {\n            if (s.Contains(x)) {\n               \
    \ continue;\n            }\n            s.Add(x);\n            r.Add(x);\n   \
    \     }\n        r.Sort();\n        return r;", "        l.Sort();\n        return\
    \ l.FindAll(l[0] == l[0] ? (Predicate<long>)(x => x != l[0]) : (Predicate<long>)(x\
    \ => x == l[0]));", "        l.Sort();\n        var c = l.Count;\n        if (c\
    \ <= 1) {\n            return l;\n        }\n        var r = new List<long>();\n\
    \        r.Add(l[0]);\n        for (long i = 1; i < c; i++) {\n            if\
    \ (l[i] != l[i - 1]) {\n                r.Add(l[i]);\n            }\n        }\n\
    \        return r;", "        if (l.Count == 0) {\n            return l;\n   \
    \     }\n        l.Sort();\n        List<long> r = new List<long>();\n       \
    \ r.Add(l[0]);\n        long v = l[0];\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] != v) {\n                r.Add(l[i]);\n            \
    \    v = l[i];\n            }\n        }\n        return r;", "        List<long>\
    \ x = new List<long>();\n        foreach (long v in l) {\n            if (!x.Contains(v))\
    \ {\n                x.Add(v);\n            }\n        }\n        x.Sort();\n\
    \        return x;", "        List<long> newl = new List<long>();\n        foreach\
    \ (long i in l) {\n            if (!newl.Contains(i)) {\n                newl.Add(i);\n\
    \            }\n        }\n        newl.Sort();\n        return newl;", '        return
    l.Distinct().OrderBy(a => a).ToList();', "        // Sorting\n        List<long>\
    \ s = new List<long>(l);\n        s.Sort();\n        // Unique\n        List<long>\
    \ u = new List<long>();\n        long i = 0;\n        while (i < s.Count) {\n\
    \            u.Add(s[i]);\n            long j = i + 1;\n            while (j <\
    \ s.Count && s[i] == s[j]) {\n                j++;\n            }\n          \
    \  i = j;\n        }\n        return u;", "        List<long> ret = new List<long>();\n\
    \        foreach (long n in l) {\n            if (!ret.Contains(n)) {\n      \
    \          ret.Add(n);\n            }\n        }\n        ret.Sort();\n      \
    \  return ret;", "        l.Sort();\n        for (int i = 1; i < l.Count; ) {\n\
    \            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n       \
    \     } else {\n                i += 1;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        List<long> list = new List<long>();\n     \
    \   list.Add(l[0]);\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (l[i] != l[i - 1]) {\n                list.Add(l[i]);\n            }\n  \
    \      }\n        return list;", '        return l.Distinct().OrderBy(x => x).ToList();',
  "        l.Sort();\n        if (l.Count == 0) {\n            return l;\n       \
    \ }\n        List<long> res = new List<long>();\n        long prev = l[0];\n \
    \       res.Add(prev);\n        for (int i = 1; i < l.Count; i++) {\n        \
    \    if (l[i] != prev) {\n                res.Add(l[i]);\n            }\n    \
    \        prev = l[i];\n        }\n        return res;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        unique.Sort();\n\
    \        return unique;", "        List<long> res = new List<long>();\n      \
    \  for (int i = 0; i < l.Count; i++) {\n            if (!res.Contains(l[i])) {\n\
    \                res.Add(l[i]);\n            }\n        }\n        res.Sort();\n\
    \        return res;", "        List<long> ret = new List<long>();\n        foreach\
    \ (long el in l) {\n            if (!ret.Contains(el)) {\n                ret.Add(el);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;", "      \
    \  l.Sort();\n        int last_index = 0;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] != l[last_index]) {\n                last_index++;\n\
    \                l[last_index] = l[i];\n            }\n        }\n        l.RemoveRange(last_index\
    \ + 1, l.Count - last_index - 1);\n        return l;", "        List<long> r =\
    \ new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n           \
    \ if (!r.Contains(l[i])) {\n                r.Add(l[i]);\n            }\n    \
    \    }\n        r.Sort();\n        return r;", "        var result = new List<long>();\n\
    \        foreach (var val in l) {\n            if (!result.Contains(val)) {\n\
    \                result.Add(val);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        l.Sort();\n        var r = new List<long>();\n\
    \        for (long i = 0; i < l.Count; i++) {\n            if (i == 0 || l[i]\
    \ != l[i - 1]) {\n                r.Add(l[i]);\n            }\n        }\n   \
    \     return r;", '        return new List<long>(new HashSet<long>(l));', "  \
    \      l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i += 1;\n            }\n        }\n        return\
    \ l;", '        return l.Distinct().OrderBy(x => x).ToList();', "        l.Sort();\n\
    \        int last = 0;\n        while (last < l.Count) {\n            int end\
    \ = last + 1;\n            while (end < l.Count && l[end] == l[last]) {\n    \
    \            end++;\n            }\n            l.RemoveRange(last + 1, end -\
    \ last - 1);\n            last++;\n        }\n        return l;", '        return
    l.Distinct().OrderBy(x => x).ToList();', "        if (l.Count == 0) {\n      \
    \      return l;\n        }\n        l.Sort();\n        long prev = l[0];\n  \
    \      List<long> result = new List<long>();\n        result.Add(prev);\n    \
    \    for (int i = 1; i < l.Count; i++) {\n            if (l[i] != prev) {\n  \
    \              result.Add(l[i]);\n                prev = l[i];\n            }\n\
    \        }\n        return result;", "        List<long> u = new List<long>();\n\
    \        for (int i = 0; i < l.Count; i++) {\n            if (!u.Contains(l[i]))\
    \ {\n                u.Add(l[i]);\n            }\n        }\n        u.Sort();\n\
    \        return u;", "        l.Sort();\n        int j = 0;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[j] != l[i]) {\n              \
    \  j++;\n                l[j] = l[i];\n            }\n        }\n        return\
    \ l.GetRange(0, j + 1);", "        l.Sort();\n        int j = 0;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (l[j] != l[i]) {\n         \
    \       j++;\n                l[j] = l[i];\n            }\n        }\n       \
    \ l.RemoveRange(j + 1, l.Count - j - 1);\n        return l;", "        List<long>\
    \ ret = new List<long>();\n        foreach (long x in l) {\n            if (!ret.Contains(x))\
    \ {\n                ret.Add(x);\n            }\n        }\n        ret.Sort();\n\
    \        return ret;", "        List<long> r = new List<long>();\n        l.Sort();\n\
    \        long c = -1;\n        foreach (long e in l) {\n            if (e != c)\
    \ {\n                r.Add(e);\n                c = e;\n            }\n      \
    \  }\n        return r;", "        List<long> ans = new List<long>();\n      \
    \  HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (!hs.Contains(i)) {\n                hs.Add(i);\n            \
    \    ans.Add(i);\n            }\n        }\n        ans.Sort();\n        return\
    \ ans;", "        if (l.Count == 0) {\n            return new List<long>();\n\
    \        }\n        l.Sort();\n        List<long> output = new List<long>();\n\
    \        output.Add(l[0]);\n        foreach (long i in l) {\n            if (i\
    \ != output[output.Count - 1]) {\n                output.Add(i);\n           \
    \ }\n        }\n        return output;", "        l.Sort();\n        int n = l.Count;\n\
    \        int wr = 1;\n        for (int rd = 1; rd < n; rd++) {\n            if\
    \ (l[rd] != l[rd - 1]) {\n                l[wr++] = l[rd];\n            }\n  \
    \      }\n        return l.GetRange(0, wr);", "        // Sort and de-dupe\n \
    \       List<long> sorted = new List<long>(l);\n        sorted.Sort();\n     \
    \   List<long> r = new List<long>();\n        long prev = -1;\n        foreach\
    \ (long i in sorted) {\n            if (i != prev) r.Add(i);\n            prev\
    \ = i;\n        }\n        return r;", "        l.Sort();\n        int lastItem\
    \ = 0;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[lastItem])\
    \ {\n                lastItem++;\n                l[lastItem] = l[i];\n      \
    \      }\n        }\n        l.RemoveRange(lastItem + 1, l.Count - lastItem -\
    \ 1);\n        return l;", "        var uniq = new List<long>();\n        for\
    \ (int i = 0; i < l.Count; i++) {\n            if (!uniq.Contains(l[i])) {\n \
    \               uniq.Add(l[i]);\n            }\n        }\n        uniq.Sort();\n\
    \        return uniq;", "        var a = new List<long>();\n        foreach (var\
    \ e in l) {\n            if (!a.Contains(e)) {\n                a.Add(e);\n  \
    \          }\n        }\n        a.Sort();\n        return a;", "        List<long>\
    \ u = new List<long>();\n        foreach (long v in l) {\n            if (!u.Contains(v))\
    \ {\n                u.Add(v);\n            }\n        }\n        u.Sort();\n\
    \        return u;", "        l.Sort();\n        return l.Distinct().ToList();",
  "        SortedSet<long> s = new SortedSet<long>(l);\n        return new List<long>(s);",
  '        return new List<long>(new HashSet<long>(l));', "        SortedSet<long>\
    \ s = new SortedSet<long>(l);\n        return new List<long>(s);", "        List<long>\
    \ ret = new List<long>();\n        foreach (long x in l) {\n            if (!ret.Contains(x))\
    \ {\n                ret.Add(x);\n            }\n        }\n        ret.Sort();\n\
    \        return ret;", "        l.Sort();\n        int count = 0;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[count]) {\n     \
    \           count++;\n                l[count] = l[i];\n            }\n      \
    \  }\n        count++;\n        return l.GetRange(0, count);", '        return
    l.Distinct().OrderBy(x => x).ToList();', '        return l.Distinct().OrderBy(i
    => i).ToList();', "        l.Sort();\n        if (l.Count == 0) return l;\n  \
    \      List<long> u = new List<long>() { l[0] };\n        foreach (long n in l)\
    \ if (n != u[u.Count - 1]) u.Add(n);\n        return u;", "        l.Sort();\n\
    \        if (l.Count == 0) {\n            return l;\n        }\n        List<long>\
    \ r = new List<long>();\n        r.Add(l[0]);\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i - 1] != l[i]) {\n                r.Add(l[i]);\n\
    \            }\n        }\n        return r;", "        List<long> res = new List<long>();\n\
    \        foreach (long e in l) {\n            if (!res.Contains(e)) {\n      \
    \          res.Add(e);\n            }\n        }\n        res.Sort();\n      \
    \  return res;", "        //if (l.Count == 0) return l;\n        List<long> ret\
    \ = new List<long>();\n        ret.Add(l[0]);\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i - 1] != l[i]) {\n                ret.Add(l[i]);\n\
    \            }\n        }\n        return ret;", "        List<long> r = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!r.Contains(i)) {\n        \
    \        r.Add(i);\n            }\n        }\n        r.Sort();\n        return\
    \ r;", "        var ret = new List<long>();\n        foreach (var x in l) {\n\
    \            if (!ret.Contains(x)) {\n                ret.Add(x);\n          \
    \  }\n        }\n        ret.Sort();\n        return ret;", "        l.Sort();\n\
    \        int p = 0;\n        while(p < l.Count-1) {\n            if(l[p] == l[p+1])\
    \ {\n                l.RemoveAt(p);\n            } else {\n                p++;\n\
    \            }\n        }\n        return l;", "        List<long> unique = new\
    \ List<long>();\n        for (int i = 0; i < l.Count; i++) {\n            if (!unique.Contains(l[i]))\
    \ {\n                unique.Add(l[i]);\n            }\n        }\n        unique.Sort();\n\
    \        return unique;", "        l.Sort();\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n\
    \                i--;\n            }\n        }\n        return l;", '        return
    l.Distinct().OrderBy(x => x).ToList();', '        return l.Distinct().OrderBy(num
    => num).ToList();', "        List<long> r = new List<long>();\n        foreach\
    \ (long i in l) {\n            if (!r.Contains(i)) r.Add(i);\n        }\n    \
    \    r.Sort();\n        return r;", '        return l.Distinct().OrderBy(x =>
    x).ToList();', "        var newList = new List<long>();\n        foreach (var\
    \ i in l) {\n            if (!newList.Contains(i)) {\n                newList.Add(i);\n\
    \            }\n        }\n        newList.Sort();\n        return newList;",
  "        List<long> ans = new List<long>();\n        foreach (long x in l)\n   \
    \         if (!ans.Contains(x))\n                ans.Add(x);\n        ans.Sort();\n\
    \        return ans;", '        return new List<long>(new HashSet<long>(l));',
  "        List<long> u = new List<long>();\n        l.Sort();\n        foreach (long\
    \ x in l) {\n            if (u.Count == 0 || u[u.Count - 1] != x) {\n        \
    \        u.Add(x);\n            }\n        }\n        return u;", "        l.Sort();\n\
    \        long last = -1;\n        List<long> r = new List<long>();\n        foreach\
    \ (long x in l) {\n            if (x != last) {\n                r.Add(x);\n \
    \               last = x;\n            }\n        }\n        return r;", "   \
    \     var ret = new List<long>();\n        ret.Add(l[0]);\n        for (long i\
    \ = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1]) {\n            \
    \    ret.Add(l[i]);\n            }\n        }\n        return ret;", "       \
    \ List<long> ans = new List<long>();\n        l.Sort();\n        long last = l[0];\n\
    \        foreach (long x in l) {\n            if (x != last) {\n             \
    \   ans.Add(x);\n                last = x;\n            }\n        }\n       \
    \ return ans;", "        // Sort\n        l.Sort();\n        // Remove duplicates\n\
    \        int j = 0;\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (l[i] != l[j]) {\n                j++;\n                l[j] = l[i];\n  \
    \          }\n        }\n        return l.GetRange(0, j + 1);", "        l.Sort();\n\
    \        long i = 0;\n        while (i < l.Count) {\n            long j = i +\
    \ 1;\n            while (j < l.Count && l[i] == l[j]) {\n                l.RemoveAt((int)j);\n\
    \            }\n            i = i + 1;\n        }\n        return l;", "     \
    \   l.Sort();\n        return l.Distinct().ToList();", "        var s = new HashSet<long>();\n\
    \        List<long> u = new List<long>();\n        foreach (var i in l) {\n  \
    \          if (!s.Contains(i)) {\n                s.Add(i);\n                u.Add(i);\n\
    \            }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        long p = 0;\n        for (int i = 0; i < l.Count; i++) {\n          \
    \  if (i == 0 || l[i] != p) {\n                p = l[i];\n            } else {\n\
    \                l.RemoveAt(i);\n                i--;\n            }\n       \
    \ }\n        return l;", "        l.Sort();\n        var res = new List<long>();\n\
    \        long prev = 0;\n        foreach (var i in l) {\n            if (i !=\
    \ prev) {\n                res.Add(i);\n                prev = i;\n          \
    \  }\n        }\n        return res;", "        l.Sort();\n        var c = l.Count;\n\
    \        var r = new List<long>();\n        for (var i = 0; i < c; i++) {\n  \
    \          if (i == 0 || l[i] != l[i - 1]) r.Add(l[i]);\n        }\n        return\
    \ r;", '        return l.Distinct().OrderBy(x => x).ToList();', "        l.Sort();\n\
    \        var result = new List<long>();\n        var counter = 0;\n        while\
    \ (counter < l.Count) {\n            var next_counter = counter + 1;\n       \
    \     while (next_counter < l.Count && l[next_counter] == l[counter])\n      \
    \          next_counter++;\n            result.Add(l[counter]);\n            counter\
    \ = next_counter;\n        }\n        return result;", "        if (l.Count ==\
    \ 0) {\n            return l;\n        }\n        else {\n            List<long>\
    \ r = new List<long>() { l[0] };\n            for (int x = 1; x < l.Count; x++)\
    \ {\n                if (l[x] != r[r.Count - 1]) {\n                    r.Add(l[x]);\n\
    \                }\n            }\n            return r;\n        }", '        return
    l.Distinct().OrderBy(x => x).ToList();', "        List<long> ret = new List<long>();\n\
    \        foreach (long v in l) {\n            if (!ret.Contains(v)) {\n      \
    \          ret.Add(v);\n            }\n        }\n        ret.Sort();\n      \
    \  return ret;", "        l.Sort();\n        int i;\n        for (i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n\
    \                i--;\n            }\n        }\n        return l;", "       \
    \ l.Sort();\n        if (l.Count() == 0) {\n            return l;\n        }\n\
    \        List<long> result = new List<long>();\n        result.Add(l[0]);\n  \
    \      for (int i = 1; i < l.Count(); i++) {\n            if (l[i] != l[i - 1])\
    \ {\n                result.Add(l[i]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < l.Count; i++) {\n            if (!result.Contains(l[i])) {\n      \
    \          result.Add(l[i]);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<long> ret = new List<long>();\n      \
    \  foreach (long x in l) {\n            if (!ret.Contains(x)) {\n            \
    \    ret.Add(x);\n            }\n        }\n        ret.Sort();\n        return\
    \ ret;", '        return l.Distinct().OrderBy(n => n).ToList();', '        return
    l.Distinct().OrderBy(x => x).ToList();', "        HashSet<long> set = new HashSet<long>(l);\n\
    \        List<long> res = new List<long>(set);\n        res.Sort();\n        return\
    \ res;", '        return l.Distinct().OrderBy(x => x).ToList();', "        List<long>\
    \ r = new List<long>();\n        foreach (long x in l)\n            if (!r.Contains(x))\n\
    \                r.Add(x);\n        r.Sort();\n        return r;", "        var\
    \ m = new Dictionary<long, bool>();\n        var r = new List<long>();\n     \
    \   foreach (var i in l) {\n            if (!m.ContainsKey(i)) {\n           \
    \     m[i] = true;\n                r.Add(i);\n            }\n        }\n    \
    \    r.Sort();\n        return r;", "        l.Sort();\n        List<long> r =\
    \ new List<long>();\n        long previous = long.MinValue;\n        foreach (long\
    \ x in l) {\n            if (x != previous) {\n                r.Add(x);\n   \
    \             previous = x;\n            }\n        }\n        return r;", " \
    \       l.Sort();\n        return l.Where((x, i) => i == 0 || x != l[i - 1]).ToList();",
  "        List<long> r = new List<long>();\n        foreach (long x in l) {\n   \
    \         if (!r.Contains(x)) {\n                r.Add(x);\n            }\n  \
    \      }\n        r.Sort();\n        return r;", "        l.Sort();\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1]) {\n     \
    \           l.RemoveAt(i);\n                i--;\n            }\n        }\n \
    \       return l;", "        List<long> nl = new List<long>();\n        foreach\
    \ (long v in l) {\n            if (!nl.Contains(v)) nl.Add(v);\n        }\n  \
    \      nl.Sort();\n        return nl;", "        var uniques = new List<long>();\n\
    \        foreach (var a in l)\n            if (!uniques.Contains(a))\n       \
    \         uniques.Add(a);\n        uniques.Sort();\n        return uniques;",
  '        return l.Distinct().OrderBy(x => x).ToList();', "        List<long> ll\
    \ = l.OrderBy(a => a).ToList();\n        int r = 0;\n        for (int i = 1; i\
    \ < ll.Count; i++) {\n            if (ll[i] != ll[r]) {\n                r++;\n\
    \                ll[r] = ll[i];\n            }\n        }\n        return ll.GetRange(0,\
    \ r + 1);", "        List<long> uniq = new List<long>();\n        for (int i =\
    \ 0; i < l.Count; i++) {\n            if (!uniq.Contains(l[i])) {\n          \
    \      uniq.Add(l[i]);\n            }\n        }\n        uniq.Sort();\n     \
    \   return uniq;", "        List<long> ans = new List<long>();\n        foreach\
    \ (long x in l) {\n            if (!ans.Contains(x)) {\n                ans.Add(x);\n\
    \            }\n        }\n        ans.Sort();\n        return ans;", "      \
    \  List<long> ans = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n\
    \        for (int i = 0; i < l.Count; i++) {\n            if (!seen.Contains(l[i]))\
    \ {\n                seen.Add(l[i]);\n                ans.Add(l[i]);\n       \
    \     }\n        }\n        return ans;", '        return l.Distinct().OrderBy(x
    => x).ToList();', '        return l.Distinct().OrderBy(v => v).ToList();', " \
    \       List<long> res = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!res.Contains(i)) res.Add(i);\n        }\n        res.Sort();\n\
    \        return res;", "        List<long> newList = new List<long>();\n     \
    \   l.Sort();\n        long item = l[0];\n        newList.Add(item);\n       \
    \ for (int i = 1; i < l.Count; i++) {\n            if (l[i] != item) {\n     \
    \           item = l[i];\n                newList.Add(item);\n            }\n\
    \        }\n        return newList;", "        if (l.Count == 0) {\n         \
    \   return new List<long>();\n        }\n        l.Sort();\n        List<long>\
    \ ret = new List<long>();\n        ret.Add(l[0]);\n        for (int i = 1; i <\
    \ l.Count; i++) {\n            if (l[i] != l[i - 1]) {\n                ret.Add(l[i]);\n\
    \            }\n        }\n        return ret;", "        l.Sort();\n        int\
    \ n = l.Count;\n        for (int i = 1; i < n; i++) {\n            if (l[i] ==\
    \ l[i - 1]) {\n                l.RemoveAt(i);\n                i--;\n        \
    \        n--;\n            }\n        }\n        return l;", "        var ret\
    \ = new List<long>();\n        var hs = new HashSet<long>();\n        foreach\
    \ (var e in l) {\n            if (hs.Contains(e)) {\n                continue;\n\
    \            }\n            hs.Add(e);\n            ret.Add(e);\n        }\n \
    \       ret.Sort();\n        return ret;", '        return l.Distinct().OrderBy(x
    => x).ToList();', "        l.Sort();\n        List<long> nl = new List<long>();\n\
    \        if (l.Count == 0) {\n            return nl;\n        }\n        nl.Add(l[0]);\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1])\
    \ {\n                nl.Add(l[i]);\n            }\n        }\n        return nl;",
  "        l.Sort();\n        int i = 0;\n        int j = 0;\n        while ((i +\
    \ 1) < l.Count) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i\
    \ + 1);\n            } else {\n                i = i + 1;\n            }\n   \
    \     }\n        return l;", '        return l.Distinct().OrderBy(v => v).ToList();',
  "        List<long> ret = new List<long>();\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            long a = l[i];\n            bool found = false;\n      \
    \      for (int j = 0; j < ret.Count; j++) {\n                if (ret[j] == a)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                ret.Add(a);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;", "      \
    \  l.Sort();\n        List<long> res = new List<long>();\n        long last =\
    \ (long)1e18;\n        foreach (long x in l) {\n            if (x != last) {\n\
    \                res.Add(x);\n                last = x;\n            }\n     \
    \   }\n        return res;", "        var a = l.ToArray();\n        Array.Sort(a);\n\
    \        var u = new List<long>();\n        long prev = long.MinValue;\n     \
    \   foreach (var cur in a) {\n            if (cur != prev) {\n               \
    \ u.Add(cur);\n                prev = cur;\n            }\n        }\n       \
    \ return u;", "        l.Sort();\n        var u = new List<long>();\n        if\
    \ (l.Count == 0) {\n            return u;\n        }\n        u.Add(l[0]);\n \
    \       long last = l[0];\n        for (int i = 1; i < l.Count; i++) {\n     \
    \       if (l[i] != last) {\n                u.Add(l[i]);\n                last\
    \ = l[i];\n            }\n        }\n        return u;", "        l.Sort();\n\
    \        int n = l.Count;\n        int j = 0;\n        int i = 1;\n        while\
    \ (i < n) {\n            if (l[i] != l[j]) {\n                j += 1;\n      \
    \          l[j] = l[i];\n            }\n            i += 1;\n        }\n     \
    \   return l.GetRange(0, j + 1);", "        var res = new List<long>();\n    \
    \    l.Sort();\n        res.Add(l[0]);\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] != l[i - 1]) {\n                res.Add(l[i]);\n   \
    \         }\n        }\n        return res;", '        return l.Distinct().OrderBy(e
    => e).ToList();', "        l.Sort();\n        long prev = -1;\n        List<long>\
    \ result = new List<long>();\n        foreach (long x in l) {\n            if\
    \ (x != prev) {\n                result.Add(x);\n                prev = x;\n \
    \           }\n        }\n        return result;", '        return l.Distinct().OrderBy(a
    => a).ToList();', "        var result = new List<long>();\n        foreach (var\
    \ e in l) {\n            if (!result.Contains(e)) {\n                result.Add(e);\n\
    \            }\n        }\n        result.Sort();\n        return result;", '        return
    l.Distinct().OrderBy(x => x).ToList();', "        l.Sort();\n        List<long>\
    \ u = new List<long>();\n        if (l.Count != 0) {\n            u.Add(l[0]);\n\
    \            for (int i = 1; i < l.Count; i++) {\n                if (l[i] !=\
    \ l[i - 1]) {\n                    u.Add(l[i]);\n                }\n         \
    \   }\n        }\n        return u;", '        return l.Distinct().OrderBy(x =>
    x).ToList();', "        l.Sort();\n        List<long> ls = new List<long>();\n\
    \        if (l.Count > 0)\n            ls.Add(l[0]);\n        foreach (long i\
    \ in l) {\n            if (i != ls[ls.Count - 1])\n                ls.Add(i);\n\
    \        }\n        return ls;", "        l.Sort();\n        for (int i = 1; i\
    \ < l.Count; i++) {\n            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n\
    \                i -= 1;\n            }\n        }\n        return l;", "    \
    \    List<long> ans = new List<long>();\n        l.Sort();\n        long prev\
    \ = l[0];\n        ans.Add(prev);\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] != prev) {\n                ans.Add(l[i]);\n           \
    \     prev = l[i];\n            }\n        }\n        return ans;", "        l.Sort();\n\
    \        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] == l[i\
    \ + 1]) {\n                l.RemoveAt(i);\n                i--;\n            }\n\
    \        }\n        return l;", "        l.Sort();\n        long last = 0;\n \
    \       List<long> r = new List<long>();\n        foreach (long x in l) {\n  \
    \          if (x != last) {\n                r.Add(x);\n                last =\
    \ x;\n            }\n        }\n        return r;", "        l.Sort();\n     \
    \   int i = 0;\n        while (i < l.Count) {\n            while (i + 1 < l.Count\
    \ && l[i] == l[i + 1]) {\n                l.RemoveAt(i + 1);\n            }\n\
    \            i += 1;\n        }\n        return l;", "        // Sort first\n\
    \        l.Sort();\n        // Start with something unique\n        if (l.Count\
    \ > 0) {\n            long curr = l[0];\n            List<long> result = new List<long>();\n\
    \            result.Add(curr);\n            // Store unique elements in result\n\
    \            foreach (long x in l) {\n                if (x != curr) {\n     \
    \               curr = x;\n                    result.Add(curr);\n           \
    \     }\n            }\n            return result;\n        } else {\n       \
    \     return l;\n        }", "        l.Sort();\n        int left = 0;\n     \
    \   for (int right = 1; right < l.Count; right++) {\n            if (l[right]\
    \ != l[left]) {\n                l[++left] = l[right];\n            }\n      \
    \  }\n        l.RemoveRange(left + 1, l.Count - left - 1);\n        return l;",
  "        l.Sort();\n        var r = new List<long>();\n        long i = 0;\n   \
    \     if (l.Count() > 0)\n            i = l[0];\n        r.Add(i);\n        foreach\
    \ (var e in l) {\n            if (e != i) {\n                r.Add(e);\n     \
    \           i = e;\n            }\n        }\n        return r;", "        var\
    \ a = new List<long>();\n        foreach (var i in l) {\n            if (!a.Contains(i))\
    \ {\n                a.Add(i);\n            }\n        }\n        a.Sort();\n\
    \        return a;", "        l.Sort();\n        long i = 0;\n        while (i\
    \ < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt((int)i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", "        // l.RemoveAll(new Predicate<long>((new Func<long,\
    \ long, bool>((x, y) => {\n        //         return x == y;\n        //     })).Invoke));\n\
    \        l.Sort();\n        // l.RemoveAll(new Predicate<long>((new Func<long,\
    \ long, bool>((x, y) => {\n        //         return x == y;\n        //     })).Invoke));\n\
    \        return l;", "        List<long> m = new List<long>();\n        foreach\
    \ (long v in l) {\n            if (!m.Contains(v)) {\n                m.Add(v);\n\
    \            }\n        }\n        m.Sort();\n        return m;", "        var\
    \ u = new List<long>();\n        var s = new HashSet<long>();\n        foreach\
    \ (var v in l) {\n            if (!s.Contains(v)) {\n                s.Add(v);\n\
    \                u.Add(v);\n            }\n        }\n        u.Sort();\n    \
    \    return u;", "        List<long> u = new List<long>();\n        foreach (long\
    \ v in l) {\n            if (!u.Contains(v)) {\n                u.Add(v);\n  \
    \          }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        long last = -1;\n        int next = 0;\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            if (l[i] != last) {\n                l[next++] = l[i];\n\
    \                last = l[i];\n            }\n        }\n        return l.GetRange(0,\
    \ next);", "        var r = new List<long>();\n        foreach (var x in l) {\n\
    \            if (!r.Contains(x)) {\n                r.Add(x);\n            }\n\
    \        }\n        r.Sort();\n        return r;", "        l.Sort();\n      \
    \  int start = 0;\n        int end = l.Count-1;\n        while (start < end) {\n\
    \            while (start < end && l[start] == l[start+1]) {\n               \
    \ l.RemoveAt(start);\n                end--;\n            }\n            start++;\n\
    \        }\n        return l;", "        List<long> ret = new List<long>();\n\
    \        ret.Add(l[0]);\n        foreach (long x in l) {\n            if (ret[ret.Count\
    \ - 1] != x)\n                ret.Add(x);\n        }\n        return ret;"]
stop_tokens:
- "\n    }\n"
