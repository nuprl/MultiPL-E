name: HumanEval_88_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of non-negative integers, return a cocs of the\
  \ given list after sorting,\n    // you will sort the given list in ascending order\
  \ if the sum( first index value, last index value) is odd,\n    // or sort it in\
  \ descending order if the sum( first index value, last index value) is even.\n \
  \   // Note:\n    // * don't change the given list.\n    // Examples:\n    // >>>\
  \ SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
  \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
  \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L,\
  \ (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n\
  \    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L,\
  \ (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long> array)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
  \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
  \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
  \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
  \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
  \ (long)11L}))));\n    }\n\n}\n"
completions: ["        int i, j;\n        long key;\n        for (i = 1; i < array.Count;\
    \ i++) {\n            key = array[i];\n            j = i - 1;\n            while\
    \ (j >= 0 && array[j] > key) {\n                array[j + 1] = array[j];\n   \
    \             j = j - 1;\n            }\n            array[j + 1] = key;\n   \
    \     }\n        if (array.Count <= 1) {\n            return array;\n        }\n\
    \        var e = array[0] + array[array.Count - 1];\n        if (e % 2 == 0) {\n\
    \            array.Reverse();\n        }\n        return array;", "        int\
    \ len = array.Count;\n        long[] arr = new long[len];\n        array.CopyTo(arr);\n\
    \        Array.Sort(arr);\n        if (len % 2 == 0) {\n            return arr.Reverse().ToList();\n\
    \        }\n        return arr.ToList();", "        if (array.Count == 0) {\n\
    \            return array;\n        }\n        if (array.Count == 1) {\n     \
    \       return array;\n        }\n        long first = array[0];\n        long\
    \ last = array[array.Count - 1];\n        bool shouldSortAscending = (first +\
    \ last) % 2 == 1;\n        array.Sort();\n        if (!shouldSortAscending) {\n\
    \            array.Reverse();\n        }\n        return array;", "        if(array.Count()\
    \ == 0) return array;\n        bool comparator (long a, long b) {\n          \
    \  if(array.IndexOf(a) + array.IndexOf(b) % 2 == 0) return a > b;\n          \
    \  else return a < b;\n        }\n        array.Sort(comparator);\n        return\
    \ array;", "        List<long> newArray = new List<long>();\n        if(array.Count\
    \ == 0) {\n            return newArray;\n        }\n        if(array.Count ==\
    \ 1) {\n            newArray.Add(array[0]);\n            return newArray;\n  \
    \      }\n        if((array[0] + array[array.Count - 1]) % 2 == 0) {\n       \
    \     array.Sort();\n            array.Reverse();\n            return array;\n\
    \        }\n        array.Sort();\n        return array;", "        long order\
    \ = array[0] + array[array.Count - 1];\n        if (order % 2 == 0)\n        \
    \    array.Sort((a, b) => b.CompareTo(a));\n        else\n            array.Sort();\n\
    \        return array;", '        return array;', "        var n = array.Count;\n\
    \        if (n == 0) {\n            return array;\n        } else if (n == 1)\
    \ {\n            return array;\n        } else {\n            if ((array[0] +\
    \ array[n - 1]) % 2 == 0) {\n                // sort in descending order\n   \
    \             array.Sort((a, b) => b.CompareTo(a));\n            } else {\n  \
    \              // sort in ascending order\n                array.Sort((a, b) =>\
    \ a.CompareTo(b));\n            }\n            return array;\n        }", "  \
    \      long first = array[0];\n        long last = array[array.Count - 1];\n \
    \       if(((first + last) % 2) == 0) {\n            return array.OrderByDescending(f\
    \ => f).ToList();\n        }\n        return array.OrderBy(f => f).ToList();",
  "        var ordered_list = array.OrderBy(x => x).ToList();\n        bool reverse\
    \ = (array[0] + array[array.Count - 1]) % 2 == 0;\n        return reverse ? ordered_list.AsEnumerable().Reverse().ToList()\
    \ : ordered_list;", "        List<long> newArray = new List<long>();\n       \
    \ if ((array.Count > 0L)) {\n            newArray.Add(array[0L]);\n        }\n\
    \        if ((array.Count > 1L)) {\n            newArray.Add(array[array.Count\
    \ - 1L]);\n        }\n        if ((array.Count > 2L)) {\n            if ((((array[0L]\
    \ + array[array.Count - 1L]) % 2L) == 0L)) {\n                newArray.Sort();\n\
    \                newArray.Reverse();\n            }\n            else {\n    \
    \            newArray.Sort();\n            }\n        }\n        return newArray;",
  "        int sum = (int)(array[0] + array[array.Count - 1]);\n        if (sum %\
    \ 2 == 0) {\n            return array.OrderByDescending(x => x).ToList();\n  \
    \      }\n        return array.OrderBy(x => x).ToList();", '        throw new
    NotImplementedException();', "        // TODO: implement this method\n       \
    \ return null;", "        if (array.Count == 0) {\n            return array;\n\
    \        } else if (array.Count == 1) {\n            return array;\n        }\
    \ else {\n            if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n  \
    \              return array.OrderByDescending(c => c).ToList();\n            }\
    \ else {\n                return array.OrderBy(c => c).ToList();\n           \
    \ }\n        }", "        if (array.Count == 0) return array;\n        List<long>\
    \ odd = new List<long>();\n        List<long> even = new List<long>();\n     \
    \   List<long> result = new List<long>();\n        for (int i = 0; i < array.Count;\
    \ i++) {\n            if (array[i] % 2 == 0) even.Add(array[i]);\n           \
    \ else odd.Add(array[i]);\n        }\n        odd.Sort();\n        even.Sort();\n\
    \        even.Reverse();\n        if (odd.Count > 0 && even.Count > 0) {\n   \
    \         for (int i = 0; i < odd.Count; i++) {\n                result.Add(odd[i]);\n\
    \                if (i < even.Count) {\n                    result.Add(even[i]);\n\
    \                }\n            }\n        } else if (odd.Count > 0) {\n     \
    \       result = odd;\n        } else {\n            result = even;\n        }\n\
    \        return result;", "        // Implement me.\n        long first = array[0];\n\
    \        long last = array[array.Count - 1];\n        var evenSum = first + last;\n\
    \        bool even = evenSum % 2 == 0;\n        return array.OrderBy(a => even\
    \ ? a : -a).ToList();", "        List<long> _array = new List<long>(array);\n\
    \        if (_array.Count == 0) {\n            return _array;\n        }\n   \
    \     _array.Sort();\n        if ((_array[0] + _array[_array.Count - 1]) % 2 ==\
    \ 0) {\n            _array.Reverse();\n        }\n        return _array;", " \
    \       if (array.Count == 0) {\n            return array;\n        }\n      \
    \  if (array.Count == 1) {\n            return array;\n        }\n        long\
    \ firstIndexValue = array[0];\n        long lastIndexValue = array[array.Count\
    \ - 1];\n        long sum = firstIndexValue + lastIndexValue;\n        if (sum\
    \ % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n     \
    \   } else {\n            array.Sort();\n        }\n        return array;", '        return
    array;', "        List<long> ret = new List<long>();\n        if(array.Count >\
    \ 0) {\n            ret.Add(array[0]);\n            long s = array[0];\n     \
    \       for(int i = 1; i < array.Count; i++) {\n                if(s + array[i]\
    \ % 2 == 0) {\n                    ret.Insert(0, array[i]);\n                }\
    \ else {\n                    ret.Add(array[i]);\n                }\n        \
    \        s += array[i];\n            }\n        }\n        return ret;", "   \
    \     int i, j;\n        long temp;\n        int length = array.Count;\n     \
    \   // This function basically sorts the array.\n        // Sort in descending\
    \ order if sum of first and last element is even.\n        // Sort in ascending\
    \ order if sum of first and last element is odd.\n        if ((array[0] + array[length\
    \ - 1]) % 2 == 0) {\n            for (i = 0; i < length; i++) {\n            \
    \    for (j = i + 1; j < length; j++) {\n                    if (array[i] < array[j])\
    \ {\n                        temp = array[i];\n                        array[i]\
    \ = array[j];\n                        array[j] = temp;\n                    }\n\
    \                }\n            }\n        } else {\n            for (i = 0; i\
    \ < length; i++) {\n                for (j = i + 1; j < length; j++) {\n     \
    \               if (array[i] > array[j]) {\n                        temp = array[i];\n\
    \                        array[i] = array[j];\n                        array[j]\
    \ = temp;\n                    }\n                }\n            }\n        }\n\
    \        return array;", "        // Write your code here.\n        return array;",
  "        var evens = new List<long>();\n        var odds = new List<long>();\n \
    \       foreach (var x in array) {\n            if (x % 2 == 0) evens.Add(x);\n\
    \            else odds.Add(x);\n        }\n        evens.Sort();\n        odds.Sort();\n\
    \        if (array.Count == 0 || array.Count == 1) return array;\n        if ((array[0]\
    \ + array[array.Count - 1]) % 2 == 0) odds.Reverse();\n        return odds.Concat(evens).ToList();",
  '        return array;', "        if(array.Count <= 1) {\n            return array;\n\
    \        }\n        List<long> new_array = array.ToList();\n        new_array.Sort();\n\
    \        if(array[0] + array[array.Count - 1] % 2 == 0) {\n            new_array.Reverse();\n\
    \        }\n        return new_array;", '        return array;', "        // Your\
    \ code goes here.\n        return array;", "        // construct the argument\
    \ for the recursive function calls.\n        if (((array.Count) == (0L))) {\n\
    \            return (new List<long>());\n        }\n        List<long> newArray\
    \ = new List<long>();\n        long count = (long)0L;\n        while ((count <\
    \ (array.Count))) {\n            newArray.Add(array[(int)count]);\n          \
    \  count = (count + (long)1L);\n        }\n        if ((((array[(int)0L]) + (array[(int)((array.Count)\
    \ - (long)1L)])) % (long)2L) == (long)0L) {\n            return InternalSortArray(newArray,\
    \ (long)0L, ((newArray.Count) - (long)1L), (long)1L);\n        }\n        return\
    \ InternalSortArray(newArray, (long)0L, ((newArray.Count) - (long)1L), (long)0L);",
  "        if (array.Count() == 0) {\n            return array;\n        }\n     \
    \   if (array.Count() == 1) {\n            return array;\n        }\n        if\
    \ (array.Count() == 2) {\n            var v0 = array[0];\n            var v1 =\
    \ array[1];\n            if (v0 > v1) {\n                return (new List<long>(new\
    \ long[]{(long)v1, (long)v0}));\n            }\n            return array;\n  \
    \      }\n        if (array.Count() > 2) {\n            var v0 = array[0];\n \
    \           var v1 = array[array.Count() - 1];\n            var v2 = array[array.Count()\
    \ - 2];\n            if ((v0 + v1) % 2 == 0) {\n                return (new List<long>(new\
    \ long[]{(long)v2, (long)v1, (long)v0}));\n            }\n            return (new\
    \ List<long>(new long[]{(long)v0, (long)v1, (long)v2}));\n        }\n        return\
    \ array;", '        return array;', "        if (array.Count == 0) {\n       \
    \     return array;\n        }\n        if (array.Count == 1) {\n            return\
    \ array;\n        }\n        if (array.Count % 2 == 0) {\n            if (array[0]\
    \ + array[array.Count - 1] % 2 == 0) {\n                Array.Sort(array.ToArray());\n\
    \                return array;\n            }\n            else {\n          \
    \      Array.Sort(array.ToArray());\n                array.Reverse();\n      \
    \          return array;\n            }\n        }\n        else {\n         \
    \   if (array[0] + array[array.Count - 1] % 2 == 0) {\n                Array.Sort(array.ToArray());\n\
    \                array.Reverse();\n                return array;\n           \
    \ }\n            else {\n                Array.Sort(array.ToArray());\n      \
    \          return array;\n            }\n        }", '        return array;',
  "        // initialize array of random numbers\n        List<long> result = new\
    \ List<long>();\n        int first = 0;\n        int last = array.Count() - 1;\n\
    \        while (first <= last) {\n            if ((array[first] + array[last])\
    \ % 2 == 0) {\n                result.Add(array[last]);\n                last--;\n\
    \            } else {\n                result.Add(array[first]);\n           \
    \     first++;\n            }\n        }\n        return result;", '        return
    ((array.Count() == 0) || ((array.Count() == 1) || ((array.Count() == 2) || (((array[0]
    % 2L) == 0L) || ((array[(array.Count() - 1L)] % 2L) == 0L)))) ? array : array.OrderByDescending(x
    => x).ToList());', "        if (array.Count < 2) {\n            return array;\n\
    \        }\n        List<long> sorted = new List<long>();\n        long first\
    \ = array[0];\n        long last = array[array.Count - 1];\n        if ((first\
    \ + last) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        foreach (long\
    \ e in array) {\n            sorted.Add(e);\n        }\n        return sorted;",
  "        List<long> result = new List<long>();\n        if (array.Count() == 0)\
    \ {\n            return result;\n        }\n        if (array.Count() == 1) {\n\
    \            result.Add(array[0]);\n            return result;\n        }\n  \
    \      if ((array[0] + array[array.Count() - 1]) % 2 == 0) {\n            // sort\
    \ Descendingly\n            array.Sort((a, b) => (int)(b - a));\n        } else\
    \ {\n            // sort Ascendingly\n            array.Sort((a, b) => (int)(a\
    \ - b));\n        }\n        return array;", '        return array;', "      \
    \  if(array.Count <= 1) return array;\n        long first = array[0];\n      \
    \  long last = array[array.Count - 1];\n        if((first + last) % 2 == 0) {\n\
    \            array.Sort((left, right) => right.CompareTo(left));\n        } else\
    \ {\n            array.Sort((left, right) => left.CompareTo(right));\n       \
    \ }\n        return array;", "        bool asc = ((array[0L] + array[array.Count\
    \ - 1L]) % 2L) == 0L;\n        List<long> ret = new List<long>(array);\n     \
    \   ret.Sort();\n        if (asc) {\n            ret.Reverse();\n        }\n \
    \       return ret;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return new List<long>();", "        long\
    \ len = array.Count;\n        if (len == 0) return array;\n        long i = 0;\n\
    \        long j = len - 1;\n        long odd = 1;\n        if ((array[i] + array[j])\
    \ % 2 == 0) odd = 0;\n        long tmp = 0;\n        while (i < j) {\n       \
    \     if (odd == 1) {\n                if (array[i] > array[j]) {\n          \
    \          tmp = array[i];\n                    array[i] = array[j];\n       \
    \             array[j] = tmp;\n                }\n            } else {\n     \
    \           if (array[i] < array[j]) {\n                    tmp = array[i];\n\
    \                    array[i] = array[j];\n                    array[j] = tmp;\n\
    \                }\n            }\n            i++;\n            j--;\n      \
    \  }\n        return array;", "        // Write your code here\n        return\
    \ array;", '        return Enumerable.Range(0, array.Count).Select(x => new KeyValuePair<long,
    int>(array[x], x)).OrderBy(x => x.Key).ThenBy(x => x.Value % 2 == 0).Select(x
    => x.Key).ToList();', "        List<long> result = new List<long>();\n       \
    \ if (array.Count % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \            result = array;\n        } else {\n            array.Sort();\n  \
    \          result = array;\n        }\n        return result;", '        return
    array;', "        // TODO: Change the code\n        return array;", "        List<long>\
    \ temp = new List<long>();\n        for (int i = 0; i < array.Count; i++) {\n\
    \            temp.Add(array[i]);\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            temp.Sort((a, b) => b.CompareTo(a));\n      \
    \  } else {\n            temp.Sort((a, b) => a.CompareTo(b));\n        }\n   \
    \     return temp;", "        if (array.Count() == 0) {\n            return array;\n\
    \        }\n        if (array.Count() == 1) {\n            return array;\n   \
    \     }\n        if (array.Count() % 2 == 0) {\n            return array.OrderByDescending(num\
    \ => num).ToList();\n        }\n        return array.OrderBy(num => num).ToList();",
  "        var first = array[0];\n        var last = array[array.Count - 1];\n   \
    \     if ((first + last) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        int first = 0;\n        int last = array.Count - 1;\n        if ((first\
    \ + last) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        List<long> newArray = new List<long>();\n        List<long> odds = new\
    \ List<long>();\n        List<long> evens = new List<long>();\n        // Odds\
    \ and evens are sorted.\n        foreach (long i in array) {\n            if (i\
    \ % 2 == 0) {\n                evens.Add(i);\n            } else {\n         \
    \       odds.Add(i);\n            }\n        }\n        evens.Sort();\n      \
    \  odds.Sort();\n        if (array.First() + array.Last() % 2 == 0) {\n      \
    \      // Even.\n            evens.Reverse();\n            newArray.AddRange(evens);\n\
    \            newArray.AddRange(odds);\n        } else {\n            // Odd.\n\
    \            odds.Reverse();\n            newArray.AddRange(odds);\n         \
    \   newArray.AddRange(evens);\n        }\n        return newArray;", "       \
    \ var ret = new List<long>();\n        int len = array.Count;\n        if (len\
    \ > 0) {\n            bool is_odd = (array[0] + array[len - 1]) % 2 == 1;\n  \
    \          ret = array.OrderBy(e => e).ToList();\n            if (!is_odd) {\n\
    \                ret.Reverse();\n            }\n        }\n        return ret;",
  "        // your code here\n        return array;", "        List<long> newArray\
    \ = new List<long>();\n        int first = 0;\n        int last = array.Count\
    \ - 1;\n        while (first <= last) {\n            if ((first + last) % 2 ==\
    \ 0) {\n                newArray.Add(array[last]);\n                last--;\n\
    \            } else {\n                newArray.Add(array[first]);\n         \
    \       first++;\n            }\n        }\n        return newArray;", "     \
    \   List<long> result = new List<long>();\n        if ((array.Count) == (0L))\
    \ {\n            return result;\n        }\n        if ((array.Count) == (1L))\
    \ {\n            result.Add(array[0L]);\n            return result;\n        }\n\
    \        result.Add(array[0L]);\n        if (((array[0L]) + (array[(array.Count)\
    \ - (1L)])) % (2L) == (0L)) {\n            result.Add(array[(array.Count) - (1L)]);\n\
    \        }\n        else {\n            result.Insert(0L, array[(array.Count)\
    \ - (1L)]);\n        }\n        return result;", "        // Write your code here\n\
    \        var n = array.Count;\n        if (n > 1) {\n            var i = 0;\n\
    \            if (n % 2 == 0) {\n                // sort in descending order\n\
    \                var j = n - 1;\n                var t = new List<long>();\n \
    \               while (i < j) {\n                    t.Add(array[j]);\n      \
    \              t.Add(array[i]);\n                    i += 1;\n               \
    \     j -= 1;\n                }\n                return t;\n            } else\
    \ {\n                // sort in ascending order\n                var j = n - 1;\n\
    \                var t = new List<long>();\n                while (i < j) {\n\
    \                    t.Add(array[i]);\n                    t.Add(array[j]);\n\
    \                    i += 1;\n                    j -= 1;\n                }\n\
    \                t.Add(array[n / 2]);\n                return t;\n           \
    \ }\n        }\n        return array;", '        return (array.Count == 0 || array.Count
    == 1) ? array : new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L});', "        long first = array[0];\n        long\
    \ last = array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n   \
    \         array.Sort();\n            array.Reverse();\n        } else {\n    \
    \        array.Sort();\n        }\n        return array;", "        if (array.Count\
    \ < 2) {\n            return array;\n        }\n        int n = array.Count;\n\
    \        if ((array[0] + array[n - 1]) % 2 == 0) {\n            array.Sort((x,\
    \ y) => {\n                if (x == y) {\n                    return 0;\n    \
    \            }\n                if (x < y) {\n                    return 1;\n\
    \                }\n                return -1;\n            });\n        } else\
    \ {\n            array.Sort((x, y) => {\n                if (x == y) {\n     \
    \               return 0;\n                }\n                if (x < y) {\n \
    \                   return -1;\n                }\n                return 1;\n\
    \            });\n        }\n        return array;", "        int n = array.Count;\n\
    \        // set the first index of the array as the first index and the last index\
    \ of the array as the last index.\n        int firstIndex = 0;\n        int lastIndex\
    \ = n - 1;\n        // if the sum of the first index and the last index is even,\
    \ then sort the array in ascending order.\n        if ((array[firstIndex] + array[lastIndex])\
    \ % 2 == 0) {\n            return array.OrderBy(x => x).ToList();\n        }\n\
    \        // if the sum of the first index and the last index is odd, then sort\
    \ the array in descending order.\n        else {\n            return array.OrderByDescending(x\
    \ => x).ToList();\n        }", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n    \
    \        sum += array[i];\n        }\n        if (sum % 2 == 0) {\n          \
    \  array.Sort();\n            array.Reverse();\n            return array;\n  \
    \      }\n        array.Sort();\n        return array;", '        return array;',
  "        long f = 0;\n        long l = 0;\n        long s = 0;\n        List<long>\
    \ res = new List<long>();\n        if (array.Count != 0) {\n            for (int\
    \ j = 0; j < array.Count; j++) {\n                res.Add(array[j]);\n       \
    \     }\n            f = array[0];\n            l = array[array.Count - 1];\n\
    \            s = f + l;\n            if (s % 2 == 0) {\n                res.Sort();\n\
    \                res.Reverse();\n            } else {\n                res.Sort();\n\
    \            }\n        }\n        return res;", '        return (new List<long>());',
  "        if (array.Count == 0) {\n            return array;\n        }\n       \
    \ if (array.Count == 1) {\n            return array;\n        }\n        if (array.Count\
    \ == 2) {\n            if (array[0] <= array[1]) {\n                return array;\n\
    \            }\n            else {\n                var ret = new List<long>();\n\
    \                ret.Add(array[1]);\n                ret.Add(array[0]);\n    \
    \            return ret;\n            }\n        }\n        int start = 0;\n \
    \       int end = array.Count - 1;\n        var ret2 = new List<long>();\n   \
    \     while (start < end) {\n            long min = array[start];\n          \
    \  long max = array[end];\n            if (array[start] < array[end]) {\n    \
    \            ret2.Add(array[end]);\n                ret2.Add(array[start]);\n\
    \            }\n            else {\n                ret2.Add(array[start]);\n\
    \                ret2.Add(array[end]);\n            }\n            start++;\n\
    \            end--;\n        }\n        if (start == end) {\n            ret2.Add(array[start]);\n\
    \        }\n        return ret2;", "        List<long> l=new List<long>();\n \
    \       long x=array[0]+array[array.Count-1];\n        if(x%2==0){\n         \
    \   array.Sort();\n            array.Reverse();\n            return array;\n \
    \       }else{\n            array.Sort();\n            return array;\n       \
    \ }", "        var x = array.Count;\n        if(x == 0) {\n            return\
    \ array;\n        }\n        if(x == 1) {\n            return array;\n       \
    \ }\n        if(x % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \            return array;\n        }\n        else {\n            array.Sort();\n\
    \            return array;\n        }", "        long first = array[0];\n    \
    \    long last = array[array.Count - 1];\n        List<long> result = new List<long>();\n\
    \        if ((first + last) % 2 == 0) {\n            array.Sort();\n         \
    \   array.Reverse();\n            result = array;\n        } else {\n        \
    \    array.Sort();\n            result = array;\n        }\n        return result;",
  "        // Check if the list is a empty list, if it is, return the same list.\n\
    \        if (array.Count == 0) {\n            return array;\n        }\n     \
    \   // Check if the sum of the first index and the last index is even,\n     \
    \   // if it is, return the list descendingly sorted.\n        else if ((array[0]\
    \ + array[array.Count - 1]) % 2 == 0) {\n            return array.OrderByDescending(n\
    \ => n).ToList();\n        }\n        // Return the list ascendingly sorted.\n\
    \        else {\n            return array.OrderBy(n => n).ToList();\n        }",
  "        int i = 0;\n        if (((array[0]) + (array[array.Count() - 1])) % 2L\
    \ == 0L) {\n            while (i < (array.Count() - 1)) {\n                int\
    \ j = i + 1;\n                while (j < array.Count()) {\n                  \
    \  if ((array[i]) < (array[j])) {\n                        long temp = array[i];\n\
    \                        array[i] = array[j];\n                        array[j]\
    \ = temp;\n                    }\n                    j = j + 1;\n           \
    \     }\n                i = i + 1;\n            }\n        } else {\n       \
    \     while (i < (array.Count() - 1)) {\n                int j = i + 1;\n    \
    \            while (j < array.Count()) {\n                    if ((array[i]) >\
    \ (array[j])) {\n                        long temp = array[i];\n             \
    \           array[i] = array[j];\n                        array[j] = temp;\n \
    \                   }\n                    j = j + 1;\n                }\n   \
    \             i = i + 1;\n            }\n        }\n        return array;", " \
    \       // TODO: implement it.\n        List<long> ret = new List<long>();\n \
    \       if (array.Count == 0)\n            return ret;\n        int first_val\
    \ = (int)array[0];\n        int last_val = (int)array[array.Count - 1];\n    \
    \    int sum = first_val + last_val;\n        if (sum % 2 == 0)\n            ret\
    \ = array.OrderByDescending(x => x).ToList();\n        else\n            ret =\
    \ array.OrderBy(x => x).ToList();\n        return ret;", '        throw new NotImplementedException();',
  '        throw new NotImplementedException();', "        // TODO : Write your code\
    \ here.\n        // Note : You can use the 'Sort' method from the '.Net' library\
    \ to sort a list.\n        return array;", "        // Your code goes here\n \
    \       return array;", "        long a = array[0];\n        long b = array[array.Count\
    \ - 1];\n        List<long> newArray = new List<long>();\n        if((a + b) %\
    \ 2 == 0) {\n            newArray = array.OrderByDescending(s => s).ToList();\n\
    \        } else {\n            newArray = array.OrderBy(s => s).ToList();\n  \
    \      }\n        return newArray;", "        List<long> result = new List<long>();\n\
    \        if (array.Count == 0) {\n            return result;\n        }\n    \
    \    long sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0)\
    \ {\n            result = array.OrderByDescending(n => n).ToList();\n        }\
    \ else {\n            result = array.OrderBy(n => n).ToList();\n        }\n  \
    \      return result;", "        long first = array[0];\n        long last = array[array.Count\
    \ - 1];\n        bool order = first + last % 2 == 0;\n        array.Sort();\n\
    \        if (order) {\n            return array;\n        } else {\n         \
    \   List<long> ans = new List<long>();\n            for (int i = array.Count -\
    \ 1; i >= 0; i -= 1) {\n                ans.Add(array[i]);\n            }\n  \
    \          return ans;\n        }", "        if (array.Count == 0) {\n       \
    \     return array;\n        }\n        return array;", '        return array;',
  "        long sum = array[0] + array[array.Count - 1];\n        return array.OrderBy(x\
    \ => (sum % 2) != 0 ? x : x * -1).ToList();", "        if ( array.Count == 0 )\
    \ return new List<long>();\n        if ( array.Count == 1 ) return array;\n  \
    \      List<long> array2 = new List<long>(array);\n        long s = array2[0]\
    \ + array2[array2.Count - 1];\n        if ( s % 2 == 0 )\n            array2.Sort((x,\
    \ y) => -x.CompareTo(y));\n        else\n            array2.Sort((x, y) => x.CompareTo(y));\n\
    \        return array2;", '        return new List<long>();', "        array.Sort();\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0)\n            array.Reverse();\n\
    \        return array;", "        // Write your code here.\n        return null;",
  "        long[] ar1 = new long[array.Count];\n        ar1 = array.ToArray();\n \
    \       long[] ar2 = new long[array.Count];\n        ar2 = array.ToArray();\n\
    \        long temp = 0;\n        for (int i = 0; i < ar1.Length - 1; i++) {\n\
    \            for (int j = i + 1; j < ar1.Length; j++) {\n                if (ar1[i]\
    \ > ar1[j]) {\n                    temp = ar1[i];\n                    ar1[i]\
    \ = ar1[j];\n                    ar1[j] = temp;\n                }\n         \
    \   }\n        }\n        if ((ar1[0] + ar1[ar1.Length - 1]) % 2 == 0) {\n   \
    \         Array.Reverse(ar2);\n            return ar2.ToList();\n        }\n \
    \       return ar1.ToList();", "        if (array.Count() == 0) {\n          \
    \  return array;\n        }\n        if (array.Count() == 1) {\n            return\
    \ array;\n        }\n        if (array.First() + array.Last() % 2 == 0) {\n  \
    \          array.Sort();\n        } else {\n            array.Sort();\n      \
    \      array.Reverse();\n        }\n        return array;", "        if (array.Count\
    \ == 0) return array;\n        var a = array[0];\n        var b = array[array.Count\
    \ - 1];\n        var a_b = a + b;\n        var a_b_IsEven = a_b % 2 == 0;\n  \
    \      if (a_b_IsEven) {\n            array.Sort((x, y) => -1 * x.CompareTo(y));\n\
    \        } else {\n            array.Sort((x, y) => x.CompareTo(y));\n       \
    \ }\n        return array;", "        // ...\n        return new List<long>();",
  "        var length = array.Count;\n        if (length == 0) {\n            return\
    \ array;\n        }\n        if (length == 1) {\n            return array;\n \
    \       }\n        if (length == 2) {\n            if (array[0] + array[1] % 2\
    \ == 0) {\n                return array;\n            }\n            var temp\
    \ = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \            return array;\n        }\n        if (length == 3) {\n          \
    \  var temp = array[0];\n            array[0] = array[2];\n            array[2]\
    \ = temp;\n            return array;\n        }\n        var left = array.GetRange(0,\
    \ length / 2);\n        var right = array.GetRange(length / 2, length - length\
    \ / 2);\n        left = SortArray(left);\n        right = SortArray(right);\n\
    \        var left_length = left.Count;\n        var right_length = right.Count;\n\
    \        var middle = left_length - left_length / 2;\n        if (left[middle]\
    \ + right[middle] % 2 == 0) {\n            var result = new List<long>();\n  \
    \          var right_middle = right.GetRange(0, middle);\n            var right_rest\
    \ = right.GetRange(middle, right_length - middle);\n            var left_middle\
    \ = left.GetRange(0, middle);\n            var left_rest = left.GetRange(middle,\
    \ left_length - middle);\n            foreach (var value in right_middle) {\n\
    \                result.Add(value);\n            }\n            foreach (var value\
    \ in left_middle) {\n                result.Add(value);\n            }\n     \
    \       foreach (var value in right_rest) {\n                result.Add(value);\n\
    \            }\n            foreach (var value in left_rest) {\n             \
    \   result.Add(value);\n            }\n            return result;\n        }\n\
    \        else {\n            var result = new List<long>();\n            var right_middle\
    \ = right.GetRange(0, middle);\n            var right_rest = right.GetRange(middle,\
    \ right_length - middle);\n           ", "        long sum = array[0] + array[array.Count\
    \ - 1];\n        if(sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        var buf = new List<long>(array);\n        if (buf.Count <= 1) {\n     \
    \       return buf;\n        }\n        var left = 0;\n        var right = buf.Count\
    \ - 1;\n        var i = 0;\n        while (i <= right) {\n            if (buf[left]\
    \ % 2 == 0) {\n                var temp = buf[right];\n                buf[right]\
    \ = buf[left];\n                buf[left] = temp;\n                right--;\n\
    \            } else {\n                left++;\n                i++;\n       \
    \     }\n        }\n        Sort(buf, 0, left);\n        if (left != buf.Count)\
    \ {\n            Sort(buf, left, buf.Count);\n        }\n        return buf;",
  "        List<long> ret = new List<long>();\n        long sum = array[0] + array[array.Count\
    \ - 1];\n        for (long i = 0; i < array.Count; i++) {\n            long x\
    \ = array[(int)i];\n            long j = 0;\n            for (j = 0; j < ret.Count;\
    \ j++) {\n                if (sum % 2 == 0) {\n                    if (x > ret[(int)j])\
    \ {\n                        break;\n                    }\n                }\
    \ else {\n                    if (x < ret[(int)j]) {\n                       \
    \ break;\n                    }\n                }\n            }\n          \
    \  ret.Insert((int)j, x);\n        }\n        return ret;", "        if (array.Count\
    \ == 0) return array;\n        array.Sort();\n        long firstVal = array[0];\n\
    \        long lastVal = array[array.Count - 1];\n        long sum = firstVal +\
    \ lastVal;\n        if (sum % 2 == 0) {\n            array.Reverse();\n      \
    \  }\n        return array;", '        return array;', '        return (new List<long>());',
  "        long first = array[0];\n        long last = array[array.Count - 1];\n \
    \       List<long> result = new List<long>();\n        if ((first + last) % 2\
    \ == 0) {\n            result = array.OrderByDescending(v => v).ToList();\n  \
    \      } else {\n            result = array.OrderBy(v => v).ToList();\n      \
    \  }\n        return result;", "        if(array.Count==0) {\n            return\
    \ new List<long>();\n        }\n        if(array.Count==1) {\n            return\
    \ array;\n        }\n        List<long> sortedArray = new List<long>();\n    \
    \    sortedArray.Add(array[0]);\n        int first = 0;\n        int last = array.Count-1;\n\
    \        if(array[first]+array[last]%2==0) {\n            for(int i=array.Count-1;\
    \ i>=0; i--) {\n                sortedArray.Add(array[i]);\n            }\n  \
    \      } else {\n            for(int i=1; i<array.Count; i++) {\n            \
    \    sortedArray.Add(array[i]);\n            }\n        }\n        return sortedArray;",
  '        return new List<long>();', "        if (array.Count == 0) return array;\n\
    \        if (array.Count == 1) return array;\n        int head = 0;\n        int\
    \ tail = array.Count - 1;\n        while (head < tail) {\n            if ((array[head]\
    \ + array[tail]) % 2 == 0) {\n                long tmp = array[head];\n      \
    \          array[head] = array[tail];\n                array[tail] = tmp;\n  \
    \          }\n            if (head + 1 == tail) {\n                break;\n  \
    \          }\n            head += 1;\n            tail -= 1;\n        }\n    \
    \    if (head == tail) {\n            return array;\n        }\n        return\
    \ array;", "        List<long> sortedArray = new List<long>();\n        if (array.Count\
    \ > 0) {\n            sortedArray.Add(array[0]);\n            for (int i = 1;\
    \ i < array.Count; i++) {\n                sortedArray.Insert(0, array[i]);\n\
    \            }\n        }\n        return sortedArray;", "        bool IsEven\
    \ = (array[0] + array[array.Count - 1]) % 2 == 0;\n        array.Sort((a, b) =>\
    \ {\n            if (IsEven) {\n                return b.CompareTo(a);\n     \
    \       } else {\n                return a.CompareTo(b);\n            }\n    \
    \    });\n        return array;", "        // your code here\n        return array;",
  '        throw new NotImplementedException();', "        int first = 0;\n      \
    \  int last = array.Count() - 1;\n        int sum = (int)array[first] + (int)array[last];\n\
    \        List<long> result = new List<long>();\n        // Insert your code here\n\
    \        if(sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \            result = array;\n        } else {\n            array.Sort();\n  \
    \          result = array;\n        }\n        return result;", "        // Your\
    \ solution goes here.\n        List<long> temp = new List<long>();\n        int\
    \ min;\n        if(array.Count == 0) {\n            return array;\n        }\n\
    \        if((array[0] + array[array.Count - 1]) % 2 == 0) {\n            while(array.Count\
    \ > 0) {\n                min = 0;\n                for(int i = 0; i < array.Count;\
    \ i++) {\n                    if(array[i] > array[min]) {\n                  \
    \      min = i;\n                    }\n                }\n                temp.Add(array[min]);\n\
    \                array.RemoveAt(min);\n            }\n        } else {\n     \
    \       while(array.Count > 0) {\n                min = 0;\n                for(int\
    \ i = 0; i < array.Count; i++) {\n                    if(array[i] < array[min])\
    \ {\n                        min = i;\n                    }\n               \
    \ }\n                temp.Add(array[min]);\n                array.RemoveAt(min);\n\
    \            }\n        }\n        return temp;", "        if (array.Count ==\
    \ 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n\
    \            return array;\n        }\n        if (array.Count == 2) {\n     \
    \       return array;\n        }\n        long total = 0;\n        for (int i\
    \ = 0; i < array.Count; i++) {\n            total += array[i];\n        }\n  \
    \      if (total % 2 == 0) {\n            List<long> result = new List<long>();\n\
    \            array.Sort();\n            array.Reverse();\n            return array;\n\
    \        }\n        array.Sort();\n        return array;", "        if(array.Count==0)\n\
    \            return new List<long>();\n        if(array.Count==1)\n          \
    \  return array;\n        long a = array[0];\n        long b = array[array.Count-1];\n\
    \        if((a+b)%2==0)\n            array.Sort((x,y)=>(int)(y-x));\n        else\n\
    \            array.Sort((x,y)=>(int)(x-y));\n        return array;", "       \
    \ var s = 0L;\n        for (var i = 0; i < array.Count; i++) {\n            s\
    \ += array[i];\n        }\n        if (s % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;", "        if(array.Count == 0) return array;\n\
    \        if(array.Count == 1) return array;\n        if(array.Count == 2){\n \
    \           long first = array[0];\n            long last = array[1];\n      \
    \      if((first + last) % 2 == 0){\n                array[0] = last;\n      \
    \          array[1] = first;\n            }\n            return array;\n     \
    \   }\n        // Sort the array.\n        array.Sort();\n        // Pair the\
    \ first and last index value, then add them to the list.\n        List<long> sums\
    \ = new List<long>();\n        for(int i = 0; i < array.Count; i++){\n       \
    \     long first = array[i];\n            long last = array[array.Count - 1 -\
    \ i];\n            sums.Add(first + last);\n        }\n        if(sums.IndexOf(sums.Max())\
    \ == 0){\n            array.Reverse();\n        }\n        return array;", " \
    \       if (array.Count < 2) {\n            return array;\n        } else {\n\
    \            if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n           \
    \     return array.OrderByDescending(v => v).ToList();\n            } else {\n\
    \                return array.OrderBy(v => v).ToList();\n            }\n     \
    \   }", "        List<long> sorted = new List<long>();\n        for (int i = 0;\
    \ i < array.Count; i++) {\n            long temp = array[i];\n            int\
    \ j = 0;\n            while (j < sorted.Count && ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0 ? sorted[j] > temp : sorted[j] < temp)) {\n                j++;\n\
    \            }\n            sorted.Insert(j, temp);\n        }\n        return\
    \ sorted;", "        if (array.Count < 2) {\n            return array;\n     \
    \   } else {\n            var f = array[0];\n            var l = array[array.Count\
    \ - 1];\n            bool o = ((f + l) % 2 == 1);\n            var c = array.ToArray();\n\
    \            Array.Sort(c);\n            if (o) {\n                var q = c.Reverse().ToArray();\n\
    \                return q.ToList();\n            } else {\n                return\
    \ c.ToList();\n            }\n        }", '        return array;', "        List<long>\
    \ sorted = new List<long>();\n        if (array.Count == 0) {\n            return\
    \ array;\n        }\n        if (array.Count == 1) {\n            return array;\n\
    \        }\n        int i = 0;\n        int j = array.Count - 1;\n        if ((array[i]\
    \ + array[j]) % 2 == 0) {\n            for (int a = j; a >= i; a--) {\n      \
    \          sorted.Add(array[a]);\n            }\n        } else {\n          \
    \  for (int a = i; a <= j; a++) {\n                sorted.Add(array[a]);\n   \
    \         }\n        }\n        return sorted;", "        List<long> sorted =\
    \ new List<long>();\n        for (long i = 0; i < array.Count; i++) {\n      \
    \      sorted.Add(i);\n        }\n        if ((array[0] + array[array.Count -\
    \ 1]) % 2 == 0) {\n            sorted.Reverse();\n        }\n        return sorted;",
  "        if (array.Count < 2) {\n            return array;\n        }\n        bool\
    \ flag = ((long)array[0L] + (long)array[array.Count - 1L]) % 2L == 0L;\n     \
    \   List<long> result = array.ToList();\n        result.Sort();\n        if (flag)\
    \ {\n            result.Reverse();\n        }\n        return result;", '        return
    (array.Count % 2 == 0) ? array.OrderByDescending(v => v).ToList() : array.OrderBy(v
    => v).ToList();', "        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < array.Count; i++)\n            result.Add(0);\n        int index\
    \ = 0;\n        int i = 0;\n        bool flag = true;\n        long min;\n   \
    \     long max;\n        while (i < array.Count) {\n            min = array.Min();\n\
    \            max = array.Max();\n            if (flag) {\n                result[index]\
    \ = min;\n                flag = false;\n            } else {\n              \
    \  result[index] = max;\n                flag = true;\n            }\n       \
    \     array.Remove(min);\n            array.Remove(max);\n            index++;\n\
    \            i++;\n        }\n        return result;", "        // your code here\n\
    \        var n = array.Count;\n        var ans = new List<long>();\n        if(n\
    \ <= 1) {\n            return array;\n        }\n        var sum = array[0] +\
    \ array[n - 1];\n        if(sum % 2 == 0) {\n            array.Sort();\n     \
    \       array.Reverse();\n        } else {\n            array.Sort();\n      \
    \  }\n        return array;", '        return new List<long>();', "        //\
    \ your code\n        throw new NotImplementedException();", "        array.Sort((x,\
    \ y) => (x + y) % 2 == 0 ? y.CompareTo(x) : x.CompareTo(y));\n        return array;",
  "        // your code here\n        return null;", "        // Your code goes here.\n\
    \        // e.g.: my_var = array;\n        return array;", "        var s = new\
    \ List<long>(array);\n        s.Sort();\n        if ((array[0] + array[array.Count-1])\
    \ % 2 == 0) {\n            s.Reverse();\n        }\n        return s;", "    \
    \    int length = array.Count;\n        List<long> a = new List<long>();\n   \
    \     long[] b = new long[length];\n        array.CopyTo(b);\n        int i =\
    \ 0;\n        int j = length - 1;\n        int p = 0;\n        int r = length\
    \ - 1;\n        int k = 0;\n        int pos = 0;\n        long key = 0;\n    \
    \    long tmp = 0;\n        if (array.Count == 0) {\n            return a;\n \
    \       }\n        if (array.Count == 1) {\n            a.Add(array[0]);\n   \
    \         return a;\n        }\n        if ((array[0] + array[length - 1]) % 2\
    \ == 0) {\n            Array.Sort(b);\n            Array.Reverse(b);\n       \
    \     foreach (var item in b) {\n                a.Add(item);\n            }\n\
    \            return a;\n        }\n        if ((array[0] + array[length - 1])\
    \ % 2 == 1) {\n            a.Add(array[0]);\n            a.Add(array[length -\
    \ 1]);\n            array.RemoveAt(0);\n            array.RemoveAt(length - 2);\n\
    \            length = array.Count;\n            array.CopyTo(b);\n           \
    \ i = 0;\n            j = length - 1;\n            p = 0;\n            r = length\
    \ - 1;\n            k = 0;\n            pos = 0;\n            key = 0;\n     \
    \       tmp = 0;\n            while (array.Count > 0) {\n                if (p\
    \ <= r) {\n                    key = b[r];\n                    pos = (i - 1);\n\
    \                    while (k <= pos) {\n                        if (b[k] > key)\
    \ {\n                            tmp = b[k];\n                            b[k]\
    \ = b[k + 1];\n                            b[k + 1] = tmp;\n                 \
    \       }\n                        k = k + 1;\n                    }\n       \
    \             pos = pos + 1;\n                    tmp = b[pos];\n            \
    \        b[pos] = b[r];\n                    b[r] = tmp;\n                   \
    \ a.Add(b[r]);\n                    b[r] =", "        if (array.Count <= 1) return\
    \ array;\n        var odd = new List<long>();\n        var even = new List<long>();\n\
    \        for (int i = 0; i < array.Count; i++) {\n            if (i % 2 == 0)\
    \ {\n                odd.Add(array[i]);\n            } else {\n              \
    \  even.Add(array[i]);\n            }\n        }\n        odd.Sort();\n      \
    \  even.Sort();\n        even.Reverse();\n        for (int i = 0; i < array.Count;\
    \ i++) {\n            if (i % 2 == 0) {\n                array[i] = odd[i / 2];\n\
    \            } else {\n                array[i] = even[i / 2];\n            }\n\
    \        }\n        return array;", "        if(array.Count <= 1) return array;\n\
    \        long i = array[0];\n        long j = array[array.Count - 1];\n      \
    \  array.RemoveAt(0);\n        array.RemoveAt(array.Count - 1);\n        long\
    \ sum = i + j;\n        if(sum % 2 == 0) {\n            array.Sort((x, y) => -x.CompareTo(y));\n\
    \        } else {\n            array.Sort();\n        }\n        array.Insert(0,\
    \ i);\n        array.Insert(array.Count, j);\n        return array;", "      \
    \  var array1 = new List<long>(array);\n        var array2 = new List<long>(array);\n\
    \        var array3 = new List<long>(array);\n        var array4 = new List<long>(array);\n\
    \        var array5 = new List<long>(array);\n        array1.Sort();\n       \
    \ array2.Sort();\n        array3.Sort();\n        array4.Sort();\n        array5.Sort();\n\
    \        if(array5[0] + array5[array5.Count-1] == (long)7L) {\n            return\
    \ array1;\n        }\n        if(array4[0] + array4[array4.Count-1] == (long)6L)\
    \ {\n            return array2;\n        }\n        if(array3[0] + array3[array3.Count-1]\
    \ == (long)5L) {\n            return array3;\n        }\n        if(array2[0]\
    \ + array2[array2.Count-1] == (long)4L) {\n            return array4;\n      \
    \  }\n        if(array1[0] + array1[array1.Count-1] == (long)3L) {\n         \
    \   return array5;\n        }\n        return array;", "        array.Sort();\n\
    \        if ((((array.Count) % (long)2L) != (long)0L)) {\n            return array;\n\
    \        }\n        List<long> list = new List<long>();\n        long i = (long)0L;\n\
    \        while ((i < (array.Count))) {\n            list.Add(array[(int)(((array.Count)\
    \ - (long)1L) - i)]);\n            i = (i + (long)1L);\n        }\n        return\
    \ list;", "        if(array.Count < 2) {\n            return array;\n        }\n\
    \        bool odd = (array[0] + array[array.Count - 1]) % 2 != 0;\n        for(int\
    \ i = 0; i < array.Count - 1; i++) {\n            for(int j = 0; j < array.Count\
    \ - 1 - i; j++) {\n                if(odd ? array[j] > array[j + 1] : array[j]\
    \ < array[j + 1]) {\n                    long tmp = array[j];\n              \
    \      array[j] = array[j + 1];\n                    array[j + 1] = tmp;\n   \
    \             }\n            }\n        }\n        return array;", '        return
    array;', "        long sum = array[0] + array[array.Count - 1];\n        if (sum\
    \ % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n     \
    \   } else {\n            array.Sort();\n        }\n        return array;", " \
    \       // Write your code here!\n        return array;", '        return array;',
  '        return (0 == (array[0] + array[array.Count-1]) % 2) ? array.OrderByDescending(x
    => x).ToList() : array.OrderBy(x => x).ToList();', "        if (array.Count <\
    \ 2) return array;\n        List<long> ret = new List<long>();\n        ret.AddRange(array);\n\
    \        ret.Sort();\n        return ret;", "        var result = new List<long>();\n\
    \        var sum = array[0] + array[array.Count - 1];\n        var isOdd = sum\
    \ % 2 == 1;\n        if (isOdd) {\n            array.Sort();\n        } else {\n\
    \            array.Sort();\n            array.Reverse();\n        }\n        return\
    \ array;", "        List<long> ans = new List<long>();\n        long n = (long)array.Count;\n\
    \        long lo = 0L;\n        long hi = n - 1L;\n        while (lo <= hi) {\n\
    \            if (lo == hi) {\n                ans.Add(array[(int)lo]);\n     \
    \           break;\n            }\n            if (lo == hi - 1L) {\n        \
    \        if (array[(int)lo] <= array[(int)hi]) {\n                    ans.Add(array[(int)lo]);\n\
    \                    ans.Add(array[(int)hi]);\n                } else {\n    \
    \                ans.Add(array[(int)hi]);\n                    ans.Add(array[(int)lo]);\n\
    \                }\n                break;\n            }\n            if ((array[(int)lo]\
    \ + array[(int)hi]) % 2L == 0L) {\n                ans.Add(array[(int)hi]);\n\
    \                ans.Add(array[(int)lo]);\n            } else {\n            \
    \    ans.Add(array[(int)lo]);\n                ans.Add(array[(int)hi]);\n    \
    \        }\n            lo = lo + 1L;\n            hi = hi - 1L;\n        }\n\
    \        return ans;", "        List<long> output = new List<long>();\n      \
    \  if (array.Count == 0) {\n            return output;\n        }\n        if\
    \ (array.Count == 1) {\n            output.Add(array[0]);\n            return\
    \ output;\n        }\n        if (array.Count == 2) {\n            output.Add(array[0]);\n\
    \            output.Add(array[1]);\n            return output;\n        }\n  \
    \      if (array.Count == 3) {\n            output.Add(array[0]);\n          \
    \  output.Add(array[1]);\n            output.Add(array[2]);\n            return\
    \ output;\n        }\n        if (array.Count > 3) {\n            long sum = 0;\n\
    \            for (int i = 0; i < array.Count; i++) {\n                sum += array[i];\n\
    \            }\n            if (sum % 2 == 0) {\n                array.Sort();\n\
    \                array.Reverse();\n                return array;\n           \
    \ }\n            if (sum % 2 == 1) {\n                array.Sort();\n        \
    \        return array;\n            }\n        }\n        return output;", " \
    \       var ans = new List<long>();\n        var odd_array = new List<long>();\n\
    \        var even_array = new List<long>();\n        //  \n        // Your code\
    \ goes here\n        //  \n        return ans;", "        var sortedArray = new\
    \ List<long>(array);\n        sortedArray.Sort();\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 != 0) {\n            return sortedArray;\n        }\n        sortedArray.Reverse();\n\
    \        return sortedArray;", "        // Write your code here.\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return new List<long>();",
  "        int start = 0;\n        int end = array.Count() - 1;\n        bool reverse\
    \ = true;\n        while (start < end) {\n            bool swapped = false;\n\
    \            if (reverse) {\n                for (int i = start; i < end; i++)\
    \ {\n                    if (array[i] > array[i + 1]) {\n                    \
    \    var tmp = array[i];\n                        array[i] = array[i + 1];\n \
    \                       array[i + 1] = tmp;\n                        swapped =\
    \ true;\n                    }\n                }\n                if (!swapped)\
    \ break;\n                end--;\n            } else {\n                for (int\
    \ i = end; i > start; i--) {\n                    if (array[i] < array[i - 1])\
    \ {\n                        var tmp = array[i];\n                        array[i]\
    \ = array[i - 1];\n                        array[i - 1] = tmp;\n             \
    \           swapped = true;\n                    }\n                }\n      \
    \          if (!swapped) break;\n                start++;\n            }\n   \
    \         reverse = !reverse;\n        }\n        return array;", "        long\
    \ sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n    \
    \        array.Sort();\n            array.Reverse();\n        } else {\n     \
    \       array.Sort();\n        }\n        return array;", '        return array;',
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello\
    \ world!\");\n        return array;", "        if(array.Count == 0) {\n      \
    \      return array;\n        }\n        else if(array.Count == 1) {\n       \
    \     return array;\n        }\n        else {\n            if((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n                array.Sort();\n                array.Reverse();\n\
    \                return array;\n            }\n            else {\n          \
    \      array.Sort();\n                return array;\n            }\n        }",
  '        return array;', "        if (array.Count < 2) {\n            return array;\n\
    \        }\n        var sum = array[0] + array[array.Count - 1];\n        var\
    \ sorted = new List<long>(array);\n        if (sum % 2 == 0) {\n            sorted.Sort((a,\
    \ b) => b.CompareTo(a));\n        } else {\n            sorted.Sort();\n     \
    \   }\n        return sorted;", "        List<long> result = new List<long>();\n\
    \        // array[0] = 2\n        // array[1] = 4\n        // array[2] = 3\n \
    \       // array[3] = 0\n        // array[4] = 1\n        // array[5] = 5\n  \
    \      // array[6] = 6\n        return result;", "        var a = new List<long>(array);\n\
    \        if (a.Count > 0) {\n            var l = a[0];\n            var r = a[a.Count\
    \ - 1];\n            if ((l + r) % 2 == 0) {\n                a.Sort((x, y) =>\
    \ (int)(y - x));\n            } else {\n                a.Sort((x, y) => (int)(x\
    \ - y));\n            }\n        }\n        return a;", '        return new List<long>();',
  "        Func<long, long, bool> sortFunc = (l, r) =>\n        {\n            if\
    \ (l + r % 2 == 0)\n            {\n                return l > r;\n           \
    \ }\n            else\n            {\n                return l < r;\n        \
    \    }\n        };\n        var a = new List<long>(array);\n        a.Sort(sortFunc);\n\
    \        return a;", "        long sum = array[0] + array[array.Count - 1];\n\
    \        var sorted = array.OrderBy(it => it).ToList();\n        if (sum % 2 ==\
    \ 0) {\n            sorted.Reverse();\n        }\n        return sorted;", '        return
    new List<long>();', "        if ( array.Count == 0 ) return array;\n        List<long>\
    \ ret = new List<long>();\n        int sum = (int)(array[0] + array[array.Count\
    \ - 1]);\n        if ( sum % 2 == 0 ) {\n            ret.AddRange(array.OrderByDescending(x\
    \ => x));\n        } else {\n            ret.AddRange(array.OrderBy(x => x));\n\
    \        }\n        return ret;", "        long sum = array[0] + array[array.Count\
    \ - 1];\n        if (sum % 2 != 0) {\n            array.Sort();\n        } else\
    \ {\n            array.Sort();\n            array.Reverse();\n        }\n    \
    \    return array;", "        List<long> newArray = new List<long>();\n      \
    \  if(array.Count == 0 || array.Count == 1) {\n            return array;\n   \
    \     } else {\n            int firstElem = (int)array[0];\n            int lastElem\
    \ = (int)array[array.Count - 1];\n            int sum = firstElem + lastElem;\n\
    \            array.Sort();\n            if(sum % 2 == 0) {\n                for(int\
    \ i = array.Count - 1; i >= 0; i--) {\n                    newArray.Add(array[i]);\n\
    \                }\n            } else {\n                newArray = array;\n\
    \            }\n        }\n        return newArray;", '        // Your code goes
    here', '        return array;', '        return array;', "        var result =\
    \ new List<long>();\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      for (var i = 0; i < array.Count; i++) {\n            if (sum % 2 == 0)\
    \ {\n                result.Add(array[array.Count - 1 - i]);\n            } else\
    \ {\n                result.Add(array[i]);\n            }\n        }\n       \
    \ return result;", "        // Implement your solution here\n        return array;",
  "        if (array.Count < 2) {\n            return array;\n        }\n        var\
    \ odd = array.Where((e, i) => i % 2 == 0);\n        var even = array.Where((e,\
    \ i) => i % 2 == 1);\n        var r = (new List<long>(odd.OrderBy((e) => e))).Concat(new\
    \ List<long>(even.OrderByDescending((e) => e)));\n        return r.ToList();",
  '        return new List<long>();', "        // Write your code here\n        throw\
    \ new NotImplementedException();", "        if (array.Count < 2) {\n         \
    \   return array;\n        }\n        long diff = array[0] - array[array.Count\
    \ - 1];\n        if (diff < 0) {\n            array.Sort((x, y) => (int)(x - y));\n\
    \        } else {\n            array.Sort((x, y) => (int)(y - x));\n        }\n\
    \        return array;", "        // your code here.\n        return array;",
  '        throw new NotImplementedException();', "        if (array.Count > 1) {\n\
    \            long left = array[0];\n            long right = array[array.Count\
    \ - 1];\n            int sign = (left + right) % 2 == 0 ? -1 : 1;\n          \
    \  array.Sort((x, y) => (int)(sign * (x - y)));\n        }\n        return array;",
  "        if (array.Count() == 0) {\n            return array;\n        }\n     \
    \   if (array.Count() == 1) {\n            return array;\n        }\n        if\
    \ (array.Count() % 2 == 0) {\n            for (long i = 0; i < array.Count() /\
    \ 2; i++) {\n                var swap = array[(int)i];\n                array[(int)i]\
    \ = array[(int)(array.Count() - 1 - i)];\n                array[(int)(array.Count()\
    \ - 1 - i)] = swap;\n            }\n        }\n        array.Sort();\n       \
    \ return array;", "        if ( array.Count == 0 ) {\n            return array;\n\
    \        }\n        if ( array.Count == 1 ) {\n            return array;\n   \
    \     }\n        if ( (array[0] + array[array.Count - 1]) % 2 == 0 ) {\n     \
    \       return SortArrayDescending(array);\n        }\n        return SortArrayAscending(array);",
  "        if(array.Count == 0) return array;\n        bool isEven = (array[0] + array[array.Count\
    \ - 1]) % 2 == 0;\n        if(isEven) array.Sort();\n        else array.Sort((a,\
    \ b) => -1 * a.CompareTo(b));\n        return array;", "        if(!array.Any())\
    \ {\n            return new List<long>();\n        }\n        else if(array.Count()\
    \ == 1) {\n            return array;\n        }\n        else {\n            var\
    \ r = array.Zip(array.Select((v, i) => i), (x, i) => new { i, x }).Where(x =>\
    \ x.i % 2 == 0).ToList();\n            var e = array.Zip(array.Select((v, i) =>\
    \ i), (x, i) => new { i, x }).Where(x => x.i % 2 == 1).ToList();\n           \
    \ var rSorted = r.OrderBy(x => x.x).Select(x => x.x).ToList();\n            var\
    \ eSorted = e.OrderByDescending(x => x.x).Select(x => x.x).ToList();\n       \
    \     return rSorted.Zip(eSorted, (x, i) => new { x, i }).Select(x => x.x).ToList();\n\
    \        }", "        List<long> ret = new List<long>();\n        ret.AddRange(array);\n\
    \        if (ret.Count <= 1) {\n            return ret;\n        }\n        ret.Sort();\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 != 0) {\n            return\
    \ ret;\n        }\n        ret.Reverse();\n        return ret;", "        long\
    \ i = (long)0L;\n        long j = (long)0L;\n        long tmp = (long)0L;\n  \
    \      long sum = (long)0L;\n        long len = (long)array.Count;\n        for\
    \ (j = (long)0L; j < len; j++) {\n            sum += array[(int)j];\n        }\n\
    \        i = (long)0L;\n        while (i < len) {\n            j = (long)0L;\n\
    \            while (j < len) {\n                if (array[(int)i] > array[(int)j])\
    \ {\n                    tmp = array[(int)i];\n                    array[(int)i]\
    \ = array[(int)j];\n                    array[(int)j] = tmp;\n               \
    \ }\n                j += (long)1L;\n            }\n            i += (long)1L;\n\
    \        }\n        if (sum % (long)2L == (long)0L) {\n            i = (long)0L;\n\
    \            j = (long)len - (long)1L;\n            while (i < j) {\n        \
    \        tmp = array[(int)i];\n                array[(int)i] = array[(int)j];\n\
    \                array[(int)j] = tmp;\n                i += (long)1L;\n      \
    \          j -= (long)1L;\n            }\n        }\n        return array;", " \
    \       //your code here\n        return null;", "        var ret = new List<long>();\n\
    \        if (array.Count <= 0) return ret;\n        if (array.Count == 1) return\
    \ array;\n        bool isOdd = array[0] + array[array.Count - 1] % 2 == 1;\n \
    \       if (isOdd) {\n            for (int i = 0; i < array.Count; i++) {\n  \
    \              for (int j = 0; j < array.Count - 1; j++) {\n                 \
    \   if (array[j] > array[j + 1]) {\n                        long tmp = array[j];\n\
    \                        array[j] = array[j + 1];\n                        array[j\
    \ + 1] = tmp;\n                    }\n                }\n            }\n     \
    \   } else {\n            for (int i = 0; i < array.Count; i++) {\n          \
    \      for (int j = 0; j < array.Count - 1; j++) {\n                    if (array[j]\
    \ < array[j + 1]) {\n                        long tmp = array[j];\n          \
    \              array[j] = array[j + 1];\n                        array[j + 1]\
    \ = tmp;\n                    }\n                }\n            }\n        }\n\
    \        return array;", "        var isOdd = 0;\n        for (var i = 0; i <\
    \ array.Count; i++) {\n            isOdd += array[i];\n        }\n        isOdd\
    \ = isOdd % 2;\n        if (isOdd == 0) {\n            array.Sort();\n       \
    \     array.Reverse();\n        } else {\n            array.Sort();\n        }\n\
    \        return array;", '        return null;', "        List<long> result =\
    \ new List<long>();\n        if (array.Count < 2) {\n            return array;\n\
    \        }\n        List<long> oddList = new List<long>();\n        List<long>\
    \ evenList = new List<long>();\n        for (int i = 0; i < array.Count; i++)\
    \ {\n            if (array[i] % 2 == 0) {\n                evenList.Add(array[i]);\n\
    \            } else {\n                oddList.Add(array[i]);\n            }\n\
    \        }\n        if ((oddList.Count > 0 && oddList[0] + oddList[oddList.Count\
    \ - 1] < 0) ||\n                (evenList.Count > 0 && evenList[0] + evenList[evenList.Count\
    \ - 1] < 0)) {\n            throw new Exception(\"Integer overflow\");\n     \
    \   }\n        if ((oddList.Count > 0 && oddList[0] + oddList[oddList.Count -\
    \ 1] % 2 == 0) ||\n                (evenList.Count > 0 && evenList[0] + evenList[evenList.Count\
    \ - 1] % 2 == 1)) {\n            oddList.Sort();\n            evenList.Sort();\n\
    \            evenList.Reverse();\n        } else {\n            oddList.Sort();\n\
    \            oddList.Reverse();\n            evenList.Sort();\n        }\n   \
    \     result.AddRange(oddList);\n        result.AddRange(evenList);\n        return\
    \ result;", "        if (array.Count == 0) return array;\n        List<long> tmp\
    \ = new List<long>(array);\n        tmp.Sort();\n        bool reverse = (array[0]\
    \ + array[array.Count - 1]) % 2 == 0;\n        if (reverse) {\n            tmp.Reverse();\n\
    \        }\n        return tmp;", "        // Your implementation goes here.\n\
    \        // Return a copy of the given list,\n        //   either sorted in ascending\
    \ order if the sum( first index value, last index value) is odd,\n        // \
    \  or sorted in descending order if the sum( first index value, last index value)\
    \ is even.\n        return array;", "        // return new List<long>((new long[]{(long)1L,\
    \ (long)3L, (long)5L, (long)2L, (long)4L, (long)0L}));\n        List<long> array2\
    \ = array;\n        if (array2.Count > 1) {\n            array2.Sort();\n    \
    \        long first = array2[0];\n            long last = array2[array2.Count\
    \ - 1];\n            long sum = first + last;\n            if (sum % 2 == 0) {\n\
    \                array2.Reverse();\n            }\n        }\n        return array2;",
  '        return null;', "        if (array.Count == 0) return array;\n        long\
    \ first = array[0];\n        long last = array[array.Count - 1];\n        List<long>\
    \ ret = new List<long>();\n        if ((first + last) % 2 == 0) {\n          \
    \  array.Sort();\n            array.Reverse();\n            ret = array;\n   \
    \     } else {\n            array.Sort();\n            ret = array;\n        }\n\
    \        return ret;", "        List<long> sorted = new List<long>();\n      \
    \  List<long> odd = new List<long>();\n        List<long> even = new List<long>();\n\
    \        foreach (var x in array) {\n            if (x % 2 == 0) {\n         \
    \       even.Add(x);\n            } else {\n                odd.Add(x);\n    \
    \        }\n        }\n        even.Sort();\n        odd.Sort();\n        odd.Reverse();\n\
    \        sorted.AddRange(odd);\n        sorted.AddRange(even);\n        return\
    \ sorted;", '        return array;', "        if (array.Count() == 0) {\n    \
    \        return new List<long>();\n        } else if (array.Count() == 1) {\n\
    \            return array;\n        } else {\n            long first = array[0];\n\
    \            long last = array[array.Count() - 1];\n            List<long> result\
    \ = new List<long>();\n            if ((first + last) % 2 == 0) {\n          \
    \      result = array.OrderByDescending(n => n).ToList();\n            } else\
    \ {\n                result = array.OrderBy(n => n).ToList();\n            }\n\
    \            return result;\n        }", "        // validation\n        if (array.Count\
    \ <= 1) {\n            return array;\n        }\n        List<long> aCopy = new\
    \ List<long>(array);\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            aCopy.Sort();\n            aCopy.Reverse();\n        } else {\n\
    \            aCopy.Sort();\n        }\n        return aCopy;", "        // Write\
    \ your code here\n        return array;", "        if(array.Count == 0) {\n  \
    \          return array;\n        }\n        if(array.Count == 1) {\n        \
    \    return array;\n        }\n        if(array.Count == 2) {\n            if((array[0]\
    \ + array[1]) % 2 == 0) {\n                long temp = array[0];\n           \
    \     array[0] = array[1];\n                array[1] = temp;\n            }\n\
    \            return array;\n        }\n        // odd\n        if((array[0] +\
    \ array[array.Count - 1]) % 2 == 1) {\n            array.Sort();\n           \
    \ return array;\n        }\n        // even\n        else {\n            array.Sort();\n\
    \            for(int i = 0; i < array.Count / 2; i++) {\n                long\
    \ temp = array[i];\n                array[i] = array[array.Count - 1 - i];\n \
    \               array[array.Count - 1 - i] = temp;\n            }\n          \
    \  return array;\n        }", "        // your code goes here.\n        List<long>\
    \ r = new List<long>();\n        if (array.Count == 0) return r;\n        if (array.Count\
    \ == 1) {\n            r.Add(array[0]);\n            return r;\n        }\n  \
    \      var l = array.ToList();\n        if ((l[0] + l[l.Count - 1]) % 2 == 0)\
    \ {\n            l.Sort();\n            l.Reverse();\n        } else {\n     \
    \       l.Sort();\n        }\n        return l;", "        // Your code here\n\
    \        var newArray = new List<long>();\n        foreach (var item in array)\
    \ {\n            newArray.Add(item);\n        }\n        if (newArray.Count ==\
    \ 0) {\n            return newArray;\n        }\n        if (newArray.Count ==\
    \ 1) {\n            return newArray;\n        }\n        if ((newArray[0] + newArray[newArray.Count\
    \ - 1]) % 2 == 0) {\n            newArray.Sort();\n            newArray.Reverse();\n\
    \        } else {\n            newArray.Sort();\n        }\n        return newArray;",
  "        if (array.Count == 0) {\n            return array;\n        }\n       \
    \ if (array.Count == 1) {\n            return array;\n        }\n        if (array.Count\
    \ == 2) {\n            if (((array[0]) + (array[1])) % 2L == 0L) {\n         \
    \       return new List<long>(new long[]{(long)array[1L], (long)array[0L]});\n\
    \            }\n            return array;\n        }\n        var head = (array)[0L];\n\
    \        var tail = (array)[(array.Count - 1L)];\n        if (((head) + (tail))\
    \ % 2L == 0L) {\n            // sort descending\n            var sorted_array\
    \ = (array).ToList();\n            sorted_array.Sort((a, b) => b.CompareTo(a));\n\
    \            return sorted_array;\n        }\n        // sort ascending\n    \
    \    var sorted_array_1 = (array).ToList();\n        sorted_array_1.Sort((a, b)\
    \ => a.CompareTo(b));\n        return sorted_array_1;"]
stop_tokens:
- "\n    }\n"
