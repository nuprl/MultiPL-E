name: HumanEval_81_numerical_letter_grade
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // It is the last week of the semester and the teacher has to give\
  \ the grades\n    // to students. The teacher has been making her own algorithm\
  \ for grading.\n    // The only problem is, she has lost the code she used for grading.\n\
  \    // She has given you a list of GPAs for some students and you have to write\
  \ \n    // a function that can output a list of letter grades using the following\
  \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n   \
  \ // > 3.7                A \n    // > 3.3                A- \n    // > 3.0    \
  \            B+\n    // > 2.7                B \n    // > 2.3                B-\n\
  \    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3   \
  \             C-\n    // > 1.0                D+ \n    // > 0.7                D\
  \ \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n\
  \    // >>> GradeEquation((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f,\
  \ (float)2L, (float)3.5f})))\n    // (new List<string>(new string[]{(string)\"A+\"\
  , (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))\n    public static\
  \ List<string> NumericalLetterGrade(List<float> grades) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumericalLetterGrade((new\
  \ List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f}))).Equals((new\
  \ List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"\
  C\", (string)\"A-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new\
  \ float[]{(float)1.2f}))).Equals((new List<string>(new string[]{(string)\"D+\"}))));\n\
  \    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.5f}))).Equals((new\
  \ List<string>(new string[]{(string)\"D-\"}))));\n    Debug.Assert(NumericalLetterGrade((new\
  \ List<float>(new float[]{(float)0.0f}))).Equals((new List<string>(new string[]{(string)\"\
  E\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.0f,\
  \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))).Equals((new List<string>(new\
  \ string[]{(string)\"D\", (string)\"D-\", (string)\"C-\", (string)\"B\", (string)\"\
  B+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f,\
  \ (float)0.7f}))).Equals((new List<string>(new string[]{(string)\"E\", (string)\"\
  D-\"}))));\n    }\n\n}\n"
completions: ["        List<string> outputGrades = new List<string>();\n        foreach\
    \ (float n in grades) {\n            if (n > 4.0f) {\n                outputGrades.Add(\"\
    A+\");\n            } else if (n > 3.7f) {\n                outputGrades.Add(\"\
    A\");\n            } else if (n > 3.3f) {\n                outputGrades.Add(\"\
    A-\");\n            } else if (n > 3.0f) {\n                outputGrades.Add(\"\
    B+\");\n            } else if (n > 2.7f) {\n                outputGrades.Add(\"\
    B\");\n            } else if (n > 2.3f) {\n                outputGrades.Add(\"\
    B-\");\n            } else if (n > 2.0f) {\n                outputGrades.Add(\"\
    C+\");\n            } else if (n > 1.7f) {\n                outputGrades.Add(\"\
    C\");\n            } else if (n > 1.3f) {\n                outputGrades.Add(\"\
    C-\");\n            } else if (n > 1.0f) {\n                outputGrades.Add(\"\
    D+\");\n            } else if (n > 0.7f) {\n                outputGrades.Add(\"\
    D\");\n            } else if (n > 0.0f) {\n                outputGrades.Add(\"\
    D-\");\n            } else {\n                outputGrades.Add(\"E\");\n     \
    \       }\n        }\n        return outputGrades;", "        var letter_grades\
    \ = new List<string>();\n        foreach (var g in grades) {\n            if (g\
    \ >= 4.0) {\n                letter_grades.Add(\"A+\");\n            } else if\
    \ (g >= 3.7) {\n                letter_grades.Add(\"A\");\n            } else\
    \ if (g >= 3.3) {\n                letter_grades.Add(\"A-\");\n            } else\
    \ if (g >= 3.0) {\n                letter_grades.Add(\"B+\");\n            } else\
    \ if (g >= 2.7) {\n                letter_grades.Add(\"B\");\n            } else\
    \ if (g >= 2.3) {\n                letter_grades.Add(\"B-\");\n            } else\
    \ if (g >= 2.0) {\n                letter_grades.Add(\"C+\");\n            } else\
    \ if (g >= 1.7) {\n                letter_grades.Add(\"C\");\n            } else\
    \ if (g >= 1.3) {\n                letter_grades.Add(\"C-\");\n            } else\
    \ if (g >= 1.0) {\n                letter_grades.Add(\"D+\");\n            } else\
    \ if (g >= 0.7) {\n                letter_grades.Add(\"D\");\n            } else\
    \ if (g >= 0.0) {\n                letter_grades.Add(\"D-\");\n            } else\
    \ {\n                letter_grades.Add(\"E\");\n            }\n        }\n   \
    \     return letter_grades;", "        //Grade table (example)\n        //4.0\
    \ - A+\n        //3.7 - A\n        //3.3 - A-\n        //3.0 - B+\n        //2.7\
    \ - B\n        //2.3 - B-\n        //2.0 - C+\n        //1.7 - C\n        //1.3\
    \ - C-\n        //1.0 - D+\n        //0.7 - D\n        //0.0 - D-\n        //0.0\
    \ - E\n        List<string> _grades = new List<string>();\n        for (int i\
    \ = 0; i < grades.Count; i++) {\n            if (grades[i] >= 4.0) {\n       \
    \         _grades.Add(\"A+\");\n            } else if (grades[i] >= 3.7) {\n \
    \               _grades.Add(\"A\");\n            } else if (grades[i] >= 3.3)\
    \ {\n                _grades.Add(\"A-\");\n            } else if (grades[i] >=\
    \ 3.0) {\n                _grades.Add(\"B+\");\n            } else if (grades[i]\
    \ >= 2.7) {\n                _grades.Add(\"B\");\n            } else if (grades[i]\
    \ >= 2.3) {\n                _grades.Add(\"B-\");\n            } else if (grades[i]\
    \ >= 2.0) {\n                _grades.Add(\"C+\");\n            } else if (grades[i]\
    \ >= 1.7) {\n                _grades.Add(\"C\");\n            } else if (grades[i]\
    \ >= 1.3) {\n                _grades.Add(\"C-\");\n            } else if (grades[i]\
    \ >= 1.0) {\n                _grades.Add(\"D+\");\n            } else if (grades[i]\
    \ >= 0.7) {\n                _grades.Add(\"D\");\n            } else if (grades[i]\
    \ >= 0.0) {\n                _grades.Add(\"D-\");\n            } else {\n    \
    \            _grades.Add(\"E\");\n            }\n        }\n        return _grades;",
  "        List<string> letterGrades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            if (grade == 4.0f) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade > 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade > 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade > 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade > 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade > 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade > 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade > 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade > 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade > 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> results\
    \ = new List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n  \
    \          if (grades[i] == 4) {\n                results.Add(\"A+\");\n     \
    \       } else if (grades[i] > 3.7) {\n                results.Add(\"A\");\n \
    \           } else if (grades[i] > 3.3) {\n                results.Add(\"A-\"\
    );\n            } else if (grades[i] > 3) {\n                results.Add(\"B+\"\
    );\n            } else if (grades[i] > 2.7) {\n                results.Add(\"\
    B\");\n            } else if (grades[i] > 2.3) {\n                results.Add(\"\
    B-\");\n            } else if (grades[i] > 2) {\n                results.Add(\"\
    C+\");\n            } else if (grades[i] > 1.7) {\n                results.Add(\"\
    C\");\n            } else if (grades[i] > 1.3) {\n                results.Add(\"\
    C-\");\n            } else if (grades[i] > 1) {\n                results.Add(\"\
    D+\");\n            } else if (grades[i] > 0.7) {\n                results.Add(\"\
    D\");\n            } else if (grades[i] > 0) {\n                results.Add(\"\
    D-\");\n            } else {\n                results.Add(\"E\");\n          \
    \  }\n        }\n        return results;", "        return grades.Select(g =>\n\
    \            g >= 4.0f ? \"A+\" :\n            g >= 3.7f ? \"A\" :\n         \
    \   g >= 3.3f ? \"A-\" :\n            g >= 3.0f ? \"B+\" :\n            g >= 2.7f\
    \ ? \"B\" :\n            g >= 2.3f ? \"B-\" :\n            g >= 2.0f ? \"C+\"\
    \ :\n            g >= 1.7f ? \"C\" :\n            g >= 1.3f ? \"C-\" :\n     \
    \       g >= 1.0f ? \"D+\" :\n            g >= 0.7f ? \"D\" :\n            g >=\
    \ 0.0f ? \"D-\" :\n            \"E\").ToList();", "        List<string> res =\
    \ new List<string>();\n        foreach (float x in grades) {\n            if (x\
    \ == 4) {\n                res.Add(\"A+\");\n            } else if (x >= 3.7)\
    \ {\n                res.Add(\"A\");\n            } else if (x >= 3.3) {\n   \
    \             res.Add(\"A-\");\n            } else if (x >= 3) {\n           \
    \     res.Add(\"B+\");\n            } else if (x >= 2.7) {\n                res.Add(\"\
    B\");\n            } else if (x >= 2.3) {\n                res.Add(\"B-\");\n\
    \            } else if (x >= 2) {\n                res.Add(\"C+\");\n        \
    \    } else if (x >= 1.7) {\n                res.Add(\"C\");\n            } else\
    \ if (x >= 1.3) {\n                res.Add(\"C-\");\n            } else if (x\
    \ >= 1) {\n                res.Add(\"D+\");\n            } else if (x >= 0.7)\
    \ {\n                res.Add(\"D\");\n            } else if (x >= 0) {\n     \
    \           res.Add(\"D-\");\n            } else {\n                res.Add(\"\
    E\");\n            }\n        }\n        return res;", "        List<string> result\
    \ = new List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n  \
    \          result.Add(LetterGrade(grades[i]));\n        }\n        return result;",
  "        List<string> output = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            output.Add(LetterGrade(grade));\n        }\n     \
    \   return output;", "        // Implement this function\n\n        // return\
    \ null;\n        var result = new List<string>();\n        //foreach (var grade\
    \ in grades)\n        //{\n        //    if (grade == 4) result.Add(\"A+\");\n\
    \        //    else if (grade > 3.7) result.Add(\"A\");\n        //    else if\
    \ (grade > 3.3) result.Add(\"A-\");\n        //    else if (grade > 3) result.Add(\"\
    B+\");\n        //    else if (grade > 2.7) result.Add(\"B\");\n        //   \
    \ else if (grade > 2.3) result.Add(\"B-\");\n        //    else if (grade > 2)\
    \ result.Add(\"C+\");\n        //    else if (grade > 1.7) result.Add(\"C\");\n\
    \        //    else if (grade > 1.3) result.Add(\"C-\");\n        //    else if\
    \ (grade > 1) result.Add(\"D+\");\n        //    else if (grade > 0.7) result.Add(\"\
    D\");\n        //    else if (grade > 0) result.Add(\"D-\");\n        //    else\
    \ result.Add(\"E\");\n        //}\n        var lookup = new Dictionary<float,\
    \ string>();\n        lookup.Add(4, \"A+\");\n        lookup.Add(3.7f, \"A\");\n\
    \        lookup.Add(3.3f, \"A-\");\n        lookup.Add(3, \"B+\");\n        lookup.Add(2.7f,\
    \ \"B\");\n        lookup.Add(2.3f, \"B-\");\n        lookup.Add(2, \"C+\");\n\
    \        lookup.Add(1.7f, \"C\");\n        lookup.Add(1.3f, \"C-\");\n       \
    \ lookup.Add(1, \"D+\");\n        lookup.Add(0.7f, \"D\");\n        lookup.Add(0,\
    \ \"D-\");\n        foreach (var grade in grades)\n        {\n            foreach\
    \ (var item in lookup)\n            {\n                if (grade > item.Key)\n\
    \                {\n                    result.Add(item.Value);\n            \
    \        break;\n                }\n            }\n", "        List<string> lst=new\
    \ List<string>();\n        foreach(float g in grades) {\n            if(g>=4.0f)\
    \ {\n                lst.Add(\"A+\");\n            } else if(g>=3.7f) {\n    \
    \            lst.Add(\"A\");\n            } else if(g>=3.3f) {\n             \
    \   lst.Add(\"A-\");\n            } else if(g>=3.0f) {\n                lst.Add(\"\
    B+\");\n            } else if(g>=2.7f) {\n                lst.Add(\"B\");\n  \
    \          } else if(g>=2.3f) {\n                lst.Add(\"B-\");\n          \
    \  } else if(g>=2.0f) {\n                lst.Add(\"C+\");\n            } else\
    \ if(g>=1.7f) {\n                lst.Add(\"C\");\n            } else if(g>=1.3f)\
    \ {\n                lst.Add(\"C-\");\n            } else if(g>=1.0f) {\n    \
    \            lst.Add(\"D+\");\n            } else if(g>=0.7f) {\n            \
    \    lst.Add(\"D\");\n            } else if(g>=0.0f) {\n                lst.Add(\"\
    D-\");\n            } else {\n                lst.Add(\"E\");\n            }\n\
    \        }\n        return lst;", "        List<string> result = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade == 4.0f) {\n\
    \                result.Add(\"A+\");\n            } else if (grade > 3.7f) {\n\
    \                result.Add(\"A\");\n            } else if (grade > 3.3f) {\n\
    \                result.Add(\"A-\");\n            } else if (grade > 3.0f) {\n\
    \                result.Add(\"B+\");\n            } else if (grade > 2.7f) {\n\
    \                result.Add(\"B\");\n            } else if (grade > 2.3f) {\n\
    \                result.Add(\"B-\");\n            } else if (grade > 2.0f) {\n\
    \                result.Add(\"C+\");\n            } else if (grade > 1.7f) {\n\
    \                result.Add(\"C\");\n            } else if (grade > 1.3f) {\n\
    \                result.Add(\"C-\");\n            } else if (grade > 1.0f) {\n\
    \                result.Add(\"D+\");\n            } else if (grade > 0.7f) {\n\
    \                result.Add(\"D\");\n            } else if (grade > 0.0f) {\n\
    \                result.Add(\"D-\");\n            } else {\n                result.Add(\"\
    E\");\n            }\n        }\n        return result;", "        List<string>\
    \ res = new List<string>();\n        foreach (float g in grades) {\n         \
    \   if (g > 4.0f) {\n                res.Add(\"A+\");\n            } else if (g\
    \ > 3.7f) {\n                res.Add(\"A\");\n            } else if (g > 3.3f)\
    \ {\n                res.Add(\"A-\");\n            } else if (g > 3.0f) {\n  \
    \              res.Add(\"B+\");\n            } else if (g > 2.7f) {\n        \
    \        res.Add(\"B\");\n            } else if (g > 2.3f) {\n               \
    \ res.Add(\"B-\");\n            } else if (g > 2.0f) {\n                res.Add(\"\
    C+\");\n            } else if (g > 1.7f) {\n                res.Add(\"C\");\n\
    \            } else if (g > 1.3f) {\n                res.Add(\"C-\");\n      \
    \      } else if (g > 1.0f) {\n                res.Add(\"D+\");\n            }\
    \ else if (g > 0.7f) {\n                res.Add(\"D\");\n            } else if\
    \ (g > 0.0f) {\n                res.Add(\"D-\");\n            } else {\n     \
    \           res.Add(\"E\");\n            }\n        }\n        return res;", " \
    \       // your code here\n        return null;", "        List<string> output\
    \ = new List<string>();\n        // foreach (var grade in grades) {\n        //\
    \     Console.WriteLine(grade);\n        // }\n        foreach (var grade in grades)\
    \ {\n            if (grade == 4.0f) {\n                output.Add(\"A+\");\n \
    \           } else if (grade > 3.7f) {\n                output.Add(\"A\");\n \
    \           } else if (grade > 3.3f) {\n                output.Add(\"A-\");\n\
    \            } else if (grade > 3.0f) {\n                output.Add(\"B+\");\n\
    \            } else if (grade > 2.7f) {\n                output.Add(\"B\");\n\
    \            } else if (grade > 2.3f) {\n                output.Add(\"B-\");\n\
    \            } else if (grade > 2.0f) {\n                output.Add(\"C+\");\n\
    \            } else if (grade > 1.7f) {\n                output.Add(\"C\");\n\
    \            } else if (grade > 1.3f) {\n                output.Add(\"C-\");\n\
    \            } else if (grade > 1.0f) {\n                output.Add(\"D+\");\n\
    \            } else if (grade > 0.7f) {\n                output.Add(\"D\");\n\
    \            } else if (grade > 0.0f) {\n                output.Add(\"D-\");\n\
    \            } else {\n                output.Add(\"E\");\n            }\n   \
    \     }\n        return output;", "        // write your code here\n        return\
    \ new List<string>();", "        List<string> x = new List<string>();\n      \
    \  foreach (float grade in grades) {\n            if (grade >= 4.0f) {\n     \
    \           x.Add(\"A+\");\n            } else if (grade >= 3.7f) {\n        \
    \        x.Add(\"A\");\n            } else if (grade >= 3.3f) {\n            \
    \    x.Add(\"A-\");\n            } else if (grade >= 3.0f) {\n               \
    \ x.Add(\"B+\");\n            } else if (grade >= 2.7f) {\n                x.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                x.Add(\"B-\");\n\
    \            } else if (grade >= 2.0f) {\n                x.Add(\"C+\");\n   \
    \         } else if (grade >= 1.7f) {\n                x.Add(\"C\");\n       \
    \     } else if (grade >= 1.3f) {\n                x.Add(\"C-\");\n          \
    \  } else if (grade >= 1.0f) {\n                x.Add(\"D+\");\n            }\
    \ else if (grade >= 0.7f) {\n                x.Add(\"D\");\n            } else\
    \ if (grade >= 0.0f) {\n                x.Add(\"D-\");\n            } else {\n\
    \                x.Add(\"E\");\n            }\n        }\n        return x;",
  "        // Fill out this method using the above table\n        // Your method should\
    \ return an array of strings\n        // representing the letter grades\n    \
    \    // You can test your method using the method below\n        List<string>\
    \ result = new List<string>();\n        for (int i = 0; i < grades.Count; i++)\
    \ {\n            result.Add(GradeEquation(grades[i]));\n        }\n        return\
    \ result;", '        return grades.Select(n => (n >= 4) ? "A+" : (n >= 3.7) ?
    "A" : (n >= 3.3) ? "A-" : (n >= 3) ? "B+" : (n >= 2.7) ? "B" : (n >= 2.3) ? "B-"
    : (n >= 2) ? "C+" : (n >= 1.7) ? "C" : (n >= 1.3) ? "C-" : (n >= 1) ? "D+" : (n
    >= 0.7) ? "D" : (n >= 0) ? "D-" : "E").ToList();', "        List<string> output\
    \ = new List<string>();\n        foreach (float n in grades) {\n            if\
    \ (n >= 4.0) {\n                output.Add(\"A+\");\n            } else if (n\
    \ >= 3.7) {\n                output.Add(\"A\");\n            } else if (n >= 3.3)\
    \ {\n                output.Add(\"A-\");\n            } else if (n >= 3.0) {\n\
    \                output.Add(\"B+\");\n            } else if (n >= 2.7) {\n   \
    \             output.Add(\"B\");\n            } else if (n >= 2.3) {\n       \
    \         output.Add(\"B-\");\n            } else if (n >= 2.0) {\n          \
    \      output.Add(\"C+\");\n            } else if (n >= 1.7) {\n             \
    \   output.Add(\"C\");\n            } else if (n >= 1.3) {\n                output.Add(\"\
    C-\");\n            } else if (n >= 1.0) {\n                output.Add(\"D+\"\
    );\n            } else if (n >= 0.7) {\n                output.Add(\"D\");\n \
    \           } else if (n >= 0.0) {\n                output.Add(\"D-\");\n    \
    \        } else {\n                output.Add(\"E\");\n            }\n       \
    \ }\n        return output;", "        List<string> letterGrades = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade > 4.0f) {\n\
    \                letterGrades.Add(\"A+\");\n            } else if (grade > 3.7f)\
    \ {\n                letterGrades.Add(\"A\");\n            } else if (grade >\
    \ 3.3f) {\n                letterGrades.Add(\"A-\");\n            } else if (grade\
    \ > 3.0f) {\n                letterGrades.Add(\"B+\");\n            } else if\
    \ (grade > 2.7f) {\n                letterGrades.Add(\"B\");\n            } else\
    \ if (grade > 2.3f) {\n                letterGrades.Add(\"B-\");\n           \
    \ } else if (grade > 2.0f) {\n                letterGrades.Add(\"C+\");\n    \
    \        } else if (grade > 1.7f) {\n                letterGrades.Add(\"C\");\n\
    \            } else if (grade > 1.3f) {\n                letterGrades.Add(\"C-\"\
    );\n            } else if (grade > 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> output\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                output.Add(\"A+\");\n            } else\
    \ if (grade >= 3.7f) {\n                output.Add(\"A\");\n            } else\
    \ if (grade >= 3.3f) {\n                output.Add(\"A-\");\n            } else\
    \ if (grade >= 3.0f) {\n                output.Add(\"B+\");\n            } else\
    \ if (grade >= 2.7f) {\n                output.Add(\"B\");\n            } else\
    \ if (grade >= 2.3f) {\n                output.Add(\"B-\");\n            } else\
    \ if (grade >= 2.0f) {\n                output.Add(\"C+\");\n            } else\
    \ if (grade >= 1.7f) {\n                output.Add(\"C\");\n            } else\
    \ if (grade >= 1.3f) {\n                output.Add(\"C-\");\n            } else\
    \ if (grade >= 1.0f) {\n                output.Add(\"D+\");\n            } else\
    \ if (grade >= 0.7f) {\n                output.Add(\"D\");\n            } else\
    \ if (grade >= 0.0f) {\n                output.Add(\"D-\");\n            } else\
    \ {\n                output.Add(\"E\");\n            }\n        }\n        return\
    \ output;", "        List<string> LetterGrade = new List<string>();\n        for\
    \ (int i = 0; i < grades.Count; i++) {\n            if (grades[i] > 4) {\n   \
    \             LetterGrade.Add(\"A+\");\n            } else if (grades[i] > 3.7)\
    \ {\n                LetterGrade.Add(\"A\");\n            } else if (grades[i]\
    \ > 3.3) {\n                LetterGrade.Add(\"A-\");\n            } else if (grades[i]\
    \ > 3) {\n                LetterGrade.Add(\"B+\");\n            } else if (grades[i]\
    \ > 2.7) {\n                LetterGrade.Add(\"B\");\n            } else if (grades[i]\
    \ > 2.3) {\n                LetterGrade.Add(\"B-\");\n            } else if (grades[i]\
    \ > 2) {\n                LetterGrade.Add(\"C+\");\n            } else if (grades[i]\
    \ > 1.7) {\n                LetterGrade.Add(\"C\");\n            } else if (grades[i]\
    \ > 1.3) {\n                LetterGrade.Add(\"C-\");\n            } else if (grades[i]\
    \ > 1) {\n                LetterGrade.Add(\"D+\");\n            } else if (grades[i]\
    \ > 0.7) {\n                LetterGrade.Add(\"D\");\n            } else if (grades[i]\
    \ > 0) {\n                LetterGrade.Add(\"D-\");\n            } else {\n   \
    \             LetterGrade.Add(\"E\");\n            }\n        }\n        return\
    \ LetterGrade;", "        List<string> letterGrades = new List<string>();\n  \
    \      foreach (float grade in grades) {\n            if (grade >= 4.0f) {\n \
    \               letterGrades.Add(\"A+\");\n            } else if (grade >= 3.7f)\
    \ {\n                letterGrades.Add(\"A\");\n            } else if (grade >=\
    \ 3.3f) {\n                letterGrades.Add(\"A-\");\n            } else if (grade\
    \ >= 3.0f) {\n                letterGrades.Add(\"B+\");\n            } else if\
    \ (grade >= 2.7f) {\n                letterGrades.Add(\"B\");\n            } else\
    \ if (grade >= 2.3f) {\n                letterGrades.Add(\"B-\");\n          \
    \  } else if (grade >= 2.0f) {\n                letterGrades.Add(\"C+\");\n  \
    \          } else if (grade >= 1.7f) {\n                letterGrades.Add(\"C\"\
    );\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        // List<string>\
    \ letter_grades = new List<string>();\n        // for (int i = 0; i < grades.Count;\
    \ i++) {\n        //     if (grades[i] >= 4.0) {\n        //         letter_grades.Add(\"\
    A+\");\n        //     } else if (grades[i] >= 3.7) {\n        //         letter_grades.Add(\"\
    A\");\n        //     } else if (grades[i] >= 3.3) {\n        //         letter_grades.Add(\"\
    A-\");\n        //     } else if (grades[i] >= 3.0) {\n        //         letter_grades.Add(\"\
    B+\");\n        //     } else if (grades[i] >= 2.7) {\n        //         letter_grades.Add(\"\
    B\");\n        //     } else if (grades[i] >= 2.3) {\n        //         letter_grades.Add(\"\
    B-\");\n        //     } else if (grades[i] >= 2.0) {\n        //         letter_grades.Add(\"\
    C+\");\n        //     } else if (grades[i] >= 1.7) {\n        //         letter_grades.Add(\"\
    C\");\n        //     } else if (grades[i] >= 1.3) {\n        //         letter_grades.Add(\"\
    C-\");\n        //     } else if (grades[i] >= 1.0) {\n        //         letter_grades.Add(\"\
    D+\");\n        //     } else if (grades[i] >= 0.7) {\n        //         letter_grades.Add(\"\
    D\");\n        //     } else if (grades[i] >= 0.0) {\n        //         letter_grades.Add(\"\
    D-\");\n        //     } else {\n        //         letter_grades.Add(\"E\");\n\
    \        //     }\n        // }\n        // return letter_grades;\n        return\
    \ grades.Select(grade => {\n            if (grade >= 4.0) {\n                return\
    \ \"A+\";\n            } else if (grade >= 3.7) {\n                return \"A\"\
    ;\n            } else if (grade >= 3.3) {\n                return \"A-\";\n  \
    \          } else if (grade", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < grades.Count; i++) {\n            float cGr = grades[i];\n\
    \            string ans = \"\";\n            if (cGr > 3.7) ans = \"A+\";\n  \
    \          else if (cGr > 3.3) ans = \"A\";\n            else if (cGr > 3.0) ans\
    \ = \"A-\";\n            else if (cGr > 2.7) ans = \"B+\";\n            else if\
    \ (cGr > 2.3) ans = \"B\";\n            else if (cGr > 2.0) ans = \"B-\";\n  \
    \          else if (cGr > 1.7) ans = \"C+\";\n            else if (cGr > 1.3)\
    \ ans = \"C\";\n            else if (cGr > 1.0) ans = \"C-\";\n            else\
    \ if (cGr > 0.7) ans = \"D+\";\n            else if (cGr > 0.0) ans = \"D\";\n\
    \            else if (cGr > -0.00001) ans = \"D-\";\n            else ans = \"\
    E\";\n            res.Add(ans);\n        }\n        return res;", "        //\
    \ Handle corner cases\n        if (grades == null) {\n            throw new Exception(\"\
    Input list is null.\");\n        }\n        if (grades.Count == 0) {\n       \
    \     throw new Exception(\"Input list is empty.\");\n        }\n        if (grades.Count\
    \ != grades.Distinct().Count()) {\n            throw new Exception(\"Input list\
    \ contains duplicate grades.\");\n        }\n        if (grades.Any(grade => grade\
    \ < 0.0f)) {\n            throw new Exception(\"Input list contains negative grades.\"\
    );\n        }\n        // Make sure elements of grades are always floats\n   \
    \     List<float> numericalGrades = grades.Select(\n            grade => (float)grade\n\
    \        ).ToList();\n        // Sort numerical grades in increasing order\n \
    \       numericalGrades.Sort();\n        List<string> letterGrades = new List<string>();\n\
    \        // Loop through list of numerical grades and convert them to letter grades\n\
    \        for (int i = 0; i < numericalGrades.Count; i++) {\n            // Get\
    \ current grade\n            float currentGrade = numericalGrades[i];\n      \
    \      // Initialize letter grade to be empty\n            string letterGrade\
    \ = \"\";\n            // Assign letter grade based on current grade\n       \
    \     if (currentGrade >= 4.0f) {\n                letterGrade = \"A+\";\n   \
    \         } else if (currentGrade >= 3.7f) {\n                letterGrade = \"\
    A\";\n            } else if (currentGrade >= 3.3f) {\n                letterGrade\
    \ = \"A-\";\n            } else if (currentGrade >= 3.0f) {\n                letterGrade\
    \ = \"B+\";\n            } else if (currentGrade >= 2.7f) {\n                letterGrade\
    \ = \"B\";\n            } else if (currentGrade >= 2.3f) {\n                letterGrade\
    \ = \"B-\";\n            } else if (currentGrade >= 2.0f) {\n                letterGrade\
    \ = \"C+\";\n            } else if (currentGrade >= 1.7f) {\n                letterGrade\
    \ = \"C\";\n            } else if (currentGrade >= 1.3f) {\n                letterGrade\
    \ = \"C-\";\n            } else if (currentGrade >= 1.0f) {\n                letterGrade\
    \ = \"D+\";\n", "        List<string> list = new List<string>();\n        foreach\
    \ (float grade in grades) {\n            if (grade >= 4.0f) {\n              \
    \  list.Add(\"A+\");\n            } else if (grade >= 3.7f) {\n              \
    \  list.Add(\"A\");\n            } else if (grade >= 3.3f) {\n               \
    \ list.Add(\"A-\");\n            } else if (grade >= 3.0f) {\n               \
    \ list.Add(\"B+\");\n            } else if (grade >= 2.7f) {\n               \
    \ list.Add(\"B\");\n            } else if (grade >= 2.3f) {\n                list.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                list.Add(\"C+\"\
    );\n            } else if (grade >= 1.7f) {\n                list.Add(\"C\");\n\
    \            } else if (grade >= 1.3f) {\n                list.Add(\"C-\");\n\
    \            } else if (grade >= 1.0f) {\n                list.Add(\"D+\");\n\
    \            } else if (grade >= 0.7f) {\n                list.Add(\"D\");\n \
    \           } else if (grade >= 0.0f) {\n                list.Add(\"D-\");\n \
    \           } else {\n                list.Add(\"E\");\n            }\n      \
    \  }\n        return list;", "        List<string> results = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade == 4.0f) {\n\
    \                results.Add(\"A+\");\n            } else if (grade > 3.7f) {\n\
    \                results.Add(\"A\");\n            } else if (grade > 3.3f) {\n\
    \                results.Add(\"A-\");\n            } else if (grade > 3.0f) {\n\
    \                results.Add(\"B+\");\n            } else if (grade > 2.7f) {\n\
    \                results.Add(\"B\");\n            } else if (grade > 2.3f) {\n\
    \                results.Add(\"B-\");\n            } else if (grade > 2.0f) {\n\
    \                results.Add(\"C+\");\n            } else if (grade > 1.7f) {\n\
    \                results.Add(\"C\");\n            } else if (grade > 1.3f) {\n\
    \                results.Add(\"C-\");\n            } else if (grade > 1.0f) {\n\
    \                results.Add(\"D+\");\n            } else if (grade > 0.7f) {\n\
    \                results.Add(\"D\");\n            } else if (grade > 0.0f) {\n\
    \                results.Add(\"D-\");\n            } else {\n                results.Add(\"\
    E\");\n            }\n        }\n        return results;", "        int len =\
    \ grades.Count;\n        List<string> result = new List<string>();\n        for\
    \ (int i = 0; i < len; i++) {\n            float grade = grades[i];\n        \
    \    if (grade >= 4) result.Add(\"A+\");\n            else if (grade >= 3.7) result.Add(\"\
    A\");\n            else if (grade >= 3.3) result.Add(\"A-\");\n            else\
    \ if (grade >= 3) result.Add(\"B+\");\n            else if (grade >= 2.7) result.Add(\"\
    B\");\n            else if (grade >= 2.3) result.Add(\"B-\");\n            else\
    \ if (grade >= 2) result.Add(\"C+\");\n            else if (grade >= 1.7) result.Add(\"\
    C\");\n            else if (grade >= 1.3) result.Add(\"C-\");\n            else\
    \ if (grade >= 1) result.Add(\"D+\");\n            else if (grade >= 0.7) result.Add(\"\
    D\");\n            else if (grade >= 0) result.Add(\"D-\");\n            else\
    \ result.Add(\"E\");\n        }\n        return result;", "        List<string>\
    \ toReturn = new List<string>();\n        foreach (float grade in grades) {\n\
    \            if (grade >= 4.0f) {\n                toReturn.Add(\"A+\");\n   \
    \         } else if (grade >= 3.7f) {\n                toReturn.Add(\"A\");\n\
    \            } else if (grade >= 3.3f) {\n                toReturn.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                toReturn.Add(\"B+\"\
    );\n            } else if (grade >= 2.7f) {\n                toReturn.Add(\"B\"\
    );\n            } else if (grade >= 2.3f) {\n                toReturn.Add(\"B-\"\
    );\n            } else if (grade >= 2.0f) {\n                toReturn.Add(\"C+\"\
    );\n            } else if (grade >= 1.7f) {\n                toReturn.Add(\"C\"\
    );\n            } else if (grade >= 1.3f) {\n                toReturn.Add(\"C-\"\
    );\n            } else if (grade >= 1.0f) {\n                toReturn.Add(\"D+\"\
    );\n            } else if (grade >= 0.7f) {\n                toReturn.Add(\"D\"\
    );\n            } else if (grade >= 0.0f) {\n                toReturn.Add(\"D-\"\
    );\n            } else {\n                toReturn.Add(\"E\");\n            }\n\
    \        }\n        return toReturn;", '        return new List<string>();', " \
    \       // Fill this in!\n        return new List<string>();", "        // Your\
    \ code here.\n        return new List<string>();", "        List<string> grades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0) {\n                grades.Add(\"A+\");\n            } else\
    \ if (grade >= 3.7) {\n                grades.Add(\"A\");\n            } else\
    \ if (grade >= 3.3) {\n                grades.Add(\"A-\");\n            } else\
    \ if (grade >= 3.0) {\n                grades.Add(\"B+\");\n            } else\
    \ if (grade >= 2.7) {\n                grades.Add(\"B\");\n            } else\
    \ if (grade >= 2.3) {\n                grades.Add(\"B-\");\n            } else\
    \ if (grade >= 2.0) {\n                grades.Add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                grades.Add(\"C\");\n            } else\
    \ if (grade >= 1.3) {\n                grades.Add(\"C-\");\n            } else\
    \ if (grade >= 1.0) {\n                grades.Add(\"D+\");\n            } else\
    \ if (grade >= 0.7) {\n                grades.Add(\"D\");\n            } else\
    \ if (grade >= 0.0) {\n                grades.Add(\"D-\");\n            } else\
    \ {\n                grades.Add(\"E\");\n            }\n        }\n        return\
    \ grades;", "        // Your code here\n        return new List<string>();", " \
    \       return grades.Select(g => {\n            if (g >= 4.0f) return \"A+\"\
    ;\n            if (g >= 3.7f) return \"A\";\n            if (g >= 3.3f) return\
    \ \"A-\";\n            if (g >= 3.0f) return \"B+\";\n            if (g >= 2.7f)\
    \ return \"B\";\n            if (g >= 2.3f) return \"B-\";\n            if (g\
    \ >= 2.0f) return \"C+\";\n            if (g >= 1.7f) return \"C\";\n        \
    \    if (g >= 1.3f) return \"C-\";\n            if (g >= 1.0f) return \"D+\";\n\
    \            if (g >= 0.7f) return \"D\";\n            if (g >= 0.0f) return \"\
    D-\";\n            return \"E\";\n        }).ToList();", "        // TODO: Write\
    \ your function here\n        List<string> output = new List<string>();\n    \
    \    foreach (float num in grades) {\n            if (num > 4) {\n           \
    \     output.Add(\"A+\");\n            } else if (num > 3.7) {\n             \
    \   output.Add(\"A\");\n            } else if (num > 3.3) {\n                output.Add(\"\
    A-\");\n            } else if (num > 3) {\n                output.Add(\"B+\");\n\
    \            } else if (num > 2.7) {\n                output.Add(\"B\");\n   \
    \         } else if (num > 2.3) {\n                output.Add(\"B-\");\n     \
    \       } else if (num > 2) {\n                output.Add(\"C+\");\n         \
    \   } else if (num > 1.7) {\n                output.Add(\"C\");\n            }\
    \ else if (num > 1.3) {\n                output.Add(\"C-\");\n            } else\
    \ if (num > 1) {\n                output.Add(\"D+\");\n            } else if (num\
    \ > 0.7) {\n                output.Add(\"D\");\n            } else if (num > 0)\
    \ {\n                output.Add(\"D-\");\n            } else {\n             \
    \   output.Add(\"E\");\n            }\n        }\n        return output;", " \
    \       List<string> output = new List<string>();\n        //ToDo: solve this\
    \ problem\n        return output;", "        // You can only edit the code below\
    \ this line\n        var result = new List<string>();\n        foreach (var grade\
    \ in grades) {\n            if (grade >= 4.0f) {\n                result.Add(\"\
    A+\");\n            } else if (grade >= 3.7f) {\n                result.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                result.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                result.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                result.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                result.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                result.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                result.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                result.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                result.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                result.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                result.Add(\"\
    D-\");\n            } else {\n                result.Add(\"E\");\n           \
    \ }\n        }\n        // You can only edit the code above this line\n      \
    \  return result;", "        //TODO: Implement the NumericalLetterGrade function\n\
    \        List<string> letterGrade = new List<string>();\n        for (int i =\
    \ 0; i < grades.Count; i++) {\n            letterGrade.Add(convertToLetter(grades[i]));\n\
    \        }\n        return letterGrade;", "        // Fill in this function to\
    \ grade students and return their letter grade\n        return new List<string>();",
  "        List<string> letterGrade = new List<string>();\n        for (int i = 0;\
    \ i < grades.Count; i++) {\n            if (grades[i] == 4.0f) {\n           \
    \     letterGrade.Add(\"A+\");\n            } else if (grades[i] > 3.7f) {\n \
    \               letterGrade.Add(\"A\");\n            } else if (grades[i] > 3.3f)\
    \ {\n                letterGrade.Add(\"A-\");\n            } else if (grades[i]\
    \ > 3.0f) {\n                letterGrade.Add(\"B+\");\n            } else if (grades[i]\
    \ > 2.7f) {\n                letterGrade.Add(\"B\");\n            } else if (grades[i]\
    \ > 2.3f) {\n                letterGrade.Add(\"B-\");\n            } else if (grades[i]\
    \ > 2.0f) {\n                letterGrade.Add(\"C+\");\n            } else if (grades[i]\
    \ > 1.7f) {\n                letterGrade.Add(\"C\");\n            } else if (grades[i]\
    \ > 1.3f) {\n                letterGrade.Add(\"C-\");\n            } else if (grades[i]\
    \ > 1.0f) {\n                letterGrade.Add(\"D+\");\n            } else if (grades[i]\
    \ > 0.7f) {\n                letterGrade.Add(\"D\");\n            } else if (grades[i]\
    \ > 0.0f) {\n                letterGrade.Add(\"D-\");\n            } else {\n\
    \                letterGrade.Add(\"E\");\n            }\n        }\n        return\
    \ letterGrade;", "        // replace the following code with your solution\n \
    \       List<string> letter_grades = new List<string>();\n        foreach (float\
    \ g in grades) {\n            if (g >= 4.0) {\n                letter_grades.Add(\"\
    A+\");\n            } else if (g >= 3.7) {\n                letter_grades.Add(\"\
    A\");\n            } else if (g >= 3.3) {\n                letter_grades.Add(\"\
    A-\");\n            } else if (g >= 3.0) {\n                letter_grades.Add(\"\
    B+\");\n            } else if (g >= 2.7) {\n                letter_grades.Add(\"\
    B\");\n            } else if (g >= 2.3) {\n                letter_grades.Add(\"\
    B-\");\n            } else if (g >= 2.0) {\n                letter_grades.Add(\"\
    C+\");\n            } else if (g >= 1.7) {\n                letter_grades.Add(\"\
    C\");\n            } else if (g >= 1.3) {\n                letter_grades.Add(\"\
    C-\");\n            } else if (g >= 1.0) {\n                letter_grades.Add(\"\
    D+\");\n            } else if (g >= 0.7) {\n                letter_grades.Add(\"\
    D\");\n            } else if (g >= 0.0) {\n                letter_grades.Add(\"\
    D-\");\n            } else {\n                letter_grades.Add(\"E\");\n    \
    \        }\n        }\n        return letter_grades;", "        // put your code\
    \ here\n        return new List<string>();", "        List<string> output = new\
    \ List<string>();\n        foreach (float grade in grades) {\n            if (grade\
    \ >= 3.7) {\n                output.Add(\"A\");\n            } else if (grade\
    \ >= 3.3) {\n                output.Add(\"A-\");\n            } else if (grade\
    \ >= 3.0) {\n                output.Add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                output.Add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                output.Add(\"B-\");\n            } else if (grade\
    \ >= 2.0) {\n                output.Add(\"C+\");\n            } else if (grade\
    \ >= 1.7) {\n                output.Add(\"C\");\n            } else if (grade\
    \ >= 1.3) {\n                output.Add(\"C-\");\n            } else if (grade\
    \ >= 1.0) {\n                output.Add(\"D+\");\n            } else if (grade\
    \ >= 0.7) {\n                output.Add(\"D\");\n            } else if (grade\
    \ >= 0.0) {\n                output.Add(\"D-\");\n            } else {\n     \
    \           output.Add(\"E\");\n            }\n        }\n        return output;",
  "        List<string> result = new List<string>();\n        for (int i = 0; i <\
    \ grades.Count; i++) {\n            if (grades[i] >= 4) {\n                result.Add(\"\
    A+\");\n            } else if (grades[i] >= 3.7) {\n                result.Add(\"\
    A\");\n            } else if (grades[i] >= 3.3) {\n                result.Add(\"\
    A-\");\n            } else if (grades[i] >= 3) {\n                result.Add(\"\
    B+\");\n            } else if (grades[i] >= 2.7) {\n                result.Add(\"\
    B\");\n            } else if (grades[i] >= 2.3) {\n                result.Add(\"\
    B-\");\n            } else if (grades[i] >= 2) {\n                result.Add(\"\
    C+\");\n            } else if (grades[i] >= 1.7) {\n                result.Add(\"\
    C\");\n            } else if (grades[i] >= 1.3) {\n                result.Add(\"\
    C-\");\n            } else if (grades[i] >= 1) {\n                result.Add(\"\
    D+\");\n            } else if (grades[i] >= 0.7) {\n                result.Add(\"\
    D\");\n            } else if (grades[i] >= 0) {\n                result.Add(\"\
    D-\");\n            } else {\n                result.Add(\"E\");\n           \
    \ }\n        }\n        return result;", "        // First, write a function that\
    \ outputs a letter grade for a single number\n        // This function should\
    \ return \"A+\" for 4.0\n        // You will need to use conditional statements\n\
    \        // The if/else statement can be written as if (conditional) {Code to\
    \ execute if conditional is true}\n        //                         else {Code\
    \ to execute if conditional is false}\n        // In these problems, you don't\
    \ need to use else, but it is good to know\n        // how the syntax works.\n\
    \        // There are also other conditional statements you can use.\n       \
    \ // For these problems, you need to use a series of else if statements:\n   \
    \     // if (conditional1) {Code to execute if conditional1 is true}\n       \
    \ // else if (conditional2) {Code to execute if conditional2 is true}\n      \
    \  // else if (conditional3) {Code to execute if conditional3 is true}\n     \
    \   // The first condition that is true will be the one executed.\n        //\
    \ The last else if should be followed by an else statement.\n        // Just like\
    \ the previous if statements, the else statement can be\n        // omitted, but\
    \ it is good to know how the syntax works.\n        // Use these to make a function\
    \ that returns a letter grade for a single number.\n        // You will need to\
    \ use the floating point comparison operators.\n        // These are:\n      \
    \  // >\n        // <\n        // >=\n        // <=\n        // !=\n        //\
    \ ==\n        // The next thing you will need to learn is the data type List.\n\
    \        // List is the variable type you need to create a list.\n        // You\
    \ use the new keyword to make a new variable of type List.\n        // The contents\
    \ of the list are within < and >.\n        // The contents of the list are the\
    \ type of data stored in the list.\n        // You can store any type of data\
    \ in a list.\n        // For example, List<string> is a list that stores strings.\n\
    \        // To initialize a list, you use the following syntax:\n        // List<type>\
    \ name = new List<type>();\n        // You can also make a list with the following\
    \ syntax:\n        // List<type> name = new List<type>(new type[]{element1, element2,\
    \ element3});\n        // For example", "        // TODO: Finish it.\n       \
    \ List<string> result = new List<string>();\n        foreach (float grade in grades)\
    \ {\n            if (grade >= 4) {\n                result.Add(\"A+\");\n    \
    \        } else if (grade >= 3.7) {\n                result.Add(\"A\");\n    \
    \        } else if (grade >= 3.3) {\n                result.Add(\"A-\");\n   \
    \         } else if (grade >= 3) {\n                result.Add(\"B+\");\n    \
    \        } else if (grade >= 2.7) {\n                result.Add(\"B\");\n    \
    \        } else if (grade >= 2.3) {\n                result.Add(\"B-\");\n   \
    \         } else if (grade >= 2) {\n                result.Add(\"C+\");\n    \
    \        } else if (grade >= 1.7) {\n                result.Add(\"C\");\n    \
    \        } else if (grade >= 1.3) {\n                result.Add(\"C-\");\n   \
    \         } else if (grade >= 1) {\n                result.Add(\"D+\");\n    \
    \        } else if (grade >= 0.7) {\n                result.Add(\"D\");\n    \
    \        } else if (grade >= 0) {\n                result.Add(\"D-\");\n     \
    \       } else {\n                result.Add(\"E\");\n            }\n        }\n\
    \        return result;", "        List<string> letters = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade >= 4.0f) letters.Add(\"\
    A+\");\n            else if (grade >= 3.7f) letters.Add(\"A\");\n            else\
    \ if (grade >= 3.3f) letters.Add(\"A-\");\n            else if (grade >= 3.0f)\
    \ letters.Add(\"B+\");\n            else if (grade >= 2.7f) letters.Add(\"B\"\
    );\n            else if (grade >= 2.3f) letters.Add(\"B-\");\n            else\
    \ if (grade >= 2.0f) letters.Add(\"C+\");\n            else if (grade >= 1.7f)\
    \ letters.Add(\"C\");\n            else if (grade >= 1.3f) letters.Add(\"C-\"\
    );\n            else if (grade >= 1.0f) letters.Add(\"D+\");\n            else\
    \ if (grade >= 0.7f) letters.Add(\"D\");\n            else if (grade >= 0.0f)\
    \ letters.Add(\"D-\");\n            else letters.Add(\"E\");\n        }\n    \
    \    return letters;", "        List<string> outList = new List<string>();\n \
    \       foreach (float grade in grades) {\n            if (grade > 4.0f) {\n \
    \               outList.Add(\"A+\");\n            } else if (grade > 3.7f) {\n\
    \                outList.Add(\"A\");\n            } else if (grade > 3.3f) {\n\
    \                outList.Add(\"A-\");\n            } else if (grade > 3.0f) {\n\
    \                outList.Add(\"B+\");\n            } else if (grade > 2.7f) {\n\
    \                outList.Add(\"B\");\n            } else if (grade > 2.3f) {\n\
    \                outList.Add(\"B-\");\n            } else if (grade > 2.0f) {\n\
    \                outList.Add(\"C+\");\n            } else if (grade > 1.7f) {\n\
    \                outList.Add(\"C\");\n            } else if (grade > 1.3f) {\n\
    \                outList.Add(\"C-\");\n            } else if (grade > 1.0f) {\n\
    \                outList.Add(\"D+\");\n            } else if (grade > 0.7f) {\n\
    \                outList.Add(\"D\");\n            } else if (grade > 0.0f) {\n\
    \                outList.Add(\"D-\");\n            } else {\n                outList.Add(\"\
    E\");\n            }\n        }\n        return outList;", "        List<string>\
    \ letterGrades = new List<string>();\n        grades.ForEach(grade => {\n    \
    \        if (grade > 4) {\n                letterGrades.Add(\"A+\");\n       \
    \     } else if (grade > 3.7) {\n                letterGrades.Add(\"A\");\n  \
    \          } else if (grade > 3.3) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade > 3) {\n                letterGrades.Add(\"B+\"\
    );\n            } else if (grade > 2.7) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade > 2.3) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade > 2) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade > 1.7) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade > 1.3) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade > 1) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade > 0.7) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade > 0) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        });\n        return letterGrades;", "        List<string> Result\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade > 3.7) {\n                Result.Add(\"A+\");\n            } else\
    \ if (grade > 3.3) {\n                Result.Add(\"A\");\n            } else if\
    \ (grade > 3.0) {\n                Result.Add(\"A-\");\n            } else if\
    \ (grade > 2.7) {\n                Result.Add(\"B+\");\n            } else if\
    \ (grade > 2.3) {\n                Result.Add(\"B\");\n            } else if (grade\
    \ > 2.0) {\n                Result.Add(\"B-\");\n            } else if (grade\
    \ > 1.7) {\n                Result.Add(\"C+\");\n            } else if (grade\
    \ > 1.3) {\n                Result.Add(\"C\");\n            } else if (grade >\
    \ 1.0) {\n                Result.Add(\"C-\");\n            } else if (grade >\
    \ 0.7) {\n                Result.Add(\"D+\");\n            } else if (grade >\
    \ 0.0) {\n                Result.Add(\"D\");\n            } else if (grade > -0.0001)\
    \ {\n                Result.Add(\"D-\");\n            } else {\n             \
    \   Result.Add(\"E\");\n            }\n        }\n        return Result;", " \
    \       // Fixed the problem, dont need to change anything from here.\n      \
    \  List<string> letterGrades = new List<string>();\n        foreach (float f in\
    \ grades) {\n            letterGrades.Add(f.ToLetterGrade());\n        }\n   \
    \     return letterGrades;", "        var LetterGrades = new List<string> { \"\
    A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"\
    D\", \"D-\", \"E\" };\n        var GPAs = new List<float> { 4, 3.7f, 3.3f, 3,\
    \ 2.7f, 2.3f, 2, 1.7f, 1.3f, 1, 0.7f, 0, 0 };\n        var ret = new List<string>();\n\
    \        foreach (var grade in grades) {\n            int index = -1;\n      \
    \      while (GPAs[++index] > grade) {\n                if (index == GPAs.Count\
    \ - 1) {\n                    break;\n                }\n            }\n     \
    \       ret.Add(LetterGrades[index]);\n        }\n        return ret;", "    \
    \    List<string> letterGrades = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade >= 4.0f) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade >= 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> result\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   result.Add(GetLetterGrade(grade));\n        }\n        return result;", '        return
    grades.Select(grade => grade >= 4.0f ? "A+" : grade >= 3.7f ? "A" : grade >= 3.3f
    ? "A-" : grade >= 3.0f ? "B+" : grade >= 2.7f ? "B" : grade >= 2.3f ? "B-" : grade
    >= 2.0f ? "C+" : grade >= 1.7f ? "C" : grade >= 1.3f ? "C-" : grade >= 1.0f ?
    "D+" : grade >= 0.7f ? "D" : grade >= 0.0f ? "D-" : "E").ToList();', "       \
    \ List<string> result = new List<string>();\n        foreach (float grade in grades)\
    \ {\n            if (grade >= 4.0f) result.Add(\"A+\");\n            else if (grade\
    \ >= 3.7f) result.Add(\"A\");\n            else if (grade >= 3.3f) result.Add(\"\
    A-\");\n            else if (grade >= 3.0f) result.Add(\"B+\");\n            else\
    \ if (grade >= 2.7f) result.Add(\"B\");\n            else if (grade >= 2.3f) result.Add(\"\
    B-\");\n            else if (grade >= 2.0f) result.Add(\"C+\");\n            else\
    \ if (grade >= 1.7f) result.Add(\"C\");\n            else if (grade >= 1.3f) result.Add(\"\
    C-\");\n            else if (grade >= 1.0f) result.Add(\"D+\");\n            else\
    \ if (grade >= 0.7f) result.Add(\"D\");\n            else if (grade >= 0.0f) result.Add(\"\
    D-\");\n            else result.Add(\"E\");\n        }\n        return result;",
  "        // Fill out your code here.\n        return new List<string>();", "   \
    \     List<string> string_grades = new List<string>();\n        for (int i = 0;\
    \ i < grades.Count; i++) {\n            float grade = grades[i];\n           \
    \ if (grade >= 4.0f) {\n                string_grades.Add(\"A+\");\n         \
    \   } else if (grade >= 3.7f) {\n                string_grades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                string_grades.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                string_grades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                string_grades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                string_grades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                string_grades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                string_grades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                string_grades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                string_grades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                string_grades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                string_grades.Add(\"\
    D-\");\n            } else {\n                string_grades.Add(\"E\");\n    \
    \        }\n        }\n        return string_grades;", "        var g = new List<string>();\n\
    \        foreach (var grade in grades) {\n            if (grade >= 4.0f) {\n \
    \               g.Add(\"A+\");\n            } else if (grade >= 3.7f) {\n    \
    \            g.Add(\"A\");\n            } else if (grade >= 3.3f) {\n        \
    \        g.Add(\"A-\");\n            } else if (grade >= 3.0f) {\n           \
    \     g.Add(\"B+\");\n            } else if (grade >= 2.7f) {\n              \
    \  g.Add(\"B\");\n            } else if (grade >= 2.3f) {\n                g.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                g.Add(\"C+\"\
    );\n            } else if (grade >= 1.7f) {\n                g.Add(\"C\");\n \
    \           } else if (grade >= 1.3f) {\n                g.Add(\"C-\");\n    \
    \        } else if (grade >= 1.0f) {\n                g.Add(\"D+\");\n       \
    \     } else if (grade >= 0.7f) {\n                g.Add(\"D\");\n           \
    \ } else if (grade >= 0.0f) {\n                g.Add(\"D-\");\n            } else\
    \ {\n                g.Add(\"E\");\n            }\n        }\n        return g;",
  "        List<string> result = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade == (float)4.0f) {\n                result.Add(\"\
    A+\");\n            } else if (grade > (float)3.7f) {\n                result.Add(\"\
    A\");\n            } else if (grade > (float)3.3f) {\n                result.Add(\"\
    A-\");\n            } else if (grade > (float)3.0f) {\n                result.Add(\"\
    B+\");\n            } else if (grade > (float)2.7f) {\n                result.Add(\"\
    B\");\n            } else if (grade > (float)2.3f) {\n                result.Add(\"\
    B-\");\n            } else if (grade > (float)2.0f) {\n                result.Add(\"\
    C+\");\n            } else if (grade > (float)1.7f) {\n                result.Add(\"\
    C\");\n            } else if (grade > (float)1.3f) {\n                result.Add(\"\
    C-\");\n            } else if (grade > (float)1.0f) {\n                result.Add(\"\
    D+\");\n            } else if (grade > (float)0.7f) {\n                result.Add(\"\
    D\");\n            } else if (grade > (float)0.0f) {\n                result.Add(\"\
    D-\");\n            } else {\n                result.Add(\"E\");\n           \
    \ }\n        }\n        return result;", "        List<string> rtn = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade >= 4) {\n  \
    \              rtn.Add(\"A+\");\n            } else if (grade >= 3.7) {\n    \
    \            rtn.Add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         rtn.Add(\"A-\");\n            } else if (grade >= 3) {\n           \
    \     rtn.Add(\"B+\");\n            } else if (grade >= 2.7) {\n             \
    \   rtn.Add(\"B\");\n            } else if (grade >= 2.3) {\n                rtn.Add(\"\
    B-\");\n            } else if (grade >= 2) {\n                rtn.Add(\"C+\");\n\
    \            } else if (grade >= 1.7) {\n                rtn.Add(\"C\");\n   \
    \         } else if (grade >= 1.3) {\n                rtn.Add(\"C-\");\n     \
    \       } else if (grade >= 1) {\n                rtn.Add(\"D+\");\n         \
    \   } else if (grade >= 0.7) {\n                rtn.Add(\"D\");\n            }\
    \ else if (grade >= 0) {\n                rtn.Add(\"D-\");\n            } else\
    \ {\n                rtn.Add(\"E\");\n            }\n        }\n        return\
    \ rtn;", "        List<string> letter_grades = new List<string>();\n        for\
    \ (int i = 0; i < grades.Count; i++) {\n            float grade = grades[i];\n\
    \            if (grade >= 4.0f) {\n                letter_grades.Add(\"A+\");\n\
    \            } else if (grade >= 3.7f) {\n                letter_grades.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                letter_grades.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                letter_grades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letter_grades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letter_grades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letter_grades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letter_grades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letter_grades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letter_grades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letter_grades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letter_grades.Add(\"\
    D-\");\n            } else {\n                letter_grades.Add(\"E\");\n    \
    \        }\n        }\n        return letter_grades;", "        List<string> output\
    \ = new List<string>();\n        foreach (float g in grades) {\n            if\
    \ (g >= 4.0f) output.Add(\"A+\");\n            else if (g >= 3.7f) output.Add(\"\
    A\");\n            else if (g >= 3.3f) output.Add(\"A-\");\n            else if\
    \ (g >= 3.0f) output.Add(\"B+\");\n            else if (g >= 2.7f) output.Add(\"\
    B\");\n            else if (g >= 2.3f) output.Add(\"B-\");\n            else if\
    \ (g >= 2.0f) output.Add(\"C+\");\n            else if (g >= 1.7f) output.Add(\"\
    C\");\n            else if (g >= 1.3f) output.Add(\"C-\");\n            else if\
    \ (g >= 1.0f) output.Add(\"D+\");\n            else if (g >= 0.7f) output.Add(\"\
    D\");\n            else if (g >= 0.0f) output.Add(\"D-\");\n            else output.Add(\"\
    E\");\n        }\n        return output;", "        // Write your code here.\n\
    \        return null;", "        List<string> letterGrades = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade == 4.0f) {\n\
    \                letterGrades.Add(\"A+\");\n            } else if (grade > 3.7f)\
    \ {\n                letterGrades.Add(\"A\");\n            } else if (grade >\
    \ 3.3f) {\n                letterGrades.Add(\"A-\");\n            } else if (grade\
    \ > 3.0f) {\n                letterGrades.Add(\"B+\");\n            } else if\
    \ (grade > 2.7f) {\n                letterGrades.Add(\"B\");\n            } else\
    \ if (grade > 2.3f) {\n                letterGrades.Add(\"B-\");\n           \
    \ } else if (grade > 2.0f) {\n                letterGrades.Add(\"C+\");\n    \
    \        } else if (grade > 1.7f) {\n                letterGrades.Add(\"C\");\n\
    \            } else if (grade > 1.3f) {\n                letterGrades.Add(\"C-\"\
    );\n            } else if (grade > 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        // write your code\
    \ here\n        List<string> result = new List<string>();\n        for (int i\
    \ = 0; i < grades.Count; i++) {\n            if (grades[i] > 4.0) {\n        \
    \        result.Add(\"A+\");\n            } else if (grades[i] > 3.7) {\n    \
    \            result.Add(\"A\");\n            } else if (grades[i] > 3.3) {\n \
    \               result.Add(\"A-\");\n            } else if (grades[i] > 3.0) {\n\
    \                result.Add(\"B+\");\n            } else if (grades[i] > 2.7)\
    \ {\n                result.Add(\"B\");\n            } else if (grades[i] > 2.3)\
    \ {\n                result.Add(\"B-\");\n            } else if (grades[i] > 2.0)\
    \ {\n                result.Add(\"C+\");\n            } else if (grades[i] > 1.7)\
    \ {\n                result.Add(\"C\");\n            } else if (grades[i] > 1.3)\
    \ {\n                result.Add(\"C-\");\n            } else if (grades[i] > 1.0)\
    \ {\n                result.Add(\"D+\");\n            } else if (grades[i] > 0.7)\
    \ {\n                result.Add(\"D\");\n            } else if (grades[i] > 0.0)\
    \ {\n                result.Add(\"D-\");\n            } else {\n             \
    \   result.Add(\"E\");\n            }\n        }\n        return result;", " \
    \       List<string> output = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade == 4.0f) {\n                output.Add(\"\
    A+\");\n            } else if (grade > 3.7f) {\n                output.Add(\"\
    A\");\n            } else if (grade > 3.3f) {\n                output.Add(\"A-\"\
    );\n            } else if (grade > 3.0f) {\n                output.Add(\"B+\"\
    );\n            } else if (grade > 2.7f) {\n                output.Add(\"B\");\n\
    \            } else if (grade > 2.3f) {\n                output.Add(\"B-\");\n\
    \            } else if (grade > 2.0f) {\n                output.Add(\"C+\");\n\
    \            } else if (grade > 1.7f) {\n                output.Add(\"C\");\n\
    \            } else if (grade > 1.3f) {\n                output.Add(\"C-\");\n\
    \            } else if (grade > 1.0f) {\n                output.Add(\"D+\");\n\
    \            } else if (grade > 0.7f) {\n                output.Add(\"D\");\n\
    \            } else if (grade > 0.0f) {\n                output.Add(\"D-\");\n\
    \            } else {\n                output.Add(\"E\");\n            }\n   \
    \     }\n        return output;", "        List<string> output = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade > 3.7) {\n \
    \               output.Add(\"A+\");\n            } else if (grade > 3.3) {\n \
    \               output.Add(\"A\");\n            } else if (grade > 3.0) {\n  \
    \              output.Add(\"A-\");\n            } else if (grade > 2.7) {\n  \
    \              output.Add(\"B+\");\n            } else if (grade > 2.3) {\n  \
    \              output.Add(\"B\");\n            } else if (grade > 2.0) {\n   \
    \             output.Add(\"B-\");\n            } else if (grade > 1.7) {\n   \
    \             output.Add(\"C+\");\n            } else if (grade > 1.3) {\n   \
    \             output.Add(\"C\");\n            } else if (grade > 1.0) {\n    \
    \            output.Add(\"C-\");\n            } else if (grade > 0.7) {\n    \
    \            output.Add(\"D+\");\n            } else if (grade > 0.0) {\n    \
    \            output.Add(\"D\");\n            } else if (grade == 0.0) {\n    \
    \            output.Add(\"E\");\n            } else {\n                output.Add(\"\
    D-\");\n            }\n        }\n        return output;", "        // TODO: Modify\
    \ this method to return the correct list\n        return null;", "        var\
    \ grades1 = new List<string>();\n        foreach (var grade in grades) {\n   \
    \         if (grade == 4.0f) {\n                grades1.Add(\"A+\");\n       \
    \     } else if (grade > 3.7f) {\n                grades1.Add(\"A\");\n      \
    \      } else if (grade > 3.3f) {\n                grades1.Add(\"A-\");\n    \
    \        } else if (grade > 3.0f) {\n                grades1.Add(\"B+\");\n  \
    \          } else if (grade > 2.7f) {\n                grades1.Add(\"B\");\n \
    \           } else if (grade > 2.3f) {\n                grades1.Add(\"B-\");\n\
    \            } else if (grade > 2.0f) {\n                grades1.Add(\"C+\");\n\
    \            } else if (grade > 1.7f) {\n                grades1.Add(\"C\");\n\
    \            } else if (grade > 1.3f) {\n                grades1.Add(\"C-\");\n\
    \            } else if (grade > 1.0f) {\n                grades1.Add(\"D+\");\n\
    \            } else if (grade > 0.7f) {\n                grades1.Add(\"D\");\n\
    \            } else if (grade > 0.0f) {\n                grades1.Add(\"D-\");\n\
    \            } else {\n                grades1.Add(\"E\");\n            }\n  \
    \      }\n        return grades1;", '        throw new Exception("Not implemented");',
  '        // Write your code here', "        return grades.Select(x => {\n      \
    \      if (x >= 4.0f) return \"A+\";\n            if (x >= 3.7f) return \"A\"\
    ;\n            if (x >= 3.3f) return \"A-\";\n            if (x >= 3.0f) return\
    \ \"B+\";\n            if (x >= 2.7f) return \"B\";\n            if (x >= 2.3f)\
    \ return \"B-\";\n            if (x >= 2.0f) return \"C+\";\n            if (x\
    \ >= 1.7f) return \"C\";\n            if (x >= 1.3f) return \"C-\";\n        \
    \    if (x >= 1.0f) return \"D+\";\n            if (x >= 0.7f) return \"D\";\n\
    \            if (x >= 0.0f) return \"D-\";\n            return \"E\";\n      \
    \  }).ToList();", "        // your solution starts here\n        return new List<string>();",
  "        // Complete the function\n        return null;", "        List<string>\
    \ letterGrades = new List<string>();\n        foreach (float grade in grades)\
    \ {\n            if (grade == 4.0f) {\n                letterGrades.Add(\"A+\"\
    );\n            } else if (grade >= 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        var result = new\
    \ List<string>();\n        foreach (var grade in grades) {\n            if (grade\
    \ >= 4.0f) result.Add(\"A+\");\n            else if (grade >= 3.7f) result.Add(\"\
    A\");\n            else if (grade >= 3.3f) result.Add(\"A-\");\n            else\
    \ if (grade >= 3.0f) result.Add(\"B+\");\n            else if (grade >= 2.7f)\
    \ result.Add(\"B\");\n            else if (grade >= 2.3f) result.Add(\"B-\");\n\
    \            else if (grade >= 2.0f) result.Add(\"C+\");\n            else if\
    \ (grade >= 1.7f) result.Add(\"C\");\n            else if (grade >= 1.3f) result.Add(\"\
    C-\");\n            else if (grade >= 1.0f) result.Add(\"D+\");\n            else\
    \ if (grade >= 0.7f) result.Add(\"D\");\n            else if (grade >= 0.0f) result.Add(\"\
    D-\");\n            else result.Add(\"E\");\n        }\n        return result;",
  "        List<string> strings = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade > 4.0f) {\n                strings.Add(\"\
    A+\");\n            } else if (grade > 3.7f) {\n                strings.Add(\"\
    A\");\n            } else if (grade > 3.3f) {\n                strings.Add(\"\
    A-\");\n            } else if (grade > 3.0f) {\n                strings.Add(\"\
    B+\");\n            } else if (grade > 2.7f) {\n                strings.Add(\"\
    B\");\n            } else if (grade > 2.3f) {\n                strings.Add(\"\
    B-\");\n            } else if (grade > 2.0f) {\n                strings.Add(\"\
    C+\");\n            } else if (grade > 1.7f) {\n                strings.Add(\"\
    C\");\n            } else if (grade > 1.3f) {\n                strings.Add(\"\
    C-\");\n            } else if (grade > 1.0f) {\n                strings.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                strings.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                strings.Add(\"\
    D-\");\n            } else {\n                strings.Add(\"E\");\n          \
    \  }\n        }\n        return strings;", "        var result = new List<string>();\n\
    \        foreach (var g in grades) {\n            if (g > 3.7) {\n           \
    \     result.Add(\"A+\");\n            } else if (g > 3.3) {\n               \
    \ result.Add(\"A\");\n            } else if (g > 3.0) {\n                result.Add(\"\
    A-\");\n            } else if (g > 2.7) {\n                result.Add(\"B+\");\n\
    \            } else if (g > 2.3) {\n                result.Add(\"B\");\n     \
    \       } else if (g > 2.0) {\n                result.Add(\"B-\");\n         \
    \   } else if (g > 1.7) {\n                result.Add(\"C+\");\n            }\
    \ else if (g > 1.3) {\n                result.Add(\"C\");\n            } else\
    \ if (g > 1.0) {\n                result.Add(\"C-\");\n            } else if (g\
    \ > 0.7) {\n                result.Add(\"D+\");\n            } else if (g > 0.0)\
    \ {\n                result.Add(\"D\");\n            } else if (g > -0.7) {\n\
    \                result.Add(\"D-\");\n            } else {\n                result.Add(\"\
    E\");\n            }\n        }\n        return result;", "        // Implement\
    \ your function here\n        throw new Exception(\"Not implemented\");", "  \
    \      List<string> letterGrades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            if (grade == 4.0f) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade >= 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> LetterGrades\
    \ = new List<string>();\n        foreach (float G in grades) {\n            LetterGrades.Add(LetterGrade(G));\n\
    \        }\n        return LetterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) letterGrades.Add(\"A+\");\n            else if (grade >=\
    \ 3.7f) letterGrades.Add(\"A\");\n            else if (grade >= 3.3f) letterGrades.Add(\"\
    A-\");\n            else if (grade >= 3.0f) letterGrades.Add(\"B+\");\n      \
    \      else if (grade >= 2.7f) letterGrades.Add(\"B\");\n            else if (grade\
    \ >= 2.3f) letterGrades.Add(\"B-\");\n            else if (grade >= 2.0f) letterGrades.Add(\"\
    C+\");\n            else if (grade >= 1.7f) letterGrades.Add(\"C\");\n       \
    \     else if (grade >= 1.3f) letterGrades.Add(\"C-\");\n            else if (grade\
    \ >= 1.0f) letterGrades.Add(\"D+\");\n            else if (grade >= 0.7f) letterGrades.Add(\"\
    D\");\n            else if (grade >= 0.0f) letterGrades.Add(\"D-\");\n       \
    \     else letterGrades.Add(\"E\");\n        }\n        return letterGrades;",
  "        List<string> result = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade == 4) {\n                result.Add(\"A+\"\
    );\n            } else if (grade > 3.7) {\n                result.Add(\"A\");\n\
    \            } else if (grade > 3.3) {\n                result.Add(\"A-\");\n\
    \            } else if (grade > 3) {\n                result.Add(\"B+\");\n  \
    \          } else if (grade > 2.7) {\n                result.Add(\"B\");\n   \
    \         } else if (grade > 2.3) {\n                result.Add(\"B-\");\n   \
    \         } else if (grade > 2) {\n                result.Add(\"C+\");\n     \
    \       } else if (grade > 1.7) {\n                result.Add(\"C\");\n      \
    \      } else if (grade > 1.3) {\n                result.Add(\"C-\");\n      \
    \      } else if (grade > 1) {\n                result.Add(\"D+\");\n        \
    \    } else if (grade > 0.7) {\n                result.Add(\"D\");\n         \
    \   } else if (grade > 0) {\n                result.Add(\"D-\");\n           \
    \ } else {\n                result.Add(\"E\");\n            }\n        }\n   \
    \     return result;", "        return grades.Select(x => {\n            string\
    \ grade;\n            if (x >= 4.0) grade = \"A+\";\n            else if (x >=\
    \ 3.7) grade = \"A\";\n            else if (x >= 3.3) grade = \"A-\";\n      \
    \      else if (x >= 3.0) grade = \"B+\";\n            else if (x >= 2.7) grade\
    \ = \"B\";\n            else if (x >= 2.3) grade = \"B-\";\n            else if\
    \ (x >= 2.0) grade = \"C+\";\n            else if (x >= 1.7) grade = \"C\";\n\
    \            else if (x >= 1.3) grade = \"C-\";\n            else if (x >= 1.0)\
    \ grade = \"D+\";\n            else if (x >= 0.7) grade = \"D\";\n           \
    \ else if (x >= 0.0) grade = \"D-\";\n            else grade = \"E\";\n      \
    \      return grade;\n        }).ToList();", "        // Write your code here.\n\
    \        return null;", "        List<string> result = new List<string>();\n \
    \       foreach (float g in grades) {\n            if (g >= 4.0f) result.Add(\"\
    A+\");\n            else if (g >= 3.7f) result.Add(\"A\");\n            else if\
    \ (g >= 3.3f) result.Add(\"A-\");\n            else if (g >= 3.0f) result.Add(\"\
    B+\");\n            else if (g >= 2.7f) result.Add(\"B\");\n            else if\
    \ (g >= 2.3f) result.Add(\"B-\");\n            else if (g >= 2.0f) result.Add(\"\
    C+\");\n            else if (g >= 1.7f) result.Add(\"C\");\n            else if\
    \ (g >= 1.3f) result.Add(\"C-\");\n            else if (g >= 1.0f) result.Add(\"\
    D+\");\n            else if (g >= 0.7f) result.Add(\"D\");\n            else if\
    \ (g >= 0.0f) result.Add(\"D-\");\n            else result.Add(\"E\");\n     \
    \   }\n        return result;", "        List<string> letters = new List<string>();\n\
    \        for (int i = 0; i < grades.Count; i++) {\n            letters.Add(GetLetterGrade(grades[i]));\n\
    \        }\n        return letters;", "        var letter_grades = new List<string>();\n\
    \        for (int i = 0; i < grades.Count; i++) {\n            if (grades[i] >=\
    \ 4) {\n                letter_grades.Add(\"A+\");\n            } else if (grades[i]\
    \ >= 3.7) {\n                letter_grades.Add(\"A\");\n            } else if\
    \ (grades[i] >= 3.3) {\n                letter_grades.Add(\"A-\");\n         \
    \   } else if (grades[i] >= 3) {\n                letter_grades.Add(\"B+\");\n\
    \            } else if (grades[i] >= 2.7) {\n                letter_grades.Add(\"\
    B\");\n            } else if (grades[i] >= 2.3) {\n                letter_grades.Add(\"\
    B-\");\n            } else if (grades[i] >= 2) {\n                letter_grades.Add(\"\
    C+\");\n            } else if (grades[i] >= 1.7) {\n                letter_grades.Add(\"\
    C\");\n            } else if (grades[i] >= 1.3) {\n                letter_grades.Add(\"\
    C-\");\n            } else if (grades[i] >= 1) {\n                letter_grades.Add(\"\
    D+\");\n            } else if (grades[i] >= 0.7) {\n                letter_grades.Add(\"\
    D\");\n            } else if (grades[i] >= 0) {\n                letter_grades.Add(\"\
    D-\");\n            } else {\n                letter_grades.Add(\"E\");\n    \
    \        }\n        }\n        return letter_grades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float g in grades) {\n            if\
    \ (g >= 4) {\n                letterGrades.Add(\"A+\");\n            } else if\
    \ (g >= 3.7) {\n                letterGrades.Add(\"A\");\n            } else if\
    \ (g >= 3.3) {\n                letterGrades.Add(\"A-\");\n            } else\
    \ if (g >= 3) {\n                letterGrades.Add(\"B+\");\n            } else\
    \ if (g >= 2.7) {\n                letterGrades.Add(\"B\");\n            } else\
    \ if (g >= 2.3) {\n                letterGrades.Add(\"B-\");\n            } else\
    \ if (g >= 2) {\n                letterGrades.Add(\"C+\");\n            } else\
    \ if (g >= 1.7) {\n                letterGrades.Add(\"C\");\n            } else\
    \ if (g >= 1.3) {\n                letterGrades.Add(\"C-\");\n            } else\
    \ if (g >= 1) {\n                letterGrades.Add(\"D+\");\n            } else\
    \ if (g >= 0.7) {\n                letterGrades.Add(\"D\");\n            } else\
    \ if (g >= 0) {\n                letterGrades.Add(\"D-\");\n            } else\
    \ {\n                letterGrades.Add(\"E\");\n            }\n        }\n    \
    \    return letterGrades;", '        throw new NotImplementedException();', " \
    \       // your code here\n        return new List<string>();", "        List<string>\
    \ result = new List<string>();\n        foreach (float grade in grades) {\n  \
    \          if (grade >= 4.0f) {\n                result.Add(\"A+\");\n       \
    \     } else if (grade >= 3.7f) {\n                result.Add(\"A\");\n      \
    \      } else if (grade >= 3.3f) {\n                result.Add(\"A-\");\n    \
    \        } else if (grade >= 3.0f) {\n                result.Add(\"B+\");\n  \
    \          } else if (grade >= 2.7f) {\n                result.Add(\"B\");\n \
    \           } else if (grade >= 2.3f) {\n                result.Add(\"B-\");\n\
    \            } else if (grade >= 2.0f) {\n                result.Add(\"C+\");\n\
    \            } else if (grade >= 1.7f) {\n                result.Add(\"C\");\n\
    \            } else if (grade >= 1.3f) {\n                result.Add(\"C-\");\n\
    \            } else if (grade >= 1.0f) {\n                result.Add(\"D+\");\n\
    \            } else if (grade >= 0.7f) {\n                result.Add(\"D\");\n\
    \            } else if (grade >= 0.0f) {\n                result.Add(\"D-\");\n\
    \            } else {\n                result.Add(\"E\");\n            }\n   \
    \     }\n        return result;", "        List<string> letters = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade >= 4.0f) {\n\
    \                letters.Add(\"A+\");\n            } else if (grade >= 3.7f) {\n\
    \                letters.Add(\"A\");\n            } else if (grade >= 3.3f) {\n\
    \                letters.Add(\"A-\");\n            } else if (grade >= 3.0f) {\n\
    \                letters.Add(\"B+\");\n            } else if (grade >= 2.7f) {\n\
    \                letters.Add(\"B\");\n            } else if (grade >= 2.3f) {\n\
    \                letters.Add(\"B-\");\n            } else if (grade >= 2.0f) {\n\
    \                letters.Add(\"C+\");\n            } else if (grade >= 1.7f) {\n\
    \                letters.Add(\"C\");\n            } else if (grade >= 1.3f) {\n\
    \                letters.Add(\"C-\");\n            } else if (grade >= 1.0f) {\n\
    \                letters.Add(\"D+\");\n            } else if (grade >= 0.7f) {\n\
    \                letters.Add(\"D\");\n            } else if (grade >= 0.0f) {\n\
    \                letters.Add(\"D-\");\n            } else {\n                letters.Add(\"\
    E\");\n            }\n        }\n        return letters;", '        return null;',
  "        List<string> letterGrades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            if (grade >= 4.0f) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade >= 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        return grades.Select(grade\
    \ => grade >= 4.0 ? \"A+\" :\n                    grade >= 3.7 ? \"A\" :\n   \
    \                 grade >= 3.3 ? \"A-\" :\n                    grade >= 3.0 ?\
    \ \"B+\" :\n                    grade >= 2.7 ? \"B\" :\n                    grade\
    \ >= 2.3 ? \"B-\" :\n                    grade >= 2.0 ? \"C+\" :\n           \
    \         grade >= 1.7 ? \"C\" :\n                    grade >= 1.3 ? \"C-\" :\n\
    \                    grade >= 1.0 ? \"D+\" :\n                    grade >= 0.7\
    \ ? \"D\" :\n                    grade >= 0.0 ? \"D-\" : \"E\").ToList();", " \
    \       // TODO: finish the function\n        return new List<string>();", " \
    \       return grades.Select(grade => grade switch {\n            > 4.0f => \"\
    A+\",\n            > 3.7f => \"A\",\n            > 3.3f => \"A-\",\n         \
    \   > 3.0f => \"B+\",\n            > 2.7f => \"B\",\n            > 2.3f => \"\
    B-\",\n            > 2.0f => \"C+\",\n            > 1.7f => \"C\",\n         \
    \   > 1.3f => \"C-\",\n            > 1.0f => \"D+\",\n            > 0.7f => \"\
    D\",\n            > 0.0f => \"D-\",\n            _ => \"E\"\n        }).ToList();",
  "        List<string> str = new List<string>();\n        foreach (float grade in\
    \ grades) {\n            if (grade > 3.7) {\n                str.Add(\"A+\");\n\
    \            } else if (grade > 3.3) {\n                str.Add(\"A\");\n    \
    \        } else if (grade > 3.0) {\n                str.Add(\"A-\");\n       \
    \     } else if (grade > 2.7) {\n                str.Add(\"B+\");\n          \
    \  } else if (grade > 2.3) {\n                str.Add(\"B\");\n            } else\
    \ if (grade > 2.0) {\n                str.Add(\"B-\");\n            } else if\
    \ (grade > 1.7) {\n                str.Add(\"C+\");\n            } else if (grade\
    \ > 1.3) {\n                str.Add(\"C\");\n            } else if (grade > 1.0)\
    \ {\n                str.Add(\"C-\");\n            } else if (grade > 0.7) {\n\
    \                str.Add(\"D+\");\n            } else if (grade > 0.0) {\n   \
    \             str.Add(\"D\");\n            } else if (grade == 0.0) {\n      \
    \          str.Add(\"E\");\n            } else {\n                str.Add(\"F\"\
    );\n            }\n        }\n        return str;", "        return grades.Select(grade\
    \ => grade < 0.0f ? \"E\" :\n                 grade < 1.0f ? \"D-\" :\n      \
    \           grade < 1.3f ? \"D\" :\n                 grade < 1.7f ? \"D+\" :\n\
    \                 grade < 2.0f ? \"C-\" :\n                 grade < 2.3f ? \"\
    C\" :\n                 grade < 2.7f ? \"C+\" :\n                 grade < 3.0f\
    \ ? \"B-\" :\n                 grade < 3.3f ? \"B\" :\n                 grade\
    \ < 3.7f ? \"B+\" :\n                 grade < 4.0f ? \"A-\" : \"A+\").ToList();",
  "        List<string> letter_grades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            if (grade >= 4.0f) letter_grades.Add(\"A+\"\
    );\n            else if (grade >= 3.7f) letter_grades.Add(\"A\");\n          \
    \  else if (grade >= 3.3f) letter_grades.Add(\"A-\");\n            else if (grade\
    \ >= 3.0f) letter_grades.Add(\"B+\");\n            else if (grade >= 2.7f) letter_grades.Add(\"\
    B\");\n            else if (grade >= 2.3f) letter_grades.Add(\"B-\");\n      \
    \      else if (grade >= 2.0f) letter_grades.Add(\"C+\");\n            else if\
    \ (grade >= 1.7f) letter_grades.Add(\"C\");\n            else if (grade >= 1.3f)\
    \ letter_grades.Add(\"C-\");\n            else if (grade >= 1.0f) letter_grades.Add(\"\
    D+\");\n            else if (grade >= 0.7f) letter_grades.Add(\"D\");\n      \
    \      else if (grade >= 0.0f) letter_grades.Add(\"D-\");\n            else letter_grades.Add(\"\
    E\");\n        }\n        return letter_grades;", "        // TODO: Complete this\
    \ function\n        return new List<string>();", "        // Write code here\n\
    \        return new List<string>();", "        List<string> letterGrades = new\
    \ List<string>();\n        grades.ForEach(grade => {\n            string letter\
    \ = null;\n            if (grade >= 4.0f) {\n                letter = \"A+\";\n\
    \            } else if (grade >= 3.7f) {\n                letter = \"A\";\n  \
    \          } else if (grade >= 3.3f) {\n                letter = \"A-\";\n   \
    \         } else if (grade >= 3.0f) {\n                letter = \"B+\";\n    \
    \        } else if (grade >= 2.7f) {\n                letter = \"B\";\n      \
    \      } else if (grade >= 2.3f) {\n                letter = \"B-\";\n       \
    \     } else if (grade >= 2.0f) {\n                letter = \"C+\";\n        \
    \    } else if (grade >= 1.7f) {\n                letter = \"C\";\n          \
    \  } else if (grade >= 1.3f) {\n                letter = \"C-\";\n           \
    \ } else if (grade >= 1.0f) {\n                letter = \"D+\";\n            }\
    \ else if (grade >= 0.7f) {\n                letter = \"D\";\n            } else\
    \ if (grade >= 0.0f) {\n                letter = \"D-\";\n            } else {\n\
    \                letter = \"E\";\n            }\n            letterGrades.Add(letter);\n\
    \        });\n        return letterGrades;", "        List<string> output = new\
    \ List<string>();\n        foreach (float grade in grades) {\n            if (grade\
    \ == 4.0f) {\n                output.Add(\"A+\");\n            } else if (grade\
    \ >= 3.7f) {\n                output.Add(\"A\");\n            } else if (grade\
    \ >= 3.3f) {\n                output.Add(\"A-\");\n            } else if (grade\
    \ >= 3.0f) {\n                output.Add(\"B+\");\n            } else if (grade\
    \ >= 2.7f) {\n                output.Add(\"B\");\n            } else if (grade\
    \ >= 2.3f) {\n                output.Add(\"B-\");\n            } else if (grade\
    \ >= 2.0f) {\n                output.Add(\"C+\");\n            } else if (grade\
    \ >= 1.7f) {\n                output.Add(\"C\");\n            } else if (grade\
    \ >= 1.3f) {\n                output.Add(\"C-\");\n            } else if (grade\
    \ >= 1.0f) {\n                output.Add(\"D+\");\n            } else if (grade\
    \ >= 0.7f) {\n                output.Add(\"D\");\n            } else if (grade\
    \ >= 0.0f) {\n                output.Add(\"D-\");\n            } else {\n    \
    \            output.Add(\"E\");\n            }\n        }\n        return output;",
  "        List<string> results = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade == 4.0f) {\n                results.Add(\"\
    A+\");\n            } else if (grade > 3.7f) {\n                results.Add(\"\
    A\");\n            } else if (grade > 3.3f) {\n                results.Add(\"\
    A-\");\n            } else if (grade > 3.0f) {\n                results.Add(\"\
    B+\");\n            } else if (grade > 2.7f) {\n                results.Add(\"\
    B\");\n            } else if (grade > 2.3f) {\n                results.Add(\"\
    B-\");\n            } else if (grade > 2.0f) {\n                results.Add(\"\
    C+\");\n            } else if (grade > 1.7f) {\n                results.Add(\"\
    C\");\n            } else if (grade > 1.3f) {\n                results.Add(\"\
    C-\");\n            } else if (grade > 1.0f) {\n                results.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                results.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                results.Add(\"\
    D-\");\n            } else {\n                results.Add(\"E\");\n          \
    \  }\n        }\n        return results;", "        // TODO: Implement the method\n\
    \        List<string> result = new List<string>();\n        for (int i = 0; i\
    \ < grades.Count; i++) {\n            if (grades[i] == 4.0) {\n              \
    \  result.Add(\"A+\");\n            } else if (grades[i] >= 3.7) {\n         \
    \       result.Add(\"A\");\n            } else if (grades[i] >= 3.3) {\n     \
    \           result.Add(\"A-\");\n            } else if (grades[i] >= 3.0) {\n\
    \                result.Add(\"B+\");\n            } else if (grades[i] >= 2.7)\
    \ {\n                result.Add(\"B\");\n            } else if (grades[i] >= 2.3)\
    \ {\n                result.Add(\"B-\");\n            } else if (grades[i] >=\
    \ 2.0) {\n                result.Add(\"C+\");\n            } else if (grades[i]\
    \ >= 1.7) {\n                result.Add(\"C\");\n            } else if (grades[i]\
    \ >= 1.3) {\n                result.Add(\"C-\");\n            } else if (grades[i]\
    \ >= 1.0) {\n                result.Add(\"D+\");\n            } else if (grades[i]\
    \ >= 0.7) {\n                result.Add(\"D\");\n            } else if (grades[i]\
    \ >= 0.0) {\n                result.Add(\"D-\");\n            } else {\n     \
    \           result.Add(\"E\");\n            }\n        }\n        return result;",
  "        List<string> output = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade >= 4) {\n                output.Add(\"A+\"\
    );\n            } else if (grade >= 3.7) {\n                output.Add(\"A\");\n\
    \            } else if (grade >= 3.3) {\n                output.Add(\"A-\");\n\
    \            } else if (grade >= 3) {\n                output.Add(\"B+\");\n \
    \           } else if (grade >= 2.7) {\n                output.Add(\"B\");\n \
    \           } else if (grade >= 2.3) {\n                output.Add(\"B-\");\n\
    \            } else if (grade >= 2) {\n                output.Add(\"C+\");\n \
    \           } else if (grade >= 1.7) {\n                output.Add(\"C\");\n \
    \           } else if (grade >= 1.3) {\n                output.Add(\"C-\");\n\
    \            } else if (grade >= 1) {\n                output.Add(\"D+\");\n \
    \           } else if (grade >= 0.7) {\n                output.Add(\"D\");\n \
    \           } else if (grade >= 0) {\n                output.Add(\"D-\");\n  \
    \          } else {\n                output.Add(\"E\");\n            }\n     \
    \   }\n        return output;", "        List<string> results = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade > 3.7) {\n \
    \               results.Add(\"A+\");\n            } else if (grade > 3.3) {\n\
    \                results.Add(\"A\");\n            } else if (grade > 3.0) {\n\
    \                results.Add(\"A-\");\n            } else if (grade > 2.7) {\n\
    \                results.Add(\"B+\");\n            } else if (grade > 2.3) {\n\
    \                results.Add(\"B\");\n            } else if (grade > 2.0) {\n\
    \                results.Add(\"B-\");\n            } else if (grade > 1.7) {\n\
    \                results.Add(\"C+\");\n            } else if (grade > 1.3) {\n\
    \                results.Add(\"C\");\n            } else if (grade > 1.0) {\n\
    \                results.Add(\"C-\");\n            } else if (grade > 0.7) {\n\
    \                results.Add(\"D+\");\n            } else if (grade > 0.0) {\n\
    \                results.Add(\"D\");\n            } else if (grade == 0.0) {\n\
    \                results.Add(\"E\");\n            } else {\n                results.Add(\"\
    D-\");\n            }\n        }\n        return results;", "        List<string>\
    \ result = new List<string>();\n        foreach (float grade in grades) {\n  \
    \          if (grade >= 4.0f) result.Add(\"A+\");\n            else if (grade\
    \ >= 3.7f) result.Add(\"A\");\n            else if (grade >= 3.3f) result.Add(\"\
    A-\");\n            else if (grade >= 3.0f) result.Add(\"B+\");\n            else\
    \ if (grade >= 2.7f) result.Add(\"B\");\n            else if (grade >= 2.3f) result.Add(\"\
    B-\");\n            else if (grade >= 2.0f) result.Add(\"C+\");\n            else\
    \ if (grade >= 1.7f) result.Add(\"C\");\n            else if (grade >= 1.3f) result.Add(\"\
    C-\");\n            else if (grade >= 1.0f) result.Add(\"D+\");\n            else\
    \ if (grade >= 0.7f) result.Add(\"D\");\n            else if (grade >= 0.0f) result.Add(\"\
    D-\");\n            else result.Add(\"E\");\n        }\n        return result;",
  "        // fill your code here\n        return null;", "        List<string> letterGrade\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4) {\n                letterGrade.Add(\"A+\");\n            }\
    \ else if (grade >= 3.7) {\n                letterGrade.Add(\"A\");\n        \
    \    } else if (grade >= 3.3) {\n                letterGrade.Add(\"A-\");\n  \
    \          } else if (grade >= 3) {\n                letterGrade.Add(\"B+\");\n\
    \            } else if (grade >= 2.7) {\n                letterGrade.Add(\"B\"\
    );\n            } else if (grade >= 2.3) {\n                letterGrade.Add(\"\
    B-\");\n            } else if (grade >= 2) {\n                letterGrade.Add(\"\
    C+\");\n            } else if (grade >= 1.7) {\n                letterGrade.Add(\"\
    C\");\n            } else if (grade >= 1.3) {\n                letterGrade.Add(\"\
    C-\");\n            } else if (grade >= 1) {\n                letterGrade.Add(\"\
    D+\");\n            } else if (grade >= 0.7) {\n                letterGrade.Add(\"\
    D\");\n            } else if (grade >= 0) {\n                letterGrade.Add(\"\
    D-\");\n            } else {\n                letterGrade.Add(\"E\");\n      \
    \      }\n        }\n        return letterGrade;", "        return grades.Select(\
    \ grade => {\n            if (grade >= 4.0f) return \"A+\";\n            if (grade\
    \ >= 3.7f) return \"A\";\n            if (grade >= 3.3f) return \"A-\";\n    \
    \        if (grade >= 3.0f) return \"B+\";\n            if (grade >= 2.7f) return\
    \ \"B\";\n            if (grade >= 2.3f) return \"B-\";\n            if (grade\
    \ >= 2.0f) return \"C+\";\n            if (grade >= 1.7f) return \"C\";\n    \
    \        if (grade >= 1.3f) return \"C-\";\n            if (grade >= 1.0f) return\
    \ \"D+\";\n            if (grade >= 0.7f) return \"D\";\n            if (grade\
    \ >= 0.0f) return \"D-\";\n            return \"E\";\n        }).ToList();", " \
    \       List<string> letterGrades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            if (grade >= 4) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        //Student's code\n\
    \        //Student's code\n        var count = grades.Count;\n        List<string>\
    \ retVal = new List<string>();\n        for (int i = 0; i < count; i++)\n    \
    \    {\n            retVal.Add(GradeLookup(grades[i]));\n        }\n        return\
    \ retVal;", "        List<string> res = new List<string>();\n        for (int\
    \ i = 0; i < grades.Count; i++) {\n            if (grades[i] > 3.7) {\n      \
    \          res.Add(\"A+\");\n            } else if (grades[i] > 3.3) {\n     \
    \           res.Add(\"A\");\n            } else if (grades[i] > 3.0) {\n     \
    \           res.Add(\"A-\");\n            } else if (grades[i] > 2.7) {\n    \
    \            res.Add(\"B+\");\n            } else if (grades[i] > 2.3) {\n   \
    \             res.Add(\"B\");\n            } else if (grades[i] > 2.0) {\n   \
    \             res.Add(\"B-\");\n            } else if (grades[i] > 1.7) {\n  \
    \              res.Add(\"C+\");\n            } else if (grades[i] > 1.3) {\n \
    \               res.Add(\"C\");\n            } else if (grades[i] > 1.0) {\n \
    \               res.Add(\"C-\");\n            } else if (grades[i] > 0.7) {\n\
    \                res.Add(\"D+\");\n            } else if (grades[i] > 0.0) {\n\
    \                res.Add(\"D\");\n            } else if (grades[i] > -0.1) {\n\
    \                res.Add(\"D-\");\n            } else {\n                res.Add(\"\
    E\");\n            }\n        }\n        return res;", "        if (grades.Count\
    \ == 0) return new List<string>();\n        var sorted_grade = grades.OrderByDescending(x\
    \ => x).ToList();\n        var last_grade = sorted_grade[0];\n        var letters\
    \ = new List<string>();\n        foreach (var grade in sorted_grade) {\n     \
    \       if (grade == 0) {\n                letters.Add(\"E\");\n            }\
    \ else if (grade < last_grade - 0.3) {\n                last_grade = grade;\n\
    \                letters.Add(grade.ToString(\"#.#\"));\n            } else {\n\
    \                letters.Add(grade.ToString(\"#.#\"));\n            }\n      \
    \  }\n        return letters;", "        List<string> letter_grades = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade >= 4.0f) {\n\
    \                letter_grades.Add(\"A+\");\n            } else if (grade >= 3.7f)\
    \ {\n                letter_grades.Add(\"A\");\n            } else if (grade >=\
    \ 3.3f) {\n                letter_grades.Add(\"A-\");\n            } else if (grade\
    \ >= 3.0f) {\n                letter_grades.Add(\"B+\");\n            } else if\
    \ (grade >= 2.7f) {\n                letter_grades.Add(\"B\");\n            }\
    \ else if (grade >= 2.3f) {\n                letter_grades.Add(\"B-\");\n    \
    \        } else if (grade >= 2.0f) {\n                letter_grades.Add(\"C+\"\
    );\n            } else if (grade >= 1.7f) {\n                letter_grades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letter_grades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letter_grades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letter_grades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letter_grades.Add(\"\
    D-\");\n            } else {\n                letter_grades.Add(\"E\");\n    \
    \        }\n        }\n        return letter_grades;", "        List<string> result\
    \ = new List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n  \
    \          if (grades[i] >= 4.0) {\n                result.Add(\"A+\");\n    \
    \        } else if (grades[i] >= 3.7) {\n                result.Add(\"A\");\n\
    \            } else if (grades[i] >= 3.3) {\n                result.Add(\"A-\"\
    );\n            } else if (grades[i] >= 3.0) {\n                result.Add(\"\
    B+\");\n            } else if (grades[i] >= 2.7) {\n                result.Add(\"\
    B\");\n            } else if (grades[i] >= 2.3) {\n                result.Add(\"\
    B-\");\n            } else if (grades[i] >= 2.0) {\n                result.Add(\"\
    C+\");\n            } else if (grades[i] >= 1.7) {\n                result.Add(\"\
    C\");\n            } else if (grades[i] >= 1.3) {\n                result.Add(\"\
    C-\");\n            } else if (grades[i] >= 1.0) {\n                result.Add(\"\
    D+\");\n            } else if (grades[i] >= 0.7) {\n                result.Add(\"\
    D\");\n            } else if (grades[i] >= 0.0) {\n                result.Add(\"\
    D-\");\n            } else {\n                result.Add(\"E\");\n           \
    \ }\n        }\n        return result;", "        List<string> letters = new List<string>();\n\
    \        foreach (float g in grades) {\n            if (g >= 4.0f) letters.Add(\"\
    A+\");\n            else if (g >= 3.7f) letters.Add(\"A\");\n            else\
    \ if (g >= 3.3f) letters.Add(\"A-\");\n            else if (g >= 3.0f) letters.Add(\"\
    B+\");\n            else if (g >= 2.7f) letters.Add(\"B\");\n            else\
    \ if (g >= 2.3f) letters.Add(\"B-\");\n            else if (g >= 2.0f) letters.Add(\"\
    C+\");\n            else if (g >= 1.7f) letters.Add(\"C\");\n            else\
    \ if (g >= 1.3f) letters.Add(\"C-\");\n            else if (g >= 1.0f) letters.Add(\"\
    D+\");\n            else if (g >= 0.7f) letters.Add(\"D\");\n            else\
    \ if (g >= 0.0f) letters.Add(\"D-\");\n            else letters.Add(\"E\");\n\
    \        }\n        return letters;", "        List<string> result = new List<string>();\n\
    \        // To do:\n        return result;", "        return grades.Select(x =>\
    \ {\n            if (x == 4.0f) return \"A+\";\n            if (x > 3.7f) return\
    \ \"A\";\n            if (x > 3.3f) return \"A-\";\n            if (x > 3.0f)\
    \ return \"B+\";\n            if (x > 2.7f) return \"B\";\n            if (x >\
    \ 2.3f) return \"B-\";\n            if (x > 2.0f) return \"C+\";\n           \
    \ if (x > 1.7f) return \"C\";\n            if (x > 1.3f) return \"C-\";\n    \
    \        if (x > 1.0f) return \"D+\";\n            if (x > 0.7f) return \"D\"\
    ;\n            if (x > 0.0f) return \"D-\";\n            return \"E\";\n     \
    \   }).ToList();", "        List<string> ans = new List<string>();\n        foreach\
    \ (float i in grades) {\n            if (i == 4.0f) {\n                ans.Add(\"\
    A+\");\n            } else if (i >= 3.7f) {\n                ans.Add(\"A\");\n\
    \            } else if (i >= 3.3f) {\n                ans.Add(\"A-\");\n     \
    \       } else if (i >= 3.0f) {\n                ans.Add(\"B+\");\n          \
    \  } else if (i >= 2.7f) {\n                ans.Add(\"B\");\n            } else\
    \ if (i >= 2.3f) {\n                ans.Add(\"B-\");\n            } else if (i\
    \ >= 2.0f) {\n                ans.Add(\"C+\");\n            } else if (i >= 1.7f)\
    \ {\n                ans.Add(\"C\");\n            } else if (i >= 1.3f) {\n  \
    \              ans.Add(\"C-\");\n            } else if (i >= 1.0f) {\n       \
    \         ans.Add(\"D+\");\n            } else if (i >= 0.7f) {\n            \
    \    ans.Add(\"D\");\n            } else if (i > 0.0f) {\n                ans.Add(\"\
    D-\");\n            } else {\n                ans.Add(\"E\");\n            }\n\
    \        }\n        return ans;", "        List<string> letterGrades = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade > 3.7) {\n \
    \               letterGrades.Add(\"A+\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.Add(\"A\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.Add(\"A-\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.Add(\"B+\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.Add(\"B\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.Add(\"B-\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.Add(\"C+\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.Add(\"C\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.Add(\"C-\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.Add(\"D+\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.Add(\"D\");\n            } else if (grade\
    \ > -0.7) {\n                letterGrades.Add(\"D-\");\n            } else {\n\
    \                letterGrades.Add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;", "        // TODO: implement function here.\n        // Hint:\
    \ create a new list and iterate through the grades.\n        // Note: the list\
    \ of letter grades must be in the same order as the list of GPAs.\n        return\
    \ null;", "        List<string> output = new List<string>();\n        foreach\
    \ (float grade in grades) {\n            if (grade >= 4.0f) {\n              \
    \  output.Add(\"A+\");\n            } else if (grade >= 3.7f) {\n            \
    \    output.Add(\"A\");\n            } else if (grade >= 3.3f) {\n           \
    \     output.Add(\"A-\");\n            } else if (grade >= 3.0f) {\n         \
    \       output.Add(\"B+\");\n            } else if (grade >= 2.7f) {\n       \
    \         output.Add(\"B\");\n            } else if (grade >= 2.3f) {\n      \
    \          output.Add(\"B-\");\n            } else if (grade >= 2.0f) {\n    \
    \            output.Add(\"C+\");\n            } else if (grade >= 1.7f) {\n  \
    \              output.Add(\"C\");\n            } else if (grade >= 1.3f) {\n \
    \               output.Add(\"C-\");\n            } else if (grade >= 1.0f) {\n\
    \                output.Add(\"D+\");\n            } else if (grade >= 0.7f) {\n\
    \                output.Add(\"D\");\n            } else if (grade >= 0.0f) {\n\
    \                output.Add(\"D-\");\n            } else {\n                output.Add(\"\
    E\");\n            }\n        }\n        return output;", "        var result\
    \ = new List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n  \
    \          if (grades[i] == 4.0f) result.Add(\"A+\");\n            else if (grades[i]\
    \ > 3.7f) result.Add(\"A\");\n            else if (grades[i] > 3.3f) result.Add(\"\
    A-\");\n            else if (grades[i] > 3.0f) result.Add(\"B+\");\n         \
    \   else if (grades[i] > 2.7f) result.Add(\"B\");\n            else if (grades[i]\
    \ > 2.3f) result.Add(\"B-\");\n            else if (grades[i] > 2.0f) result.Add(\"\
    C+\");\n            else if (grades[i] > 1.7f) result.Add(\"C\");\n          \
    \  else if (grades[i] > 1.3f) result.Add(\"C-\");\n            else if (grades[i]\
    \ > 1.0f) result.Add(\"D+\");\n            else if (grades[i] > 0.7f) result.Add(\"\
    D\");\n            else if (grades[i] > 0.0f) result.Add(\"D-\");\n          \
    \  else result.Add(\"E\");\n        }\n        return result;", "        List<string>\
    \ letterGrades = new List<string>();\n        foreach (float grade in grades)\
    \ {\n            if (grade >= 4.0f) letterGrades.Add(\"A+\");\n            else\
    \ if (grade >= 3.7f) letterGrades.Add(\"A\");\n            else if (grade >= 3.3f)\
    \ letterGrades.Add(\"A-\");\n            else if (grade >= 3.0f) letterGrades.Add(\"\
    B+\");\n            else if (grade >= 2.7f) letterGrades.Add(\"B\");\n       \
    \     else if (grade >= 2.3f) letterGrades.Add(\"B-\");\n            else if (grade\
    \ >= 2.0f) letterGrades.Add(\"C+\");\n            else if (grade >= 1.7f) letterGrades.Add(\"\
    C\");\n            else if (grade >= 1.3f) letterGrades.Add(\"C-\");\n       \
    \     else if (grade >= 1.0f) letterGrades.Add(\"D+\");\n            else if (grade\
    \ >= 0.7f) letterGrades.Add(\"D\");\n            else if (grade >= 0.0f) letterGrades.Add(\"\
    D-\");\n            else letterGrades.Add(\"E\");\n        }\n        return letterGrades;",
  "        // Your code goes here!\n        return null;", '        return new List<string>{};',
  "        List<string> letterGrades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            if (grade == 4.0f) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade > 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade > 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade > 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade > 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade > 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade > 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade > 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade > 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade > 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> gradesString\
    \ = new List<string>();\n        for (int index = 0; index < grades.Count; index++)\
    \ {\n            gradesString.Add(GetLetterGrade(grades[index]));\n        }\n\
    \        return gradesString;", "        // Write your code here\n        return\
    \ null;", "        List<string> letterGrades = new List<string>();\n        foreach\
    \ (float grade in grades) {\n            if (grade >= 4) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> output\
    \ = new List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n  \
    \          output.Add(NumericalLetterGrade(grades[i]));\n        }\n        return\
    \ output;", "        var letterGrades = new List<string>();\n        for (int\
    \ i = 0; i < grades.Count; i++) {\n            letterGrades.Add(GradeEquation(grades[i]));\n\
    \        }\n        return letterGrades;", "        return grades.Select(grade\
    \ => {\n            if (grade >= 4) {\n                return \"A+\";\n      \
    \      } else if (grade >= 3.7) {\n                return \"A\";\n           \
    \ } else if (grade >= 3.3) {\n                return \"A-\";\n            } else\
    \ if (grade >= 3) {\n                return \"B+\";\n            } else if (grade\
    \ >= 2.7) {\n                return \"B\";\n            } else if (grade >= 2.3)\
    \ {\n                return \"B-\";\n            } else if (grade >= 2) {\n  \
    \              return \"C+\";\n            } else if (grade >= 1.7) {\n      \
    \          return \"C\";\n            } else if (grade >= 1.3) {\n           \
    \     return \"C-\";\n            } else if (grade >= 1) {\n                return\
    \ \"D+\";\n            } else if (grade >= 0.7) {\n                return \"D\"\
    ;\n            } else if (grade >= 0) {\n                return \"D-\";\n    \
    \        } else {\n                return \"E\";\n            }\n        }).ToList();",
  "        // Your code goes here.\n        return new List<string>();", "       \
    \ List<string> result = new List<string>();\n        foreach (float grade in grades)\
    \ {\n            if (grade >= 4.0f) {\n                result.Add(\"A+\");\n \
    \           } else if (grade >= 3.7f) {\n                result.Add(\"A\");\n\
    \            } else if (grade >= 3.3f) {\n                result.Add(\"A-\");\n\
    \            } else if (grade >= 3.0f) {\n                result.Add(\"B+\");\n\
    \            } else if (grade >= 2.7f) {\n                result.Add(\"B\");\n\
    \            } else if (grade >= 2.3f) {\n                result.Add(\"B-\");\n\
    \            } else if (grade >= 2.0f) {\n                result.Add(\"C+\");\n\
    \            } else if (grade >= 1.7f) {\n                result.Add(\"C\");\n\
    \            } else if (grade >= 1.3f) {\n                result.Add(\"C-\");\n\
    \            } else if (grade >= 1.0f) {\n                result.Add(\"D+\");\n\
    \            } else if (grade >= 0.7f) {\n                result.Add(\"D\");\n\
    \            } else if (grade >= 0.0f) {\n                result.Add(\"D-\");\n\
    \            } else {\n                result.Add(\"E\");\n            }\n   \
    \     }\n        return result;", "        List<string> output = new List<string>();\n\
    \        foreach (float g in grades) {\n            if (g > 3.7) {\n         \
    \       output.Add(\"A+\");\n            } else if (g > 3.3) {\n             \
    \   output.Add(\"A\");\n            } else if (g > 3.0) {\n                output.Add(\"\
    A-\");\n            } else if (g > 2.7) {\n                output.Add(\"B+\");\n\
    \            } else if (g > 2.3) {\n                output.Add(\"B\");\n     \
    \       } else if (g > 2.0) {\n                output.Add(\"B-\");\n         \
    \   } else if (g > 1.7) {\n                output.Add(\"C+\");\n            }\
    \ else if (g > 1.3) {\n                output.Add(\"C\");\n            } else\
    \ if (g > 1.0) {\n                output.Add(\"C-\");\n            } else if (g\
    \ > 0.7) {\n                output.Add(\"D+\");\n            } else if (g > 0.0)\
    \ {\n                output.Add(\"D\");\n            } else if (g > -0.1) {\n\
    \                output.Add(\"D-\");\n            } else {\n                output.Add(\"\
    E\");\n            }\n        }\n        return output;", "        // Hint: You\
    \ can use a for loop for this problem.\n        return null;", "        List<string>\
    \ output = new List<string>();\n        foreach (float grade in grades) {\n  \
    \          if (grade > 4.0f) output.Add(\"A+\");\n            else if (grade >\
    \ 3.7f) output.Add(\"A\");\n            else if (grade > 3.3f) output.Add(\"A-\"\
    );\n            else if (grade > 3.0f) output.Add(\"B+\");\n            else if\
    \ (grade > 2.7f) output.Add(\"B\");\n            else if (grade > 2.3f) output.Add(\"\
    B-\");\n            else if (grade > 2.0f) output.Add(\"C+\");\n            else\
    \ if (grade > 1.7f) output.Add(\"C\");\n            else if (grade > 1.3f) output.Add(\"\
    C-\");\n            else if (grade > 1.0f) output.Add(\"D+\");\n            else\
    \ if (grade > 0.7f) output.Add(\"D\");\n            else if (grade > 0.0f) output.Add(\"\
    D-\");\n            else output.Add(\"E\");\n        }\n        return output;",
  "        List<string> ret = new List<string>();\n        foreach (float g in grades)\
    \ {\n            if (g >= 4.0f) {\n                ret.Add(\"A+\");\n        \
    \    } else if (g >= 3.7f) {\n                ret.Add(\"A\");\n            } else\
    \ if (g >= 3.3f) {\n                ret.Add(\"A-\");\n            } else if (g\
    \ >= 3.0f) {\n                ret.Add(\"B+\");\n            } else if (g >= 2.7f)\
    \ {\n                ret.Add(\"B\");\n            } else if (g >= 2.3f) {\n  \
    \              ret.Add(\"B-\");\n            } else if (g >= 2.0f) {\n       \
    \         ret.Add(\"C+\");\n            } else if (g >= 1.7f) {\n            \
    \    ret.Add(\"C\");\n            } else if (g >= 1.3f) {\n                ret.Add(\"\
    C-\");\n            } else if (g >= 1.0f) {\n                ret.Add(\"D+\");\n\
    \            } else if (g >= 0.7f) {\n                ret.Add(\"D\");\n      \
    \      } else if (g >= 0.0f) {\n                ret.Add(\"D-\");\n           \
    \ } else {\n                ret.Add(\"E\");\n            }\n        }\n      \
    \  return ret;", "        List<string> letterGrades = new List<string>();\n  \
    \      foreach (float grade in grades) {\n            if (grade >= 4) {\n    \
    \            letterGrades.Add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.Add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.Add(\"A-\");\n            } else if (grade >=\
    \ 3) {\n                letterGrades.Add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.Add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.Add(\"B-\");\n            } else if\
    \ (grade >= 2) {\n                letterGrades.Add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.Add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.Add(\"C-\");\n      \
    \      } else if (grade >= 1) {\n                letterGrades.Add(\"D+\");\n \
    \           } else if (grade >= 0.7) {\n                letterGrades.Add(\"D\"\
    );\n            } else if (grade >= 0) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        var graded = new\
    \ List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0f)\
    \ {\n                graded.Add(\"A+\");\n            } else if (g > 3.7f) {\n\
    \                graded.Add(\"A\");\n            } else if (g > 3.3f) {\n    \
    \            graded.Add(\"A-\");\n            } else if (g > 3.0f) {\n       \
    \         graded.Add(\"B+\");\n            } else if (g > 2.7f) {\n          \
    \      graded.Add(\"B\");\n            } else if (g > 2.3f) {\n              \
    \  graded.Add(\"B-\");\n            } else if (g > 2.0f) {\n                graded.Add(\"\
    C+\");\n            } else if (g > 1.7f) {\n                graded.Add(\"C\");\n\
    \            } else if (g > 1.3f) {\n                graded.Add(\"C-\");\n   \
    \         } else if (g > 1.0f) {\n                graded.Add(\"D+\");\n      \
    \      } else if (g > 0.7f) {\n                graded.Add(\"D\");\n          \
    \  } else if (g > 0.0f) {\n                graded.Add(\"D-\");\n            }\
    \ else {\n                graded.Add(\"E\");\n            }\n        }\n     \
    \   return graded;", "        List<string> ret = new List<string>();\n       \
    \ foreach (float g in grades) {\n            if (g >= 4.0f) {\n              \
    \  ret.Add(\"A+\");\n            } else if (g >= 3.7f) {\n                ret.Add(\"\
    A\");\n            } else if (g >= 3.3f) {\n                ret.Add(\"A-\");\n\
    \            } else if (g >= 3.0f) {\n                ret.Add(\"B+\");\n     \
    \       } else if (g >= 2.7f) {\n                ret.Add(\"B\");\n           \
    \ } else if (g >= 2.3f) {\n                ret.Add(\"B-\");\n            } else\
    \ if (g >= 2.0f) {\n                ret.Add(\"C+\");\n            } else if (g\
    \ >= 1.7f) {\n                ret.Add(\"C\");\n            } else if (g >= 1.3f)\
    \ {\n                ret.Add(\"C-\");\n            } else if (g >= 1.0f) {\n \
    \               ret.Add(\"D+\");\n            } else if (g >= 0.7f) {\n      \
    \          ret.Add(\"D\");\n            } else if (g >= 0.0f) {\n            \
    \    ret.Add(\"D-\");\n            } else {\n                ret.Add(\"E\");\n\
    \            }\n        }\n        return ret;", "        var gradesDict = new\
    \ Dictionary<string, float>() {{\"A+\", 4f}, {\"A\", 3.7f}, {\"A-\", 3.3f}, {\"\
    B+\", 3f}, {\"B\", 2.7f}, {\"B-\", 2.3f}, {\"C+\", 2f}, {\"C\", 1.7f}, {\"C-\"\
    , 1.3f}, {\"D+\", 1f}, {\"D\", 0.7f}, {\"D-\", 0.0f}, {\"E\", 0.0f}};\n      \
    \  return grades.Select(g => gradesDict.OrderByDescending(x => x.Value).Where(x\
    \ => x.Value <= g).First().Key).ToList();", "        List<string> gradelist =\
    \ new List<string>();\n        foreach (float grade in grades) {\n           \
    \ if (grade >= 4.0f) {\n                gradelist.Add(\"A+\");\n            }\
    \ else if (grade >= 3.7f) {\n                gradelist.Add(\"A\");\n         \
    \   } else if (grade >= 3.3f) {\n                gradelist.Add(\"A-\");\n    \
    \        } else if (grade >= 3.0f) {\n                gradelist.Add(\"B+\");\n\
    \            } else if (grade >= 2.7f) {\n                gradelist.Add(\"B\"\
    );\n            } else if (grade >= 2.3f) {\n                gradelist.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                gradelist.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                gradelist.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                gradelist.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                gradelist.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                gradelist.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                gradelist.Add(\"\
    D-\");\n            } else {\n                gradelist.Add(\"E\");\n        \
    \    }\n        }\n        return gradelist;", "        // Your code here\n  \
    \      List<string> letter_grades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            if (grade >= 4.0) {\n                letter_grades.Add(\"\
    A+\");\n            } else if (grade >= 3.7) {\n                letter_grades.Add(\"\
    A\");\n            } else if (grade >= 3.3) {\n                letter_grades.Add(\"\
    A-\");\n            } else if (grade >= 3.0) {\n                letter_grades.Add(\"\
    B+\");\n            } else if (grade >= 2.7) {\n                letter_grades.Add(\"\
    B\");\n            } else if (grade >= 2.3) {\n                letter_grades.Add(\"\
    B-\");\n            } else if (grade >= 2.0) {\n                letter_grades.Add(\"\
    C+\");\n            } else if (grade >= 1.7) {\n                letter_grades.Add(\"\
    C\");\n            } else if (grade >= 1.3) {\n                letter_grades.Add(\"\
    C-\");\n            } else if (grade >= 1.0) {\n                letter_grades.Add(\"\
    D+\");\n            } else if (grade >= 0.7) {\n                letter_grades.Add(\"\
    D\");\n            } else if (grade >= 0.0) {\n                letter_grades.Add(\"\
    D-\");\n            } else {\n                letter_grades.Add(\"E\");\n    \
    \        }\n        }\n        return letter_grades;", "        // Do we grade\
    \ on a curve?\n        return grades.Select(x => GetLetterGrade(x)).ToList();",
  "        List<string> results = new List<string>();\n        for (int i = 0; i <\
    \ grades.Count; i++) {\n            float gpa = grades[i];\n            string\
    \ letter;\n            if (gpa >= 4.0f) {\n                letter = \"A+\";\n\
    \            } else if (gpa >= 3.7f) {\n                letter = \"A\";\n    \
    \        } else if (gpa >= 3.3f) {\n                letter = \"A-\";\n       \
    \     } else if (gpa >= 3.0f) {\n                letter = \"B+\";\n          \
    \  } else if (gpa >= 2.7f) {\n                letter = \"B\";\n            } else\
    \ if (gpa >= 2.3f) {\n                letter = \"B-\";\n            } else if\
    \ (gpa >= 2.0f) {\n                letter = \"C+\";\n            } else if (gpa\
    \ >= 1.7f) {\n                letter = \"C\";\n            } else if (gpa >= 1.3f)\
    \ {\n                letter = \"C-\";\n            } else if (gpa >= 1.0f) {\n\
    \                letter = \"D+\";\n            } else if (gpa >= 0.7f) {\n   \
    \             letter = \"D\";\n            } else if (gpa >= 0.0f) {\n       \
    \         letter = \"D-\";\n            } else {\n                letter = \"\
    E\";\n            }\n            results.Add(letter);\n        }\n        return\
    \ results;", "        // define grade table\n        Dictionary<float, string>\
    \ gradeTable = new Dictionary<float, string> {\n            { (float)4.0, \"A+\"\
    \ },\n            { (float)3.7, \"A\" },\n            { (float)3.3, \"A-\" },\n\
    \            { (float)3.0, \"B+\" },\n            { (float)2.7, \"B\" },\n   \
    \         { (float)2.3, \"B-\" },\n            { (float)2.0, \"C+\" },\n     \
    \       { (float)1.7, \"C\" },\n            { (float)1.3, \"C-\" },\n        \
    \    { (float)1.0, \"D+\" },\n            { (float)0.7, \"D\" },\n           \
    \ { (float)0.0, \"D-\" },\n            { (float)-1.0, \"E\" }\n        };\n  \
    \      List<string> letterGrades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            string letterGrade = \"\";\n            foreach\
    \ (KeyValuePair<float, string> entry in gradeTable) {\n                if (grade\
    \ >= entry.Key) {\n                    letterGrade = entry.Value;\n          \
    \          break;\n                }\n            }\n            letterGrades.Add(letterGrade);\n\
    \        }\n        return letterGrades;", '        return (List<string>)null;',
  "        List<string> result = new List<string>();\n        foreach (float g in\
    \ grades) {\n            if (g >= 4.0f) {\n                result.Add(\"A+\");\n\
    \            } else if (g >= 3.7f) {\n                result.Add(\"A\");\n   \
    \         } else if (g >= 3.3f) {\n                result.Add(\"A-\");\n     \
    \       } else if (g >= 3.0f) {\n                result.Add(\"B+\");\n       \
    \     } else if (g >= 2.7f) {\n                result.Add(\"B\");\n          \
    \  } else if (g >= 2.3f) {\n                result.Add(\"B-\");\n            }\
    \ else if (g >= 2.0f) {\n                result.Add(\"C+\");\n            } else\
    \ if (g >= 1.7f) {\n                result.Add(\"C\");\n            } else if\
    \ (g >= 1.3f) {\n                result.Add(\"C-\");\n            } else if (g\
    \ >= 1.0f) {\n                result.Add(\"D+\");\n            } else if (g >=\
    \ 0.7f) {\n                result.Add(\"D\");\n            } else if (g >= 0.0f)\
    \ {\n                result.Add(\"D-\");\n            } else {\n             \
    \   result.Add(\"E\");\n            }\n        }\n        return result;", " \
    \       // Your code here\n        // Make sure to return an array\n        List<string>\
    \ gradeResult = new List<string>();\n        for (int i = 0; i < grades.Count;\
    \ i++) {\n            if (grades[i] >= 4.0) {\n                gradeResult.Add(\"\
    A+\");\n            } else if (grades[i] >= 3.7) {\n                gradeResult.Add(\"\
    A\");\n            } else if (grades[i] >= 3.3) {\n                gradeResult.Add(\"\
    A-\");\n            } else if (grades[i] >= 3.0) {\n                gradeResult.Add(\"\
    B+\");\n            } else if (grades[i] >= 2.7) {\n                gradeResult.Add(\"\
    B\");\n            } else if (grades[i] >= 2.3) {\n                gradeResult.Add(\"\
    B-\");\n            } else if (grades[i] >= 2.0) {\n                gradeResult.Add(\"\
    C+\");\n            } else if (grades[i] >= 1.7) {\n                gradeResult.Add(\"\
    C\");\n            } else if (grades[i] >= 1.3) {\n                gradeResult.Add(\"\
    C-\");\n            } else if (grades[i] >= 1.0) {\n                gradeResult.Add(\"\
    D+\");\n            } else if (grades[i] >= 0.7) {\n                gradeResult.Add(\"\
    D\");\n            } else if (grades[i] >= 0.0) {\n                gradeResult.Add(\"\
    D-\");\n            } else {\n                gradeResult.Add(\"E\");\n      \
    \      }\n        }\n        return gradeResult;", "        var returnList = new\
    \ List<string>();\n        foreach (var grade in grades) {\n            if (grade\
    \ >= 4.0f) {\n                returnList.Add(\"A+\");\n            } else if (grade\
    \ >= 3.7f) {\n                returnList.Add(\"A\");\n            } else if (grade\
    \ >= 3.3f) {\n                returnList.Add(\"A-\");\n            } else if (grade\
    \ >= 3.0f) {\n                returnList.Add(\"B+\");\n            } else if (grade\
    \ >= 2.7f) {\n                returnList.Add(\"B\");\n            } else if (grade\
    \ >= 2.3f) {\n                returnList.Add(\"B-\");\n            } else if (grade\
    \ >= 2.0f) {\n                returnList.Add(\"C+\");\n            } else if (grade\
    \ >= 1.7f) {\n                returnList.Add(\"C\");\n            } else if (grade\
    \ >= 1.3f) {\n                returnList.Add(\"C-\");\n            } else if (grade\
    \ >= 1.0f) {\n                returnList.Add(\"D+\");\n            } else if (grade\
    \ >= 0.7f) {\n                returnList.Add(\"D\");\n            } else if (grade\
    \ >= 0.0f) {\n                returnList.Add(\"D-\");\n            } else {\n\
    \                returnList.Add(\"E\");\n            }\n        }\n        return\
    \ returnList;", "        List<string> gradeList = new List<string>();\n      \
    \  // Add your code below this line\n        for (int i = 0; i < grades.Count;\
    \ i++) {\n            if (grades[i] == 4.0f) {\n                gradeList.Add(\"\
    A+\");\n            } else if (grades[i] > 3.7f) {\n                gradeList.Add(\"\
    A\");\n            } else if (grades[i] > 3.3f) {\n                gradeList.Add(\"\
    A-\");\n            } else if (grades[i] > 3.0f) {\n                gradeList.Add(\"\
    B+\");\n            } else if (grades[i] > 2.7f) {\n                gradeList.Add(\"\
    B\");\n            } else if (grades[i] > 2.3f) {\n                gradeList.Add(\"\
    B-\");\n            } else if (grades[i] > 2.0f) {\n                gradeList.Add(\"\
    C+\");\n            } else if (grades[i] > 1.7f) {\n                gradeList.Add(\"\
    C\");\n            } else if (grades[i] > 1.3f) {\n                gradeList.Add(\"\
    C-\");\n            } else if (grades[i] > 1.0f) {\n                gradeList.Add(\"\
    D+\");\n            } else if (grades[i] > 0.7f) {\n                gradeList.Add(\"\
    D\");\n            } else if (grades[i] > 0.0f) {\n                gradeList.Add(\"\
    D-\");\n            } else {\n                gradeList.Add(\"E\");\n        \
    \    }\n        }\n        // Add your code above this line\n        return gradeList;",
  "        List<string> grade_list = new List<string>();\n        for (int i = 0;\
    \ i < grades.Count; i++) {\n            if (grades[i] == 4.0) {\n            \
    \    grade_list.Add(\"A+\");\n            } else if (grades[i] > 3.7) {\n    \
    \            grade_list.Add(\"A\");\n            } else if (grades[i] > 3.3) {\n\
    \                grade_list.Add(\"A-\");\n            } else if (grades[i] > 3.0)\
    \ {\n                grade_list.Add(\"B+\");\n            } else if (grades[i]\
    \ > 2.7) {\n                grade_list.Add(\"B\");\n            } else if (grades[i]\
    \ > 2.3) {\n                grade_list.Add(\"B-\");\n            } else if (grades[i]\
    \ > 2.0) {\n                grade_list.Add(\"C+\");\n            } else if (grades[i]\
    \ > 1.7) {\n                grade_list.Add(\"C\");\n            } else if (grades[i]\
    \ > 1.3) {\n                grade_list.Add(\"C-\");\n            } else if (grades[i]\
    \ > 1.0) {\n                grade_list.Add(\"D+\");\n            } else if (grades[i]\
    \ > 0.7) {\n                grade_list.Add(\"D\");\n            } else if (grades[i]\
    \ > 0.0) {\n                grade_list.Add(\"D-\");\n            } else {\n  \
    \              grade_list.Add(\"E\");\n            }\n        }\n        return\
    \ grade_list;", "        List<string> result = new List<string>();\n        foreach\
    \ (float f in grades) {\n            if (f == 4.0f) {\n                result.Add(\"\
    A+\");\n            } else if (f > 3.7f) {\n                result.Add(\"A\");\n\
    \            } else if (f > 3.3f) {\n                result.Add(\"A-\");\n   \
    \         } else if (f > 3.0f) {\n                result.Add(\"B+\");\n      \
    \      } else if (f > 2.7f) {\n                result.Add(\"B\");\n          \
    \  } else if (f > 2.3f) {\n                result.Add(\"B-\");\n            }\
    \ else if (f > 2.0f) {\n                result.Add(\"C+\");\n            } else\
    \ if (f > 1.7f) {\n                result.Add(\"C\");\n            } else if (f\
    \ > 1.3f) {\n                result.Add(\"C-\");\n            } else if (f > 1.0f)\
    \ {\n                result.Add(\"D+\");\n            } else if (f > 0.7f) {\n\
    \                result.Add(\"D\");\n            } else if (f > 0.0f) {\n    \
    \            result.Add(\"D-\");\n            } else {\n                result.Add(\"\
    E\");\n            }\n        }\n        return result;", "        var letterGrades\
    \ = new List<string>();\n        foreach (var grade in grades) {\n           \
    \ if (grade == 4.0f) letterGrades.Add(\"A+\");\n            else if (grade > 3.7f)\
    \ letterGrades.Add(\"A\");\n            else if (grade > 3.3f) letterGrades.Add(\"\
    A-\");\n            else if (grade > 3.0f) letterGrades.Add(\"B+\");\n       \
    \     else if (grade > 2.7f) letterGrades.Add(\"B\");\n            else if (grade\
    \ > 2.3f) letterGrades.Add(\"B-\");\n            else if (grade > 2.0f) letterGrades.Add(\"\
    C+\");\n            else if (grade > 1.7f) letterGrades.Add(\"C\");\n        \
    \    else if (grade > 1.3f) letterGrades.Add(\"C-\");\n            else if (grade\
    \ > 1.0f) letterGrades.Add(\"D+\");\n            else if (grade > 0.7f) letterGrades.Add(\"\
    D\");\n            else if (grade > 0.0f) letterGrades.Add(\"D-\");\n        \
    \    else letterGrades.Add(\"E\");\n        }\n        return letterGrades;",
  "        List<string> letterGrades = new List<string>();\n        foreach (float\
    \ grade in grades) {\n            if (grade > 4.0) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade > 3.7) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade > 3.3) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade > 3.0) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade > 2.7) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade > 2.3) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade > 2.0) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade > 1.7) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade > 1.3) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade > 1.0) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade > 0.7) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade > 0.0) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        // TODO: Add solution here\n        foreach (float\
    \ grade in grades) {\n            if (grade >= 4.0f) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade >= 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        // The grades are:\n\
    \        // 4.0 -> A+\n        // 3.7 -> A\n        // 3.3 -> A-\n        // 3.0\
    \ -> B+\n        // 2.7 -> B\n        // 2.3 -> B-\n        // 2.0 -> C+\n   \
    \     // 1.7 -> C\n        // 1.3 -> C-\n        // 1.0 -> D+\n        // 0.7\
    \ -> D\n        // 0.0 -> D-\n        // -1.0 -> E\n        List<string> ret =\
    \ new List<string>();\n        foreach (float grade in grades) {\n           \
    \ if (grade == 4.0f) {\n                ret.Add(\"A+\");\n            } else if\
    \ (grade > 3.7f) {\n                ret.Add(\"A\");\n            } else if (grade\
    \ > 3.3f) {\n                ret.Add(\"A-\");\n            } else if (grade >\
    \ 3.0f) {\n                ret.Add(\"B+\");\n            } else if (grade > 2.7f)\
    \ {\n                ret.Add(\"B\");\n            } else if (grade > 2.3f) {\n\
    \                ret.Add(\"B-\");\n            } else if (grade > 2.0f) {\n  \
    \              ret.Add(\"C+\");\n            } else if (grade > 1.7f) {\n    \
    \            ret.Add(\"C\");\n            } else if (grade > 1.3f) {\n       \
    \         ret.Add(\"C-\");\n            } else if (grade > 1.0f) {\n         \
    \       ret.Add(\"D+\");\n            } else if (grade > 0.7f) {\n           \
    \     ret.Add(\"D\");\n            } else if (grade > 0.0f) {\n              \
    \  ret.Add(\"D-\");\n            } else {\n                ret.Add(\"E\");\n \
    \           }\n        }\n        return ret;", "        List<string> letters\
    \ = new List<string>();\n        string[] letter_grades = new string[] { \"E\"\
    , \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\"\
    , \"A\", \"A+\" };\n        for (int i = 0; i < grades.Count; i++) {\n       \
    \     letters.Add(letter_grades[(int)Math.Round(grades[i] * 10)]);\n        }\n\
    \        return letters;", "        List<string> letter_grades = new List<string>();\n\
    \        foreach (float grade in grades) {\n            string letter_grade =\
    \ \"\";\n            if (grade >= 4.0f) letter_grade = \"A+\";\n            else\
    \ if (grade >= 3.7f) letter_grade = \"A\";\n            else if (grade >= 3.3f)\
    \ letter_grade = \"A-\";\n            else if (grade >= 3.0f) letter_grade = \"\
    B+\";\n            else if (grade >= 2.7f) letter_grade = \"B\";\n           \
    \ else if (grade >= 2.3f) letter_grade = \"B-\";\n            else if (grade >=\
    \ 2.0f) letter_grade = \"C+\";\n            else if (grade >= 1.7f) letter_grade\
    \ = \"C\";\n            else if (grade >= 1.3f) letter_grade = \"C-\";\n     \
    \       else if (grade >= 1.0f) letter_grade = \"D+\";\n            else if (grade\
    \ >= 0.7f) letter_grade = \"D\";\n            else if (grade >= 0.0f) letter_grade\
    \ = \"D-\";\n            else letter_grade = \"E\";\n            letter_grades.Add(letter_grade);\n\
    \        }\n        return letter_grades;", "        List<string> output = new\
    \ List<string>();\n        foreach (float grade in grades) {\n            if (grade\
    \ >= 4.0f) {\n                output.Add(\"A+\");\n            } else if (grade\
    \ >= 3.7f) {\n                output.Add(\"A\");\n            } else if (grade\
    \ >= 3.3f) {\n                output.Add(\"A-\");\n            } else if (grade\
    \ >= 3.0f) {\n                output.Add(\"B+\");\n            } else if (grade\
    \ >= 2.7f) {\n                output.Add(\"B\");\n            } else if (grade\
    \ >= 2.3f) {\n                output.Add(\"B-\");\n            } else if (grade\
    \ >= 2.0f) {\n                output.Add(\"C+\");\n            } else if (grade\
    \ >= 1.7f) {\n                output.Add(\"C\");\n            } else if (grade\
    \ >= 1.3f) {\n                output.Add(\"C-\");\n            } else if (grade\
    \ >= 1.0f) {\n                output.Add(\"D+\");\n            } else if (grade\
    \ >= 0.7f) {\n                output.Add(\"D\");\n            } else if (grade\
    \ >= 0.0f) {\n                output.Add(\"D-\");\n            } else {\n    \
    \            output.Add(\"E\");\n            }\n        }\n        return output;",
  "        // REPLACE WITH YOUR CODE\n        string[] finals = new string[grades.Count];\n\
    \        for (int i = 0; i < grades.Count; i++) {\n            if (grades[i] ==\
    \ 4) {\n                finals[i] = \"A+\";\n            } else if (grades[i]\
    \ > 3.7f) {\n                finals[i] = \"A\";\n            } else if (grades[i]\
    \ > 3.3f) {\n                finals[i] = \"A-\";\n            } else if (grades[i]\
    \ > 3) {\n                finals[i] = \"B+\";\n            } else if (grades[i]\
    \ > 2.7f) {\n                finals[i] = \"B\";\n            } else if (grades[i]\
    \ > 2.3f) {\n                finals[i] = \"B-\";\n            } else if (grades[i]\
    \ > 2) {\n                finals[i] = \"C+\";\n            } else if (grades[i]\
    \ > 1.7f) {\n                finals[i] = \"C\";\n            } else if (grades[i]\
    \ > 1.3f) {\n                finals[i] = \"C-\";\n            } else if (grades[i]\
    \ > 1) {\n                finals[i] = \"D+\";\n            } else if (grades[i]\
    \ > 0.7f) {\n                finals[i] = \"D\";\n            } else if (grades[i]\
    \ > 0) {\n                finals[i] = \"D-\";\n            } else {\n        \
    \        finals[i] = \"E\";\n            }\n        }\n        return finals.ToList();",
  "        // Please fill in the code here.\n        List<string> letterGrades = new\
    \ List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n        \
    \    var grade = grades[i];\n            var letterGrade = \"\";\n           \
    \ if (grade >= 4.0) {\n                letterGrade = \"A+\";\n            } else\
    \ if (grade >= 3.7) {\n                letterGrade = \"A\";\n            } else\
    \ if (grade >= 3.3) {\n                letterGrade = \"A-\";\n            } else\
    \ if (grade >= 3.0) {\n                letterGrade = \"B+\";\n            } else\
    \ if (grade >= 2.7) {\n                letterGrade = \"B\";\n            } else\
    \ if (grade >= 2.3) {\n                letterGrade = \"B-\";\n            } else\
    \ if (grade >= 2.0) {\n                letterGrade = \"C+\";\n            } else\
    \ if (grade >= 1.7) {\n                letterGrade = \"C\";\n            } else\
    \ if (grade >= 1.3) {\n                letterGrade = \"C-\";\n            } else\
    \ if (grade >= 1.0) {\n                letterGrade = \"D+\";\n            } else\
    \ if (grade >= 0.7) {\n                letterGrade = \"D\";\n            } else\
    \ if (grade >= 0.0) {\n                letterGrade = \"D-\";\n            } else\
    \ {\n                letterGrade = \"E\";\n            }\n            letterGrades.Add(letterGrade);\n\
    \        }\n        return letterGrades;", '        return grades.Select(grade
    => grade >= 4.0f ? "A+" : grade >= 3.7f ? "A" : grade >= 3.3f ? "A-" : grade >=
    3.0f ? "B+" : grade >= 2.7f ? "B" : grade >= 2.3f ? "B-" : grade >= 2.0f ? "C+"
    : grade >= 1.7f ? "C" : grade >= 1.3f ? "C-" : grade >= 1.0f ? "D+" : grade >=
    0.7f ? "D" : grade >= 0.0f ? "D-" : "E" ).ToList();', '        return null;',
  "        int studentCount = grades.Count;\n        List<string> letterGrades = new\
    \ List<string>();\n        for (int i = 0; i < studentCount; i++) {\n        \
    \    if (grades[i] == 4.0f) {\n                letterGrades.Add(\"A+\");\n   \
    \         } else if (grades[i] >= 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grades[i] >= 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grades[i] >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grades[i] >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grades[i] >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grades[i] >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grades[i] >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grades[i] >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grades[i] >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grades[i] >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grades[i] >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        // your code here...\n\
    \        List<string> result = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade == 4.0f) {\n                result.Add(\"\
    A+\");\n            } else if (grade >= 3.7f) {\n                result.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                result.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                result.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                result.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                result.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                result.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                result.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                result.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                result.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                result.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                result.Add(\"D-\"\
    );\n            } else {\n                result.Add(\"E\");\n            }\n\
    \        }\n        return result;", "        List<string> letterGrades = new\
    \ List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n        \
    \    if (grades[i] >= 4.0f) {\n                letterGrades.Add(\"A+\");\n   \
    \         } else if (grades[i] >= 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grades[i] >= 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grades[i] >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grades[i] >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grades[i] >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grades[i] >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grades[i] >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grades[i] >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grades[i] >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grades[i] >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grades[i] >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", '        return new List<string>();',
  "        List<string> result = new List<string>();\n        for (int i = 0; i <\
    \ grades.Count; i++) {\n            if (grades[i] >= 4.0) {\n                result.Add(\"\
    A+\");\n            } else if (grades[i] >= 3.7) {\n                result.Add(\"\
    A\");\n            } else if (grades[i] >= 3.3) {\n                result.Add(\"\
    A-\");\n            } else if (grades[i] >= 3.0) {\n                result.Add(\"\
    B+\");\n            } else if (grades[i] >= 2.7) {\n                result.Add(\"\
    B\");\n            } else if (grades[i] >= 2.3) {\n                result.Add(\"\
    B-\");\n            } else if (grades[i] >= 2.0) {\n                result.Add(\"\
    C+\");\n            } else if (grades[i] >= 1.7) {\n                result.Add(\"\
    C\");\n            } else if (grades[i] >= 1.3) {\n                result.Add(\"\
    C-\");\n            } else if (grades[i] >= 1.0) {\n                result.Add(\"\
    D+\");\n            } else if (grades[i] >= 0.7) {\n                result.Add(\"\
    D\");\n            } else if (grades[i] >= 0.0) {\n                result.Add(\"\
    D-\");\n            } else {\n                result.Add(\"E\");\n           \
    \ }\n        }\n        return result;", "        // 1. Get grade\n        //\
    \ 2. Return grade\n        List<string> toReturn = new List<string>();\n     \
    \   foreach (float grade in grades) {\n            if (grade == 4.0f) {\n    \
    \            toReturn.Add(\"A+\");\n            } else if (grade > 3.7f) {\n \
    \               toReturn.Add(\"A\");\n            } else if (grade > 3.3f) {\n\
    \                toReturn.Add(\"A-\");\n            } else if (grade > 3.0f) {\n\
    \                toReturn.Add(\"B+\");\n            } else if (grade > 2.7f) {\n\
    \                toReturn.Add(\"B\");\n            } else if (grade > 2.3f) {\n\
    \                toReturn.Add(\"B-\");\n            } else if (grade > 2.0f) {\n\
    \                toReturn.Add(\"C+\");\n            } else if (grade > 1.7f) {\n\
    \                toReturn.Add(\"C\");\n            } else if (grade > 1.3f) {\n\
    \                toReturn.Add(\"C-\");\n            } else if (grade > 1.0f) {\n\
    \                toReturn.Add(\"D+\");\n            } else if (grade > 0.7f) {\n\
    \                toReturn.Add(\"D\");\n            } else if (grade > 0.0f) {\n\
    \                toReturn.Add(\"D-\");\n            } else {\n               \
    \ toReturn.Add(\"E\");\n            }\n        }\n        return toReturn;", " \
    \       var gradesToLetters = new Dictionary<float, string> {\n            {3.7f,\
    \ \"A\"},\n            {3.3f, \"A-\"},\n            {3.0f, \"B+\"},\n        \
    \    {2.7f, \"B\"},\n            {2.3f, \"B-\"},\n            {2.0f, \"C+\"},\n\
    \            {1.7f, \"C\"},\n            {1.3f, \"C-\"},\n            {1.0f, \"\
    D+\"},\n            {0.7f, \"D\"},\n            {0.0f, \"D-\"},\n        };\n\
    \        List<string> toReturn = new List<string>();\n        foreach (var grade\
    \ in grades) {\n            if (grade == 4) {\n                toReturn.Add(\"\
    A+\");\n            } else if (grade < 0) {\n                toReturn.Add(\"E\"\
    );\n            } else {\n                foreach (var kv in gradesToLetters)\
    \ {\n                    if (grade >= kv.Key) {\n                        toReturn.Add(kv.Value);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return toReturn;", "        // Creates a list\
    \ of letters\n        List<string> letters = new List<string>();\n        // Itterates\
    \ through the list of grades\n        foreach (float grade in grades) {\n    \
    \        // If the grade is higher than 3.7 it is an A+\n            if (grade\
    \ >= 4.0f) {\n                letters.Add(\"A+\");\n            }\n          \
    \  // If the grade is higher than 3.3 it is an A\n            else if (grade >=\
    \ 3.7f) {\n                letters.Add(\"A\");\n            }\n            //\
    \ If the grade is higher than 3.0 it is an A-\n            else if (grade >= 3.3f)\
    \ {\n                letters.Add(\"A-\");\n            }\n            // If the\
    \ grade is higher than 2.7 it is an B+\n            else if (grade >= 3.0f) {\n\
    \                letters.Add(\"B+\");\n            }\n            // If the grade\
    \ is higher than 2.3 it is an B\n            else if (grade >= 2.7f) {\n     \
    \           letters.Add(\"B\");\n            }\n            // If the grade is\
    \ higher than 2.0 it is an B-\n            else if (grade >= 2.3f) {\n       \
    \         letters.Add(\"B-\");\n            }\n            // If the grade is\
    \ higher than 1.7 it is an C+\n            else if (grade >= 2.0f) {\n       \
    \         letters.Add(\"C+\");\n            }\n            // If the grade is\
    \ higher than 1.3 it is an C\n            else if (grade >= 1.7f) {\n        \
    \        letters.Add(\"C\");\n            }\n            // If the grade is higher\
    \ than 1.0 it is an C-\n            else if (grade >= 1.3f) {\n              \
    \  letters.Add(\"C-\");\n            }\n            // If the grade is higher\
    \ than 0.7 it is an D+\n            else if (grade >= 1.0f) {\n              \
    \  letters.Add(\"D+\");\n            }\n            // If the grade is higher\
    \ than 0.0 it is an D\n            else if (grade >= 0.7f) {\n               \
    \ letters.Add(\"D\");\n            }\n            // If the grade is higher than\
    \ 0.0 it is", "        List<string> res = new List<string>();\n        foreach\
    \ (float n in grades) {\n            if (n >= 4.0) res.Add(\"A+\");\n        \
    \    else if (n >= 3.7) res.Add(\"A\");\n            else if (n >= 3.3) res.Add(\"\
    A-\");\n            else if (n >= 3.0) res.Add(\"B+\");\n            else if (n\
    \ >= 2.7) res.Add(\"B\");\n            else if (n >= 2.3) res.Add(\"B-\");\n \
    \           else if (n >= 2.0) res.Add(\"C+\");\n            else if (n >= 1.7)\
    \ res.Add(\"C\");\n            else if (n >= 1.3) res.Add(\"C-\");\n         \
    \   else if (n >= 1.0) res.Add(\"D+\");\n            else if (n >= 0.7) res.Add(\"\
    D\");\n            else if (n >= 0.0) res.Add(\"D-\");\n            else res.Add(\"\
    E\");\n        }\n        return res;", "        List<string> letterGrades = new\
    \ List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n        \
    \    float grade = grades[i];\n            if (grade >= 4) {\n               \
    \ letterGrades.Add(\"A+\");\n            } else if (grade >= 3.7) {\n        \
    \        letterGrades.Add(\"A\");\n            } else if (grade >= 3.3) {\n  \
    \              letterGrades.Add(\"A-\");\n            } else if (grade >= 3) {\n\
    \                letterGrades.Add(\"B+\");\n            } else if (grade >= 2.7)\
    \ {\n                letterGrades.Add(\"B\");\n            } else if (grade >=\
    \ 2.3) {\n                letterGrades.Add(\"B-\");\n            } else if (grade\
    \ >= 2) {\n                letterGrades.Add(\"C+\");\n            } else if (grade\
    \ >= 1.7) {\n                letterGrades.Add(\"C\");\n            } else if (grade\
    \ >= 1.3) {\n                letterGrades.Add(\"C-\");\n            } else if\
    \ (grade >= 1) {\n                letterGrades.Add(\"D+\");\n            } else\
    \ if (grade >= 0.7) {\n                letterGrades.Add(\"D\");\n            }\
    \ else if (grade >= 0) {\n                letterGrades.Add(\"D-\");\n        \
    \    } else {\n                letterGrades.Add(\"E\");\n            }\n     \
    \   }\n        return letterGrades;", "        // Your code goes here \n     \
    \   return new List<string>();", '        return (new List<string>(new string[]
    { "A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "E" }));',
  "        List<string> letters = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade == 4.0f) {\n                letters.Add(\"\
    A+\");\n            } else if (grade > 3.7f) {\n                letters.Add(\"\
    A\");\n            } else if (grade > 3.3f) {\n                letters.Add(\"\
    A-\");\n            } else if (grade > 3.0f) {\n                letters.Add(\"\
    B+\");\n            } else if (grade > 2.7f) {\n                letters.Add(\"\
    B\");\n            } else if (grade > 2.3f) {\n                letters.Add(\"\
    B-\");\n            } else if (grade > 2.0f) {\n                letters.Add(\"\
    C+\");\n            } else if (grade > 1.7f) {\n                letters.Add(\"\
    C\");\n            } else if (grade > 1.3f) {\n                letters.Add(\"\
    C-\");\n            } else if (grade > 1.0f) {\n                letters.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                letters.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                letters.Add(\"\
    D-\");\n            } else {\n                letters.Add(\"E\");\n          \
    \  }\n        }\n        return letters;", "        List<string> letterGrade =\
    \ new List<string>();\n        foreach (float grade in grades) {\n           \
    \ if (grade == 4.0f) {\n                letterGrade.Add(\"A+\");\n           \
    \ } else if (grade > 3.7f) {\n                letterGrade.Add(\"A\");\n      \
    \      } else if (grade > 3.3f) {\n                letterGrade.Add(\"A-\");\n\
    \            } else if (grade > 3.0f) {\n                letterGrade.Add(\"B+\"\
    );\n            } else if (grade > 2.7f) {\n                letterGrade.Add(\"\
    B\");\n            } else if (grade > 2.3f) {\n                letterGrade.Add(\"\
    B-\");\n            } else if (grade > 2.0f) {\n                letterGrade.Add(\"\
    C+\");\n            } else if (grade > 1.7f) {\n                letterGrade.Add(\"\
    C\");\n            } else if (grade > 1.3f) {\n                letterGrade.Add(\"\
    C-\");\n            } else if (grade > 1.0f) {\n                letterGrade.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                letterGrade.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                letterGrade.Add(\"\
    D-\");\n            } else {\n                letterGrade.Add(\"E\");\n      \
    \      }\n        }\n        return letterGrade;", "        List<string> letters\
    \ = new List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n  \
    \          if (grades[i] >= 4.0) letters.Add(\"A+\");\n            else if (grades[i]\
    \ >= 3.7) letters.Add(\"A\");\n            else if (grades[i] >= 3.3) letters.Add(\"\
    A-\");\n            else if (grades[i] >= 3.0) letters.Add(\"B+\");\n        \
    \    else if (grades[i] >= 2.7) letters.Add(\"B\");\n            else if (grades[i]\
    \ >= 2.3) letters.Add(\"B-\");\n            else if (grades[i] >= 2.0) letters.Add(\"\
    C+\");\n            else if (grades[i] >= 1.7) letters.Add(\"C\");\n         \
    \   else if (grades[i] >= 1.3) letters.Add(\"C-\");\n            else if (grades[i]\
    \ >= 1.0) letters.Add(\"D+\");\n            else if (grades[i] >= 0.7) letters.Add(\"\
    D\");\n            else if (grades[i] >= 0.0) letters.Add(\"D-\");\n         \
    \   else letters.Add(\"E\");\n        }\n        return letters;", "        List<string>\
    \ letterGrades = new List<string>();\n        foreach (float x in grades) {\n\
    \            if (x >= 4.0) {\n                letterGrades.Add(\"A+\");\n    \
    \        } else if (x >= 3.7) {\n                letterGrades.Add(\"A\");\n  \
    \          } else if (x >= 3.3) {\n                letterGrades.Add(\"A-\");\n\
    \            } else if (x >= 3.0) {\n                letterGrades.Add(\"B+\");\n\
    \            } else if (x >= 2.7) {\n                letterGrades.Add(\"B\");\n\
    \            } else if (x >= 2.3) {\n                letterGrades.Add(\"B-\");\n\
    \            } else if (x >= 2.0) {\n                letterGrades.Add(\"C+\");\n\
    \            } else if (x >= 1.7) {\n                letterGrades.Add(\"C\");\n\
    \            } else if (x >= 1.3) {\n                letterGrades.Add(\"C-\");\n\
    \            } else if (x >= 1.0) {\n                letterGrades.Add(\"D+\");\n\
    \            } else if (x >= 0.7) {\n                letterGrades.Add(\"D\");\n\
    \            } else if (x >= 0.0) {\n                letterGrades.Add(\"D-\");\n\
    \            } else {\n                letterGrades.Add(\"E\");\n            }\n\
    \        }\n        return letterGrades;", "        List<string> ret = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade >= 4.0f) {\n\
    \                ret.Add(\"A+\");\n            } else if (grade >= 3.7f) {\n \
    \               ret.Add(\"A\");\n            } else if (grade >= 3.3f) {\n   \
    \             ret.Add(\"A-\");\n            } else if (grade >= 3.0f) {\n    \
    \            ret.Add(\"B+\");\n            } else if (grade >= 2.7f) {\n     \
    \           ret.Add(\"B\");\n            } else if (grade >= 2.3f) {\n       \
    \         ret.Add(\"B-\");\n            } else if (grade >= 2.0f) {\n        \
    \        ret.Add(\"C+\");\n            } else if (grade >= 1.7f) {\n         \
    \       ret.Add(\"C\");\n            } else if (grade >= 1.3f) {\n           \
    \     ret.Add(\"C-\");\n            } else if (grade >= 1.0f) {\n            \
    \    ret.Add(\"D+\");\n            } else if (grade >= 0.7f) {\n             \
    \   ret.Add(\"D\");\n            } else if (grade >= 0.0f) {\n               \
    \ ret.Add(\"D-\");\n            } else {\n                ret.Add(\"E\");\n  \
    \          }\n        }\n        return ret;", "        List<string> gradeList\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade == 4.0f) {\n                gradeList.Add(\"A+\");\n           \
    \ } else if (grade >= 3.7f) {\n                gradeList.Add(\"A\");\n       \
    \     } else if (grade >= 3.3f) {\n                gradeList.Add(\"A-\");\n  \
    \          } else if (grade >= 3.0f) {\n                gradeList.Add(\"B+\");\n\
    \            } else if (grade >= 2.7f) {\n                gradeList.Add(\"B\"\
    );\n            } else if (grade >= 2.3f) {\n                gradeList.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                gradeList.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                gradeList.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                gradeList.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                gradeList.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                gradeList.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                gradeList.Add(\"\
    D-\");\n            } else {\n                gradeList.Add(\"E\");\n        \
    \    }\n        }\n        return gradeList;", "        if (grades == null) {\n\
    \            throw new ArgumentNullException(\"grades\");\n        }\n       \
    \ List<string> letterGrades = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade >= 4) {\n                letterGrades.Add(\"\
    A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        // Your code here\n\
    \        return new List<string>();", '        throw new NotImplementedException();',
  "        List<string> result = new List<string>();\n        foreach (float grade\
    \ in grades) {\n            if (grade >= 3.7) {\n                result.Add(\"\
    A\");\n            } else if (grade >= 3.3) {\n                result.Add(\"A-\"\
    );\n            } else if (grade >= 3.0) {\n                result.Add(\"B+\"\
    );\n            } else if (grade >= 2.7) {\n                result.Add(\"B\");\n\
    \            } else if (grade >= 2.3) {\n                result.Add(\"B-\");\n\
    \            } else if (grade >= 2.0) {\n                result.Add(\"C+\");\n\
    \            } else if (grade >= 1.7) {\n                result.Add(\"C\");\n\
    \            } else if (grade >= 1.3) {\n                result.Add(\"C-\");\n\
    \            } else if (grade >= 1.0) {\n                result.Add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                result.Add(\"D\");\n\
    \            } else if (grade >= 0.0) {\n                result.Add(\"D-\");\n\
    \            } else {\n                result.Add(\"E\");\n            }\n   \
    \     }\n        return result;", "        // TODO: Convert GPAs to letter grades\n\
    \        var valueOfGrade = new List<string>();\n        string grade = \"\";\n\
    \        foreach (var g in grades) {\n            if (g == 4) {\n            \
    \    grade = \"A+\";\n            } else if (g > 3.7) {\n                grade\
    \ = \"A\";\n            } else if (g > 3.3) {\n                grade = \"A-\"\
    ;\n            } else if (g > 3) {\n                grade = \"B+\";\n        \
    \    } else if (g > 2.7) {\n                grade = \"B\";\n            } else\
    \ if (g > 2.3) {\n                grade = \"B-\";\n            } else if (g >\
    \ 2) {\n                grade = \"C+\";\n            } else if (g > 1.7) {\n \
    \               grade = \"C\";\n            } else if (g > 1.3) {\n          \
    \      grade = \"C-\";\n            } else if (g > 1) {\n                grade\
    \ = \"D+\";\n            } else if (g > 0.7) {\n                grade = \"D\"\
    ;\n            } else if (g > 0) {\n                grade = \"D-\";\n        \
    \    } else {\n                grade = \"E\";\n            }\n            valueOfGrade.Add(grade);\n\
    \        }\n        return valueOfGrade;", "        List<string> s = new List<string>();\n\
    \        foreach (float g in grades) {\n            if (g >= 4.0f) s.Add(\"A+\"\
    );\n            else if (g >= 3.7f) s.Add(\"A\");\n            else if (g >= 3.3f)\
    \ s.Add(\"A-\");\n            else if (g >= 3.0f) s.Add(\"B+\");\n           \
    \ else if (g >= 2.7f) s.Add(\"B\");\n            else if (g >= 2.3f) s.Add(\"\
    B-\");\n            else if (g >= 2.0f) s.Add(\"C+\");\n            else if (g\
    \ >= 1.7f) s.Add(\"C\");\n            else if (g >= 1.3f) s.Add(\"C-\");\n   \
    \         else if (g >= 1.0f) s.Add(\"D+\");\n            else if (g >= 0.7f)\
    \ s.Add(\"D\");\n            else if (g >= 0.0f) s.Add(\"D-\");\n            else\
    \ s.Add(\"E\");\n        }\n        return s;", "        // Your code goes here\n\
    \        return null;"]
stop_tokens:
- "\n    }\n"
