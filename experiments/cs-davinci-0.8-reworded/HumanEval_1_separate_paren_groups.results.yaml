language: cs
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    start = 0;\n        int end = 0;\n        int count = 0;\n        for (int i =
    0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n
    \               count++;\n            } else if (paren_string[i] == ')') {\n                count--;\n
    \           }\n            if (count == 0) {\n                end = i;\n                if
    (end >= start) {\n                    groups.Add(paren_string.Substring(start,
    end - start + 1));\n                }\n                start = i + 1;\n            }\n
    \       }\n        return groups;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5fd60faaa95a40babdc537cbc2020279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5fd60faaa95a40babdc537cbc2020279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ans = new List<string>();\n        Stack<char>
    paren_stack = new Stack<char>();\n        StringBuilder curr_group = new StringBuilder();\n
    \       for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]
    == ' ') continue;\n            if (paren_string[i] == '(') {\n                paren_stack.Push(paren_string[i]);\n
    \               curr_group.Append(paren_string[i]);\n            } else {\n                curr_group.Append(paren_string[i]);\n
    \               paren_stack.Pop();\n                if (paren_stack.Count == 0)
    {\n                    ans.Add(curr_group.ToString());\n                    curr_group.Clear();\n
    \               }\n            }\n        }\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a2ac056d62845068c6a6f0414727674>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a2ac056d62845068c6a6f0414727674>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    nesting = 0;\n        StringBuilder builder = new StringBuilder();\n        foreach
    (char c in paren_string) {\n            if (c == '(') {\n                if (nesting
    == 0) builder.Clear();\n                builder.Append(c);\n                nesting++;\n
    \           } else if (c == ')') {\n                nesting--;\n                builder.Append(c);\n
    \               if (nesting == 0) result.Add(builder.ToString());\n            }
    else if (c != ' ') {\n                throw new Exception(\"invalid character
    in the string: \" + c);\n            }\n        }\n        if (nesting != 0) throw
    new Exception(\"unbalanced parentheses\");\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <116afa02c865438d8d76a1029ddebdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <116afa02c865438d8d76a1029ddebdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var groups = new List<string>();\n        var current
    = new StringBuilder();\n        var balance = 0;\n        foreach (var c in paren_string)
    {\n            if (c == ' ') continue;\n            current.Append(c);\n            if
    (c == '(') {\n                balance++;\n            } else {\n                balance--;\n
    \           }\n            if (balance == 0) {\n                groups.Add(current.ToString());\n
    \               current.Clear();\n            }\n        }\n        return groups;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eadd9726320249ab9d611699781c982a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eadd9726320249ab9d611699781c982a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> strings = new List<string>();\n        int
    depth = 0;\n        int group_start = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n
    \           } else if (paren_string[i] == ')') {\n                depth--;\n            }\n
    \           if (depth == 0) {\n                strings.Add(paren_string.Substring(group_start,
    i - group_start + 1));\n                group_start = i + 1;\n            }\n
    \       }\n        return strings;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1732867d8bfd4d528eaf2c2e18af0ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1732867d8bfd4d528eaf2c2e18af0ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> parens = new List<string>();\n        var
    chars = paren_string.ToCharArray();\n        int currentParens = 0;\n        string
    current = \"\";\n        foreach (var c in chars) {\n            if (c == ' ')
    continue;\n            current += c;\n            if (c == '(') {\n                currentParens++;\n
    \           } else if (c == ')') {\n                currentParens--;\n                if
    (currentParens == 0) {\n                    parens.Add(current);\n                    current
    = \"\";\n                }\n            }\n        }\n        return parens;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adfb5b9f1d9244b085fd76f02846797d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adfb5b9f1d9244b085fd76f02846797d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        //count
    open paren, push to stack\n        //count close paren, pop from stack\n        //Get
    stack length\n        //Add to list\n        Stack<char> _stack = new Stack<char>();\n
    \       int stack_len = 0;\n        foreach (char c in paren_string) {\n            if
    (c == '(') {\n                _stack.Push(c);\n                stack_len++;\n
    \           }\n            else if (c == ')') {\n                _stack.Pop();\n
    \               stack_len--;\n            }\n            else {\n                //ignore
    any spaces\n            }\n            if (stack_len == 0) {\n                result.Add(paren_string.Substring(0,
    paren_string.Length - (paren_string.Length - stack_len)));\n                paren_string
    = paren_string.Substring(paren_string.Length - (paren_string.Length - stack_len),
    paren_string.Length - (paren_string.Length - stack_len));\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6f08888097b45ee93ea54d305a74a6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6f08888097b45ee93ea54d305a74a6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int open = 0;\n        List<string> result = new List<string>();\n
    \       int last = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n
    \           if (paren_string[i] == '(') {\n                open++;\n            }
    else if (paren_string[i] == ')') {\n                open--;\n            }\n            if
    (open == 0) {\n                result.Add(paren_string.Substring(last, i - last
    + 1));\n                last = i + 1;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c067e6e354e64aa7a0e250fdeac9380f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c067e6e354e64aa7a0e250fdeac9380f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Fill in your code here.\n        int len = paren_string.Length;\n
    \       List<string> result = new List<string>();\n        Stack<int> open_stk
    = new Stack<int>();\n        List<int> open_list = new List<int>();\n        List<int>
    close_list = new List<int>();\n        for (int i = 0; i < len; i++) {\n            if
    (paren_string[i] == '(') {\n                open_stk.Push(i);\n                open_list.Add(i);\n
    \           }\n            else if (paren_string[i] == ')') {\n                if
    (open_stk.Count == 0) {\n                    return null;\n                }\n
    \               open_stk.Pop();\n                close_list.Add(i);\n            }\n
    \       }\n        if (open_stk.Count != 0) {\n            return null;\n        }\n
    \       int open_idx = 0;\n        int close_idx = 0;\n        while (close_idx
    < close_list.Count) {\n            int start = open_list[open_idx];\n            int
    end = close_list[close_idx];\n            result.Add(paren_string.Substring(start,
    end - start + 1));\n            open_idx += 1;\n            close_idx += 1;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2707888380914691aafb566391d1c5f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2707888380914691aafb566391d1c5f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    begin = 0;\n        int open = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                open++;\n            }
    else if (paren_string[i] == ')') {\n                open--;\n            }\n            if
    (open == 0) {\n                groups.Add(paren_string.Substring(begin, i-begin+1));\n
    \               begin = i+1;\n            }\n        }\n        return groups;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57ad75b1b5ba42b699622a4f8af25e89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57ad75b1b5ba42b699622a4f8af25e89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        //
    YOUR CODE HERE\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <deb666823e154dec9f0e68e06a45cb13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <deb666823e154dec9f0e68e06a45cb13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> res = new List<string>();\n        int[]
    leftParen = new int[100001];\n        int lastLeft = -1;\n        int start =
    0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]
    == '(') {\n                leftParen[lastLeft + 1] = i;\n                lastLeft++;\n
    \           } else if (paren_string[i] == ')') {\n                leftParen[lastLeft]
    = -1;\n                lastLeft--;\n                if (lastLeft == -1) {\n                    res.Add(paren_string.Substring(start,
    i - start + 1));\n                    start = i + 1;\n                }\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94dc6b88b2e44712a0483949e79c1429>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94dc6b88b2e44712a0483949e79c1429>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Remove spaces\n        paren_string = new string(paren_string.Where(c
    => !Char.IsWhiteSpace(c)).ToArray());\n        return new List<string>();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a96aae6985b5451f9c993b2d704ff1fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a96aae6985b5451f9c993b2d704ff1fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var a = new List<string>();\n        var i = 0;\n        var
    j = 0;\n        var k = 0;\n        var t = 0;\n        var len = paren_string.Length;\n
    \       while (j < len) {\n            while (paren_string[j] == ' ') j++;\n            while
    (k < len && paren_string[k] != ' ') k++;\n            if (paren_string[j] == '(')
    {\n                for (var l = j; l < k; l++) {\n                    if (paren_string[l]
    == '(') t++;\n                    else if (paren_string[l] == ')') t--;\n                    if
    (t == 0) {\n                        a.Add(paren_string.Substring(j, l - j + 1));\n
    \                       j = l + 1;\n                        break;\n                    }\n
    \               }\n            }\n            j = k;\n        }\n        return
    a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: Fill out this function.\n        // See note
    above for instructions.\n        char[] letters = paren_string.Replace(\" \",
    \"\").ToCharArray();\n        List<string> result = new List<string>();\n        int
    start = 0;\n        int end = 0;\n        int open = 0;\n        int close = 0;\n
    \       for (int i = 0; i < letters.Length; i++) {\n            if (letters[i]
    == '(') {\n                open++;\n            }\n            if (letters[i]
    == ')') {\n                close++;\n            }\n            if (open > 0 &&
    open == close) {\n                end = i;\n                result.Add(paren_string.Substring(start,
    end - start + 1));\n                open = 0;\n                close = 0;\n                start
    = end + 1;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <517bbca5fc104e0692150d2a039911dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <517bbca5fc104e0692150d2a039911dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Delete all spaces\n        paren_string = paren_string.Replace(\"
    \", \"\");\n        List<string> groups = new List<string>();\n        int depth
    = 0;\n        int last_match_idx = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n
    \           } else if (paren_string[i] == ')') {\n                depth--;\n                if
    (depth == 0) {\n                    groups.Add(paren_string.Substring(last_match_idx,
    i - last_match_idx + 1));\n                    last_match_idx = i + 1;\n                }\n
    \           }\n        }\n        return groups;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <640ea44bdd88423dbd4fb6d6124c8132>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <640ea44bdd88423dbd4fb6d6124c8132>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int state = 0;\n        int start = 0;\n        int end
    = 0;\n        List<string> result = new List<string>();\n        for (int i =
    0; i < paren_string.Length; i++) {\n            switch (state) {\n                case
    0: //start\n                    if (paren_string[i] == '(') {\n                        state
    = 1;\n                        start = i;\n                    }\n                    break;\n
    \               case 1: //open\n                    if (paren_string[i] == ')')
    {\n                        state = 2;\n                        end = i;\n                    }\n
    \                   break;\n                case 2: //close\n                    state
    = 0;\n                    result.Add(paren_string.Substring(start, end - start
    + 1));\n                    break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <614e9e64d992406585ad8221ea29065f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <614e9e64d992406585ad8221ea29065f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> results = new List<string>();\n        int
    start_index = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            char
    c = paren_string[i];\n            if (c == '(') {\n                // we found
    a '(' so we need to look for its closing brace\n                int nest_count
    = 1;\n                while (nest_count > 0) {\n                    i++;\n                    c
    = paren_string[i];\n                    if (c == '(') {\n                        nest_count++;\n
    \                   } else if (c == ')') {\n                        nest_count--;\n
    \                   }\n                }\n                results.Add(paren_string.Substring(start_index,
    i - start_index + 1));\n                start_index = i + 1;\n            }\n
    \       }\n        return results;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4de12d80492c4b029c7c9557c38b5cb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4de12d80492c4b029c7c9557c38b5cb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5edc8f8dfc3b40ce80b9cf45b8ea08f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5edc8f8dfc3b40ce80b9cf45b8ea08f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> paren_groups = new List<string>();\n        int
    count = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                count++;\n
    \           } else if (paren_string[i] == ')') {\n                count--;\n            }\n
    \           if (count == 0) {\n                paren_groups.Add(paren_string.Substring(start,
    i - start + 1));\n                start = i + 1;\n            }\n        }\n        return
    paren_groups;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c30277055ce14352a04898ae997da927>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c30277055ce14352a04898ae997da927>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // You may want to reuse this stack.\n        Stack<char>
    paren_stack = new Stack<char>();\n        List<string> groups = new List<string>();\n
    \       // TODO: Fill this in.\n        return groups;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d932c89e2b6b439f8cd679b105ad54aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d932c89e2b6b439f8cd679b105ad54aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    depth = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            switch (paren_string[i]) {\n                case '(':\n                    depth++;\n
    \                   break;\n                case ')':\n                    depth--;\n
    \                   if (depth == 0) {\n                        result.Add(paren_string.Substring(start,
    i - start + 1));\n                        start = i + 1;\n                    }\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <763cb0706f3a41b2b48eb097a525606c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <763cb0706f3a41b2b48eb097a525606c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    parenCount = 0;\n        int startIndex = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                parenCount++;\n
    \           } else if (paren_string[i] == ')') {\n                parenCount--;\n
    \           }\n            if (parenCount == 0) {\n                result.Add(paren_string.Substring(startIndex,
    i - startIndex + 1));\n                startIndex = i + 1;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df6ac64f25f74f65ac494e7ca88dbdc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df6ac64f25f74f65ac494e7ca88dbdc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008803
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    j = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if
    (paren_string[i] == ' ') continue;\n            if (paren_string[i] == '(') {\n
    \               j = i;\n                for (; j < paren_string.Length; j++) {\n
    \                   if (paren_string[j] == ')') {\n                        result.Add(paren_string.Substring(i,
    j - i + 1));\n                        break;\n                    }\n                }\n
    \               i = j;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0da5b66a06a6449b83148a596271e287>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0da5b66a06a6449b83148a596271e287>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var results = new List<string>();\n        var stack
    = new Stack<char>();\n        var current = new StringBuilder();\n        foreach
    (var c in paren_string) {\n            if (c == ' ') {\n                continue;\n
    \           }\n            if (c == '(') {\n                stack.Push(c);\n            }
    else if (c == ')') {\n                var last = stack.Pop();\n                if
    (last != '(') {\n                    throw new Exception(\"Invalid paren string\");\n
    \               }\n                if (stack.Count == 0) {\n                    results.Add(current.ToString());\n
    \                   current.Clear();\n                }\n            } else {\n
    \               current.Append(c);\n            }\n        }\n        return results;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05319724678e4ae5aa8c5f3511d05427>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05319724678e4ae5aa8c5f3511d05427>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int paren_index = 0;\n        int group_start = 0;\n
    \       int group_length = 0;\n        List<string> group_list = new List<string>();\n
    \       while (paren_index < paren_string.Length) {\n            char paren =
    paren_string[paren_index];\n            switch (paren) {\n                case
    '(': {\n                    if (group_length == 0) {\n                        group_start
    = paren_index;\n                    }\n                    group_length++;\n                    break;\n
    \               }\n                case ')': {\n                    group_length--;\n
    \                   if (group_length == 0) {\n                        group_list.Add(paren_string.Substring(group_start,
    paren_index - group_start + 1));\n                    }\n                    break;\n
    \               }\n            }\n            paren_index++;\n        }\n        return
    group_list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <510b84fa1f04451e8eafa0b4996ddc1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <510b84fa1f04451e8eafa0b4996ddc1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Base case, a single set of parentheses with no nesting\n
    \       if (paren_string.Length == 2) {\n            return new List<string>(new
    string[] { paren_string });\n        }\n\n        List<string> result = new List<string>();\n
    \       int start_index = 0;\n        int end_index = 0;\n        bool open_group
    = false;\n        int open_paren_count = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                if (!open_group)
    {\n                    start_index = i;\n                    open_group = true;\n
    \               }\n                open_paren_count++;\n            } else if
    (paren_string[i] == ')') {\n                open_paren_count--;\n                if
    (open_paren_count == 0) {\n                    end_index = i;\n                    result.Add(paren_string.Substring(start_index,
    end_index - start_index + 1));\n                    open_group = false;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86cce50dcfc9493c9a7d0340dde3bdae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86cce50dcfc9493c9a7d0340dde3bdae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        for (int
    idx = 0; idx < paren_string.Length; idx++) {\n            if (paren_string[idx]
    == '(') {\n                int balance = 1;\n                for (int idx2 = idx
    + 1; idx2 < paren_string.Length; idx2++) {\n                    if (paren_string[idx2]
    == '(') {\n                        balance++;\n                    } else if (paren_string[idx2]
    == ')') {\n                        balance--;\n                    }\n                    if
    (balance == 0) {\n                        ret.Add(paren_string.Substring(idx,
    idx2 - idx + 1));\n                        idx = idx2;\n                        break;\n
    \                   }\n                }\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f92cd7d89c34756a354f82b1d2e5b8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f92cd7d89c34756a354f82b1d2e5b8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // your code here\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdfd7d188bad46ebaddef54347405347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdfd7d188bad46ebaddef54347405347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> parens = new List<string>();\n        StringBuilder
    sb = new StringBuilder();\n        int open = 0;\n        foreach (char c in paren_string)
    {\n            if (c == '(') {\n                open++;\n                sb.Append(c);\n
    \           } else if (c == ')') {\n                open--;\n                sb.Append(c);\n
    \           }\n            if (open == 0) {\n                parens.Add(sb.ToString());\n
    \               sb.Clear();\n            }\n        }\n        return parens;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9148bb6a60d34c5297c2ae7c357237ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9148bb6a60d34c5297c2ae7c357237ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // FIXME: implement this code\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <7fdf64cdd00046969d3ffaf54cd3d3be>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <7fdf64cdd00046969d3ffaf54cd3d3be>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var ret = new List<string>();\n        int start = 0;\n
    \       int end = 0;\n        int count = 0;\n        foreach (char c in paren_string)
    {\n            if (c == '(') {\n                count++;\n            } else if
    (c == ')') {\n                count--;\n            } else {\n                continue;\n
    \           }\n            if (count == 0) {\n                ret.Add(paren_string.Substring(start,
    end - start + 1));\n                start = end + 1;\n            }\n            end++;\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e32c8371f67f4376b99bd961285b9cf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e32c8371f67f4376b99bd961285b9cf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        int i
    = 0;\n        while (i < paren_string.Length) {\n            string temp = paren_string.Substring(i,
    1);\n            int count = 1;\n            while (count > 0) {\n                i++;\n
    \               if (paren_string.Substring(i, 1) == \"(\") {\n                    count++;\n
    \               } else if (paren_string.Substring(i, 1) == \")\") {\n                    count--;\n
    \               }\n                temp += paren_string.Substring(i, 1);\n            }\n
    \           ret.Add(temp);\n            i++;\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SeparateParenGroups (System.String paren_string) [0x0001e] in <780c71b4e20440deadf2ee23af99515f>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <780c71b4e20440deadf2ee23af99515f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SeparateParenGroups (System.String
    paren_string) [0x0001e] in <780c71b4e20440deadf2ee23af99515f>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <780c71b4e20440deadf2ee23af99515f>:0 \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // >>> SeparateParenGroups((\"( ) (( )) (( )( ))\"))\n
    \       // (new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))\n
    \       if (paren_string.Length == 0) {\n            return new List<string>();\n
    \       }\n        int count = 0;\n        int group_start = 0;\n        int last_group_end
    = 0;\n        int group_end = -1;\n        List<string> groups = new List<string>();\n
    \       for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]
    == '(') {\n                count++;\n                if (count == 1) {\n                    group_start
    = i;\n                }\n            } else if (paren_string[i] == ')') {\n                count--;\n
    \               if (count == 0) {\n                    group_end = i;\n                    groups.Add(paren_string.Substring(group_start,
    group_end - group_start + 1));\n                    last_group_end = group_end;\n
    \               }\n            }\n        }\n        return groups;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5fb259d39bd4012867a1bb3f0616fcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5fb259d39bd4012867a1bb3f0616fcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    start = 0;\n        while (paren_string[start] == ' ') {\n            start++;\n
    \       }\n        // now start points to the first non-space character\n        int
    end = start;\n        for (; end < paren_string.Length; end++) {\n            if
    (paren_string[end] == ' ') {\n                continue;\n            }\n            if
    (paren_string[end] == '(') {\n                int nesting = 1;\n                for
    (int i = end + 1; i < paren_string.Length; i++) {\n                    if (paren_string[i]
    == '(') {\n                        nesting++;\n                    } else if (paren_string[i]
    == ')') {\n                        nesting--;\n                    }\n                    if
    (nesting == 0) {\n                        result.Add(paren_string.Substring(start,
    i - start + 1));\n                        start = i + 1;\n                        while
    (start < paren_string.Length && paren_string[start] == ' ') {\n                            start++;\n
    \                       }\n                        end = start - 1;\n                        break;\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da1c62381a394c77bf18d5ec6017e8b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da1c62381a394c77bf18d5ec6017e8b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    groupBegin = 0;\n        int groupEnd = 0;\n        int parens = 0;\n        for
    (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] ==
    '(') parens++;\n            if (paren_string[i] == ')') parens--;\n            if
    (parens == 0) {\n                groupEnd = i;\n                groups.Add(paren_string.Substring(groupBegin,
    groupEnd - groupBegin + 1));\n                groupBegin = i + 1;\n            }\n
    \       }\n        return groups;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a56fa83df99491fad0ba0422bbb15b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a56fa83df99491fad0ba0422bbb15b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Your code here\n        List<string> ret = new List<string>();\n
    \       int start = 0;\n        bool isopen = false;\n        for (int i = 0;
    i < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n                if
    (!isopen) {\n                    start = i;\n                    isopen = true;\n
    \               }\n            }\n            if (paren_string[i] == ')') {\n
    \               if (isopen) {\n                    ret.Add(paren_string.Substring(start,
    i - start + 1));\n                    isopen = false;\n                }\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58160e2b9ef147eaa3a88b5cb9ae6b26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58160e2b9ef147eaa3a88b5cb9ae6b26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    groupStart = 0;\n        int groupEnd = 0;\n        int openCount = 0;\n        for
    (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] ==
    '(') {\n                openCount++;\n                if (openCount == 1) {\n
    \                   groupStart = i;\n                }\n            } else if
    (paren_string[i] == ')') {\n                openCount--;\n                if (openCount
    == 0) {\n                    groupEnd = i;\n                    groups.Add(paren_string.Substring(groupStart,
    groupEnd - groupStart + 1));\n                }\n            }\n        }\n        return
    groups;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d7e8e0be57244cc9ca30092c054d974>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d7e8e0be57244cc9ca30092c054d974>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Hint: You can simulate a stack and use it to match
    parens\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <c634ccabc1974812a436f74fec7e1449>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <c634ccabc1974812a436f74fec7e1449>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var res = new List<string>();\n        int parenCount
    = 0;\n        int startIdx = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                parenCount++;\n
    \           } else if (paren_string[i] == ')') {\n                parenCount--;\n
    \           }\n            if (parenCount == 0) {\n                var substr
    = paren_string.Substring(startIdx, i - startIdx + 1);\n                res.Add(substr);\n
    \               startIdx = i + 1;\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f194792c18d4358a4aec56fcd4580fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f194792c18d4358a4aec56fcd4580fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        int nest_level
    = 0;\n        int group_start = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(')\n                nest_level++;\n
    \           else if (paren_string[i] == ')')\n                nest_level--;\n
    \           if (nest_level == 0) {\n                ret.Add(paren_string.Substring(group_start,
    i - group_start + 1));\n                group_start = i + 1;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71ec38dd3bfd48d882973e6061d9f88c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71ec38dd3bfd48d882973e6061d9f88c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Your implementation goes here!\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <b34c410435ad480c832e2bf55d65eafe>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <b34c410435ad480c832e2bf55d65eafe>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    openParens = 0;\n        int lastStart = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                openParens++;\n
    \           } else if (paren_string[i] == ')') {\n                openParens--;\n
    \               if (openParens == 0) {\n                    groups.Add(paren_string.Substring(lastStart,
    i - lastStart + 1));\n                    lastStart = i + 1;\n                }\n
    \           }\n        }\n        return groups;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28852525dd734ac9bf1318f95dc4a4fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28852525dd734ac9bf1318f95dc4a4fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int open_paren_count = 0;\n        int start_paren_idx
    = 0;\n        List<string> separated_paren_groups = new List<string>();\n        for
    (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] ==
    '(') {\n                if (open_paren_count == 0) {\n                    start_paren_idx
    = i;\n                }\n                open_paren_count++;\n            } else
    if (paren_string[i] == ')') {\n                open_paren_count--;\n                if
    (open_paren_count == 0) {\n                    separated_paren_groups.Add(paren_string.Substring(start_paren_idx,
    i - start_paren_idx + 1));\n                }\n            }\n        }\n        return
    separated_paren_groups;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <674cd15108be490a9b25cf1c2ecb81b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <674cd15108be490a9b25cf1c2ecb81b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // YOUR CODE HERE\n        char[] list = paren_string.ToCharArray();\n
    \       List<string> newList = new List<string>();\n        StringBuilder sb =
    new StringBuilder();\n        int count = 0;\n        for (int i = 0; i < list.Length;
    i++) {\n            if (list[i] == '(') {\n                count++;\n            }\n
    \           else if (list[i] == ')') {\n                count--;\n            }\n
    \           sb.Append(list[i]);\n            if (count == 0) {\n                if
    (sb.Length > 0) {\n                    newList.Add(sb.ToString());\n                    sb.Clear();\n
    \               }\n            }\n        }\n        return newList;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d4bee8af132456fbaa0e2223678210f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d4bee8af132456fbaa0e2223678210f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> list = new List<string>();\n        int
    start = 0;\n        int open = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                open++;\n            }
    else if (paren_string[i] == ')') {\n                open--;\n            }\n            if
    (open == 0) {\n                list.Add(paren_string.Substring(start, i - start
    + 1));\n                start = i + 1;\n            }\n        }\n        return
    list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da4249dbccea4d1b9930208df1e7569c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da4249dbccea4d1b9930208df1e7569c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var str = paren_string.Replace(\" \", \"\");\n        var
    results = new List<string>();\n        var current_open = 0;\n        var current_close
    = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] ==
    '(') {\n                current_open++;\n            } else {\n                current_close++;\n
    \           }\n            if (current_open == current_close) {\n                results.Add(str.Substring(i
    - current_open + 1, current_open * 2));\n                current_open = 0;\n                current_close
    = 0;\n            }\n        }\n        return results;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SeparateParenGroups (System.String paren_string) [0x0004d] in <00d12e2246c34dc295c43aef2737945b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <00d12e2246c34dc295c43aef2737945b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SeparateParenGroups (System.String
    paren_string) [0x0004d] in <00d12e2246c34dc295c43aef2737945b>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <00d12e2246c34dc295c43aef2737945b>:0 \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: Implement me\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <3bcf3ef70bc24cc0a90c6afe16e153a2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <3bcf3ef70bc24cc0a90c6afe16e153a2>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int open = 0;\n        List<string> list = new List<string>();\n
    \       int start = 0;\n        for (int i = 0; i < paren_string.Length; i++)
    {\n            if (paren_string[i] == '(') {\n                open++;\n            }
    else if (paren_string[i] == ')') {\n                open--;\n            }\n            if
    (open == 0) {\n                list.Add(paren_string.Substring(start, i - start
    + 1));\n                start = i + 1;\n            }\n        }\n        return
    list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e766b2926ca146eda30a9577108816a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e766b2926ca146eda30a9577108816a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Write your code here\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <5ecd8d722ce34d8fb72e3544304e4e92>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <5ecd8d722ce34d8fb72e3544304e4e92>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int n = paren_string.Length;\n        int[] balance =
    new int[n];\n        int b = 0;\n        for (int i = 0; i < n; i++) {\n            if
    (paren_string[i] == '(') {\n                b++;\n            } else if (paren_string[i]
    == ')') {\n                b--;\n            }\n            balance[i] = b;\n
    \       }\n        if (balance[n - 1] != 0) return null;\n        List<string>
    ans = new List<string>();\n        int prev = 0;\n        for (int i = 0; i <
    n; i++) {\n            if (balance[i] == 0) {\n                ans.Add(paren_string.Substring(prev,
    i - prev + 1));\n                prev = i + 1;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <560862c91f854a38b62249b34e93ddee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <560862c91f854a38b62249b34e93ddee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Make an empty list of strings to return\n        List<string>
    result = new List<string>();\n        // Count of open and closed parens, add
    one to closed to make loop easier\n        int count_open = 0;\n        int count_closed
    = 1;\n        // Keep track of string start and end to get group of parens\n        int
    start = 0;\n        int end = 0;\n        // Loop through the string\n        for
    (int i = 0; i < paren_string.Length; i++) {\n            // If open parens found,
    increment count\n            if (paren_string[i] == '(') {\n                count_open++;\n
    \           }\n            // If closed parens found, increment count\n            if
    (paren_string[i] == ')') {\n                count_closed++;\n            }\n            //
    If there is an equal amount of open and closed parens\n            if (count_open
    == count_closed) {\n                // Make a substring of the whole string\n
    \               string new_string = paren_string.Substring(start, end);\n                //
    Add the new string to the list\n                result.Add(new_string);\n                //
    Reset the open and closed counts\n                count_open = 0;\n                count_closed
    = 0;\n                // Next starting position is the next index\n                start
    = i + 1;\n            }\n            // If not an equal amount of open and closed
    parens, increment end\n            else {\n                end++;\n            }\n
    \       }\n        // Return the list of strings\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SeparateParenGroups (System.String paren_string) [0x00051] in <38d0f276a4e54db7b3c7f5e3385d5add>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <38d0f276a4e54db7b3c7f5e3385d5add>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SeparateParenGroups (System.String
    paren_string) [0x00051] in <38d0f276a4e54db7b3c7f5e3385d5add>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <38d0f276a4e54db7b3c7f5e3385d5add>:0 \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // YOUR CODE HERE\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd0ff98425964c7c873c672d6373d47d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd0ff98425964c7c873c672d6373d47d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        char[] seperator = {'(', ')'};\n        string[] split
    = paren_string.Split(seperator);\n        List<string> paren = new List<string>();\n
    \       int counter = 0;\n        for (int i = 0; i < split.Length; i++) {\n            if
    (split[i] == \"\") {\n                continue;\n            }\n            else
    {\n                paren.Add(split[i]);\n                counter++;\n            }\n
    \       }\n        return paren;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fb6f995960746bf8201572aedb0f015>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fb6f995960746bf8201572aedb0f015>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return new List<string>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        int depth
    = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            char c = paren_string[i];\n            if (c == '(') {\n                depth++;\n
    \           } else if (c == ')') {\n                depth--;\n            } else
    if (c == ' ') {\n                continue;\n            } else {\n                throw
    new Exception(\"Invalid input\");\n            }\n            if (depth == 0)
    {\n                ret.Add(paren_string.Substring(start, i - start + 1));\n                start
    = i + 1;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e46e3f42d694a0ba699d59d904635e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e46e3f42d694a0ba699d59d904635e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Fill this in with your logic\n        List<string>
    result = new List<string>();\n        int i = 0;\n        while (i < paren_string.Length)
    {\n            int open = 0;\n            int close = 0;\n            for (int
    j = i; j < paren_string.Length; j++) {\n                if (paren_string[j] ==
    '(') {\n                    open++;\n                } else if (paren_string[j]
    == ')') {\n                    close++;\n                }\n                if
    (open == close) {\n                    result.Add(paren_string.Substring(i, j
    - i + 1));\n                    i = j + 1;\n                    break;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4945dad96a744ed88ee2c263bd45053a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4945dad96a744ed88ee2c263bd45053a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        int index
    = 0;\n        string current = \"\";\n        foreach (char c in paren_string)
    {\n            if (c == ' ') continue;\n            if (c == '(') {\n                index++;\n
    \               current += c;\n            } else if (c == ')') {\n                index--;\n
    \               current += c;\n                if (index == 0) {\n                    ret.Add(current);\n
    \                   current = \"\";\n                }\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe4307e831864f029ef2b21f7c2038a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe4307e831864f029ef2b21f7c2038a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var output = new List<string>();\n        var count =
    0;\n        var start = 0;\n        for (var i = 0; i < paren_string.Length; i++)
    {\n            if (paren_string[i] == '(') {\n                count++;\n            }
    else if (paren_string[i] == ')') {\n                count--;\n            }\n
    \           if (count == 0) {\n                output.Add(paren_string.Substring(start,
    i - start + 1));\n                start = i + 1;\n            }\n        }\n        return
    output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f30e701b76154f609c1e03d9d0b59d81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f30e701b76154f609c1e03d9d0b59d81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Fill in your solution here\n        var ret = new
    List<string>();\n        StringBuilder current = new StringBuilder();\n        int
    count = 0;\n        foreach (var ch in paren_string) {\n            if (ch ==
    '(') {\n                count++;\n                current.Append('(');\n            }
    else if (ch == ')') {\n                count--;\n                current.Append(')');\n
    \           }\n            if (count == 0) {\n                ret.Add(current.ToString());\n
    \               current.Clear();\n            }\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91b8ecd30a9547b1aea3fabe6679754f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91b8ecd30a9547b1aea3fabe6679754f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    current_group_count = 0;\n        StringBuilder current_group = new StringBuilder();\n
    \       foreach (char c in paren_string) {\n            if (c == '(') {\n                current_group_count++;\n
    \               current_group.Append(c);\n            } else if (c == ')') {\n
    \               current_group_count--;\n                current_group.Append(c);\n
    \           }\n            if (current_group_count == 0) {\n                result.Add(current_group.ToString());\n
    \               current_group = new StringBuilder();\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60684f56103b4a43bd08298d6a7d2949>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60684f56103b4a43bd08298d6a7d2949>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: Put your code here!\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <32b4cf7391ca46d48ffcb8660af0f047>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <32b4cf7391ca46d48ffcb8660af0f047>:0
    \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var groups = new List<string>();\n        var stack =
    new Stack<char>();\n        var group_start = 0;\n        for (var i = 0; i <
    paren_string.Length; i++) {\n            var c = paren_string[i];\n            if
    (c == '(') {\n                stack.Push(c);\n            } else if (c == ')')
    {\n                stack.Pop();\n                if (stack.Count == 0) {\n                    groups.Add(paren_string.Substring(group_start,
    i + 1 - group_start));\n                    group_start = i + 1;\n                }\n
    \           }\n        }\n        return groups;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa0aadede3734aca8d482375cd7f0488>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa0aadede3734aca8d482375cd7f0488>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Create a new list to store the paren groups in\n        List<string>
    groups = new List<string>();\n        string group = \"\";\n        int inside
    = 0;\n        foreach (char c in paren_string) {\n            if (c == '(') {\n
    \               if (inside == 0) {\n                    group = \"\";\n                }\n
    \               inside++;\n                group += c;\n            } else if
    (c == ')') {\n                inside--;\n                group += c;\n                if
    (inside == 0) {\n                    groups.Add(group);\n                }\n            }
    else if (c != ' ') {\n                // Error!\n                throw new FormatException(\"Wrong
    input format\");\n            }\n        }\n        return groups;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87188721d0844434b32a469cc1be2dcd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87188721d0844434b32a469cc1be2dcd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <e10fb47a48984ba9b26f29d2b1e830eb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <e10fb47a48984ba9b26f29d2b1e830eb>:0
    \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // NOTE TO STUDENTS: Fill this in with a working implementation
    that passes the tests.\n        string new_paren_string = \"\";\n        int n
    = paren_string.Length;\n        for (int i = 0; i < n; i++) {\n            if
    (paren_string[i] != ' ') {\n                new_paren_string += paren_string[i];\n
    \           }\n        }\n        List<string> str_list = new List<string>();\n
    \       string str = \"\";\n        int m = new_paren_string.Length;\n        for
    (int i = 0; i < m; i++) {\n            str += new_paren_string[i];\n            if
    (new_paren_string[i] == ')') {\n                str_list.Add(str);\n                str
    = \"\";\n            }\n        }\n        return str_list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ca4d36a023d4950890838ccee67474a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ca4d36a023d4950890838ccee67474a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var list = new List<string>();\n        var builder =
    new StringBuilder();\n        var depth = 0;\n        foreach (var c in paren_string)
    {\n            if (c == ' ') {\n                continue;\n            }\n            if
    (c == '(') {\n                depth++;\n            } else if (c == ')') {\n                depth--;\n
    \           }\n            builder.Append(c);\n            if (depth == 0) {\n
    \               list.Add(builder.ToString());\n                builder.Clear();\n
    \           }\n        }\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54ae2411955f4fd7a51dbcbea43cd5a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54ae2411955f4fd7a51dbcbea43cd5a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // ASSERT: paren_string is always valid.\n        //
    Split paren_string into groups of balanced parentheses\n        //\n        //
    Edge cases:\n        //  - No balanced parentheses\n        //  - One balanced
    set of parentheses\n        //  - Multiple sets\n        //     - No whitespace\n
    \       //     - Whitespace present\n        //\n        // Solution:\n        //
    \ - Start an index at the start of the string\n        //  - Iterate through the
    string and find the next balanced set of parentheses.\n        //  - If the string
    is over, return\n        //  - If the string isn't over, continue at the next
    balanced set of parentheses.\n        //\n        // Complexity: O(N)\n        //\n
    \       List<string> groups = new List<string>();\n        int index = 0;\n        while
    (index < paren_string.Length) {\n            int openIndex = -1;\n            int
    closedIndex = -1;\n            int parenCount = 0;\n            for (int i = index;
    i < paren_string.Length; i++) {\n                char c = paren_string[i];\n                if
    (c == '(') {\n                    parenCount++;\n                    if (openIndex
    == -1) {\n                        openIndex = i;\n                    }\n                }
    else if (c == ')') {\n                    parenCount--;\n                    if
    (parenCount == 0) {\n                        closedIndex = i;\n                        break;\n
    \                   }\n                }\n            }\n            if (openIndex
    == -1 || closedIndex == -1) {\n                break;\n            }\n            groups.Add(paren_string.Substring(openIndex,
    closedIndex - openIndex + 1));\n            index = closedIndex + 1;\n        }\n
    \       return groups;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca330593473546f3b614c8109a08f5c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca330593473546f3b614c8109a08f5c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> paren_groups = new List<string>();\n        for
    (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] ==
    '(') {\n                int count = 1;\n                int j = i + 1;\n                for
    (; j < paren_string.Length; j++) {\n                    if (paren_string[j] ==
    '(') {\n                        count++;\n                    } else if (paren_string[j]
    == ')') {\n                        count--;\n                    }\n                    if
    (count == 0) {\n                        break;\n                    }\n                }\n
    \               paren_groups.Add(paren_string.Substring(i, j - i + 1));\n                i
    = j;\n            }\n        }\n        return paren_groups;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e185e40241449229b54d3c315836579>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e185e40241449229b54d3c315836579>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var group = new List<string>();\n        var paren =
    new Stack<char>();\n        var buffer = new StringBuilder();\n        foreach
    (var c in paren_string) {\n            if (c == ' ') continue;\n            if
    (c == '(') {\n                paren.Push(c);\n            } else if (c == ')')
    {\n                if (paren.Count == 0) {\n                    Console.WriteLine(\"Number
    of closing parentheses is more than the number of opening parentheses\");\n                    break;\n
    \               }\n                paren.Pop();\n                if (paren.Count
    == 0) {\n                    buffer.Append(c);\n                    group.Add(buffer.ToString());\n
    \                   buffer.Clear();\n                }\n            }\n            buffer.Append(c);\n
    \       }\n        return group;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <efabc325fb614015b41de6c94b64f79a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <efabc325fb614015b41de6c94b64f79a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> paren_groups = new List<string>();\n        int
    last_end = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if
    (paren_string[i] == '(') {\n                int j = i + 1;\n                int
    count = 1;\n                while (j < paren_string.Length && count > 0) {\n                    if
    (paren_string[j] == '(') {\n                        count++;\n                    }
    else if (paren_string[j] == ')') {\n                        count--;\n                    }\n
    \                   j++;\n                }\n                if (count == 0) {\n
    \                   if (j != i + 1) {\n                        paren_groups.Add(paren_string.Substring(i,
    j - i));\n                    }\n                    i = j - 1;\n                }\n
    \           }\n        }\n        return paren_groups;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6d356dfe70447fcae4771fb3e41fa32>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6d356dfe70447fcae4771fb3e41fa32>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    start = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                count++;\n
    \           } else if (paren_string[i] == ')') {\n                count--;\n            }\n
    \           if (count == 0) {\n                result.Add(paren_string.Substring(start,
    i - start + 1));\n                start = i + 1;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5109753e68d4d8096849dd5d8bd1427>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5109753e68d4d8096849dd5d8bd1427>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var res = new List<string>();\n        string curr_paren
    = \"\";\n        var par_count = 0;\n        foreach (var c in paren_string) {\n
    \           if (c == ' ') {\n                continue;\n            }\n            if
    (c == '(') {\n                par_count++;\n            }\n            if (c ==
    ')') {\n                par_count--;\n            }\n            curr_paren +=
    c;\n            if (par_count == 0) {\n                res.Add(curr_paren);\n
    \               curr_paren = \"\";\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <311a4a36154a48bcb0ef7a7a85320722>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <311a4a36154a48bcb0ef7a7a85320722>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> l = new List<string>();\n        int start
    = 0;\n        int end = 0;\n        int count = 0;\n        for (int i = 0; i
    < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n                if
    (count == 0) {\n                    start = i;\n                }\n                count++;\n
    \           } else if (paren_string[i] == ')') {\n                count--;\n                if
    (count == 0) {\n                    end = i;\n                    l.Add(paren_string.Substring(start,
    end - start + 1));\n                }\n            }\n        }\n        return
    l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aabd85569bc4930b4e8beaaf2e47eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aabd85569bc4930b4e8beaaf2e47eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    num_open = 0;\n        int num_close = 0;\n        int s = 0;\n        string
    temp;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if
    (paren_string[i] == '(') {\n                num_open++;\n            } else if
    (paren_string[i] == ')') {\n                num_close++;\n            }\n            if
    (num_open == num_close) {\n                result.Add(paren_string.Substring(s,
    i - s + 1));\n                s = i + 1;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e308e17f517421385abf4bd634ec79c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e308e17f517421385abf4bd634ec79c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: Implement this function\n        List<string>
    result = new List<string>();\n        int curStart = 0;\n        int curPos =
    0;\n        int open = 0;\n        while (curPos < paren_string.Length) {\n            if
    (paren_string[curPos] == '(') {\n                if (open == 0) {\n                    curStart
    = curPos;\n                }\n                open++;\n            } else if (paren_string[curPos]
    == ')') {\n                open--;\n                if (open == 0) {\n                    result.Add(paren_string.Substring(curStart,
    curPos - curStart + 1));\n                }\n            }\n            curPos++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a09ab6f5c4ad454fa97a71e0f58f11d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a09ab6f5c4ad454fa97a71e0f58f11d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var ret = new List<string>();\n        var current =
    string.Empty;\n        var in_paren = false;\n        foreach (var c in paren_string)
    {\n            if (c == ' ') {\n                continue;\n            }\n            if
    (c == '(') {\n                in_paren = true;\n            }\n            if
    (c == ')') {\n                if (in_paren) {\n                    ret.Add(current);\n
    \                   current = string.Empty;\n                    in_paren = false;\n
    \               }\n            }\n            if (in_paren) {\n                current
    += c;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e435575d21c4ee399e2fe404cb080d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e435575d21c4ee399e2fe404cb080d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        paren_string = paren_string.Replace(\" \", \"\");\n        var
    result = new List<string>();\n        var current_paren_group = \"\";\n        var
    open_paren_count = 0;\n        foreach (var ch in paren_string) {\n            if
    (ch == '(') {\n                open_paren_count++;\n            } else if (ch
    == ')') {\n                open_paren_count--;\n            }\n            current_paren_group
    += ch;\n            if (open_paren_count == 0) {\n                result.Add(current_paren_group);\n
    \               current_paren_group = \"\";\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a18c6be8ae00460aa8bcaa197ea92755>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a18c6be8ae00460aa8bcaa197ea92755>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> paren_groups = new List<string>();\n        //
    Current paren group string\n        string paren_group = \"\";\n        // Paren
    depth\n        int depth = 0;\n        // Iterate through all of the parens\n
    \       foreach (char paren in paren_string) {\n            // Ignore spaces\n
    \           if (paren == ' ') {\n                continue;\n            }\n            //
    If it's a closing paren\n            if (paren == ')') {\n                // Decrement
    the depth\n                depth--;\n                // If we're back to the surface\n
    \               if (depth == 0) {\n                    // Add the group to the
    list\n                    paren_groups.Add(paren_group);\n                    //
    Clear the group\n                    paren_group = \"\";\n                }\n
    \               // Otherwise\n                else {\n                    // Continue
    the group\n                    paren_group += paren;\n                }\n            }\n
    \           // Otherwise, if it's an opening paren\n            else if (paren
    == '(') {\n                // Increment the depth\n                depth++;\n
    \               // Start the group\n                paren_group += paren;\n            }\n
    \       }\n        return paren_groups;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bad768c8c5e4a29ac25a65fc5042009>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bad768c8c5e4a29ac25a65fc5042009>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <354c0959996a45b5b7d3e8bc39a1d150>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <354c0959996a45b5b7d3e8bc39a1d150>:0 \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int current_pos = 0;\n        List<string> result = new
    List<string>();\n        while (current_pos < paren_string.Length) {\n            int
    start_pos = current_pos;\n            int end_pos = start_pos;\n            int
    balance = 0;\n            while (end_pos < paren_string.Length) {\n                if
    (paren_string[end_pos] == '(') {\n                    balance++;\n                }
    else if (paren_string[end_pos] == ')') {\n                    balance--;\n                }\n
    \               if (balance == 0) {\n                    break;\n                }\n
    \               end_pos++;\n            }\n            result.Add(paren_string.Substring(start_pos,
    end_pos - start_pos + 1));\n            current_pos = end_pos + 1;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4599f7319c0b4d18a74a5a99bd2e9fa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4599f7319c0b4d18a74a5a99bd2e9fa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        Stack<int> stack = new Stack<int>();\n        List<string>
    result = new List<string>();\n        int start = 0;\n        int end = 0;\n        for
    (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] ==
    '(') {\n                stack.Push(i);\n            } else if (paren_string[i]
    == ')') {\n                end = i;\n                start = stack.Pop();\n                result.Add(paren_string.Substring(start,
    end - start + 1));\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3be2c71e416746858d868dd9338099c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3be2c71e416746858d868dd9338099c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var result = new List<string>();\n        int depth =
    0;\n        int start = 0;\n        bool inside_parens = false;\n        for (int
    i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')
    {\n                if (depth == 0) {\n                    start = i;\n                    inside_parens
    = true;\n                }\n                depth++;\n            } else if (paren_string[i]
    == ')') {\n                depth--;\n                if (depth == 0) {\n                    inside_parens
    = false;\n                    result.Add(paren_string.Substring(start, i - start
    + 1));\n                }\n            }\n        }\n        if (inside_parens)
    {\n            throw new ArgumentException(\"Not a valid paren group: \" + paren_string);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98286e9097ba47599fa944d610661c6f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98286e9097ba47599fa944d610661c6f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> res = new List<string>();\n        int balance
    = 0;\n        int last = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                balance++;\n
    \           } else if (paren_string[i] == ')') {\n                balance--;\n
    \           } else {\n                continue;\n            }\n            if
    (balance == 0) {\n                res.Add(paren_string.Substring(last, i - last
    + 1));\n                last = i + 1;\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f8642d3556f4e539afb5ab0cc4df904>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f8642d3556f4e539afb5ab0cc4df904>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> res = new List<string>();\n        int paren_count
    = 0;\n        int i = 0;\n        int j = 0;\n        while (i < paren_string.Length)
    {\n            if (paren_string[i] == '(') {\n                paren_count++;\n
    \           } else if (paren_string[i] == ')') {\n                paren_count--;\n
    \           } else if (paren_string[i] == ' ') {\n                continue;\n
    \           }\n            if (paren_count == 0) {\n                res.Add(paren_string.Substring(j,
    i - j + 1));\n                j = i + 1;\n            }\n            i++;\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660008810
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // todo\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <9a06a3385b0e4d2f924c92c4ef5bed41>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <9a06a3385b0e4d2f924c92c4ef5bed41>:0 \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        string[] strings = paren_string.Split(new string[] {
    \" \" }, StringSplitOptions.RemoveEmptyEntries);\n        List<string> result
    = new List<string>();\n        foreach (string s in strings) {\n            result.Add(s);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c942e2558e4923871a49d65b11b348>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c942e2558e4923871a49d65b11b348>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> parenGroups = new List<string>();\n        int
    currentParenPos = 0;\n        int openParens = 0;\n        int lastOpenParenPos
    = 0;\n        while (currentParenPos < paren_string.Length) {\n            if
    (paren_string[currentParenPos] == '(') {\n                openParens++;\n                if
    (openParens == 1) {\n                    lastOpenParenPos = currentParenPos;\n
    \               }\n            } else if (paren_string[currentParenPos] == ')')
    {\n                openParens--;\n                if (openParens == 0) {\n                    string
    parenGroup = paren_string.Substring(lastOpenParenPos, currentParenPos - lastOpenParenPos
    + 1);\n                    parenGroups.Add(parenGroup);\n                }\n            }\n
    \           currentParenPos++;\n        }\n        return parenGroups;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d6ff10dee6b452a9ac074d7f69ea79f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d6ff10dee6b452a9ac074d7f69ea79f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        //
    Separate all the paren groups into separate strings in 'result'\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5ab8b9400ee4aa4968e2ba427a9306b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5ab8b9400ee4aa4968e2ba427a9306b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var balanced_parens = new List<string>();\n        int
    paren_count = 0;\n        int start_idx = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            var c = paren_string[i];\n            if (c == '(') {\n                paren_count++;\n
    \           } else if (c == ')') {\n                paren_count--;\n            }\n
    \           if (paren_count == 0) {\n                balanced_parens.Add(paren_string.Substring(start_idx,
    i - start_idx + 1));\n                start_idx = i + 1;\n            }\n        }\n
    \       return balanced_parens;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <daf4dd8711d245e587aeba94215d008c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <daf4dd8711d245e587aeba94215d008c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int i = 0;\n        List<string> splitList = new List<string>();\n
    \       for (int j = 0; j < paren_string.Length; j++) {\n            if (paren_string[j]
    == '(') {\n                i++;\n            }\n            else if (paren_string[j]
    == ')') {\n                i--;\n            }\n            if (paren_string[j]
    == ' ' && i == 0) {\n                splitList.Add(paren_string.Substring(0, j));\n
    \               paren_string = paren_string.Substring(j + 1);\n                j
    = 0;\n            }\n        }\n        splitList.Add(paren_string);\n        return
    splitList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0243051173aa44a29ba79502aeb6e835>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0243051173aa44a29ba79502aeb6e835>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    start = 0;\n        while (paren_string.Length > 0) {\n            int idx = paren_string.IndexOf(')');\n
    \           if (idx == -1) {\n                Debug.Assert(paren_string.Length
    == 0);\n                return groups;\n            }\n            groups.Add(paren_string.Substring(0,
    idx + 1));\n            paren_string = paren_string.Substring(idx + 1);\n        }\n
    \       return groups;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <438c82730ff441bbb6b8ff7a0719e78b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <438c82730ff441bbb6b8ff7a0719e78b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var groups = new List<string>();\n        int depth =
    0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length; i++)
    {\n            char c = paren_string[i];\n            if (c == '(') {\n                depth++;\n
    \           } else if (c == ')') {\n                depth--;\n            } else
    if (c == ' ') {\n                continue;\n            } else {\n                throw
    new InvalidOperationException(string.Format(\"Unexpected input at {0}\", i));\n
    \           }\n            if (depth == 0) {\n                groups.Add(paren_string.Substring(start,
    i - start + 1));\n                start = i + 1;\n            }\n        }\n        return
    groups;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3817da485ed241fdb6403ee208510c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3817da485ed241fdb6403ee208510c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // YOUR CODE HERE\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <024c886f126c47589052aeece3d709a5>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <024c886f126c47589052aeece3d709a5>:0
    \n"
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // paren_string is a string containing nested balanced
    groups of parentheses\n        // separate these groups into separate strings
    and return the list of these\n        // the input string will only contain \"(\",
    \")\", and space characters\n        List<string> ret = new List<string>();\n
    \       // go through each character in the string\n        for (int i = 0; i
    < paren_string.Length; i++) {\n            // found an open brace, begin recording
    a group\n            if (paren_string[i] == '(') {\n                int start
    = i;\n                int balance = 1;\n                // keep going until we
    reach an unbalanced close brace\n                while (balance > 0) {\n                    i++;\n
    \                   if (paren_string[i] == '(') balance++;\n                    if
    (paren_string[i] == ')') balance--;\n                }\n                ret.Add(paren_string.Substring(start,
    i - start + 1));\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc8ee8a596d54ec1acb25ac1c54935ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc8ee8a596d54ec1acb25ac1c54935ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        paren_string = paren_string.Replace(\" \", \"\");\n        List<string>
    output = new List<string>();\n        int open = 0;\n        string current_group
    = \"\";\n        for (int i = 0; i < paren_string.Length; i++) {\n            if
    (paren_string[i] == '(') {\n                open++;\n                current_group
    += \"(\";\n            } else {\n                open--;\n                current_group
    += \")\";\n            }\n            if (open == 0) {\n                output.Add(current_group);\n
    \               current_group = \"\";\n            }\n        }\n        return
    output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2192e9e3a85546dfaeb97cfb7de16904>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2192e9e3a85546dfaeb97cfb7de16904>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        StringBuilder
    group = new StringBuilder();\n        int open_count = 0;\n        bool ignore
    = false;\n        foreach (char c in paren_string) {\n            if (c == ' ')
    {\n                continue;\n            }\n            if (c == '(') {\n                open_count++;\n
    \           } else if (c == ')') {\n                open_count--;\n            }\n
    \           if (open_count == 0) {\n                result.Add(group.ToString());\n
    \               group.Clear();\n            } else {\n                group.Append(c);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5b24936a4a140ef9306ce2d310a8448>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5b24936a4a140ef9306ce2d310a8448>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Create the return list\n        List<string> ret =
    new List<string>();\n        // Create a string builder that we can use to create
    our new strings\n        StringBuilder builder = new StringBuilder();\n        //
    Iterate over the input string\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            // Get the current character\n            char c = paren_string[i];\n
    \           // If the character is a \"(\"\n            if (c == '(') {\n                //
    Add it to the current string\n                builder.Append(c);\n            }\n
    \           // If the character is a \")\"\n            else if (c == ')') {\n
    \               // Add it to the current string\n                builder.Append(c);\n
    \               // If we've finished a group, add the current string to the list\n
    \               ret.Add(builder.ToString());\n                // Clear the current
    string so we can start on the next one\n                builder.Clear();\n            }\n
    \       }\n        // Return the list of strings\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59bf9a775a144f299e141071a47b1d08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59bf9a775a144f299e141071a47b1d08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int beg = 0;\n        int end = 0;\n        List<string>
    parens = new List<string>();\n        foreach (char c in paren_string) {\n            if
    (c == '(') {\n                beg++;\n            } else if (c == ')') {\n                end++;\n
    \           }\n            if (beg == end) {\n                parens.Add(paren_string.Substring(0,
    end + 1));\n                paren_string = paren_string.Substring(end + 1);\n
    \               beg = 0;\n                end = 0;\n            }\n        }\n
    \       return parens;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ffc1ca1d3c544543bc32e81d7d1fa8e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ffc1ca1d3c544543bc32e81d7d1fa8e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO - your code here\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <af505d387bc1423d9e8d09d4bdbe7127>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <af505d387bc1423d9e8d09d4bdbe7127>:0
    \n"
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int length = paren_string.Length;\n        char[] array
    = paren_string.ToCharArray();\n        List<string> arr = new List<string>();\n
    \       int openCount = 0;\n        int closeCount = 0;\n        int index = 0;\n
    \       for (int i = 0; i < length; i++) {\n            if (array[i] == '(') {\n
    \               openCount++;\n            }\n            if (array[i] == ')')
    {\n                closeCount++;\n            }\n            if (openCount ==
    closeCount) {\n                arr.Add(paren_string.Substring(index, i-index+1));\n
    \               index = i+1;\n            }\n        }\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b0b685f2a784f9b99a23239fb14e867>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b0b685f2a784f9b99a23239fb14e867>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        //
    intialize variables to keep track of starting and ending indices in the paren_string\n
    \       int start = 0;\n        int end = 0;\n        // initialize a boolean
    to keep track of whether the current group is in a valid state\n        bool valid
    = true;\n        // iterate through the paren_string\n        for (int i = 0;
    i < paren_string.Length; i++) {\n            // for each parenthesis\n            if
    (paren_string[i] == '(') {\n                // if this is the first element in
    the string, set the start index to be this one\n                if (i == 0) {\n
    \                   start = i;\n                }\n                // increment
    the counter to represent the number of open parens\n                end++;\n            }\n
    \           // for each right paren\n            else if (paren_string[i] == ')')
    {\n                // decrement the counter to represent the number of closed
    parens\n                end--;\n                // if the counter is 0, we are
    done with the group\n                if (end == 0) {\n                    // check
    to see if the group was valid\n                    if (valid) {\n                        //
    if it was, add the group to the list and reset the start index\n                        result.Add(paren_string.Substring(start,
    i - start + 1));\n                        start = i + 1;\n                    }\n
    \                   // invalidate the group for the next group\n                    valid
    = false;\n                }\n                // if the counter is less than 0,
    this group is invalid, set the flag and skip to the next group\n                else
    if (end < 0) {\n                    valid = false;\n                    end =
    0;\n                }\n            }\n            // if this is a space\n            else
    if (paren_string[i] == ' ') {\n                // skip to the next character\n
    \               continue;\n            }\n            // if this is a left paren,
    update the valid flag\n            else if (paren_string[i] == '(') {\n                valid
    = true;\n            }\n        }\n        // return the list of paren groups\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e69fb6317cd04329a1956bcd8953a3a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e69fb6317cd04329a1956bcd8953a3a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> answer = new List<string>();\n        int
    left = 0;\n        int right = 0;\n        int start = 0;\n        for (int i
    = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')
    left++;\n            if (paren_string[i] == ')') right++;\n            if (left
    == right) {\n                answer.Add(paren_string.Substring(start, i - start
    + 1));\n                start = i + 1;\n            }\n        }\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ed365e5c9b2461b9f746f866d095e48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ed365e5c9b2461b9f746f866d095e48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Your code here\n        List<string> result = new
    List<string>();\n        //result.Add(\"()\");\n        //result.Add(\"(())\");\n
    \       //result.Add(\"(()())\");\n        int count = 0;\n        string str
    = \"\";\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n            if
    (paren_string[i] == '(')\n            {\n                count++;\n                str
    += \"(\";\n            }\n            else if (paren_string[i] == ')')\n            {\n
    \               count--;\n                str += \")\";\n            }\n            if
    (count == 0)\n            {\n                result.Add(str);\n                str
    = \"\";\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5371509c7f54e04b13b3446489ba33b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5371509c7f54e04b13b3446489ba33b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Fill in your solution here\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44618cc549194cea840303ed10fb3c06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44618cc549194cea840303ed10fb3c06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> nested_parens = new List<string>();\n        //
    Your code goes here\n        // remove spaces\n        string s = \"\";\n        foreach
    (char c in paren_string) {\n            if (c != ' ') {\n                s +=
    c;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n
    \       int count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if
    (s[i] == '(') {\n                count++;\n            } else {\n                count--;\n
    \           }\n            sb.Append(s[i]);\n            if (count == 0) {\n                nested_parens.Add(sb.ToString());\n
    \               sb.Clear();\n            }\n        }\n        return nested_parens;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c794f782cc24b63b0356e3ecda22ab0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c794f782cc24b63b0356e3ecda22ab0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    start = 0;\n        int end = 0;\n        // paren_string = paren_string.Replace(\"
    \", \"\");\n        for (int i = 0; i < paren_string.Length; i++) {\n            if
    (paren_string[i] == '(') {\n                if (paren_string[i + 1] == ' ') {\n
    \                   i++;\n                }\n                start = i;\n            }\n
    \           if (paren_string[i] == ')') {\n                if (paren_string[i
    - 1] == ' ') {\n                    i--;\n                }\n                end
    = i;\n                groups.Add(paren_string.Substring(start, end - start + 1));\n
    \           }\n        }\n        return groups;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9e82213d8e4e77a8249d7d31ff3ea9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9e82213d8e4e77a8249d7d31ff3ea9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: None
  timestamp: 1660008811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var ans = new List<string>();\n        var curr = \"\";\n
    \       var depth = 0;\n        foreach (var c in paren_string) {\n            if
    (c == ' ') continue;\n            curr += c;\n            if (c == '(') {\n                depth++;\n
    \           } else {\n                depth--;\n                if (depth == 0)
    {\n                    ans.Add(curr);\n                    curr = \"\";\n                }\n
    \           }\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0db2616f29124d9b8f4184f3e5414a91>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0db2616f29124d9b8f4184f3e5414a91>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <354c0959996a45b5b7d3e8bc39a1d150>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <354c0959996a45b5b7d3e8bc39a1d150>:0 \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        StringBuilder
    group = new StringBuilder();\n        bool started = false;\n        for (int
    i = 0; i < paren_string.Length; i++) {\n            char c = paren_string[i];\n
    \           if (c == '(') {\n                if (started) {\n                    group.Append(c);\n
    \               } else {\n                    started = true;\n                }\n
    \           } else if (c == ')') {\n                if (started) {\n                    group.Append(c);\n
    \               }\n            } else if (c == ' ') {\n                if (started)
    {\n                    groups.Add(group.ToString());\n                    group.Clear();\n
    \                   started = false;\n                }\n            }\n        }\n
    \       if (started) {\n            groups.Add(group.ToString());\n        }\n
    \       return groups;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19e33c787435402caaaf357d44e072ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19e33c787435402caaaf357d44e072ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Your code here\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c70d8aca90643e585292cdd2547d2a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c70d8aca90643e585292cdd2547d2a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return new List<string>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        paren_string = paren_string.Replace(\" \", \"\");\n        var
    matches = Regex.Matches(paren_string, @\"\\(\\s*\\)\\s*\");\n        return new
    List<string>(matches.Cast<Match>().Select(match => match.Value));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3o1qnxuz.cs(17,23): error CS0103: The name ''Regex'' does not exist in
    the current context

    /tmp/tmp3o1qnxuz.cs(18,46): error CS0246: The type or namespace name ''Match''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret_list = new List<string>();\n        int
    start = 0;\n        int nested = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                if (nested
    == 0) {\n                    start = i;\n                }\n                nested++;\n
    \           } else if (paren_string[i] == ')') {\n                nested--;\n
    \               if (nested == 0) {\n                    ret_list.Add(paren_string.Substring(start,
    i - start + 1));\n                }\n            }\n        }\n        return
    ret_list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <368c2f22af0a46acad944eeaf4f68263>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <368c2f22af0a46acad944eeaf4f68263>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> res = new List<string>();\n        int open
    = 0;\n        string current_group = \"\";\n        foreach (char c in paren_string)
    {\n            if (c == '(') {\n                open++;\n                current_group
    += c;\n            } else if (c == ')') {\n                open--;\n                current_group
    += c;\n            } else if (c == ' ') {\n                continue;\n            }
    else {\n                throw new ArgumentException(\"The input contains illegal
    characters\");\n            }\n            if (open == 0) {\n                res.Add(current_group);\n
    \               current_group = \"\";\n            }\n        }\n        if (open
    != 0) {\n            throw new ArgumentException(\"The input is not a balanced
    parentheses string\");\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cc5c88b697c43cea8169024452c8148>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cc5c88b697c43cea8169024452c8148>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // ________________________________________________________________________________\n
    \       // You must implement your solution within this method\n        // --------------------------------------------------------------------------------\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <ad8939d244d946e3a5b7b6aeefe9d38f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <ad8939d244d946e3a5b7b6aeefe9d38f>:0
    \n"
  stdout: ''
  timestamp: 1660008807
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    openCount = 0;\n        StringBuilder current = new StringBuilder();\n        foreach
    (char c in paren_string) {\n            if (c == '(') openCount++;\n            else
    if (c == ')') openCount--;\n            if (openCount == 0 && c == ')') {\n                result.Add(current.ToString());\n
    \               current.Clear();\n            } else if (c != ' ') {\n                current.Append(c);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bb89ec2d3db452cb7c6543a5735dec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bb89ec2d3db452cb7c6543a5735dec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> res = new List<string>();\n        string
    cur = \"\";\n        int cnt = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') cnt++;\n            else if (paren_string[i]
    == ')') cnt--;\n            if (cnt > 0) cur += paren_string[i];\n            if
    (cnt == 0 && cur != \"\") {\n                res.Add(cur);\n                cur
    = \"\";\n            }\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b264040e92ba4b18b3d802c987b64df4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b264040e92ba4b18b3d802c987b64df4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    idx = 0;\n        int start_idx = 0;\n        int open_braces = 0;\n        while
    (idx < paren_string.Length) {\n            if (paren_string[idx] == '(') {\n                if
    (open_braces == 0) {\n                    start_idx = idx;\n                }\n
    \               open_braces++;\n            } else if (paren_string[idx] == ')')
    {\n                open_braces--;\n                if (open_braces == 0) {\n                    groups.Add(paren_string.Substring(start_idx,
    idx - start_idx + 1));\n                }\n            }\n            idx++;\n
    \       }\n        return groups;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04760af2557242f4aafaa22811dee68e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04760af2557242f4aafaa22811dee68e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7db3967f8ef84efcad40c1f7209b82e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7db3967f8ef84efcad40c1f7209b82e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // >>> SeparateParenGroups((\"( ) (( )) (( )( ))\"))\n
    \       // (new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))\n
    \       var elem_stack = new Stack<string>();\n        var list_stack = new Stack<List<string>>();\n
    \       list_stack.Push(new List<string>());\n        var finished = false;\n
    \       while (!finished) {\n            finished = true;\n            foreach
    (var c in paren_string) {\n                switch (c) {\n                    case
    '(':\n                        finished = false;\n                        elem_stack.Push(\"(\");\n
    \                       break;\n                    case ')':\n                        finished
    = false;\n                        if (elem_stack.Peek() == \"(\") {\n                            elem_stack.Pop();\n
    \                           var str = \"\";\n                            while
    (elem_stack.Count > 0 && elem_stack.Peek() != \"(\") {\n                                str
    = elem_stack.Pop() + str;\n                            }\n                            if
    (elem_stack.Count > 0) {\n                                elem_stack.Pop();\n
    \                           }\n                            elem_stack.Push(str);\n
    \                       }\n                        break;\n                    case
    ' ':\n                        break;\n                    default:\n                        finished
    = false;\n                        elem_stack.Push(c.ToString());\n                        break;\n
    \               }\n            }\n            if (elem_stack.Count == 1) {\n                if
    (elem_stack.Peek() != \"(\") {\n                    if (elem_stack.Peek() != \"\")
    {\n                        list_stack.Peek().Add(elem_stack.Pop());\n                    }\n
    \               }\n            }\n            else {\n                while (elem_stack.Count
    > 0) {\n                    var str = elem_stack.Pop();\n                    if
    (str != \"(\") {\n                        list_stack.Peek().Add(str);\n                    }\n
    \               }\n            }\n        }\n        return list_stack.Pop();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660008812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return new List<string>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        string newstring = \"\";\n        int i = 0;\n        List<string>
    listofparen = new List<string>();\n        while (i < paren_string.Length) {\n
    \           if (paren_string[i] == ' ') {\n                i++;\n                continue;\n
    \           }\n            string paren = \"\";\n            while (paren_string[i]
    != ' ') {\n                paren += paren_string[i];\n                i++;\n            }\n
    \           listofparen.Add(paren);\n        }\n        //foreach (string s in
    listofparen) {\n        //    Console.WriteLine(s);\n        //}\n        return
    listofparen;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SeparateParenGroups (System.String paren_string)
    [0x0004f] in <130b7d98e2534043ad153b14c158f179>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <130b7d98e2534043ad153b14c158f179>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SeparateParenGroups (System.String paren_string) [0x0004f]
    in <130b7d98e2534043ad153b14c158f179>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <130b7d98e2534043ad153b14c158f179>:0 \n"
  stdout: ''
  timestamp: 1660008807
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <e10fb47a48984ba9b26f29d2b1e830eb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <e10fb47a48984ba9b26f29d2b1e830eb>:0
    \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var test = paren_string.Replace(\" \", \"\");\n        var
    separated = new List<string>();\n        var open_parens = new Stack<int>();\n
    \       for (int i = 0; i < test.Length; i++) {\n            if (test[i] == '(')
    {\n                open_parens.Push(i);\n            } else if (test[i] == ')')
    {\n                var start = open_parens.Pop();\n                separated.Add(test.Substring(start,
    i - start + 1));\n            }\n        }\n        return separated;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcbe7b4f82fa4222905c03e7d3dd2a61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcbe7b4f82fa4222905c03e7d3dd2a61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var result = new List<string>();\n        var stringBuilder
    = new StringBuilder();\n        var openParens = 0;\n        foreach (var c in
    paren_string) {\n            if (c == ' ') {\n                continue;\n            }\n
    \           if (c == '(') {\n                openParens++;\n            }\n            if
    (c == ')') {\n                openParens--;\n            }\n            stringBuilder.Append(c);\n
    \           if (openParens == 0) {\n                result.Add(stringBuilder.ToString());\n
    \               stringBuilder.Clear();\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8788588bf7944faa9f3172f6f37b2e3b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8788588bf7944faa9f3172f6f37b2e3b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        int start
    = 0;\n        int end = 0;\n        int depth = 0;\n        foreach (char c in
    paren_string) {\n            if (c == '(') depth++;\n            if (c == ')')
    depth--;\n            if (depth == 0) {\n                ret.Add(paren_string.Substring(start,
    end - start + 1));\n                start = end + 1;\n            }\n            end++;\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45d08515695f42499b0e74902903ff2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45d08515695f42499b0e74902903ff2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        string
    group = \"\";\n        int count = 0;\n        foreach (char c in paren_string)
    {\n            if (c == '(') {\n                count++;\n            } else if
    (c == ')') {\n                count--;\n            }\n            if (count ==
    0 && group != \"\") {\n                groups.Add(group);\n                group
    = \"\";\n            } else if (c != ' ') {\n                group += c;\n            }\n
    \       }\n        if (group != \"\") {\n            groups.Add(group);\n        }\n
    \       return groups;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b36cfb824a41408f8581649e6754eb48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b36cfb824a41408f8581649e6754eb48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var strs = new List<string>();\n        var curr = new
    StringBuilder();\n        var depth = 0;\n        foreach (var c in paren_string)
    {\n            if (c == ' ') continue;\n            if (c == '(') {\n                depth++;\n
    \               curr.Append(c);\n            } else if (c == ')') {\n                depth--;\n
    \               curr.Append(c);\n                if (depth == 0) {\n                    strs.Add(curr.ToString());\n
    \                   curr.Clear();\n                }\n            }\n        }\n
    \       return strs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5a2973196a84d32b10592b6d6860a5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5a2973196a84d32b10592b6d6860a5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    left = 0;\n        int right = 0;\n        int i = 0;\n        int group_end =
    0;\n        while (i < paren_string.Length) {\n            if (paren_string[i]
    == '(') {\n                left++;\n            } else if (paren_string[i] ==
    ')') {\n                right++;\n            }\n            if (left == right)
    {\n                groups.Add(paren_string.Substring(group_end, i + 1 - group_end));\n
    \               group_end = i + 1;\n            }\n            i++;\n        }\n
    \       return groups;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <090e2c63ec29463ebbf0fb5fb9493cd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <090e2c63ec29463ebbf0fb5fb9493cd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        int i
    = 0;\n        while (i < paren_string.Length) {\n            int start = i;\n
    \           int open = 0;\n            int close = 0;\n            while (i <
    paren_string.Length) {\n                if (paren_string[i] == '(') {\n                    ++open;\n
    \               } else if (paren_string[i] == ')') {\n                    ++close;\n
    \               }\n                if (open == close) {\n                    ret.Add(paren_string.Substring(start,
    i - start + 1));\n                    break;\n                }\n                ++i;\n
    \           }\n            ++i;\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34df205a633947dca862ccaf4a18cbb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34df205a633947dca862ccaf4a18cbb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // return a list of strings with each separate group
    (including parenthesis)\n        var groups = new List<string>();\n        int
    depth = 0;\n        StringBuilder sb = new StringBuilder();\n        foreach (char
    c in paren_string) {\n            if (c == '(') {\n                depth++;\n
    \               sb.Append(c);\n            } else if (c == ')') {\n                depth--;\n
    \               sb.Append(c);\n                if (depth == 0) {\n                    groups.Add(sb.ToString());\n
    \                   sb.Clear();\n                }\n            } else if (c ==
    ' ') {\n                // ignore\n            } else {\n                throw
    new Exception(\"Invalid character in input\");\n            }\n        }\n        return
    groups;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b1352e47e6947c88c1039a79bfe9afe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b1352e47e6947c88c1039a79bfe9afe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        paren_string = paren_string.Replace(\" \", \"\");\n        var
    result = new List<string>();\n        var current_group = new StringBuilder();\n
    \       var depth = 0;\n        foreach (var ch in paren_string) {\n            if
    (ch == '(')\n                depth++;\n            else\n                depth--;\n
    \           current_group.Append(ch);\n            if (depth == 0) {\n                result.Add(current_group.ToString());\n
    \               current_group.Clear();\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79fc35158fbd4e26a78502c4a249cb0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79fc35158fbd4e26a78502c4a249cb0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008807
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: Complete this method\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <e911ec6aaccf411ebc3581c5ea760b21>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <e911ec6aaccf411ebc3581c5ea760b21>:0
    \n"
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    left_parens = 0;\n        int start_idx = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                if (left_parens
    == 0) {\n                    start_idx = i;\n                }\n                left_parens++;\n
    \           } else if (paren_string[i] == ')') {\n                left_parens--;\n
    \               if (left_parens == 0) {\n                    result.Add(paren_string.Substring(start_idx,
    i - start_idx + 1));\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <649d1cc1d5ea4848b5dd86e77c02fca0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <649d1cc1d5ea4848b5dd86e77c02fca0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var ret = new List<string>();\n        var depth = 0;\n
    \       var count = 0;\n        var current = new StringBuilder();\n        foreach
    (var c in paren_string) {\n            if (c == '(') {\n                depth++;\n
    \               current.Append(c);\n            } else if (c == ')') {\n                depth--;\n
    \               current.Append(c);\n            } else if (c == ' ') {\n                continue;\n
    \           } else {\n                throw new ArgumentException(\"Invalid character\");\n
    \           }\n            if (depth == 0) {\n                ret.Add(current.ToString());\n
    \               current.Clear();\n            }\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f27367eecfd41acb717159f3db6c737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f27367eecfd41acb717159f3db6c737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // This function will be called multiple times during
    the test case, so please implement some kind of\n        // caching mechanism
    so that you don't keep doing the same work over and over.\n        // \"Memoization\"
    is the general term for this technique; google it if you're not familiar with
    it.\n        return new List<string>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37f83b58ab4040ef8ca757be1cf294cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37f83b58ab4040ef8ca757be1cf294cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> separate = new List<string>();\n        int
    l = 0;\n        int c = 0;\n        int cl = 0;\n        while (l < paren_string.Length)
    {\n            if (paren_string[l] == '(') {\n                c++;\n                cl++;\n
    \           } else if (paren_string[l] == ')') {\n                cl--;\n            }\n
    \           if (cl == 0) {\n                separate.Add(paren_string.Substring(l
    - c + 1, c));\n                c = 0;\n            }\n            l++;\n        }\n
    \       return separate;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ec3291d17eb47d580a7f0aafb34cfad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ec3291d17eb47d580a7f0aafb34cfad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        string
    curr = \"\";\n        int paren_depth = 0;\n        foreach (char c in paren_string)
    {\n            if (c == '(') {\n                paren_depth++;\n                curr
    += c;\n            } else if (c == ')') {\n                paren_depth--;\n                curr
    += c;\n            } else if (c == ' ') {\n                continue;\n            }
    else {\n                throw new Exception();\n            }\n            if
    (paren_depth == 0) {\n                groups.Add(curr);\n                curr
    = \"\";\n            }\n        }\n        return groups;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77c099d94c41452b95cdaa9b8fa611ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77c099d94c41452b95cdaa9b8fa611ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        StringBuilder
    sb = new StringBuilder();\n        int depth = 0;\n        foreach (char c in
    paren_string) {\n            if (c == ' ') {\n                continue;\n            }\n
    \           if (c == '(') {\n                depth++;\n            }\n            if
    (c == ')') {\n                depth--;\n            }\n            sb.Append(c);\n
    \           if (depth == 0) {\n                groups.Add(sb.ToString());\n                sb.Clear();\n
    \           }\n        }\n        return groups;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965aa0807afc41c5afddaa92622e57d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965aa0807afc41c5afddaa92622e57d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var ret = new List<string>();\n        var pos = 0;\n
    \       while (pos < paren_string.Length) {\n            if (paren_string[pos]
    == ' ') {\n                pos++;\n                continue;\n            }\n
    \           int left_depth = 0;\n            var left_pos = pos;\n            for
    (; pos < paren_string.Length; pos++) {\n                if (paren_string[pos]
    == ' ') {\n                    continue;\n                }\n                if
    (paren_string[pos] == '(') {\n                    left_depth++;\n                }
    else if (paren_string[pos] == ')') {\n                    left_depth--;\n                    if
    (left_depth == 0) {\n                        break;\n                    }\n                }\n
    \           }\n            var right_pos = pos;\n            ret.Add(paren_string.Substring(left_pos,
    right_pos - left_pos + 1));\n            pos++;\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8b36325a7a14e1892f906e0d5c1da8b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8b36325a7a14e1892f906e0d5c1da8b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var groups = new List<string>();\n        var temp =
    \"\";\n        var stack = new Stack<char>();\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            var c = paren_string[i];\n            if (c == '(') {\n                stack.Push(c);\n
    \           } else if (c == ')') {\n                stack.Pop();\n            }\n
    \           if (stack.Count == 0) {\n                groups.Add(temp);\n                temp
    = \"\";\n            } else {\n                temp += c;\n            }\n        }\n
    \       return groups;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8db01129f81340ccbbdbaad338e8276e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8db01129f81340ccbbdbaad338e8276e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        //\n        List<string> result = new List<string>();\n
    \       //\n        int max_count = 0;\n        foreach (char c in paren_string)
    {\n            if (c == '(') {\n                max_count++;\n            }\n
    \       }\n        for (int cut_count = 1; cut_count < max_count; cut_count++)
    {\n            result.Add(SeparateParenGroupsImpl(paren_string, cut_count));\n
    \       }\n        //\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptoj5levw.cs(26,24): error CS0103: The name ''SeparateParenGroupsImpl''
    does not exist in the current context

    '
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var result = new List<string>();\n        var stack =
    new Stack<char>();\n        var start = 0;\n        for (var i = 0; i < paren_string.Length;
    i++) {\n            var c = paren_string[i];\n            if (c == '(') {\n                stack.Push(c);\n
    \           } else if (c == ')') {\n                stack.Pop();\n                if
    (stack.Count == 0) {\n                    result.Add(paren_string.Substring(start,
    i - start + 1));\n                    start = i + 1;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63a33b878c4d4b3aaea1af71c4ab6c9a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63a33b878c4d4b3aaea1af71c4ab6c9a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        paren_string = paren_string.Replace(\" \", string.Empty);\n
    \       List<string> answer = new List<string>();\n        int charIndex = 0;\n
    \       int endIndex = 0;\n        for (int i = 0; i < paren_string.Length; i++)
    {\n            if (paren_string[i] == '(') {\n                charIndex = i;\n
    \               endIndex = paren_string.IndexOf(')', i);\n                string
    s = paren_string.Substring(charIndex, endIndex - charIndex + 1);\n                answer.Add(s);\n
    \               i = endIndex;\n            }\n        }\n        return answer;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b366b28b699472cba7e6fc3535fcd4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b366b28b699472cba7e6fc3535fcd4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Hint: Can you use a stack to keep track of the open
    parentheses?\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <8e8f62abecb845bbbefdabb24ba4106f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <8e8f62abecb845bbbefdabb24ba4106f>:0
    \n"
  stdout: ''
  timestamp: 1660008808
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // You write this\n        int[] arr = new int[paren_string.Length];\n
    \       List<string> strings = new List<string>();\n        for (int i = 0; i
    < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\n                arr[i]
    = 1;\n            else if (paren_string[i] == ')')\n                arr[i] = -1;\n
    \           else\n                arr[i] = 0;\n        }\n        // Find first
    open bracket\n        int index = 0;\n        while (arr[index] != 1)\n            index++;\n
    \       int open = index;\n        // Find closing bracket\n        while (arr[index]
    != -1)\n            index++;\n        int close = index;\n        // Remove all
    brackets\n        for (int i = 0; i < arr.Length; i++) {\n            if (arr[i]
    == 1 || arr[i] == -1)\n                arr[i] = 0;\n        }\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <c39465829ac64ab38a5059543460068a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <c39465829ac64ab38a5059543460068a>:0
    \n"
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    start = 0;\n        int end = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                start = i;\n
    \           }\n            if (paren_string[i] == ')') {\n                end
    = i;\n                result.Add(paren_string.Substring(start, end - start + 1));\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc1af1c462b94f9e91c06b83556bd0f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc1af1c462b94f9e91c06b83556bd0f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var stack = new Stack<char>();\n        var ret = new
    List<string>();\n        var cur = \"\";\n        foreach (var c in paren_string)
    {\n            if (c == ' ') {\n                continue;\n            }\n            if
    (c == '(') {\n                if (stack.Count > 0) {\n                    cur
    += c;\n                }\n                stack.Push(c);\n            } else if
    (c == ')') {\n                if (stack.Count == 0) {\n                    throw
    new ArgumentException(\"too many )\");\n                }\n                stack.Pop();\n
    \               if (stack.Count == 0) {\n                    ret.Add(cur + c);\n
    \                   cur = \"\";\n                } else {\n                    cur
    += c;\n                }\n            } else {\n                throw new ArgumentException(\"unexpected
    \" + c);\n            }\n        }\n        if (stack.Count > 0) {\n            throw
    new ArgumentException(\"too many (\");\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d22aed996064a219b5d897a3ad0aa5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d22aed996064a219b5d897a3ad0aa5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var result = new List<string>();\n        int cur_index
    = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            switch
    (paren_string[i]) {\n                case '(':\n                    cur_index
    = i;\n                    break;\n                case ')':\n                    if
    (i == cur_index + 1) {\n                        result.Add(\"()\");\n                    }
    else {\n                        result.Add(paren_string.Substring(cur_index, i
    - cur_index + 1));\n                    }\n                    break;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4297c61dd194a4e93f6821d260ab138>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4297c61dd194a4e93f6821d260ab138>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var result = new List<string>();\n        var groups
    = new List<string>();\n        var cur_group = \"\";\n        var paren_stack
    = new Stack<char>();\n        foreach (var c in paren_string) {\n            if
    (c == ' ') {\n                continue;\n            }\n            if (c == '(')
    {\n                paren_stack.Push(c);\n            } else if (c == ')') {\n
    \               paren_stack.Pop();\n            }\n            cur_group += c;\n
    \           if (paren_stack.Count == 0) {\n                groups.Add(cur_group);\n
    \               cur_group = \"\";\n            }\n        }\n        return groups;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3479c812b8d54e7492eea4e222b9bfd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3479c812b8d54e7492eea4e222b9bfd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    i = 0;\n        while (i < paren_string.Length) {\n            int j = i;\n            int
    depth = 0;\n            while (j < paren_string.Length) {\n                if
    (paren_string[j] == '(') {\n                    depth++;\n                } else
    if (paren_string[j] == ')') {\n                    depth--;\n                }\n
    \               if (depth == 0) {\n                    break;\n                }\n
    \               j++;\n            }\n            result.Add(paren_string.Substring(i,
    j - i + 1));\n            i = j + 1;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d38b70b340ec48eb99ce78bc9631ae22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d38b70b340ec48eb99ce78bc9631ae22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        if
    (string.IsNullOrEmpty(paren_string)) {\n            return result;\n        }\n
    \       int last_group_start = 0;\n        int open_count = 0;\n        for (int
    i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')
    {\n                open_count++;\n            } else if (paren_string[i] == ')')
    {\n                open_count--;\n            }\n            if (open_count ==
    0) {\n                result.Add(paren_string.Substring(last_group_start, i +
    1 - last_group_start));\n                last_group_start = i + 1;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee193c693a644877b04012afa3a40bef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee193c693a644877b04012afa3a40bef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // This function should return the list of strings that
    are separate balanced and nested groups of parentheses\n        // within the
    input string (see function description for more details).\n        // A string
    is balanced if every opening parentheses is closed by a matching closing parentheses.\n
    \       // A string is nested if every closing parentheses has a matching opening
    parentheses before it.\n        // For example:\n        // >>> SeparateParenGroups((\"(
    ) (( )) (( )( ))\"))\n        // (new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"(()())\"}))\n        // >>> SeparateParenGroups((\"()
    (( ))( )) ((( )) ( ) (()())\"))\n        // (new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"()()\"}))\n        // You can assume that every input
    string is well-formed (e.g. if one group is valid, all will be)\n        // and
    that every group of parentheses is separated by at least one space.\n        //
    You should also assume that the input string has no nested parentheses (i.e. no
    \"((\" or \"))\")\n        // PRECONDITION: the input string is well-formed, no
    nested parentheses\n        int cnt = 0;\n        bool last_was_open = false;\n
    \       List<string> sub_groups = new List<string>();\n        StringBuilder sub_group
    = new StringBuilder();\n        foreach (char c in paren_string) {\n            if
    (c == '(') {\n                cnt++;\n                last_was_open = true;\n
    \           } else if (c == ')') {\n                cnt--;\n                last_was_open
    = false;\n            }\n            if (cnt == 0 && !last_was_open) {\n                sub_groups.Add(sub_group.ToString());\n
    \               sub_group = new StringBuilder();\n            } else {\n                sub_group.Append(c);\n
    \           }\n        }\n        return sub_groups;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce22f4fd53954bba823f141e10d49e3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce22f4fd53954bba823f141e10d49e3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: write your code here.\n        List<string>
    solution = new List<string>();\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            int open = 0;\n            int close = 0;\n            if
    (paren_string[i] == '(') {\n                open++;\n                int j = i
    + 1;\n                while (j < paren_string.Length) {\n                    if
    (paren_string[j] == '(') {\n                        open++;\n                    }\n
    \                   if (paren_string[j] == ')') {\n                        close++;\n
    \                   }\n                    if (open == close) {\n                        solution.Add(paren_string.Substring(i,
    j - i + 1));\n                        break;\n                    }\n                    j++;\n
    \               }\n            }\n        }\n        return solution;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d207b290835488fac9ea5a53da7023e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d207b290835488fac9ea5a53da7023e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return new List<string>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    level = 0;\n        StringBuilder sb = new StringBuilder();\n        for (int
    i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')
    {\n                level++;\n                sb.Append('(');\n            } else
    if (paren_string[i] == ')') {\n                level--;\n                sb.Append(')');\n
    \           }\n            if (level == 0) {\n                groups.Add(sb.ToString());\n
    \               sb.Clear();\n            }\n        }\n        return groups;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f347aca7ad749c8be856a86e79828b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f347aca7ad749c8be856a86e79828b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var paren_groups = new List<string>();\n        var open_count
    = 0;\n        var cur_str = \"\";\n        foreach (var c in paren_string) {\n
    \           if (c == '(') {\n                open_count++;\n                cur_str
    += c;\n            } else if (c == ')') {\n                open_count--;\n                cur_str
    += c;\n                if (open_count == 0) {\n                    paren_groups.Add(cur_str);\n
    \                   cur_str = \"\";\n                }\n            } else if
    (c == ' ') {\n                continue;\n            } else {\n                throw
    new Exception(\"I expected all characters to be either ( or )!\");\n            }\n
    \       }\n        return paren_groups;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd666be6b55a40b29e473dfdccb9eb09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd666be6b55a40b29e473dfdccb9eb09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int startIdx = -1;\n        int endIdx = -1;\n        int
    parenCount = 0;\n        List<string> parenGroups = new List<string>();\n        for
    (int idx = 0; idx < paren_string.Length; idx++) {\n            if (paren_string[idx]
    == '(') {\n                if (parenCount == 0) {\n                    startIdx
    = idx;\n                }\n                parenCount++;\n            } else if
    (paren_string[idx] == ')') {\n                parenCount--;\n                if
    (parenCount == 0) {\n                    endIdx = idx;\n                    parenGroups.Add(paren_string.Substring(startIdx,
    endIdx - startIdx + 1));\n                }\n            }\n        }\n        return
    parenGroups;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <082ba24b993741bca23b3553256dffa7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <082ba24b993741bca23b3553256dffa7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var result = new List<string>();\n        var current
    = \"\";\n        foreach (var c in paren_string) {\n            if (c == ' ')
    {\n                continue;\n            }\n            if (c == '(') {\n                current
    += c;\n            } else if (c == ')') {\n                current += c;\n                if
    (IsBalanced(current)) {\n                    result.Add(current);\n                    current
    = \"\";\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg1se1uqm.cs(26,21): error CS0103: The name ''IsBalanced'' does not exist
    in the current context

    '
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> results = new List<string>();\n        string
    current_paren_group = \"\";\n        int current_paren_depth = 0;\n        int
    open_parens = 0;\n        foreach (char c in paren_string) {\n            if (c
    == '(') {\n                current_paren_depth++;\n                open_parens++;\n
    \           } else if (c == ')') {\n                current_paren_depth--;\n                open_parens--;\n
    \           }\n            current_paren_group += c;\n            if (current_paren_depth
    == 0) {\n                if (open_parens == 0) {\n                    results.Add(current_paren_group);\n
    \                   current_paren_group = \"\";\n                } else {\n                    throw
    new Exception(\"Invalid input string\");\n                }\n            }\n        }\n
    \       return results;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70a10a100a8a4786ab719ca01fff574f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70a10a100a8a4786ab719ca01fff574f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var groups = new List<string>();\n        var current_group
    = \"\";\n        var paren_count = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                paren_count++;\n
    \               current_group += paren_string[i];\n            } else if (paren_string[i]
    == ')') {\n                paren_count--;\n                current_group += paren_string[i];\n
    \               if (paren_count == 0) {\n                    groups.Add(current_group);\n
    \                   current_group = \"\";\n                }\n            }\n
    \       }\n        return groups;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f440bb578f04bff9f25340241ccf910>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f440bb578f04bff9f25340241ccf910>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        //throw new NotImplementedException();\n        List<string>
    parens = new List<string>();\n        int level = 0;\n        string temp = \"\";\n
    \       for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]
    == '(') {\n                if (level == 0)\n                    temp = \"\";\n
    \               level++;\n            }\n            else if (paren_string[i]
    == ')') {\n                level--;\n                if (level == 0)\n                    parens.Add(temp);\n
    \           }\n            else if (paren_string[i] != ' ') {\n                temp
    += paren_string[i];\n            }\n        }\n        return parens;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8280c25611644043b25a35433e6a555a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8280c25611644043b25a35433e6a555a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        Stack<int> s = new Stack<int>();\n        int n = paren_string.Length;\n
    \       List<string> res = new List<string>();\n        int i = 0;\n        while
    (i < n) {\n            if (paren_string[i] == '(') {\n                s.Push(i);\n
    \           } else if (paren_string[i] == ')') {\n                int start =
    s.Pop();\n                res.Add(paren_string.Substring(start, i - start + 1));\n
    \           }\n            i++;\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f039ababc1be4207a22cfe6f6bad0db5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f039ababc1be4207a22cfe6f6bad0db5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> to_return = new List<string>();\n        int
    start = 0;\n        int end = 0;\n        int depth = 0;\n        while (end <
    paren_string.Length) {\n            if (paren_string[end] == '(') {\n                depth++;\n
    \           } else if (paren_string[end] == ')') {\n                depth--;\n
    \           }\n            if (depth == 0) {\n                to_return.Add(paren_string.Substring(start,
    end - start + 1));\n                start = end + 1;\n            }\n            end++;\n
    \       }\n        return to_return;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <357859c89ed9444c8216c41a875869bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <357859c89ed9444c8216c41a875869bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var parts = new List<string>();\n        var sb = new
    StringBuilder();\n        int depth = 0;\n        foreach (var c in paren_string)
    {\n            if (c == ' ') {\n                continue;\n            }\n            sb.Append(c);\n
    \           if (c == '(') {\n                depth++;\n            } else if (c
    == ')') {\n                depth--;\n                if (depth == 0) {\n                    parts.Add(sb.ToString());\n
    \                   sb.Clear();\n                }\n            }\n        }\n
    \       return parts;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d8618116daa46abb43c085997339ac7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d8618116daa46abb43c085997339ac7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <7022a51efab54acd8cbfe238537e5667>:0
    \n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    open = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            char c = paren_string[i];\n            if (c == '(') {\n                if
    (open == 0) {\n                    start = i;\n                }\n                open++;\n
    \           } else if (c == ')') {\n                open--;\n                if
    (open == 0) {\n                    groups.Add(paren_string.Substring(start, i
    - start + 1));\n                }\n            }\n        }\n        return groups;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <124f2db7a78049cf8992b71f4d6b8ba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <124f2db7a78049cf8992b71f4d6b8ba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> paren_groups = new List<string>();\n        int
    counter = 0;\n        int open = 0;\n        int close = 0;\n        string s
    = \"\";\n        foreach (char c in paren_string) {\n            if (c == '(')
    {\n                open += 1;\n                s += \"(\";\n            }\n            else
    if (c == ')') {\n                close += 1;\n                s += \")\";\n            }\n
    \           if (open == close) {\n                counter += 1;\n                paren_groups.Add(s);\n
    \               s = \"\";\n            }\n        }\n        return paren_groups;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f84b338333764234bbb524117f2e202a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f84b338333764234bbb524117f2e202a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> ret = new List<string>();\n        var count
    = 0;\n        var i = 0;\n        while (i < paren_string.Length) {\n            if
    (paren_string[i] == '(') {\n                count++;\n            } else if (paren_string[i]
    == ')') {\n                count--;\n            }\n            if (count == 0)
    {\n                ret.Add(paren_string.Substring(0, i + 1));\n                paren_string
    = paren_string.Substring(i + 1);\n                i = 0;\n            } else {\n
    \               i++;\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32e085e540d448f2a139fad0290f6636>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32e085e540d448f2a139fad0290f6636>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    numOpen = 0;\n        StringBuilder stringToAdd = new StringBuilder();\n        foreach
    (char c in paren_string) {\n            if (c == '(') {\n                if (numOpen
    == 0) {\n                    stringToAdd.Clear();\n                }\n                stringToAdd.Append(c);\n
    \               numOpen++;\n            } else if (c == ')') {\n                numOpen--;\n
    \               stringToAdd.Append(c);\n                if (numOpen == 0) {\n
    \                   result.Add(stringToAdd.ToString());\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1604efde60e94f21950ff753d037413f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1604efde60e94f21950ff753d037413f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Not implemented\n        // Use the stack to keep
    track of open parentheses\n        // Whenever you find a closing parentheses
    it closes the previous open parentheses\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <6c48a118b4034cba9a6d5ed253de064a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <6c48a118b4034cba9a6d5ed253de064a>:0
    \n"
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // YOUR CODE HERE\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <024c886f126c47589052aeece3d709a5>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <024c886f126c47589052aeece3d709a5>:0
    \n"
  stdout: ''
  timestamp: 1660008806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    start = 0;\n        // when true, we're in the middle of a paren group\n        bool
    paren = false;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if
    (paren_string[i] == '(') {\n                if (!paren) {\n                    start
    = i;\n                }\n                paren = true;\n            } else if
    (paren_string[i] == ')') {\n                paren = false;\n                result.Add(paren_string.Substring(start,
    i-start+1));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccb50a91cb364f798f9ec8ea3925fdf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccb50a91cb364f798f9ec8ea3925fdf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var stack = new Stack<char>();\n        var delimiters
    = new List<int>();\n        for (int i = 0; i < paren_string.Length; i++) {\n
    \           if (paren_string[i] == ' ') {\n                continue;\n            }\n
    \           if (paren_string[i] == '(') {\n                stack.Push(paren_string[i]);\n
    \           } else {\n                if (stack.Count == 0) {\n                    throw
    new ArgumentException(\"Invalid paren_string\");\n                }\n                stack.Pop();\n
    \               if (stack.Count == 0) {\n                    delimiters.Add(i);\n
    \               }\n            }\n        }\n        var result = new List<string>();\n
    \       int start = 0;\n        foreach (var end in delimiters) {\n            result.Add(paren_string.Substring(start,
    end - start + 1));\n            start = end + 1;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d29c87567bf043a3b1b7327a618ce036>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d29c87567bf043a3b1b7327a618ce036>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int op = 0;\n        int cl = 0;\n        List<string>
    result = new List<string>();\n        List<char> row = new List<char>();\n        foreach
    (char p in paren_string) {\n            if (p == '(') {\n                if (op
    == 0) {\n                    op++;\n                    row.Add(p);\n                }
    else {\n                    op++;\n                    row.Add(p);\n                }\n
    \           } else if (p == ')') {\n                if (cl == 0) {\n                    cl++;\n
    \                   row.Add(p);\n                } else {\n                    cl++;\n
    \                   row.Add(p);\n                }\n            }\n            if
    (op > 0 && op == cl) {\n                result.Add(string.Join(\"\", row));\n
    \               row.Clear();\n                op = 0;\n                cl = 0;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a0018822de74c63aee5c4bfdbb84b68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a0018822de74c63aee5c4bfdbb84b68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Solution: use a simple algorithm:\n        //  1.
    iterate over each character in the string\n        //  2. if we see an open parentheses,
    then:\n        //      a. create a new string\n        //      b. set a counter
    to 1\n        //      c. iterate until we see a closing parentheses and decrement
    the counter\n        //      d. break out of the loop after we see a closing parentheses
    and append to the list\n        //      e. return the list\n        // Runtime:
    O(n)\n        // TODO: Add your code here!\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplcc6e9ff.cs(15,32): error CS0161: ''Problem.SeparateParenGroups(string)'':
    not all code paths return a value

    '
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> result = new List<string>();\n        int
    depth = 0;\n        int last_start = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n
    \           } else if (paren_string[i] == ')') {\n                depth--;\n                if
    (depth == 0) {\n                    result.Add(paren_string.Substring(last_start,
    i - last_start + 1));\n                    last_start = i + 1;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) ()
    ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb9482256dc247b7b43c667ddc7d23c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb9482256dc247b7b43c667ddc7d23c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Example input: \"()(())()\"\n        string curr_string
    = \"\";\n        var ret_list = new List<string>();\n        var stack = new Stack<char>();\n
    \       // iterate through the whole string\n        foreach (char c in paren_string)
    {\n            // if we hit a space, continue\n            if (c == ' ') continue;\n
    \           // if we hit an open paren, push it to our stack\n            if (c
    == '(') {\n                stack.Push(c);\n                curr_string += c;\n
    \           }\n            // if we hit a closed paren, check if it matches the
    top of the stack\n            if (c == ')') {\n                // if the stack
    is empty, then the closed paren doesn't have an opening paren\n                if
    (stack.Count == 0) {\n                    return new List<string>();\n                }\n
    \               // if the stack is not empty, check if the top of the stack is
    an open paren\n                if (stack.Peek() == '(') {\n                    //
    if we find a matching open paren, pop it off\n                    stack.Pop();\n
    \                   curr_string += c;\n                    // if the stack is
    empty, then we found a complete grouping and can add it to our list\n                    if
    (stack.Count == 0) {\n                        ret_list.Add(curr_string);\n                        curr_string
    = \"\";\n                    }\n                }\n                // if the stack
    isn't empty and it's not an open paren, then this closed paren doesn't have an
    opening paren\n                else {\n                    return new List<string>();\n
    \               }\n            }\n        }\n        // if the stack is not empty
    at the end, that means there are open parens without closed parens\n        if
    (stack.Count != 0) {\n            return new List<string>();\n        }\n        return
    ret_list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20f1cd434c26405b9dc238444bebf2e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20f1cd434c26405b9dc238444bebf2e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO - add your implementation here\n        string
    str = paren_string.Replace(\" \", \"\");\n        List<string> strs = new List<string>();\n
    \       int i = 0;\n        while (i < str.Length) {\n            int j = i;\n
    \           int count = 0;\n            while (j < str.Length) {\n                if
    (str[j] == '(') {\n                    count++;\n                } else if (str[j]
    == ')') {\n                    count--;\n                }\n                if
    (count == 0) {\n                    break;\n                }\n                j++;\n
    \           }\n            if (j == str.Length) {\n                return strs;\n
    \           }\n            strs.Add(str.Substring(i, j - i + 1));\n            i
    = j + 1;\n        }\n        return strs;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5fb92c973d44a7593ee13e60ae6aa85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5fb92c973d44a7593ee13e60ae6aa85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <354c0959996a45b5b7d3e8bc39a1d150>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <354c0959996a45b5b7d3e8bc39a1d150>:0 \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var list = new List<string>();\n        var start = 0;\n
    \       for (var i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]
    == '(') {\n                if (paren_string[i + 1] == ' ') {\n                    list.Add(paren_string.Substring(start,
    i - start + 1));\n                    start = i + 2;\n                }\n            }\n
    \       }\n        list.Add(paren_string.Substring(start, paren_string.Length
    - start));\n        return list;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3568d4a63ae94b4f97b20220d34d67d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3568d4a63ae94b4f97b20220d34d67d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // YOUR SOLUTION HERE\n        List<string> res = new
    List<string>();\n        string current_group = \"\";\n        int layer = 0;\n
    \       foreach (char c in paren_string) {\n            if (c == '(') {\n                if
    (layer == 0) {\n                    current_group = \"\";\n                }\n
    \               layer++;\n                current_group += c;\n            } else
    if (c == ')') {\n                layer--;\n                current_group += c;\n
    \               if (layer == 0) {\n                    res.Add(current_group);\n
    \               }\n            } else if (c != ' ') {\n                current_group
    += c;\n            }\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <561708ef734f439ab6829133bc4b15f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <561708ef734f439ab6829133bc4b15f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return new List<string>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        int openCount = 0;\n        int start = 0;\n        List<string>
    parenGroups = new List<string>();\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            char current = paren_string[i];\n            if (current ==
    '(') {\n                openCount++;\n            } else if (current == ')') {\n
    \               openCount--;\n            } else {\n                continue;\n
    \           }\n            if (openCount == 0) {\n                parenGroups.Add(paren_string.Substring(start,
    i - start + 1));\n                start = i + 1;\n            }\n        }\n        return
    parenGroups;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <edd32b68dd1445d7886f5fa2c384ea5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <edd32b68dd1445d7886f5fa2c384ea5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        return new List<string>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))
    () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\",
    (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <290a02eb208c434da3b5389adcc6a6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        var res = new List<string>();\n        int open_count
    = 0;\n        int start_index = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                open_count++;\n
    \           } else if (paren_string[i] == ')') {\n                open_count--;\n
    \           } else {\n                continue;\n            }\n            if
    (open_count == 0) {\n                res.Add(paren_string.Substring(start_index,
    i - start_index + 1));\n                start_index = i + 1;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32ef8ea6c94e416f98e8f8b5090c70eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32ef8ea6c94e416f98e8f8b5090c70eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> output = new List<string>();\n        //
    Replacing all spaces in string\n        // string no_spaces = paren_string.Replace(\"
    \", string.Empty);\n        string no_spaces = paren_string.Replace(\" \", \"\");\n
    \       // Now we use a Queue to keep track of the indices in the string that
    we haven't processed yet\n        Queue<int> unprocessed = new Queue<int>();\n
    \       unprocessed.Enqueue(0);\n        while (unprocessed.Count > 0) {\n            //
    Pop the first index and use it as our starting point\n            int curr_index
    = unprocessed.Dequeue();\n            // If we've already processed everything
    before the current index, then we can return what we have\n            if (curr_index
    >= no_spaces.Length) {\n                return output;\n            }\n            //
    Get the first two parens and check if they're a pair\n            if (curr_index
    + 1 < no_spaces.Length && no_spaces[curr_index] == '(' && no_spaces[curr_index
    + 1] == ')') {\n                // If the first pair is good, then add it to our
    output\n                output.Add(no_spaces.Substring(curr_index, 2));\n                //
    And add the next index to our queue so we can process it\n                unprocessed.Enqueue(curr_index
    + 2);\n            } else {\n                // The first pair is not good. We
    need to find the end of the first group, which is either the end of the string
    or the end of a group\n                int end_group = no_spaces.IndexOf(')',
    curr_index + 1);\n                if (end_group == -1) {\n                    //
    If there is no ending paren, then the string is invalid\n                    throw
    new ArgumentException(\"Invalid string!\");\n                }\n                //
    Add the group to our output and add the next index to our queue\n                output.Add(no_spaces.Substring(curr_index,
    end_group - curr_index + 1));\n                unprocessed.Enqueue(end_group +
    1);\n            }\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9thdxtsh.cs(49,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp9thdxtsh.cs(56,2): error CS1513: } expected

    '
  timestamp: 1660008809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // TODO: Implement this.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00036] in <b5ad649eeabf4c2a93ccc64fd5ac055e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00036] in <b5ad649eeabf4c2a93ccc64fd5ac055e>:0
    \n"
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> results = new List<string>();\n        var
    paren_stack = new Stack<char>();\n        int start_index = 0;\n        for (int
    i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')
    {\n                paren_stack.Push(paren_string[i]);\n            } else if (paren_string[i]
    == ')') {\n                if (paren_stack.Count == 0) {\n                    throw
    new ArgumentException(\"Unmatched closing parenthesis\");\n                }\n
    \               paren_stack.Pop();\n                if (paren_stack.Count == 0)
    {\n                    // Since we just popped the last open paren, we should
    record the result\n                    results.Add(paren_string.Substring(start_index,
    i - start_index + 1));\n                    start_index = i + 1;\n                }\n
    \           }\n        }\n        if (paren_stack.Count > 0) {\n            throw
    new ArgumentException(\"Unmatched opening parenthesis\");\n        }\n        return
    results;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b62ac5e19d64beaba31f3d64260595a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b62ac5e19d64beaba31f3d64260595a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> groups = new List<string>();\n        int
    paren_count = 0;\n        int start_index = 0;\n        for (int i = 0; i < paren_string.Length;
    i++) {\n            if (paren_string[i] == '(') {\n                paren_count++;\n
    \           } else if (paren_string[i] == ')') {\n                paren_count--;\n
    \           }\n            if (paren_count == 0) {\n                groups.Add(paren_string.Substring(start_index,
    i - start_index + 1));\n                start_index = i + 1;\n            }\n
    \       }\n        return groups;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88f22417335e4d129d113826451b3ae4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88f22417335e4d129d113826451b3ae4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008810
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <354c0959996a45b5b7d3e8bc39a1d150>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <354c0959996a45b5b7d3e8bc39a1d150>:0 \n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        // Note: you can use System.Text.StringBuilder for this\n
    \       // Note: you can use System.Text.RegularExpressions.Regex for this\n        //
    Note: you can use System.Collections.Generic.List<T> for this\n        // Note:
    you can use System.Collections.Generic.Stack<T> for this\n        // Note: you
    can use System.Collections.Generic.Queue<T> for this\n        // Note: you can
    use System.Linq.Enumerable.ToList<T> for this\n        // Note: you can use System.Linq.Enumerable.ToArray<T>
    for this\n        // Note: you can use System.Linq.Enumerable.Aggregate<T> for
    this\n        // Note: you can use System.Linq.Enumerable.Select<T> for this\n
    \       // Note: you can use System.Linq.Enumerable.SelectMany<T> for this\n        //
    Note: you can use System.Linq.Enumerable.Concat<T> for this\n        // Note:
    you can use System.Linq.Enumerable.Zip<T> for this\n        // Note: you can use
    System.Linq.Enumerable.Where<T> for this\n        // Note: you can use System.Linq.Enumerable.First<T>
    for this\n        // Note: you can use System.Linq.Enumerable.FirstOrDefault<T>
    for this\n        // Note: you can use System.Linq.Enumerable.Last<T> for this\n
    \       // Note: you can use System.Linq.Enumerable.LastOrDefault<T> for this\n
    \       // Note: you can use System.Linq.Enumerable.OrderBy<T> for this\n        //
    Note: you can use System.Linq.Enumerable.OrderByDescending<T> for this\n        //
    Note: you can use System.Linq.Enumerable.Reverse<T> for this\n        // Note:
    you can use System.Linq.Enumerable.Sum<T> for this\n        // Note: you can use
    System.Linq.Enumerable.Min<T> for this\n        // Note: you can use System.Linq.Enumerable.Max<T>
    for this\n       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()())
    ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",
    (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()
    (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\",
    (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx4di_gn6.cs(15,32): error CS0161: ''Problem.SeparateParenGroups(string)'':
    not all code paths return a value

    '
  timestamp: 1660008809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input to this function is a string containing multiple groups
    of nested parentheses. Your goal is to\n    // separate those group into separate
    strings and return the list of those.\n    // Separate groups are balanced (each
    open brace is properly closed) and not nested within each other\n    // Ignore
    any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) ((
    )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string
    paren_string) {\n        List<string> res = new List<string>();\n        int i
    = 0;\n        while (i < paren_string.Length) {\n            int paren_count =
    0;\n            int start = i;\n            while (i < paren_string.Length) {\n
    \               if (paren_string[i] == '(') paren_count++;\n                else
    if (paren_string[i] == ')') paren_count--;\n                i++;\n                if
    (paren_count == 0) break;\n            }\n            if (paren_count != 0) {\n
    \               return null;\n            }\n            res.Add(paren_string.Substring(start,
    i - start));\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new
    List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\",
    (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (())
    ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new
    List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(
    ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\",
    (string)\"(()())\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe2f8762b8194b09bf9d9c1e7dc29df7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe2f8762b8194b09bf9d9c1e7dc29df7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008809
