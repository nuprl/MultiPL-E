name: HumanEval_105_by_length
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
  \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\",\
  \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    //\
  \ >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L,\
  \ (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"\
  Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\"\
  , (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty,\
  \ return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n\
  \    // If the list has any strange number ignore it:\n    // >>> ByLength((new\
  \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new\
  \ string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
  \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
  \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
  , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
  Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
  \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
  \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
  }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
  \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
  , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
  \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
  Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
completions: ["        List<string> list = new List<string>();\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            switch ((int)arr[i]) {\n           \
    \     case 1:\n                    list.Add(\"One\");\n                    break;\n\
    \                case 2:\n                    list.Add(\"Two\");\n           \
    \         break;\n                case 3:\n                    list.Add(\"Three\"\
    );\n                    break;\n                case 4:\n                    list.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      list.Add(\"Five\");\n                    break;\n                case 6:\n\
    \                    list.Add(\"Six\");\n                    break;\n        \
    \        case 7:\n                    list.Add(\"Seven\");\n                 \
    \   break;\n                case 8:\n                    list.Add(\"Eight\");\n\
    \                    break;\n                case 9:\n                    list.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        list.Sort();\n\
    \        list.Reverse();\n        return list;", "        Dictionary<long, string>\
    \ map = new Dictionary<long, string>();\n        map[1] = \"One\";\n        map[2]\
    \ = \"Two\";\n        map[3] = \"Three\";\n        map[4] = \"Four\";\n      \
    \  map[5] = \"Five\";\n        map[6] = \"Six\";\n        map[7] = \"Seven\";\n\
    \        map[8] = \"Eight\";\n        map[9] = \"Nine\";\n        arr.Sort();\n\
    \        arr.Reverse();\n        List<string> ret = new List<string>();\n    \
    \    foreach (long x in arr) {\n            if (x >= 1 && x <= 9) {\n        \
    \        ret.Add(map[x]);\n            }\n        }\n        return ret;", " \
    \       arr.Sort();\n        arr.Reverse();\n        List<string> ret = new List<string>();\n\
    \        foreach (long i in arr) {\n            switch (i) {\n               \
    \ case 1:\n                    ret.Add(\"One\");\n                    break;\n\
    \                case 2:\n                    ret.Add(\"Two\");\n            \
    \        break;\n                case 3:\n                    ret.Add(\"Three\"\
    );\n                    break;\n                case 4:\n                    ret.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      ret.Add(\"Five\");\n                    break;\n                case 6:\n\
    \                    ret.Add(\"Six\");\n                    break;\n         \
    \       case 7:\n                    ret.Add(\"Seven\");\n                   \
    \ break;\n                case 8:\n                    ret.Add(\"Eight\");\n \
    \                   break;\n                case 9:\n                    ret.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        return\
    \ ret;", '        return arr.Select(x => ((int)x) <= 9 && ((int)x) >= 1 ? ((int)x).ToString()
    : "").Where(x => x != "").ToList().OrderBy(x => x).Reverse().Select(x => x ==
    "1" ? "One" : x == "2" ? "Two" : x == "3" ? "Three" : x == "4" ? "Four" : x ==
    "5" ? "Five" : x == "6" ? "Six" : x == "7" ? "Seven" : x == "8" ? "Eight" : x
    == "9" ? "Nine" : "").ToList();', "        arr.Sort();\n        arr.Reverse();\n\
    \        List<string> result = new List<string>();\n        foreach (long num\
    \ in arr) {\n            if (num > 0 && num < 10) {\n                switch (num)\
    \ {\n                    case 1:\n                        result.Add(\"One\");\n\
    \                        break;\n                    case 2:\n               \
    \         result.Add(\"Two\");\n                        break;\n             \
    \       case 3:\n                        result.Add(\"Three\");\n            \
    \            break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;", "        var result = new List<string>();\n\
    \        arr.ForEach(it => {\n            if (1 <= it && it <= 9) {\n        \
    \        result.Add(numberToName(it));\n            }\n        });\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        List<string> ret\
    \ = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       switch (arr[i]) {\n                case 1:\n                    ret.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     ret.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    ret.Add(\"Three\");\n                    break;\n       \
    \         case 4:\n                    ret.Add(\"Four\");\n                  \
    \  break;\n                case 5:\n                    ret.Add(\"Five\");\n \
    \                   break;\n                case 6:\n                    ret.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     ret.Add(\"Seven\");\n                    break;\n                case 8:\n\
    \                    ret.Add(\"Eight\");\n                    break;\n       \
    \         case 9:\n                    ret.Add(\"Nine\");\n                  \
    \  break;\n            }\n        }\n        ret.Reverse();\n        return ret;",
  "        var sortMe = arr.Where(i => i <= 9 && i >= 1).ToList();\n        sortMe.Sort();\n\
    \        sortMe.Reverse();\n        var ret = new List<string>();\n        foreach\
    \ (var i in sortMe) {\n            ret.Add(new Dictionary<long, string>{\n   \
    \             {1, \"One\"},\n                {2, \"Two\"},\n                {3,\
    \ \"Three\"},\n                {4, \"Four\"},\n                {5, \"Five\"},\n\
    \                {6, \"Six\"},\n                {7, \"Seven\"},\n            \
    \    {8, \"Eight\"},\n                {9, \"Nine\"}\n            }[i]);\n    \
    \    }\n        return ret;", "        List<string> numNames = new List<string>()\
    \ { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" };\n        List<long> correctNums = new List<long>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0 && arr[i] < 10)\
    \ {\n                correctNums.Add(arr[i]);\n            }\n        }\n    \
    \    correctNums.Sort();\n        correctNums.Reverse();\n        List<string>\
    \ correctNames = new List<string>();\n        for (int i = 0; i < correctNums.Count;\
    \ i++) {\n            correctNames.Add(numNames[(int)correctNums[i] - 1]);\n \
    \       }\n        return correctNames;", "        arr.Sort();\n        arr.Reverse();\n\
    \        List<string> result = new List<string>();\n        foreach (long num\
    \ in arr) {\n            if (num >= 1 && num <= 9) {\n                switch (num)\
    \ {\n                    case 1:\n                        result.Add(\"One\");\n\
    \                        break;\n                    case 2:\n               \
    \         result.Add(\"Two\");\n                        break;\n             \
    \       case 3:\n                        result.Add(\"Three\");\n            \
    \            break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;", '        return new List<string>();', "  \
    \      return arr.Where(i => (i >= 1 && i <= 9))\n            .OrderBy(i => i)\n\
    \            .Reverse()\n            .Select(n => n == 1 ? \"One\" : n == 2 ?\
    \ \"Two\" : n == 3 ? \"Three\" : n == 4 ? \"Four\" : n == 5 ? \"Five\" : n ==\
    \ 6 ? \"Six\" : n == 7 ? \"Seven\" : n == 8 ? \"Eight\" : \"Nine\")\n        \
    \    .ToList();", "        List<string> result = new List<string>();\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n                result.Add(arr[i].ToString());\n            }\n   \
    \     }\n        List<string> result2 = new List<string>();\n        for (int\
    \ i = result.Count - 1; i >= 0; i--) {\n            result2.Add(result[i]);\n\
    \        }\n        for (int i = 0; i < result2.Count; i++) {\n            if\
    \ (result2[i] == \"1\") {\n                result2[i] = \"One\";\n           \
    \ }\n            if (result2[i] == \"2\") {\n                result2[i] = \"Two\"\
    ;\n            }\n            if (result2[i] == \"3\") {\n                result2[i]\
    \ = \"Three\";\n            }\n            if (result2[i] == \"4\") {\n      \
    \          result2[i] = \"Four\";\n            }\n            if (result2[i] ==\
    \ \"5\") {\n                result2[i] = \"Five\";\n            }\n          \
    \  if (result2[i] == \"6\") {\n                result2[i] = \"Six\";\n       \
    \     }\n            if (result2[i] == \"7\") {\n                result2[i] =\
    \ \"Seven\";\n            }\n            if (result2[i] == \"8\") {\n        \
    \        result2[i] = \"Eight\";\n            }\n            if (result2[i] ==\
    \ \"9\") {\n                result2[i] = \"Nine\";\n            }\n        }\n\
    \        return result2;", "        // This is your job. :-)\n        List<string>\
    \ solutions = new List<string>();\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            switch (arr[i]) {\n                case 1:\n                \
    \    solutions.Add(\"One\");\n                    break;\n                case\
    \ 2:\n                    solutions.Add(\"Two\");\n                    break;\n\
    \                case 3:\n                    solutions.Add(\"Three\");\n    \
    \                break;\n                case 4:\n                    solutions.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      solutions.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    solutions.Add(\"Six\");\n                    break;\n\
    \                case 7:\n                    solutions.Add(\"Seven\");\n    \
    \                break;\n                case 8:\n                    solutions.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       solutions.Add(\"Nine\");\n                    break;\n               \
    \ default:\n                    break;\n            }\n        }\n        solutions.Sort();\n\
    \        solutions.Reverse();\n        return solutions;", '        return arr.Select(e
    => e % 10 == e ? e.ToString() : "").Where(s => s != "").OrderBy(e => e).Reverse().Select(e
    => e == "1" ? "One" : e == "2" ? "Two" : e == "3" ? "Three" : e == "4" ? "Four"
    : e == "5" ? "Five" : e == "6" ? "Six" : e == "7" ? "Seven" : e == "8" ? "Eight"
    : e == "9" ? "Nine" : "").ToList();', '        return arr.Where(x => x > 0 &&
    x < 10).OrderBy(x => x).Reverse().Select(x => ByLength2(x)).ToList();', "    \
    \    List<string> digits = new List<string>();\n        digits.Add(\"One\");\n\
    \        digits.Add(\"Two\");\n        digits.Add(\"Three\");\n        digits.Add(\"\
    Four\");\n        digits.Add(\"Five\");\n        digits.Add(\"Six\");\n      \
    \  digits.Add(\"Seven\");\n        digits.Add(\"Eight\");\n        digits.Add(\"\
    Nine\");\n        arr.Sort();\n        arr.Reverse();\n        List<string> digitsArr\
    \ = new List<string>();\n        foreach (long item in arr) {\n            if\
    \ (item > 0 && item < 10) {\n                digitsArr.Add(digits[(int)item -\
    \ 1]);\n            }\n        }\n        return digitsArr;", "        List<string>\
    \ ans = new List<string>();\n        foreach (long x in arr) {\n            if\
    \ (x < 1 || x > 9) continue;\n            ans.Add(GetName(x));\n        }\n  \
    \      ans.Sort();\n        ans.Reverse();\n        return ans;", "        List<string>\
    \ strings = new List<string>();\n        foreach (long i in arr) {\n         \
    \   if (i > 0 && i < 10) {\n                switch (i) {\n                   \
    \ case 1:\n                        strings.Add(\"One\");\n                   \
    \     break;\n                    case 2:\n                        strings.Add(\"\
    Two\");\n                        break;\n                    case 3:\n       \
    \                 strings.Add(\"Three\");\n                        break;\n  \
    \                  case 4:\n                        strings.Add(\"Four\");\n \
    \                       break;\n                    case 5:\n                \
    \        strings.Add(\"Five\");\n                        break;\n            \
    \        case 6:\n                        strings.Add(\"Six\");\n            \
    \            break;\n                    case 7:\n                        strings.Add(\"\
    Seven\");\n                        break;\n                    case 8:\n     \
    \                   strings.Add(\"Eight\");\n                        break;\n\
    \                    case 9:\n                        strings.Add(\"Nine\");\n\
    \                        break;\n                }\n            }\n        }\n\
    \        strings.Sort();\n        strings.Reverse();\n        return strings;",
  "        List<long> arrNew = new List<long>();\n        foreach (long l in arr)\
    \ {\n            if (l >= 1 && l <= 9) {\n                arrNew.Add(l);\n   \
    \         }\n        }\n        arrNew.Sort();\n        arrNew.Reverse();\n  \
    \      List<string> result = new List<string>();\n        foreach (long l in arrNew)\
    \ {\n            if (l == 1) {\n                result.Add(\"One\");\n       \
    \     } else if (l == 2) {\n                result.Add(\"Two\");\n           \
    \ } else if (l == 3) {\n                result.Add(\"Three\");\n            }\
    \ else if (l == 4) {\n                result.Add(\"Four\");\n            } else\
    \ if (l == 5) {\n                result.Add(\"Five\");\n            } else if\
    \ (l == 6) {\n                result.Add(\"Six\");\n            } else if (l ==\
    \ 7) {\n                result.Add(\"Seven\");\n            } else if (l == 8)\
    \ {\n                result.Add(\"Eight\");\n            } else if (l == 9) {\n\
    \                result.Add(\"Nine\");\n            }\n        }\n        return\
    \ result;", "        // your code goes here\n        return new List<string>();",
  "        var q = from x in arr\n                where x >= 1 && x <= 9\n       \
    \         orderby x\n                select x;\n        List<string> result =\
    \ new List<string>();\n        foreach (var x in q) {\n            switch (x)\
    \ {\n                case 1:\n                    result.Add(\"One\");\n     \
    \               break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        result.Reverse();\n   \
    \     return result;", "        var s = from x in arr where (x >= 1 && x <= 9)\
    \ select x;\n        if (s.Count() > 0) {\n            s = s.OrderBy(x => x);\n\
    \            s = s.Reverse();\n            var s2 = from x in s select x.ToString();\n\
    \            var s3 = from x in s2 select new string[] { \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" }[int.Parse(x)\
    \ - 1];\n            return s3.ToList();\n        }\n        return new List<string>();",
  "        // Implement this function!\n        arr.Sort();\n        arr.Reverse();\n\
    \        List<string> result = new List<string>();\n        foreach (var n in\
    \ arr) {\n            string s = n.ToString();\n            switch (s) {\n   \
    \             case \"1\": result.Add(\"One\"); break;\n                case \"\
    2\": result.Add(\"Two\"); break;\n                case \"3\": result.Add(\"Three\"\
    ); break;\n                case \"4\": result.Add(\"Four\"); break;\n        \
    \        case \"5\": result.Add(\"Five\"); break;\n                case \"6\"\
    : result.Add(\"Six\"); break;\n                case \"7\": result.Add(\"Seven\"\
    ); break;\n                case \"8\": result.Add(\"Eight\"); break;\n       \
    \         case \"9\": result.Add(\"Nine\"); break;\n            }\n        }\n\
    \        return result;", "        var list = arr.Where(i => i > 0 && i < 10).Select(i\
    \ => i.ToString()).OrderBy(i => i).Reverse().ToList();\n        list.Reverse();\n\
    \        return list.Select(i => Enum.Parse(typeof(Numbers), i).ToString()).ToList();",
  '        return new List<string>();', "        List<string> Names = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 9 ||\
    \ arr[i] < 1) {\n                arr.RemoveAt(i);\n                i--;\n    \
    \        }\n        }\n        arr.Sort();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] == 1) {\n                Names.Add(\"One\");\n\
    \            }\n            if (arr[i] == 2) {\n                Names.Add(\"Two\"\
    );\n            }\n            if (arr[i] == 3) {\n                Names.Add(\"\
    Three\");\n            }\n            if (arr[i] == 4) {\n                Names.Add(\"\
    Four\");\n            }\n            if (arr[i] == 5) {\n                Names.Add(\"\
    Five\");\n            }\n            if (arr[i] == 6) {\n                Names.Add(\"\
    Six\");\n            }\n            if (arr[i] == 7) {\n                Names.Add(\"\
    Seven\");\n            }\n            if (arr[i] == 8) {\n                Names.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                Names.Add(\"\
    Nine\");\n            }\n        }\n        Names.Reverse();\n        return Names;",
  "        List<string> dict = new List<string>() { \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        arr.Sort();\n\
    \        arr.Reverse();\n        var t = new List<string>();\n        foreach\
    \ (var n in arr) {\n            if (n >= 1 && n <= 9) {\n                t.Add(dict[(int)n\
    \ - 1]);\n            }\n        }\n        return t;", "        // your code\
    \ here\n        return null;", "        Dictionary<int,string> toString = new\
    \ Dictionary<int,string>() {\n                { 0, \"Zero\" },\n             \
    \   { 1, \"One\" },\n                { 2, \"Two\" },\n                { 3, \"\
    Three\" },\n                { 4, \"Four\" },\n                { 5, \"Five\" },\n\
    \                { 6, \"Six\" },\n                { 7, \"Seven\" },\n        \
    \        { 8, \"Eight\" },\n                { 9, \"Nine\" }\n            };\n\
    \        arr.Sort();\n        arr.Reverse();\n        List<string> result = new\
    \ List<string>();\n        foreach (var item in arr) {\n            var intItem\
    \ = (int)item;\n            if (intItem > 0 && intItem < 10) {\n             \
    \   result.Add(toString[intItem]);\n            }\n        }\n        return result;",
  "        var indices = Enumerable.Range(0, arr.Count).ToList();\n        indices.Sort((i,\
    \ j) => (int)arr[i] - (int)arr[j]);\n        indices.Reverse();\n        var res\
    \ = new List<string>();\n        foreach (var ind in indices) {\n            var\
    \ num = arr[ind];\n            if (1 <= num && num <= 9) {\n                res.Add(num\
    \ switch {\n                    1 => \"One\",\n                    2 => \"Two\"\
    ,\n                    3 => \"Three\",\n                    4 => \"Four\",\n \
    \                   5 => \"Five\",\n                    6 => \"Six\",\n      \
    \              7 => \"Seven\",\n                    8 => \"Eight\",\n        \
    \            9 => \"Nine\",\n                    _ => \"\"\n                });\n\
    \            }\n        }\n        return res;", "        // TODO: Write code\
    \ to solve the problem in this function, then return the result\n        List<string>\
    \ res = new List<string>();\n        foreach (long n in arr) {\n            if\
    \ (n >= 1 && n <= 9) {\n                res.Add(Convert.ToString(n));\n      \
    \      }\n        }\n        res.Sort();\n        res.Reverse();\n        for\
    \ (int i = 0; i < res.Count; i++) {\n            switch (res[i]) {\n         \
    \       case \"1\":\n                    res[i] = \"One\";\n                 \
    \   break;\n                case \"2\":\n                    res[i] = \"Two\"\
    ;\n                    break;\n                case \"3\":\n                 \
    \   res[i] = \"Three\";\n                    break;\n                case \"4\"\
    :\n                    res[i] = \"Four\";\n                    break;\n      \
    \          case \"5\":\n                    res[i] = \"Five\";\n             \
    \       break;\n                case \"6\":\n                    res[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   res[i] = \"Seven\";\n                    break;\n                case \"8\"\
    :\n                    res[i] = \"Eight\";\n                    break;\n     \
    \           case \"9\":\n                    res[i] = \"Nine\";\n            \
    \        break;\n            }\n        }\n        return res;", "        // Write\
    \ your code here\n        List<string> output = new List<string>();\n        List<string>\
    \ outputSorted = new List<string>();\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] == 1) output.Add(\"One\");\n            if (arr[i]\
    \ == 2) output.Add(\"Two\");\n            if (arr[i] == 3) output.Add(\"Three\"\
    );\n            if (arr[i] == 4) output.Add(\"Four\");\n            if (arr[i]\
    \ == 5) output.Add(\"Five\");\n            if (arr[i] == 6) output.Add(\"Six\"\
    );\n            if (arr[i] == 7) output.Add(\"Seven\");\n            if (arr[i]\
    \ == 8) output.Add(\"Eight\");\n            if (arr[i] == 9) output.Add(\"Nine\"\
    );\n        }\n        outputSorted = output.OrderBy(a => a).ToList();\n     \
    \   outputSorted.Reverse();\n        return outputSorted;", "        List<long>\
    \ temp = new List<long>();\n        List<string> ans = new List<string>();\n \
    \       foreach (long n in arr) {\n            if (n >= 1 && n <= 9) {\n     \
    \           temp.Add(n);\n            }\n        }\n        temp.Sort();\n   \
    \     temp.Reverse();\n        foreach (long n in temp) {\n            ans.Add(GetName(n));\n\
    \        }\n        return ans;", '        throw new NotImplementedException();',
  "        var r = new Dictionary<long, string>();\n        r[1] = \"One\";\n    \
    \    r[2] = \"Two\";\n        r[3] = \"Three\";\n        r[4] = \"Four\";\n  \
    \      r[5] = \"Five\";\n        r[6] = \"Six\";\n        r[7] = \"Seven\";\n\
    \        r[8] = \"Eight\";\n        r[9] = \"Nine\";\n        var result = new\
    \ List<string>();\n        foreach (var i in arr) {\n            if (i < 1 ||\
    \ i > 9) continue;\n            result.Add(r[i]);\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        List<string> res\
    \ = new List<string>();\n        arr.Sort();\n        arr.Reverse();\n       \
    \ foreach (long i in arr) {\n            switch (i) {\n                case 1:\n\
    \                    res.Add(\"One\");\n                    break;\n         \
    \       case 2:\n                    res.Add(\"Two\");\n                    break;\n\
    \                case 3:\n                    res.Add(\"Three\");\n          \
    \          break;\n                case 4:\n                    res.Add(\"Four\"\
    );\n                    break;\n                case 5:\n                    res.Add(\"\
    Five\");\n                    break;\n                case 6:\n              \
    \      res.Add(\"Six\");\n                    break;\n                case 7:\n\
    \                    res.Add(\"Seven\");\n                    break;\n       \
    \         case 8:\n                    res.Add(\"Eight\");\n                 \
    \   break;\n                case 9:\n                    res.Add(\"Nine\");\n\
    \                    break;\n            }\n        }\n        return res;", " \
    \       Dictionary<long, string> dict = new Dictionary<long, string>() {\n   \
    \         { 1, \"One\" },\n            { 2, \"Two\" },\n            { 3, \"Three\"\
    \ },\n            { 4, \"Four\" },\n            { 5, \"Five\" },\n           \
    \ { 6, \"Six\" },\n            { 7, \"Seven\" },\n            { 8, \"Eight\" },\n\
    \            { 9, \"Nine\" }\n        };\n        return arr.Where(a => a > 0\
    \ && a < 10).OrderBy(a => a).Reverse().Select(a => dict[a]).ToList();", "    \
    \    var result = new List<string>();\n        var ignore = new List<long>() {-1,\
    \ 55};\n        foreach (var item in arr) {\n            if (item < 1 || item\
    \ > 9 || ignore.Contains(item)) {\n                continue;\n            }\n\
    \            result.Add(NumberToWords(item));\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        List<string> results\
    \ = new List<string>();\n        List<long> temp = new List<long>();\n       \
    \ foreach (long l in arr) {\n            if (l > 0 && l < 10) {\n            \
    \    temp.Add(l);\n            }\n        }\n        temp.Sort();\n        temp.Reverse();\n\
    \        foreach (long l in temp) {\n            switch (l) {\n              \
    \  case 1:\n                    results.Add(\"One\");\n                    break;\n\
    \                case 2:\n                    results.Add(\"Two\");\n        \
    \            break;\n                case 3:\n                    results.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       results.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    results.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    results.Add(\"Six\");\n        \
    \            break;\n                case 7:\n                    results.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       results.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    results.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return results;", "        arr.Sort();\n  \
    \      arr.Reverse();\n        var newArr = new List<string>();\n        foreach\
    \ (long i in arr) {\n            if (i < 1 || i > 9) continue;\n            switch\
    \ (i) {\n                case 1:\n                    newArr.Add(\"One\");\n \
    \                   break;\n                case 2:\n                    newArr.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     newArr.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    newArr.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    newArr.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    newArr.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     newArr.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    newArr.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    newArr.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return newArr;", "    \
    \    return arr.Where(s => s >= 1 && s <= 9).OrderBy(x => x).Reverse().Select(num\
    \ => ((string)\"\" +\n                                    (num == 1 ? \"One\"\
    \ :\n                                    num == 2 ? \"Two\" :\n              \
    \                      num == 3 ? \"Three\" :\n                              \
    \      num == 4 ? \"Four\" :\n                                    num == 5 ? \"\
    Five\" :\n                                    num == 6 ? \"Six\" :\n         \
    \                           num == 7 ? \"Seven\" :\n                         \
    \           num == 8 ? \"Eight\" :\n                                    num ==\
    \ 9 ? \"Nine\" : \"\"))).ToList();", "        // Replace the next line with the\
    \ result of your computation\n        List<string> l1 = new List<string>();\n\
    \        Dictionary<long, string> dict = new Dictionary<long, string>();\n   \
    \     dict.Add(1, \"One\");\n        dict.Add(2, \"Two\");\n        dict.Add(3,\
    \ \"Three\");\n        dict.Add(4, \"Four\");\n        dict.Add(5, \"Five\");\n\
    \        dict.Add(6, \"Six\");\n        dict.Add(7, \"Seven\");\n        dict.Add(8,\
    \ \"Eight\");\n        dict.Add(9, \"Nine\");\n        var positiveNumbers = from\
    \ number in arr\n                              where number > 0 && number < 10\n\
    \                              select number;\n        var sorted = positiveNumbers.OrderBy(x\
    \ => x);\n        foreach (var item in sorted)\n        {\n            l1.Add(dict[item]);\n\
    \        }\n        l1.Reverse();\n        return l1;", "        if (arr.Count\
    \ == 0) {\n            return new List<string>();\n        }\n        string[]\
    \ map = new string[]{\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"};\n        return arr.Where(x => x >= 1\
    \ && x <= 9).OrderBy(x => x).Reverse().Select(x => map[x]).ToList();", '        return
    arr.Where(a => a >= 1 && a <= 9).OrderBy(a => a).Reverse().Select(a => Convert.ToString(a)).ToList();',
  "        List<string> res = new List<string>();\n        List<long> tmp = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n >= 1 && n <= 9) {\n    \
    \            tmp.Add(n);\n            }\n        }\n        tmp.Sort();\n    \
    \    tmp.Reverse();\n        foreach (long n in tmp) {\n            switch (n)\
    \ {\n                case 1:\n                    res.Add(\"One\");\n        \
    \            break;\n                case 2:\n                    res.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    res.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       res.Add(\"Four\");\n                    break;\n                case 5:\n\
    \                    res.Add(\"Five\");\n                    break;\n        \
    \        case 6:\n                    res.Add(\"Six\");\n                    break;\n\
    \                case 7:\n                    res.Add(\"Seven\");\n          \
    \          break;\n                case 8:\n                    res.Add(\"Eight\"\
    );\n                    break;\n                case 9:\n                    res.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        return\
    \ res;", "        // Your solution goes here.\n        var xs = from x in arr\n\
    \                 where x > 0 && x < 10\n                 orderby x\n        \
    \         select x;\n        xs = xs.Reverse();\n        List<string> res = new\
    \ List<string>();\n        foreach (var x in xs) {\n            string s = \"\"\
    ;\n            switch (x) {\n                case 1:\n                    s =\
    \ \"One\";\n                    break;\n                case 2:\n            \
    \        s = \"Two\";\n                    break;\n                case 3:\n \
    \                   s = \"Three\";\n                    break;\n             \
    \   case 4:\n                    s = \"Four\";\n                    break;\n \
    \               case 5:\n                    s = \"Five\";\n                 \
    \   break;\n                case 6:\n                    s = \"Six\";\n      \
    \              break;\n                case 7:\n                    s = \"Seven\"\
    ;\n                    break;\n                case 8:\n                    s\
    \ = \"Eight\";\n                    break;\n                case 9:\n        \
    \            s = \"Nine\";\n                    break;\n            }\n      \
    \      res.Add(s);\n        }\n        return res;", "        return arr.FindAll(d\
    \ => (d >= 1 && d <= 9)).OrderBy(d => d).Select(d => ((string)(new Dictionary<long,\
    \ string>() {\n            {1, \"One\"},\n            {2, \"Two\"},\n        \
    \    {3, \"Three\"},\n            {4, \"Four\"},\n            {5, \"Five\"},\n\
    \            {6, \"Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"\
    },\n            {9, \"Nine\"}\n        })[d])).Reverse().ToList();", "       \
    \ var r = new List<string>();\n        foreach (var x in arr) {\n            if\
    \ (x < 1 || x > 9) continue;\n            switch ((int)x) {\n                case\
    \ 1: r.Add(\"One\"); break;\n                case 2: r.Add(\"Two\"); break;\n\
    \                case 3: r.Add(\"Three\"); break;\n                case 4: r.Add(\"\
    Four\"); break;\n                case 5: r.Add(\"Five\"); break;\n           \
    \     case 6: r.Add(\"Six\"); break;\n                case 7: r.Add(\"Seven\"\
    ); break;\n                case 8: r.Add(\"Eight\"); break;\n                case\
    \ 9: r.Add(\"Nine\"); break;\n            }\n        }\n        r.Sort();\n  \
    \      r.Reverse();\n        return r;", '        return new List<string>();',
  "        List<long> temp = new List<long>();\n        List<string> ans = new List<string>();\n\
    \        string[] reference = new string[] { \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        foreach (long\
    \ x in arr) {\n            if (x >= 1 && x <= 9) {\n                temp.Add(x);\n\
    \            }\n        }\n        temp.Sort();\n        temp.Reverse();\n   \
    \     foreach (long x in temp) {\n            ans.Add(reference[x - 1]);\n   \
    \     }\n        return ans;", "        List<string> c = new List<string>();\n\
    \        foreach (long a in arr) {\n            if (a >= 1 && a <= 9) {\n    \
    \            c.Add(FromInt(a));\n            }\n        }\n        c.Sort();\n\
    \        c.Reverse();\n        return c;", '        return arr.Where(i => i >=
    1 && i <= 9).OrderBy(i => i).Reverse().Select(i => getNumberName(i)).ToList();',
  "        List<string> res = new List<string>();\n        string[] names = new string[]\
    \ { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" };\n        foreach (long x in arr) {\n            if (x >= 1 && x\
    \ <= 9) {\n                res.Add(names[x - 1]);\n            }\n        }\n\
    \        res.Sort();\n        res.Reverse();\n        return res;", "        //\
    \ Your code goes here.\n        var result = new List<string>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            var item = arr[i];\n        \
    \    if (item >= 1 && item <= 9) {\n                var numName = item switch\
    \ {\n                    1 => \"One\",\n                    2 => \"Two\",\n  \
    \                  3 => \"Three\",\n                    4 => \"Four\",\n     \
    \               5 => \"Five\",\n                    6 => \"Six\",\n          \
    \          7 => \"Seven\",\n                    8 => \"Eight\",\n            \
    \        9 => \"Nine\",\n                    _ => null\n                };\n \
    \               result.Add(numName);\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        arr.Sort();\n  \
    \      arr.Reverse();\n        List<string> result = new List<string>();\n   \
    \     foreach (long n in arr) {\n            if (n >= 1 && n <= 9) {\n       \
    \         result.Add(NumName(n));\n            }\n        }\n        return result;",
  "        List<string> strs = new List<string>();\n        foreach (var n in arr)\
    \ {\n            if (n < 1 || n > 9) {\n                continue;\n          \
    \  }\n            strs.Add(n.ToString());\n        }\n        strs.Sort();\n \
    \       strs.Reverse();\n        for (int i = 0; i < strs.Count; i++) {\n    \
    \        strs[i] = ((string)GetNumberName((long)int.Parse(strs[i])));\n      \
    \  }\n        return strs;", "        var result = new List<string>();\n     \
    \   var temp = new List<long>();\n        foreach (var x in arr) {\n         \
    \   if (x >= 1 && x <= 9) {\n                temp.Add(x);\n            }\n   \
    \     }\n        temp.Sort();\n        temp.Reverse();\n        foreach (var x\
    \ in temp) {\n            switch (x) {\n                case 1: result.Add(\"\
    One\"); break;\n                case 2: result.Add(\"Two\"); break;\n        \
    \        case 3: result.Add(\"Three\"); break;\n                case 4: result.Add(\"\
    Four\"); break;\n                case 5: result.Add(\"Five\"); break;\n      \
    \          case 6: result.Add(\"Six\"); break;\n                case 7: result.Add(\"\
    Seven\"); break;\n                case 8: result.Add(\"Eight\"); break;\n    \
    \            case 9: result.Add(\"Nine\"); break;\n            }\n        }\n\
    \        return result;", "        var a = arr.Where(x => x >= 1 && x <= 9);\n\
    \        var a1 = a.OrderBy(x => x);\n        return a1.Reverse().Select(x =>\
    \ {\n            switch (x) {\n                case 1: return \"One\";\n     \
    \           case 2: return \"Two\";\n                case 3: return \"Three\"\
    ;\n                case 4: return \"Four\";\n                case 5: return \"\
    Five\";\n                case 6: return \"Six\";\n                case 7: return\
    \ \"Seven\";\n                case 8: return \"Eight\";\n                case\
    \ 9: return \"Nine\";\n                default: return \"\";\n            }\n\
    \        }).ToList();", "        Dictionary<int, string> mapping = new Dictionary<int,\
    \ string>();\n        mapping.Add(1, \"One\");\n        mapping.Add(2, \"Two\"\
    );\n        mapping.Add(3, \"Three\");\n        mapping.Add(4, \"Four\");\n  \
    \      mapping.Add(5, \"Five\");\n        mapping.Add(6, \"Six\");\n        mapping.Add(7,\
    \ \"Seven\");\n        mapping.Add(8, \"Eight\");\n        mapping.Add(9, \"Nine\"\
    );\n        var res = new List<string>();\n        foreach (var e in arr) {\n\
    \            if (e >= 1 && e <= 9) {\n                res.Add(mapping[(int)e]);\n\
    \            }\n        }\n        res.Sort();\n        res.Reverse();\n     \
    \   return res;", "        List<long> arrLong = new List<long>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n                arrLong.Add(arr[i]);\n            }\n        }\n     \
    \   arrLong.Sort();\n        arrLong.Reverse();\n        List<string> arrStr =\
    \ new List<string>();\n        for (int i = 0; i < arrLong.Count; i++) {\n   \
    \         if (arrLong[i] == 1) {\n                arrStr.Add(\"One\");\n     \
    \       }\n            if (arrLong[i] == 2) {\n                arrStr.Add(\"Two\"\
    );\n            }\n            if (arrLong[i] == 3) {\n                arrStr.Add(\"\
    Three\");\n            }\n            if (arrLong[i] == 4) {\n               \
    \ arrStr.Add(\"Four\");\n            }\n            if (arrLong[i] == 5) {\n \
    \               arrStr.Add(\"Five\");\n            }\n            if (arrLong[i]\
    \ == 6) {\n                arrStr.Add(\"Six\");\n            }\n            if\
    \ (arrLong[i] == 7) {\n                arrStr.Add(\"Seven\");\n            }\n\
    \            if (arrLong[i] == 8) {\n                arrStr.Add(\"Eight\");\n\
    \            }\n            if (arrLong[i] == 9) {\n                arrStr.Add(\"\
    Nine\");\n            }\n        }\n        return arrStr;", "        return arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).Reverse().Select(x => {\n            switch\
    \ (x) {\n                case 1: return \"One\";\n                case 2: return\
    \ \"Two\";\n                case 3: return \"Three\";\n                case 4:\
    \ return \"Four\";\n                case 5: return \"Five\";\n               \
    \ case 6: return \"Six\";\n                case 7: return \"Seven\";\n       \
    \         case 8: return \"Eight\";\n                case 9: return \"Nine\";\n\
    \                default: return \"Error\";\n            }\n        }).ToList();",
  "        arr.Sort();\n        arr.Reverse();\n        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ switch ((int)arr[i]) {\n                case 1: result.Add(\"One\"); break;\n\
    \                case 2: result.Add(\"Two\"); break;\n                case 3:\
    \ result.Add(\"Three\"); break;\n                case 4: result.Add(\"Four\");\
    \ break;\n                case 5: result.Add(\"Five\"); break;\n             \
    \   case 6: result.Add(\"Six\"); break;\n                case 7: result.Add(\"\
    Seven\"); break;\n                case 8: result.Add(\"Eight\"); break;\n    \
    \            case 9: result.Add(\"Nine\"); break;\n            }\n        }\n\
    \        return result;", "        // your code goes here\n        return new\
    \ List<string>();", "        // Your answer goes here\n        Dictionary<long,\
    \ string> dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\"\
    );\n        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        List<string> result = new List<string>();\n        arr.Sort();\n\
    \        arr.Reverse();\n        foreach (var a in arr) {\n            if (dict.ContainsKey(a))\
    \ {\n                result.Add(dict[a]);\n            }\n        }\n        return\
    \ result;", "        var order = new string[] { \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        return arr.OrderBy(x\
    \ => x)\n            .Where(x => x > 0 && x < 10)\n            .Select(x => order[x\
    \ - 1])\n            .Reverse()\n            .ToList();", "        var result\
    \ = new List<string>();\n        // TODO: Convert each digit to the corresponding\
    \ name, sort them in ascending order, reverse the list, and return it.\n     \
    \   return result;", "        var dict = new Dictionary<long, string>();\n   \
    \     dict.Add(1, \"One\");\n        dict.Add(2, \"Two\");\n        dict.Add(3,\
    \ \"Three\");\n        dict.Add(4, \"Four\");\n        dict.Add(5, \"Five\");\n\
    \        dict.Add(6, \"Six\");\n        dict.Add(7, \"Seven\");\n        dict.Add(8,\
    \ \"Eight\");\n        dict.Add(9, \"Nine\");\n        var nums = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n\
    \                nums.Add(item);\n            }\n        }\n        var result\
    \ = new List<string>();\n        if (nums.Count > 0) {\n            result = nums.OrderBy(x\
    \ => x).Reverse().Select(x => dict[x]).ToList();\n        }\n        return result;",
  "        var sorted = new List<string>();\n        foreach (var a in arr) {\n  \
    \          if (a < 1 || a > 9) continue;\n            sorted.Add(((string)a.ToString()));\n\
    \        }\n        sorted.Sort();\n        for (int i = 0; i < sorted.Count;\
    \ i++) {\n            switch (sorted[i]) {\n                case \"1\":\n    \
    \                sorted[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    sorted[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    sorted[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          sorted[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    sorted[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    sorted[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   sorted[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    sorted[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    sorted[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        sorted.Reverse();\n\
    \        return sorted;", "        var list = new List<string>();\n        foreach\
    \ (var v in arr) {\n            if (v < 1 || v > 9) {\n                continue;\n\
    \            }\n            list.Add(GetName(v));\n        }\n        list.Sort();\n\
    \        list.Reverse();\n        return list;", "        long[] let = new long[]\
    \ {(long) 2L, (long) 3L, (long) 4L, (long) 5L, (long) 6L, (long) 7L, (long) 8L,\
    \ (long) 9L};\n        List<string> l = new List<string>();\n        string[]\
    \ l2 = new string[] {(string)\"Two\", (string)\"Three\", (string)\"Four\", (string)\"\
    Five\", (string)\"Six\", (string)\"Seven\", (string)\"Eight\", (string)\"Nine\"\
    };\n        List<long> l1 = new List<long>();\n        foreach (long k in arr)\
    \ {\n            if (k == (long) 1L) {\n                l.Add((string)\"One\"\
    );\n            }\n            else if (let.Contains(k)) {\n                l1.Add(k);\n\
    \            }\n        }\n        l1.Sort();\n        l1.Reverse();\n       \
    \ foreach (long k in l1) {\n            l.Add(l2[(int)k - (int)2L]);\n       \
    \ }\n        return l;", "        arr.Sort();\n        arr.Reverse();\n      \
    \  var res = new List<string>();\n        foreach (var n in arr) {\n         \
    \   switch (n) {\n                case 1:\n                    res.Add(\"One\"\
    );\n                    break;\n                case 2:\n                    res.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     res.Add(\"Three\");\n                    break;\n                case 4:\n\
    \                    res.Add(\"Four\");\n                    break;\n        \
    \        case 5:\n                    res.Add(\"Five\");\n                   \
    \ break;\n                case 6:\n                    res.Add(\"Six\");\n   \
    \                 break;\n                case 7:\n                    res.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       res.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    res.Add(\"Nine\");\n                    break;\n   \
    \         }\n        }\n        return res;", "        // your code goes here\n\
    \        return arr;", '        return Enumerable.Range(1, 9).Select(i => (long)i).Reverse().Select(i
    => i.ToString()).ToList();', "        // your code here\n        var res = new\
    \ List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] >= 1 && arr[i] <= 9) {\n                res.Add(arr[i].ToString());\n\
    \            }\n        }\n        res.Sort();\n        res.Reverse();\n     \
    \   string[] digits = { \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var converted = new List<string>();\n\
    \        for (int i = 0; i < res.Count; i++) {\n            converted.Add(digits[Convert.ToInt32(res[i])]);\n\
    \        }\n        return converted;", "        var result = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < 1 ||\
    \ arr[i] > 9) {\n                continue;\n            }\n            var number\
    \ = arr[i];\n            var s = \"\";\n            switch (number) {\n      \
    \          case 1:\n                    s = \"One\";\n                    break;\n\
    \                case 2:\n                    s = \"Two\";\n                 \
    \   break;\n                case 3:\n                    s = \"Three\";\n    \
    \                break;\n                case 4:\n                    s = \"Four\"\
    ;\n                    break;\n                case 5:\n                    s\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           s = \"Six\";\n                    break;\n                case 7:\n\
    \                    s = \"Seven\";\n                    break;\n            \
    \    case 8:\n                    s = \"Eight\";\n                    break;\n\
    \                case 9:\n                    s = \"Nine\";\n                \
    \    break;\n            }\n            result.Add(s);\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        // your code here\n\
    \        return arr.Where(x => x > 0 && x < 10).OrderBy(x => x).Reverse().Select(x\
    \ => new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\" }[x - 1]).ToList();", '        return arr.Select(x
    => (x > 0 && x < 10) ? x : 0).OrderBy(x => x).Reverse().Select(x => $"{x}").ToList();',
  "        var result = new List<string>();\n        if (arr.Count > 0) {\n      \
    \      var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \            sorted.Reverse();\n            foreach (var n in sorted) {\n    \
    \            switch (n) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // return arr.Where(a => a >= 1 && a <= 9).OrderBy(a => a).Reverse().Select(a\
    \ => new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"}[(int)a - 1]).ToList();\n        var items = arr.Where(a\
    \ => a >= 1 && a <= 9).OrderBy(a => a).Reverse().Select(a => a - 1).ToList();\n\
    \        string[] strings = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i < items.Count; i++) {\n         \
    \   result.Add(strings[items[i]]);\n        }\n        return result;", "    \
    \    // Your code goes here\n        Dictionary<long, string> hash = new Dictionary<long,\
    \ string>() {\n            {1L, \"One\"},\n            {2L, \"Two\"},\n      \
    \      {3L, \"Three\"},\n            {4L, \"Four\"},\n            {5L, \"Five\"\
    },\n            {6L, \"Six\"},\n            {7L, \"Seven\"},\n            {8L,\
    \ \"Eight\"},\n            {9L, \"Nine\"},\n        };\n        List<string> result\
    \ = new List<string>();\n        foreach (long l in arr) {\n            if (hash.ContainsKey(l))\
    \ {\n                result.Add(hash[l]);\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", '        return arr.Where(x
    => x >= 1 && x <= 9).OrderBy(x => x).Reverse().Select(x => ((x == 1) ? "One" :
    ((x == 2) ? "Two" : ((x == 3) ? "Three" : ((x == 4) ? "Four" : ((x == 5) ? "Five"
    : ((x == 6) ? "Six" : ((x == 7) ? "Seven" : ((x == 8) ? "Eight" : "Nine"))))))))).ToList();',
  "        Func<long, string> names = (i) => {\n            if (i == 1) {\n      \
    \          return \"One\";\n            } else if (i == 2) {\n               \
    \ return \"Two\";\n            } else if (i == 3) {\n                return \"\
    Three\";\n            } else if (i == 4) {\n                return \"Four\";\n\
    \            } else if (i == 5) {\n                return \"Five\";\n        \
    \    } else if (i == 6) {\n                return \"Six\";\n            } else\
    \ if (i == 7) {\n                return \"Seven\";\n            } else if (i ==\
    \ 8) {\n                return \"Eight\";\n            } else if (i == 9) {\n\
    \                return \"Nine\";\n            } else {\n                return\
    \ \"\";\n            }\n        };\n        return arr.Where((item) => item >=\
    \ 1L && item <= 9L).OrderBy((item) => item).Reverse().Select((item) => names(item)).ToList();",
  "        int[] var2 = arr.ConvertAll(x => (int)x).ToArray();\n        var2 = var2.Where(x\
    \ => 1 <= x && x <= 9).ToArray();\n        var2 = var2.Reverse().ToArray();\n\
    \        Dictionary<int, string> var1 = new Dictionary<int, string>() {\n    \
    \        {(int)1L, (string)\"One\"},\n            {(int)2L, (string)\"Two\"},\n\
    \            {(int)3L, (string)\"Three\"},\n            {(int)4L, (string)\"Four\"\
    },\n            {(int)5L, (string)\"Five\"},\n            {(int)6L, (string)\"\
    Six\"},\n            {(int)7L, (string)\"Seven\"},\n            {(int)8L, (string)\"\
    Eight\"},\n            {(int)9L, (string)\"Nine\"},\n        };\n        for (int\
    \ i = 0; i < var2.Length; i++) {\n            var2[i] = var1[var2[i]];\n     \
    \   }\n        return var2.ToList();", "        arr.Sort();\n        arr.Reverse();\n\
    \        var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\"\
    );\n        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        var result = new List<string>();\n        foreach (var a\
    \ in arr) {\n            if (dict.ContainsKey(a)) {\n                result.Add(dict[a]);\n\
    \            }\n        }\n        return result;", "        List<long> between1And9\
    \ = arr.Where(x => x >= 1 && x <= 9).ToList();\n        List<long> sorted = between1And9.OrderBy(x\
    \ => x).ToList();\n        List<long> reversed = sorted.Select(x => x).Reverse().ToList();\n\
    \        Dictionary<long, string> digits = new Dictionary<long, string>() {\n\
    \            { 1, \"One\" },\n            { 2, \"Two\" },\n            { 3, \"\
    Three\" },\n            { 4, \"Four\" },\n            { 5, \"Five\" },\n     \
    \       { 6, \"Six\" },\n            { 7, \"Seven\" },\n            { 8, \"Eight\"\
    \ },\n            { 9, \"Nine\" }\n        };\n        List<string> result = reversed.Select(x\
    \ => digits[x]).ToList();\n        return result;", '        return arr.Where(x
    => x > 0 && x < 10).OrderBy(x => x).Reverse().Select(x => x.ToString()).ToList();',
  '        return new List<string>();', "        List<string> output = new List<string>();\n\
    \        // Your code here.\n        output.Add(\"One\");\n        return output;",
  "        return (from n in arr\n                where n > 0 && n < 10\n        \
    \        orderby n descending\n                select n.ToString()).ToList();",
  "        List<string> result = new List<string>();\n        foreach (var i in arr)\
    \ {\n            if (i == 1) {\n                result.Add(\"One\");\n       \
    \     } else if (i == 2) {\n                result.Add(\"Two\");\n           \
    \ } else if (i == 3) {\n                result.Add(\"Three\");\n            }\
    \ else if (i == 4) {\n                result.Add(\"Four\");\n            } else\
    \ if (i == 5) {\n                result.Add(\"Five\");\n            } else if\
    \ (i == 6) {\n                result.Add(\"Six\");\n            } else if (i ==\
    \ 7) {\n                result.Add(\"Seven\");\n            } else if (i == 8)\
    \ {\n                result.Add(\"Eight\");\n            } else if (i == 9) {\n\
    \                result.Add(\"Nine\");\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", '        return arr.Where(e
    => e > 0 && e < 10).OrderBy(e => e).Reverse().Select(e => numberNames[e]).ToList();',
  "        Func<string, string> NameOfNumber = n => {\n            switch (n) {\n\
    \                case \"1\": return \"One\";\n                case \"2\": return\
    \ \"Two\";\n                case \"3\": return \"Three\";\n                case\
    \ \"4\": return \"Four\";\n                case \"5\": return \"Five\";\n    \
    \            case \"6\": return \"Six\";\n                case \"7\": return \"\
    Seven\";\n                case \"8\": return \"Eight\";\n                case\
    \ \"9\": return \"Nine\";\n                default: return \"\";\n           \
    \ }\n        };\n        return arr.Where(x => x >= 1 && x <= 9).OrderBy(x =>\
    \ x).Reverse().Select(x => NameOfNumber(x.ToString())).ToList();", "        var\
    \ digits = arr.Where(x => x > 0 && x < 10).OrderBy(x => x).Select(x => \n    \
    \        x == 1 ? \"One\" :\n            x == 2 ? \"Two\" :\n            x ==\
    \ 3 ? \"Three\" :\n            x == 4 ? \"Four\" :\n            x == 5 ? \"Five\"\
    \ :\n            x == 6 ? \"Six\" :\n            x == 7 ? \"Seven\" :\n      \
    \      x == 8 ? \"Eight\" :\n            x == 9 ? \"Nine\" : null\n        ).Reverse().ToList();\n\
    \        return digits;", '        throw new NotImplementedException();', '        throw
    new NotImplementedException();', '        return null;', "        arr.Sort();\n\
    \        arr.Reverse();\n        return arr.Where(x => x > 0 && x < 10).Select(x\
    \ => x.ToString()).ToList();", '        return Enumerable.Range(1, 9).Select(i
    => arr.Contains(i) ? i.ToString() : "").Reverse().ToList();', "        Dictionary<long,\
    \ string> ascii = new Dictionary<long, string>();\n        ascii.Add(1, \"One\"\
    );\n        ascii.Add(2, \"Two\");\n        ascii.Add(3, \"Three\");\n       \
    \ ascii.Add(4, \"Four\");\n        ascii.Add(5, \"Five\");\n        ascii.Add(6,\
    \ \"Six\");\n        ascii.Add(7, \"Seven\");\n        ascii.Add(8, \"Eight\"\
    );\n        ascii.Add(9, \"Nine\");\n        List<string> result = new List<string>();\n\
    \        foreach (var i in arr) {\n            if (i >= 1 && i <= 9) {\n     \
    \           result.Add(ascii[i]);\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        List<string> ret\
    \ = new List<string>();\n        foreach (long num in arr) {\n            if (num\
    \ < 1 || num > 9) {\n                continue;\n            }\n            switch\
    \ (num) {\n                case 1:\n                    ret.Add(\"One\");\n  \
    \                  break;\n                case 2:\n                    ret.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     ret.Add(\"Three\");\n                    break;\n                case 4:\n\
    \                    ret.Add(\"Four\");\n                    break;\n        \
    \        case 5:\n                    ret.Add(\"Five\");\n                   \
    \ break;\n                case 6:\n                    ret.Add(\"Six\");\n   \
    \                 break;\n                case 7:\n                    ret.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       ret.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    ret.Add(\"Nine\");\n                    break;\n   \
    \         }\n        }\n        ret.Reverse();\n        return ret;", "      \
    \  var result = new List<string>();\n        var temp = new List<long>();\n  \
    \      foreach (var x in arr) {\n            if (x >= 1 && x <= 9) {\n       \
    \         temp.Add(x);\n            }\n        }\n        temp.Sort();\n     \
    \   foreach (var x in temp) {\n            result.Add(Name(x));\n        }\n \
    \       result.Reverse();\n        return result;", "        // Your code goes\
    \ here\n        List<string> actual = new List<string>();\n        List<string>\
    \ sort = new List<string>();\n        foreach (long i in arr) {\n            switch\
    \ (i) {\n                case 1:\n                    actual.Add(\"One\");\n \
    \                   break;\n                case 2:\n                    actual.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     actual.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    actual.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    actual.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    actual.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     actual.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    actual.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    actual.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        actual.Sort();\n      \
    \  for (int i = actual.Count-1; i >= 0; i--) {\n            sort.Add(actual[i]);\n\
    \        }\n        return sort;", "        if (arr.Count == 0) return new List<string>();\n\
    \        List<string> s = new List<string>();\n        foreach (var e in arr)\n\
    \            if (e > 0 && e < 10)\n                s.Add(e.ToString());\n    \
    \    var r = s.OrderBy(x => x).Reverse().ToList();\n        for (int i = 0; i\
    \ < r.Count; i++)\n            switch (r[i]) {\n                case \"1\": r[i]\
    \ = \"One\"; break;\n                case \"2\": r[i] = \"Two\"; break;\n    \
    \            case \"3\": r[i] = \"Three\"; break;\n                case \"4\"\
    : r[i] = \"Four\"; break;\n                case \"5\": r[i] = \"Five\"; break;\n\
    \                case \"6\": r[i] = \"Six\"; break;\n                case \"7\"\
    : r[i] = \"Seven\"; break;\n                case \"8\": r[i] = \"Eight\"; break;\n\
    \                case \"9\": r[i] = \"Nine\"; break;\n            }\n        return\
    \ r;", "        // Your code goes here.\n        return null;", "        // Code\
    \ written by Priyanka\n        List<string> result = new List<string>();\n   \
    \     if (arr.Count < 1)\n            return result;\n        //Sort the array.\n\
    \        arr.Sort();\n        //Reverse the array.\n        arr.Reverse();\n \
    \       //Traverse the array\n        for (int i = 0; i < arr.Count; i++)\n  \
    \      {\n            if (arr[i] == 1)\n                result.Add(\"One\");\n\
    \            else if (arr[i] == 2)\n                result.Add(\"Two\");\n   \
    \         else if (arr[i] == 3)\n                result.Add(\"Three\");\n    \
    \        else if (arr[i] == 4)\n                result.Add(\"Four\");\n      \
    \      else if (arr[i] == 5)\n                result.Add(\"Five\");\n        \
    \    else if (arr[i] == 6)\n                result.Add(\"Six\");\n           \
    \ else if (arr[i] == 7)\n                result.Add(\"Seven\");\n            else\
    \ if (arr[i] == 8)\n                result.Add(\"Eight\");\n            else if\
    \ (arr[i] == 9)\n                result.Add(\"Nine\");\n        }\n        return\
    \ result;", "        return arr.Where(i => i >= 1 && i <= 9).OrderBy(i => i).Reverse().Select(i\
    \ => {\n            string[] words = new string[]{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n            return\
    \ words[(int)i - 1];\n        }).ToList();", "        var goodNums = from num\
    \ in arr\n                       where num >= 1 && num <= 9\n                \
    \       select num;\n        var goodNumsReverse = goodNums.Reverse();\n     \
    \   var result = new List<string>();\n        foreach (var num in goodNumsReverse)\
    \ {\n            switch (num) {\n                case 1:\n                   \
    \ result.Add(\"One\");\n                    break;\n                case 2:\n\
    \                    result.Add(\"Two\");\n                    break;\n      \
    \          case 3:\n                    result.Add(\"Three\");\n             \
    \       break;\n                case 4:\n                    result.Add(\"Four\"\
    );\n                    break;\n                case 5:\n                    result.Add(\"\
    Five\");\n                    break;\n                case 6:\n              \
    \      result.Add(\"Six\");\n                    break;\n                case\
    \ 7:\n                    result.Add(\"Seven\");\n                    break;\n\
    \                case 8:\n                    result.Add(\"Eight\");\n       \
    \             break;\n                case 9:\n                    result.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Fill in your solution here\n        var result = new List<string>();\n\
    \        foreach (var number in arr) {\n            if (number < 1 || number >\
    \ 9) {\n                continue;\n            }\n            result.Add(number.ToString());\n\
    \        }\n        result.Sort();\n        result.Reverse();\n        var names\
    \ = new List<string>() { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\" };\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            int j = int.Parse(result[i]);\n            result[i] = names[j\
    \ - 1];\n        }\n        return result;", "        var goodNums = arr.Where(x\
    \ => x > 0 && x < 10).OrderBy(x => x).Reverse().ToList();\n        return goodNums.Select(x\
    \ => {\n            switch (x) {\n                case 1: return \"One\";\n  \
    \              case 2: return \"Two\";\n                case 3: return \"Three\"\
    ;\n                case 4: return \"Four\";\n                case 5: return \"\
    Five\";\n                case 6: return \"Six\";\n                case 7: return\
    \ \"Seven\";\n                case 8: return \"Eight\";\n                case\
    \ 9: return \"Nine\";\n                default: throw new Exception(\"Impossible\"\
    );\n            }\n        }).ToList();", "        var result = new List<string>();\n\
    \        var temp = new List<int>();\n        foreach (var item in arr) {\n  \
    \          if (item >= 1 && item <= 9) {\n                temp.Add((int)item);\n\
    \            }\n        }\n        temp.Sort();\n        temp.Reverse();\n   \
    \     foreach (var item in temp) {\n            switch (item) {\n            \
    \    case 1:\n                    result.Add(\"One\");\n                    break;\n\
    \                case 2:\n                    result.Add(\"Two\");\n         \
    \           break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;", "        // List of the ones\
    \ digit names.\n        List<string> ones = new List<string>(new string[]{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    });\n        // List of the tens digit names.\n        List<string> tens = new\
    \ List<string>(new string[]{\"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\"\
    , \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"});\n        // List of the teens\
    \ digit names.\n        List<string> teens = new List<string>(new string[]{\"\
    Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"\
    Seventeen\", \"Eighteen\", \"Nineteen\"});\n        List<string> ret = new List<string>();\n\
    \        // Sort the integers between 1 and 9 inclusive, reverse the resulting\
    \ list.\n        arr.Sort();\n        arr.Reverse();\n        foreach (long num\
    \ in arr) {\n            if (num >= 1 && num <= 9) {\n                // Replace\
    \ each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n                ret.Add(ones[(int)num\
    \ - 1]);\n            } else if (num >= 10 && num <= 19) {\n                //\
    \ Replace each digit by its corresponding name from \"Ten\", \"Eleven\", \"Twelve\"\
    , \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"\
    , \"Nineteen\".\n                ret.Add(teens[(int)num - 11]);\n            }\
    \ else if (num >= 20 && num <= 99) {\n                // Replace each digit by\
    \ its corresponding name from \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"\
    Sixty\", \"Seventy\", \"Eighty\", \"Ninety\".\n                string tmp = tens[(int)num\
    \ / 10 - 1];\n                if (num % 10 > 0) {\n                    tmp +=\
    \ \" \" + ones[(int)num % 10 - 1];\n                }\n                ret.Add(tmp);\n\
    \            }\n        }\n        return ret;", "        List<string> result\
    \ = new List<string>();\n        arr.Sort();\n        arr.Reverse();\n       \
    \ foreach (long item in arr) {\n            if (item >= 1 && item <= 9) {\n  \
    \              result.Add(ToString(item));\n            }\n        }\n       \
    \ return result;", "        var _=arr.Where(x=>x>=1 && x<=9);\n        var __=_.OrderBy(x=>x);\n\
    \        var ___=__.Reverse();\n        return ___.Select(\n            x=>x==1?\"\
    One\":\n            x==2?\"Two\":\n            x==3?\"Three\":\n            x==4?\"\
    Four\":\n            x==5?\"Five\":\n            x==6?\"Six\":\n            x==7?\"\
    Seven\":\n            x==8?\"Eight\":\n            x==9?\"Nine\":\"\"\n      \
    \  ).ToList();", "        arr.Sort();\n        arr.Reverse();\n        List<string>\
    \ result = new List<string>();\n        foreach (long num in arr) {\n        \
    \    if (num >= 1 && num <= 9) {\n                switch (num) {\n           \
    \         case 1:\n                        result.Add(\"One\");\n            \
    \            break;\n                    case 2:\n                        result.Add(\"\
    Two\");\n                        break;\n                    case 3:\n       \
    \                 result.Add(\"Three\");\n                        break;\n   \
    \                 case 4:\n                        result.Add(\"Four\");\n   \
    \                     break;\n                    case 5:\n                  \
    \      result.Add(\"Five\");\n                        break;\n               \
    \     case 6:\n                        result.Add(\"Six\");\n                \
    \        break;\n                    case 7:\n                        result.Add(\"\
    Seven\");\n                        break;\n                    case 8:\n     \
    \                   result.Add(\"Eight\");\n                        break;\n \
    \                   case 9:\n                        result.Add(\"Nine\");\n \
    \                       break;\n                }\n            }\n        }\n\
    \        return result;", "        // Write your code here\n        var valid_numbers\
    \ = arr.Where(x => 1 <= x && x <= 9).ToList();\n        var sorted_valid_numbers\
    \ = valid_numbers.OrderBy(x => x).ToList();\n        var numbers_to_names = new\
    \ Dictionary<long, string>() {\n            {1, \"One\"},\n            {2, \"\
    Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"},\n           \
    \ {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"Seven\"},\n   \
    \         {8, \"Eight\"},\n            {9, \"Nine\"},\n        };\n        var\
    \ sorted_names = sorted_valid_numbers.Select(x => numbers_to_names[x]).ToList();\n\
    \        var reversed_names = sorted_names.AsEnumerable().Reverse().ToList();\n\
    \        return reversed_names;", "        var outList = new List<string>();\n\
    \        foreach (var item in arr) {\n            switch (item) {\n          \
    \      case 1:\n                    outList.Add(\"One\");\n                  \
    \  break;\n                case 2:\n                    outList.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    outList.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       outList.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    outList.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    outList.Add(\"Six\");\n        \
    \            break;\n                case 7:\n                    outList.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       outList.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    outList.Add(\"Nine\");\n                    break;\n\
    \                default:\n                    break;\n            }\n       \
    \ }\n        outList.Sort();\n        outList.Reverse();\n        return outList;",
  "        // Complete this function\n        // http://judge.telerikacademy.com/GetResource/815/ByLength-problem-description\n\
    \        throw new NotImplementedException();", "        arr.Sort();\n       \
    \ arr.Reverse();\n        List<string> answer = new List<string>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n                switch (arr[i]) {\n                    case 1:\n     \
    \                   answer.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        answer.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     answer.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        answer.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        answer.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  answer.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        answer.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      answer.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        answer.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ answer;", "        Dictionary<long, string> dict = new Dictionary<long, string>();\n\
    \        dict.Add(1, \"One\");\n        dict.Add(2, \"Two\");\n        dict.Add(3,\
    \ \"Three\");\n        dict.Add(4, \"Four\");\n        dict.Add(5, \"Five\");\n\
    \        dict.Add(6, \"Six\");\n        dict.Add(7, \"Seven\");\n        dict.Add(8,\
    \ \"Eight\");\n        dict.Add(9, \"Nine\");\n        var name = new List<string>();\n\
    \        var valid = new List<long>();\n        foreach (var item in arr) {\n\
    \            if (item >= 1 && item <= 9) {\n                valid.Add(item);\n\
    \            }\n        }\n        valid.Sort();\n        valid.Reverse();\n \
    \       foreach (var item in valid) {\n            name.Add(dict[item]);\n   \
    \     }\n        return name;", '        return new List<string>();', "      \
    \  if (arr.Count() == 0) return new List<string>();\n        return arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).Reverse().Select(x => new string[] { \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\" }[(int)x - 1]).ToList();", "        // your code goes here\n      \
    \  return new List<string>();", "        Dictionary<long, string> d = new Dictionary<long,\
    \ string>();\n        d.Add(1, \"One\");\n        d.Add(2, \"Two\");\n       \
    \ d.Add(3, \"Three\");\n        d.Add(4, \"Four\");\n        d.Add(5, \"Five\"\
    );\n        d.Add(6, \"Six\");\n        d.Add(7, \"Seven\");\n        d.Add(8,\
    \ \"Eight\");\n        d.Add(9, \"Nine\");\n        arr.Sort();\n        List<string>\
    \ result = new List<string>();\n        foreach (long item in arr) {\n       \
    \     if (d.ContainsKey(item)) {\n                result.Add(d[item]);\n     \
    \       }\n        }\n        result.Reverse();\n        return result;", "  \
    \      // write your code here\n        var order = new List<long>{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9};\n        var map = new Dictionary<long, string>{\n         \
    \   {1, \"One\"},\n            {2, \"Two\"},\n            {3, \"Three\"},\n  \
    \          {4, \"Four\"},\n            {5, \"Five\"},\n            {6, \"Six\"\
    },\n            {7, \"Seven\"},\n            {8, \"Eight\"},\n            {9,\
    \ \"Nine\"},\n        };\n        return arr.Where(a => a >= 1 && a <= 9).OrderBy(a\
    \ => order.IndexOf(a)).Reverse().Select(a => map[a]).ToList();", '        return
    new List<string>() {};', "        var digits = Enumerable.Range(1, 9).Select(x\
    \ => x.ToString()).ToList();\n        var names = new List<string> { \"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ };\n        var digitsNames = digits.Zip(names, (d, n) => new { Digit = d, Name\
    \ = n });\n        var allowed = new HashSet<string>(digits);\n        var result\
    \ = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Select(x => x.ToString()).Reverse().Select(x\
    \ => digitsNames.First(y => y.Digit == x).Name).ToList();\n        return result;",
  "        var s = new List<string>();\n        var d = new Dictionary<long, string>();\n\
    \        d[1] = \"One\";\n        d[2] = \"Two\";\n        d[3] = \"Three\";\n\
    \        d[4] = \"Four\";\n        d[5] = \"Five\";\n        d[6] = \"Six\";\n\
    \        d[7] = \"Seven\";\n        d[8] = \"Eight\";\n        d[9] = \"Nine\"\
    ;\n        for (var i = 0; i < arr.Count; i++) {\n            var n = arr[i];\n\
    \            if (n > 0 && n < 10) {\n                s.Add(d[n]);\n          \
    \  }\n        }\n        s.Sort();\n        s.Reverse();\n        return s;",
  "        // Your code goes here!\n        return null;", "        List<string> converted\
    \ = new List<string>();\n        foreach (long a in arr) {\n            switch\
    \ (a) {\n                case 1:\n                    converted.Add(\"One\");\n\
    \                    break;\n                case 2:\n                    converted.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     converted.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    converted.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    converted.Add(\"Five\");\n     \
    \               break;\n                case 6:\n                    converted.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     converted.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    converted.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    converted.Add(\"Nine\");\n     \
    \               break;\n            }\n        }\n        converted.Sort();\n\
    \        converted.Reverse();\n        return converted;", "        var group\
    \ = from n in arr\n                where n >= 1 && n <= 9\n                group\
    \ n by n into digits\n                orderby digits.Key\n                select\
    \ digits;\n        var result = new List<string>();\n        foreach (var g in\
    \ group) {\n            switch (g.Key) {\n                case 1:\n          \
    \          result.Add(\"One\");\n                    break;\n                case\
    \ 2:\n                    result.Add(\"Two\");\n                    break;\n \
    \               case 3:\n                    result.Add(\"Three\");\n        \
    \            break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        result.Reverse();\n        return result;", "        var dictionary\
    \ = new Dictionary<long, string>();\n        dictionary.Add(1, \"One\");\n   \
    \     dictionary.Add(2, \"Two\");\n        dictionary.Add(3, \"Three\");\n   \
    \     dictionary.Add(4, \"Four\");\n        dictionary.Add(5, \"Five\");\n   \
    \     dictionary.Add(6, \"Six\");\n        dictionary.Add(7, \"Seven\");\n   \
    \     dictionary.Add(8, \"Eight\");\n        dictionary.Add(9, \"Nine\");\n  \
    \      var arr1 = arr.FindAll(x => x >= 1 && x <= 9);\n        arr1.Sort();\n\
    \        arr1.Reverse();\n        var result = new List<string>();\n        foreach\
    \ (var item in arr1) {\n            result.Add(dictionary[item]);\n        }\n\
    \        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (long number in arr) {\n            string str = \"\";\n    \
    \        if (number == 1) {\n                str = \"One\";\n            } else\
    \ if (number == 2) {\n                str = \"Two\";\n            } else if (number\
    \ == 3) {\n                str = \"Three\";\n            } else if (number ==\
    \ 4) {\n                str = \"Four\";\n            } else if (number == 5) {\n\
    \                str = \"Five\";\n            } else if (number == 6) {\n    \
    \            str = \"Six\";\n            } else if (number == 7) {\n         \
    \       str = \"Seven\";\n            } else if (number == 8) {\n            \
    \    str = \"Eight\";\n            } else if (number == 9) {\n               \
    \ str = \"Nine\";\n            }\n            if (str != \"\") {\n           \
    \     result.Add(str);\n            }\n        }\n        result.Reverse();\n\
    \        return result;", "        var result = new List<string>();\n        var\
    \ digitMap = new Dictionary<long, string>() {\n            { 1, \"One\" },\n \
    \           { 2, \"Two\" },\n            { 3, \"Three\" },\n            { 4, \"\
    Four\" },\n            { 5, \"Five\" },\n            { 6, \"Six\" },\n       \
    \     { 7, \"Seven\" },\n            { 8, \"Eight\" },\n            { 9, \"Nine\"\
    \ }\n        };\n        foreach (var item in arr) {\n            if (item < 0\
    \ || item > 9) {\n                continue;\n            }\n            result.Add(digitMap[item]);\n\
    \        }\n        result.Sort();\n        result.Reverse();\n        return\
    \ result;", '        return arr.Where(i => i >= 1 && i <= 9).OrderBy(i => i).Reverse().Select(i
    => ((int)i).ToString()).ToList();', "        // your code here\n        throw\
    \ new Exception(\"Cannot find solution\");", "        var res = new List<string>();\n\
    \        foreach (var i in arr) {\n            if (i < 1 || i > 9) {\n       \
    \         continue;\n            }\n            res.Add(new Dictionary<long, string>()\
    \ {\n                {1, \"One\"},\n                {2, \"Two\"},\n          \
    \      {3, \"Three\"},\n                {4, \"Four\"},\n                {5, \"\
    Five\"},\n                {6, \"Six\"},\n                {7, \"Seven\"},\n   \
    \             {8, \"Eight\"},\n                {9, \"Nine\"},\n            }[i]);\n\
    \        }\n        res.Sort();\n        res.Reverse();\n        return res;",
  "        var result = new List<string>();\n        var names = new Dictionary<long,\
    \ string>() {\n            {1, \"One\"},\n            {2, \"Two\"},\n        \
    \    {3, \"Three\"},\n            {4, \"Four\"},\n            {5, \"Five\"},\n\
    \            {6, \"Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"\
    },\n            {9, \"Nine\"},\n        };\n        foreach (var num in arr) {\n\
    \            if (names.ContainsKey(num)) {\n                result.Add(names[num]);\n\
    \            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;", "        arr.Sort();\n        arr.Reverse();\n     \
    \   List<string> res = new List<string>();\n        foreach (var i in arr) {\n\
    \            if (i == 1) res.Add(\"One\");\n            if (i == 2) res.Add(\"\
    Two\");\n            if (i == 3) res.Add(\"Three\");\n            if (i == 4)\
    \ res.Add(\"Four\");\n            if (i == 5) res.Add(\"Five\");\n           \
    \ if (i == 6) res.Add(\"Six\");\n            if (i == 7) res.Add(\"Seven\");\n\
    \            if (i == 8) res.Add(\"Eight\");\n            if (i == 9) res.Add(\"\
    Nine\");\n        }\n        return res;", "        var odd = arr.Where(n => n\
    \ % 2 == 1);\n        var even = arr.Where(n => n % 2 == 0);\n        var sum\
    \ = odd.Sum() + even.Sum();\n        return arr;", "        return arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).Reverse().Select(x => {\n            switch\
    \ (x) {\n                case 1: return \"One\";\n                case 2: return\
    \ \"Two\";\n                case 3: return \"Three\";\n                case 4:\
    \ return \"Four\";\n                case 5: return \"Five\";\n               \
    \ case 6: return \"Six\";\n                case 7: return \"Seven\";\n       \
    \         case 8: return \"Eight\";\n                case 9: return \"Nine\";\n\
    \                default: throw new Exception();\n            }\n        }).ToList();",
  "        List<long> list = new List<long>();\n        foreach (var item in arr)\
    \ {\n            if (item < 10)\n                list.Add(item);\n        }\n\
    \        List<string> list2 = new List<string>();\n        var ans = list.OrderBy(x\
    \ => x).Reverse();\n        foreach (var item in ans) {\n            switch (item)\
    \ {\n                case 1:\n                    list2.Add(\"One\");\n      \
    \              break;\n                case 2:\n                    list2.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     list2.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    list2.Add(\"Four\");\n                    break;\n \
    \               case 5:\n                    list2.Add(\"Five\");\n          \
    \          break;\n                case 6:\n                    list2.Add(\"Six\"\
    );\n                    break;\n                case 7:\n                    list2.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       list2.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    list2.Add(\"Nine\");\n                    break;\n \
    \           }\n        }\n        return list2;", '        return Enumerable.Repeat((string)"One",
    1).ToList();', "        var ans = new List<string>();\n        var slovar = new\
    \ Dictionary<long, string>();\n        slovar[1] = \"One\";\n        slovar[2]\
    \ = \"Two\";\n        slovar[3] = \"Three\";\n        slovar[4] = \"Four\";\n\
    \        slovar[5] = \"Five\";\n        slovar[6] = \"Six\";\n        slovar[7]\
    \ = \"Seven\";\n        slovar[8] = \"Eight\";\n        slovar[9] = \"Nine\";\n\
    \        var dict = new Dictionary<long, bool>();\n        foreach (var x in arr)\
    \ {\n            if (slovar.ContainsKey(x)) {\n                dict[x] = true;\n\
    \            }\n        }\n        ans = dict.Keys.ToList().ConvertAll(x => slovar[x]);\n\
    \        ans.Sort();\n        ans.Reverse();\n        return ans;", "        //\
    \ TODO: implement ByLength\n        return null;", "        List<string> ret =\
    \ new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] > 0 && arr[i] < 10) {\n                ret.Add(arr[i].ToString());\n\
    \            }\n        }\n        ret.Sort();\n        ret.Reverse();\n     \
    \   for (int i = 0; i < ret.Count; i++) {\n            switch (ret[i]) {\n   \
    \             case \"1\":\n                    ret[i] = \"One\";\n           \
    \         break;\n                case \"2\":\n                    ret[i] = \"\
    Two\";\n                    break;\n                case \"3\":\n            \
    \        ret[i] = \"Three\";\n                    break;\n                case\
    \ \"4\":\n                    ret[i] = \"Four\";\n                    break;\n\
    \                case \"5\":\n                    ret[i] = \"Five\";\n       \
    \             break;\n                case \"6\":\n                    ret[i]\
    \ = \"Six\";\n                    break;\n                case \"7\":\n      \
    \              ret[i] = \"Seven\";\n                    break;\n             \
    \   case \"8\":\n                    ret[i] = \"Eight\";\n                   \
    \ break;\n                case \"9\":\n                    ret[i] = \"Nine\";\n\
    \                    break;\n            }\n        }\n        return ret;", " \
    \       // put your code here\n        List<string> result = new List<string>();\n\
    \        foreach (var number in arr) {\n            if (number > 0 && number <\
    \ 10) {\n                switch (number) {\n                    case 1:\n    \
    \                    result.Add(\"One\");\n                        break;\n  \
    \                  case 2:\n                        result.Add(\"Two\");\n   \
    \                     break;\n                    case 3:\n                  \
    \      result.Add(\"Three\");\n                        break;\n              \
    \      case 4:\n                        result.Add(\"Four\");\n              \
    \          break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        result.Reverse();\n\
    \        return result;", "        string[] dict = new string[]{\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n \
    \       return (from x in arr where x >= 1 && x <= 9 select dict[(int)x - 1]).OrderBy(x\
    \ => x).Reverse().ToList();", "        // Your code here\n        return new List<string>();",
  "        // Uncomment the following lines for debugging:\n        //Console.WriteLine(String.Join(\"\
    , \", arr));\n        //Console.WriteLine(\"This line should be replaced with\
    \ your code.\");\n        Dictionary<int, string> dic = new Dictionary<int, string>()\n\
    \        {\n            {1, \"One\"},\n            {2, \"Two\"},\n           \
    \ {3, \"Three\"},\n            {4, \"Four\"},\n            {5, \"Five\"},\n  \
    \          {6, \"Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"\
    },\n            {9, \"Nine\"}\n        };\n        List<string> newList = new\
    \ List<string>();\n        foreach (long l in arr)\n        {\n            if\
    \ (l > 0 && l < 10)\n            {\n                newList.Add(dic[(int)l]);\n\
    \            }\n        }\n        newList.Sort();\n        newList.Reverse();\n\
    \        return newList;", "        string[] words = { \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        List<string>\
    \ result = new List<string>();\n        if (arr.Count == 0) return result;\n \
    \       List<int> result_int = new List<int>();\n        foreach (long i in arr)\
    \ {\n            if (i > 0 && i < 10) {\n                result_int.Add((int)i);\n\
    \            }\n        }\n        result_int.Sort();\n        result_int.Reverse();\n\
    \        foreach (int i in result_int) {\n            result.Add(words[i - 1]);\n\
    \        }\n        return result;", "        // Write code here\n        //ToDo\n\
    \        List<string> result = new List<string>();\n        arr.Sort();\n    \
    \    for (int i = 0; i < arr.Count; i++)\n        {\n            switch (arr[i])\n\
    \            {\n                case 1:\n                    result.Add(\"One\"\
    );\n                    break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n                default:\n                    result.Add(\"\
    \ \");\n                    break;\n            }\n        }\n        result.Reverse();\n\
    \        return result;", "        string[] names = new string[] { \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ };\n        arr.Sort();\n        arr.Reverse();\n        List<string> results\
    \ = new List<string>();\n        foreach (long v in arr) {\n            if (v\
    \ >= 1 && v <= 9) {\n                results.Add(names[v - 1]);\n            }\n\
    \        }\n        return results;", "        // You have to modify the contents\
    \ of this function.\n        return new List<string>();", "        List<string>\
    \ result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            string digit;\n            if (arr[i] == 1) {\n                digit\
    \ = \"One\";\n            } else if (arr[i] == 2) {\n                digit = \"\
    Two\";\n            } else if (arr[i] == 3) {\n                digit = \"Three\"\
    ;\n            } else if (arr[i] == 4) {\n                digit = \"Four\";\n\
    \            } else if (arr[i] == 5) {\n                digit = \"Five\";\n  \
    \          } else if (arr[i] == 6) {\n                digit = \"Six\";\n     \
    \       } else if (arr[i] == 7) {\n                digit = \"Seven\";\n      \
    \      } else if (arr[i] == 8) {\n                digit = \"Eight\";\n       \
    \     } else if (arr[i] == 9) {\n                digit = \"Nine\";\n         \
    \   } else {\n                continue;\n            }\n            result.Add(digit);\n\
    \        }\n        result.Sort();\n        result.Reverse();\n        return\
    \ result;", "        List<long> arr1 = new List<long>();\n        foreach (var\
    \ x in arr) {\n            if (x <= 9 && x >= 1) {\n                arr1.Add(x);\n\
    \            }\n        }\n        arr1.Sort();\n        arr1.Reverse();\n   \
    \     List<string> arr2 = new List<string>();\n        foreach (var x in arr1)\
    \ {\n            switch (x) {\n                case 1:\n                    arr2.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     arr2.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    arr2.Add(\"Three\");\n                    break;\n      \
    \          case 4:\n                    arr2.Add(\"Four\");\n                \
    \    break;\n                case 5:\n                    arr2.Add(\"Five\");\n\
    \                    break;\n                case 6:\n                    arr2.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     arr2.Add(\"Seven\");\n                    break;\n                case 8:\n\
    \                    arr2.Add(\"Eight\");\n                    break;\n      \
    \          case 9:\n                    arr2.Add(\"Nine\");\n                \
    \    break;\n            }\n        }\n        return arr2;", "        var order\
    \ = new Dictionary<int, int>() {\n            {1, 1},\n            {2, 2},\n \
    \           {3, 3},\n            {4, 4},\n            {5, 5},\n            {6,\
    \ 6},\n            {7, 7},\n            {8, 8},\n            {9, 9},\n       \
    \ };\n        var names = new Dictionary<int, string>() {\n            {1, \"\
    One\"},\n            {2, \"Two\"},\n            {3, \"Three\"},\n            {4,\
    \ \"Four\"},\n            {5, \"Five\"},\n            {6, \"Six\"},\n        \
    \    {7, \"Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"},\n\
    \        };\n        var result = new List<string>();\n        foreach (long number\
    \ in arr) {\n            if (number >= 1 && number <= 9) {\n                result.Add(names[(int)number]);\n\
    \            }\n        }\n        result.Sort((a, b) => order[names.First(x =>\
    \ x.Value == a).Key] - order[names.First(x => x.Value == b).Key]);\n        result.Reverse();\n\
    \        return result;", "        // Define an array of strings names\n     \
    \   var names = new string[] { \"\", \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        // Convert the list\
    \ to an array\n        var A = arr.ToArray();\n        // Sort the array\n   \
    \     Array.Sort(A);\n        // Reverse the array\n        Array.Reverse(A);\n\
    \        // Convert it back to a list\n        var B = A.ToList();\n        //\
    \ Convert each number to its corresponding string.\n        for (int i = 0; i\
    \ < B.Count; i++) {\n            if (B[i] >= 1 && B[i] <= 9) {\n             \
    \   B[i] = Convert.ToInt64(names[B[i]]);\n            }\n        }\n        //\
    \ Now sort the list again\n        B.Sort();\n        // Convert it back to an\
    \ array\n        A = B.ToArray();\n        // Reverse the array\n        Array.Reverse(A);\n\
    \        // Convert it back to a list\n        B = A.ToList();\n        // Remove\
    \ all the strange numbers that don't belong\n        B.RemoveAll(x => x < 1 ||\
    \ x > 9);\n        // Convert each number to its corresponding string.\n     \
    \   for (int i = 0; i < B.Count; i++) {\n            B[i] = Convert.ToString(names[B[i]]);\n\
    \        }\n        // Return the final result\n        return B;", "        var\
    \ result = new List<string>();\n        var ordered = new List<long>();\n    \
    \    ordered.AddRange(arr.Where(a => a >= 1 && a <= 9));\n        ordered.Sort();\n\
    \        ordered.Reverse();\n        foreach (var i in ordered) {\n          \
    \  switch (i) {\n                case 1:\n                    result.Add(\"One\"\
    );\n                    break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;", "    \
    \    var res = new List<string>();\n        var temp = new List<long>();\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0 && arr[i]\
    \ < 10) {\n                temp.Add(arr[i]);\n            }\n        }\n     \
    \   temp.Sort();\n        temp.Reverse();\n        for (int i = 0; i < temp.Count;\
    \ i++) {\n            if (temp[i] == 1) res.Add(\"One\");\n            if (temp[i]\
    \ == 2) res.Add(\"Two\");\n            if (temp[i] == 3) res.Add(\"Three\");\n\
    \            if (temp[i] == 4) res.Add(\"Four\");\n            if (temp[i] ==\
    \ 5) res.Add(\"Five\");\n            if (temp[i] == 6) res.Add(\"Six\");\n   \
    \         if (temp[i] == 7) res.Add(\"Seven\");\n            if (temp[i] == 8)\
    \ res.Add(\"Eight\");\n            if (temp[i] == 9) res.Add(\"Nine\");\n    \
    \    }\n        return res;", "        var r = new List<long>();\n        foreach\
    \ (var i in arr) {\n            if (i >= 1 && i <= 9)\n                r.Add(i);\n\
    \        }\n        r.Sort();\n        r.Reverse();\n        var result = new\
    \ List<string>();\n        foreach (var i in r) {\n            switch (i) {\n\
    \                case 1:\n                    result.Add(\"One\");\n         \
    \           break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;", "    \
    \    // Note that you cannot use any hashmaps, dictionaries, etc.\n        //\
    \ You may not use any built-in sorting methods, e.g. .sort().\n        // You\
    \ may not use .reverse() or .reverse(1:).\n        // You may not use .pop().\n\
    \        // You may not use .count(x).\n        List<long> arr_1 = arr;\n    \
    \    List<long> arr_2 = arr;\n        int one = 0;\n        int two = 0;\n   \
    \     int three = 0;\n        int four = 0;\n        int five = 0;\n        int\
    \ six = 0;\n        int seven = 0;\n        int eight = 0;\n        int nine =\
    \ 0;\n        while (arr_1.Count>0) {\n            if (arr_1[0]==1) {\n      \
    \          one = one + 1;\n            }\n            if (arr_1[0]==2) {\n   \
    \             two = two + 1;\n            }\n            if (arr_1[0]==3) {\n\
    \                three = three + 1;\n            }\n            if (arr_1[0]==4)\
    \ {\n                four = four + 1;\n            }\n            if (arr_1[0]==5)\
    \ {\n                five = five + 1;\n            }\n            if (arr_1[0]==6)\
    \ {\n                six = six + 1;\n            }\n            if (arr_1[0]==7)\
    \ {\n                seven = seven + 1;\n            }\n            if (arr_1[0]==8)\
    \ {\n                eight = eight + 1;\n            }\n            if (arr_1[0]==9)\
    \ {\n                nine = nine + 1;\n            }\n            arr_1.RemoveAt(0);\n\
    \        }\n        List<string> out_list = new List<string>();\n        while\
    \ (nine>0) {\n            out_list.Add(\"Nine\");\n            nine = nine - 1;\n\
    \        }\n        while (eight>0) {\n            out_list.Add(\"Eight\");\n\
    \            eight = eight - 1;\n        }\n        while (seven>0) {\n      \
    \      out_list.Add(\"Seven\");\n", "        // put the values into a Dictionary\n\
    \        Dictionary<long, string> mapping = new Dictionary<long, string>();\n\
    \        mapping.Add(1, \"One\");\n        mapping.Add(2, \"Two\");\n        mapping.Add(3,\
    \ \"Three\");\n        mapping.Add(4, \"Four\");\n        mapping.Add(5, \"Five\"\
    );\n        mapping.Add(6, \"Six\");\n        mapping.Add(7, \"Seven\");\n   \
    \     mapping.Add(8, \"Eight\");\n        mapping.Add(9, \"Nine\");\n        //\
    \ sort the values\n        arr.Sort();\n        List<string> result = new List<string>();\n\
    \        // for each value\n        foreach (long i in arr) {\n            //\
    \ if the value is between 1 and 9 inclusive\n            if (i >= 1 && i <= 9)\
    \ {\n                // add the corresponding string to the result\n         \
    \       result.Add(mapping[i]);\n            }\n        }\n        // reverse\
    \ the result\n        result.Reverse();\n        return result;", "        var\
    \ res = new List<string>();\n        foreach (var el in arr) {\n            if\
    \ (el < 1 || el > 9) continue;\n            res.Add(new string[] {\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }[(int)el - 1]);\n        }\n        res.Sort();\n        res.Reverse();\n   \
    \     return res;", "        var digits = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0 && arr[i] < 10) {\n\
    \                digits.Add(arr[i].ToString());\n            }\n        }\n  \
    \      digits.Sort();\n        digits.Reverse();\n        var words = new List<string>();\n\
    \        foreach (var digit in digits) {\n            words.Add(\n           \
    \     digit == \"1\" ? \"One\" :\n                digit == \"2\" ? \"Two\" :\n\
    \                digit == \"3\" ? \"Three\" :\n                digit == \"4\"\
    \ ? \"Four\" :\n                digit == \"5\" ? \"Five\" :\n                digit\
    \ == \"6\" ? \"Six\" :\n                digit == \"7\" ? \"Seven\" :\n       \
    \         digit == \"8\" ? \"Eight\" :\n                digit == \"9\" ? \"Nine\"\
    \ :\n                \"\"\n            );\n        }\n        return words;",
  "        // What a cryptic name, ByLength. It should be called ByDigitName.\n  \
    \      // As this is an exercise, the solution is not available.\n        // You\
    \ may ask the instructor how to do it.\n        return null;", "        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < 1 || arr[i] > 9) {\n\
    \                arr.RemoveAt(i);\n                i--;\n            }\n     \
    \   }\n        arr.Sort();\n        arr.Reverse();\n        var ret = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            ret.Add(arr[i].ToString());\n\
    \        }\n        return ret;", "        // Your code goes here\n        if\
    \ (arr.Count == 0)\n            return new List<string>();\n        var m = new\
    \ List<long>();\n        foreach (var v in arr)\n            if (v > 0 && v <\
    \ 10)\n                m.Add(v);\n        m.Sort();\n        m.Reverse();\n  \
    \      var ret = new List<string>();\n        foreach (var v in m)\n         \
    \   ret.Add(v == 1 ? \"One\" : v == 2 ? \"Two\" : v == 3 ? \"Three\" : v == 4\
    \ ? \"Four\" : v == 5 ? \"Five\" : v == 6 ? \"Six\" : v == 7 ? \"Seven\" : v ==\
    \ 8 ? \"Eight\" : \"Nine\");\n        return ret;", "        Dictionary<int, string>\
    \ numToWord = new Dictionary<int, string>();\n        numToWord.Add(1, \"One\"\
    );\n        numToWord.Add(2, \"Two\");\n        numToWord.Add(3, \"Three\");\n\
    \        numToWord.Add(4, \"Four\");\n        numToWord.Add(5, \"Five\");\n  \
    \      numToWord.Add(6, \"Six\");\n        numToWord.Add(7, \"Seven\");\n    \
    \    numToWord.Add(8, \"Eight\");\n        numToWord.Add(9, \"Nine\");\n     \
    \   List<string> res = new List<string>();\n        foreach (var x in arr) {\n\
    \            if (x > 0 && x < 10) {\n                res.Add(numToWord[(int)x]);\n\
    \            }\n        }\n        res.Sort();\n        res.Reverse();\n     \
    \   return res;", "        List<string> result = new List<string>();\n       \
    \ List<string> temp = new List<string>();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > 0 && arr[i] < 10) {\n                temp.Add(arr[i].ToString());\n\
    \            }\n        }\n        temp.Sort();\n        temp.Reverse();\n   \
    \     for (int i = 0; i < temp.Count; i++) {\n            result.Add(intToName(Convert.ToInt32(temp[i])));\n\
    \        }\n        return result;", "        arr.Sort();\n        arr.Reverse();\n\
    \        int w = 0;\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   int d = arr[i];\n            if (1 <= d && d <= 9) {\n                arr[w]\
    \ = d;\n                w++;\n            }\n        }\n        arr.RemoveRange(w,\
    \ arr.Count - w);\n        List<string> result = new List<string>();\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            int d = arr[i];\n       \
    \     switch (d) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;", "    \
    \    long[] newArr = new long[arr.Count];\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            newArr[i] = arr[i];\n        }\n        var l = newArr.ToList();\n\
    \        for (int i = 0; i < newArr.Length; i++) {\n            if (newArr[i]\
    \ > 9 || newArr[i] < 1) {\n                l.Remove(newArr[i]);\n            }\n\
    \        }\n        l.Sort();\n        l.Reverse();\n        var res = new List<string>();\n\
    \        for (int i = 0; i < l.Count; i++) {\n            switch (l[i]) {\n  \
    \              case 1:\n                    res.Add(\"One\");\n              \
    \      break;\n                case 2:\n                    res.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    res.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       res.Add(\"Four\");\n                    break;\n                case 5:\n\
    \                    res.Add(\"Five\");\n                    break;\n        \
    \        case 6:\n                    res.Add(\"Six\");\n                    break;\n\
    \                case 7:\n                    res.Add(\"Seven\");\n          \
    \          break;\n                case 8:\n                    res.Add(\"Eight\"\
    );\n                    break;\n                case 9:\n                    res.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        return\
    \ res;", "        // Your code goes here.\n        var l = new List<string>();\n\
    \        foreach (long n in arr) {\n            switch (n) {\n               \
    \ case 1:\n                    l.Add(\"One\");\n                    break;\n \
    \               case 2:\n                    l.Add(\"Two\");\n               \
    \     break;\n                case 3:\n                    l.Add(\"Three\");\n\
    \                    break;\n                case 4:\n                    l.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      l.Add(\"Five\");\n                    break;\n                case 6:\n\
    \                    l.Add(\"Six\");\n                    break;\n           \
    \     case 7:\n                    l.Add(\"Seven\");\n                    break;\n\
    \                case 8:\n                    l.Add(\"Eight\");\n            \
    \        break;\n                case 9:\n                    l.Add(\"Nine\");\n\
    \                    break;\n            }\n        }\n        l.Sort();\n   \
    \     l.Reverse();\n        return l;", "        List<string> res = new List<string>();\n\
    \        foreach (long x in arr) {\n            if (1 <= x && x <= 9) {\n    \
    \            res.Add(DigitName(x));\n            }\n        }\n        res.Sort();\n\
    \        res.Reverse();\n        return res;", "        List<string> res = new\
    \ List<string>();\n        Dictionary<long, string> map = new Dictionary<long,\
    \ string>();\n        map.Add(1, \"One\");\n        map.Add(2, \"Two\");\n   \
    \     map.Add(3, \"Three\");\n        map.Add(4, \"Four\");\n        map.Add(5,\
    \ \"Five\");\n        map.Add(6, \"Six\");\n        map.Add(7, \"Seven\");\n \
    \       map.Add(8, \"Eight\");\n        map.Add(9, \"Nine\");\n        arr.Sort();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n                res.Add(map[arr[i]]);\n            }\n     \
    \   }\n        res.Reverse();\n        return res;", "        var filtered = arr.Where(x\
    \ => (x >= 1) && (x <= 9)).ToList();\n        filtered.Sort();\n        filtered.Reverse();\n\
    \        var result = new List<string>();\n        foreach (var item in filtered)\
    \ {\n            if (item == 1) {\n                result.Add(\"One\");\n    \
    \        } else if (item == 2) {\n                result.Add(\"Two\");\n     \
    \       } else if (item == 3) {\n                result.Add(\"Three\");\n    \
    \        } else if (item == 4) {\n                result.Add(\"Four\");\n    \
    \        } else if (item == 5) {\n                result.Add(\"Five\");\n    \
    \        } else if (item == 6) {\n                result.Add(\"Six\");\n     \
    \       } else if (item == 7) {\n                result.Add(\"Seven\");\n    \
    \        } else if (item == 8) {\n                result.Add(\"Eight\");\n   \
    \         } else if (item == 9) {\n                result.Add(\"Nine\");\n   \
    \         }\n        }\n        return result;", '        return arr.Select(d
    => ((int)d).ToString()).Where(d => d.All(c => char.IsDigit(c)) && int.Parse(d)
    >= 1 && int.Parse(d) <= 9).OrderBy(d => d).Reverse().Select(d => new Dictionary<int,
    string>() {{1, "One"}, {2, "Two"}, {3, "Three"}, {4, "Four"}, {5, "Five"}, {6,
    "Six"}, {7, "Seven"}, {8, "Eight"}, {9, "Nine"}}[int.Parse(d)]).ToList();', " \
    \       var res = new List<string>();\n        string[] arr2 = new string[] {\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"};\n        foreach (var el in arr) {\n            if (el > 0 && el\
    \ < 10) {\n                res.Add(arr2[(int)el - 1]);\n            }\n      \
    \  }\n        res.Sort();\n        res.Reverse();\n        return res;", "   \
    \     List<string> ret = new List<string>();\n        List<long> sortable = new\
    \ List<long>();\n        long[] temp = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        long[]\
    \ temp2 = new long[9];\n        long[] temp3 = new long[9];\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (Array.IndexOf(temp, arr[i]) >\
    \ -1) {\n                sortable.Add(arr[i]);\n            }\n        }\n   \
    \     sortable.Sort();\n        sortable.Reverse();\n        for (int i = 0; i\
    \ < sortable.Count; i++) {\n            if (sortable[i] == 1) {\n            \
    \    ret.Add(\"One\");\n            }\n            if (sortable[i] == 2) {\n \
    \               ret.Add(\"Two\");\n            }\n            if (sortable[i]\
    \ == 3) {\n                ret.Add(\"Three\");\n            }\n            if\
    \ (sortable[i] == 4) {\n                ret.Add(\"Four\");\n            }\n  \
    \          if (sortable[i] == 5) {\n                ret.Add(\"Five\");\n     \
    \       }\n            if (sortable[i] == 6) {\n                ret.Add(\"Six\"\
    );\n            }\n            if (sortable[i] == 7) {\n                ret.Add(\"\
    Seven\");\n            }\n            if (sortable[i] == 8) {\n              \
    \  ret.Add(\"Eight\");\n            }\n            if (sortable[i] == 9) {\n \
    \               ret.Add(\"Nine\");\n            }\n        }\n        return ret;",
  "        arr.Sort();\n        arr.Reverse();\n        var result = new List<string>();\n\
    \        foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n\
    \                switch (item) {\n                    case 1:\n              \
    \          result.Add(\"One\");\n                        break;\n            \
    \        case 2:\n                        result.Add(\"Two\");\n             \
    \           break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<string> numbers = new List<string>() { \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        List<long>\
    \ numeric = new List<long>();\n        List<string> result = new List<string>();\n\
    \        foreach (long number in arr) {\n            if (number >= 1 && number\
    \ <= 9) {\n                numeric.Add(number);\n            }\n        }\n  \
    \      numeric.Sort();\n        numeric.Reverse();\n        foreach (long number\
    \ in numeric) {\n            result.Add(numbers[(int)number - 1]);\n        }\n\
    \        return result;", "        var strings = new List<string>();\n       \
    \ var sorted = from num in arr\n            where (num >= 1 && num <= 9)\n   \
    \         orderby num\n            select num;\n        foreach (var item in sorted)\
    \ {\n            switch (item) {\n                case 1:\n                  \
    \  strings.Add(\"One\");\n                    break;\n                case 2:\n\
    \                    strings.Add(\"Two\");\n                    break;\n     \
    \           case 3:\n                    strings.Add(\"Three\");\n           \
    \         break;\n                case 4:\n                    strings.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      strings.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    strings.Add(\"Six\");\n                    break;\n\
    \                case 7:\n                    strings.Add(\"Seven\");\n      \
    \              break;\n                case 8:\n                    strings.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       strings.Add(\"Nine\");\n                    break;\n            }\n  \
    \      }\n        strings.Reverse();\n        return strings;", '        throw
    new NotImplementedException();', '        return null;', "        // Fill in code\
    \ to return the correct result.\n        ///////////////////////////////////////////\n\
    \        var result = new List<string>();\n        var temp = new List<int>();\n\
    \        foreach (var x in arr) {\n            if (1 <= x && x <= 9) {\n     \
    \           temp.Add((int)x);\n            }\n        }\n        temp.Sort();\n\
    \        temp.Reverse();\n        foreach (var x in temp) {\n            switch\
    \ (x) {\n                case 1:\n                    result.Add(\"One\");\n \
    \                   break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n      \
    \  ///////////////////////////////////////////", '        return arr.Where(x =>
    x >= 1 && x <= 9).OrderBy(x => x).Reverse().Select(x => NumToWord(x)).ToList();',
  "        // Your answer here\n        List<string> answer = new List<string>();\n\
    \        arr.Sort();\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    switch (arr[i]) {\n                case 1:\n                    answer.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     answer.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    answer.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    answer.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    answer.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    answer.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     answer.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    answer.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    answer.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        answer.Reverse();\n   \
    \     return answer;", "        var list1 = new List<string>();\n        List<long>\
    \ list = new List<long>();\n        var list2 = new List<string>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n        \
    \        list1.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n\
    \                list1.Add(\"Two\");\n            }\n            if (arr[i] ==\
    \ 3) {\n                list1.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                list1.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                list1.Add(\"Five\");\n            }\n     \
    \       if (arr[i] == 6) {\n                list1.Add(\"Six\");\n            }\n\
    \            if (arr[i] == 7) {\n                list1.Add(\"Seven\");\n     \
    \       }\n            if (arr[i] == 8) {\n                list1.Add(\"Eight\"\
    );\n            }\n            if (arr[i] == 9) {\n                list1.Add(\"\
    Nine\");\n            }\n        }\n        if (list1.Count > 0) {\n         \
    \   for (int i = list1.Count - 1; i >= 0; i--) {\n                list2.Add(list1[i]);\n\
    \            }\n        }\n        return list2;", "        // YOUR CODE HERE\n\
    \        return null;", "        var map = new Dictionary<long, string> {\n  \
    \          {1, \"One\"},\n            {2, \"Two\"},\n            {3, \"Three\"\
    },\n            {4, \"Four\"},\n            {5, \"Five\"},\n            {6, \"\
    Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"},\n          \
    \  {9, \"Nine\"},\n        };\n        arr.Sort();\n        arr.Reverse();\n \
    \       var res = new List<string>();\n        foreach (var v in arr) {\n    \
    \        if (v >= 1 && v <= 9) {\n                res.Add(map[v]);\n         \
    \   }\n        }\n        return res;", "        // Write your code here!\n  \
    \      var oneToNine = new HashSet<long> {1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \
    \  var words = new string[] {\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        var result = new List<string>();\n\
    \        var isValid = arr.All(num => oneToNine.Contains(num));\n        if (!isValid)\
    \ {\n            throw new Exception(\"Invalid input\");\n        }\n        var\
    \ temp = arr.OrderBy(num => num).Reverse().ToList();\n        foreach (var num\
    \ in temp) {\n            result.Add(words[num - 1]);\n        }\n        return\
    \ result;", "        var sortedList = arr.Where(num => num >= 1 && num <= 9).OrderBy(num\
    \ => num).Reverse().ToList();\n        var strList = new List<string>();\n   \
    \     foreach (var num in sortedList) {\n            switch (num) {\n        \
    \        case 1:\n                    strList.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    strList.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    strList.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       strList.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    strList.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    strList.Add(\"Six\");\n        \
    \            break;\n                case 7:\n                    strList.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       strList.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    strList.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return strList;", "        var names = new\
    \ List<string>() {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"};\n        var counts = new List<long>() {0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0};\n        arr.ForEach(x => {\n            if (x >= 1 && x\
    \ <= 9) {\n                counts[(int)x - 1]++;\n            }\n        });\n\
    \        return counts.SelectMany(x => Enumerable.Repeat(names[counts.IndexOf(x)],\
    \ (int)x)).Reverse().ToList();", "        var d = new Dictionary<long, string>\
    \ {\n            {1, \"One\"},\n            {2, \"Two\"},\n            {3, \"\
    Three\"},\n            {4, \"Four\"},\n            {5, \"Five\"},\n          \
    \  {6, \"Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"},\n \
    \           {9, \"Nine\"}\n        };\n        return arr.Where(x => x >= 1 &&\
    \ x <= 9).Distinct().OrderBy(x => x).Reverse().Select(x => d[x]).ToList();", " \
    \       arr.Sort();\n        arr.Reverse();\n        Dictionary<long, string>\
    \ dict = new Dictionary<long, string> {\n                {(long)1L, (string)\"\
    One\"},\n                {(long)2L, (string)\"Two\"},\n                {(long)3L,\
    \ (string)\"Three\"},\n                {(long)4L, (string)\"Four\"},\n       \
    \         {(long)5L, (string)\"Five\"},\n                {(long)6L, (string)\"\
    Six\"},\n                {(long)7L, (string)\"Seven\"},\n                {(long)8L,\
    \ (string)\"Eight\"},\n                {(long)9L, (string)\"Nine\"}\n        \
    \    };\n        List<string> result = new List<string>();\n        foreach (long\
    \ n in arr) {\n            if (dict.ContainsKey(n)) {\n                result.Add(dict[n]);\n\
    \            }\n        }\n        return result;", "        var list = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n                switch (arr[i]) {\n                    case\
    \ 1:\n                        list.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        list.Add(\"Two\");\n   \
    \                     break;\n                    case 3:\n                  \
    \      list.Add(\"Three\");\n                        break;\n                \
    \    case 4:\n                        list.Add(\"Four\");\n                  \
    \      break;\n                    case 5:\n                        list.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  list.Add(\"Six\");\n                        break;\n      \
    \              case 7:\n                        list.Add(\"Seven\");\n       \
    \                 break;\n                    case 8:\n                      \
    \  list.Add(\"Eight\");\n                        break;\n                    case\
    \ 9:\n                        list.Add(\"Nine\");\n                        break;\n\
    \                }\n            }\n        }\n        list.Reverse();\n      \
    \  return list;", "        List<string> r = new List<string>();\n        foreach\
    \ (long i in arr) {\n            if (i < 1 || i > 9) {\n                continue;\n\
    \            }\n            switch ((int)i) {\n                case 1:\n     \
    \               r.Add(\"One\");\n                    break;\n                case\
    \ 2:\n                    r.Add(\"Two\");\n                    break;\n      \
    \          case 3:\n                    r.Add(\"Three\");\n                  \
    \  break;\n                case 4:\n                    r.Add(\"Four\");\n   \
    \                 break;\n                case 5:\n                    r.Add(\"\
    Five\");\n                    break;\n                case 6:\n              \
    \      r.Add(\"Six\");\n                    break;\n                case 7:\n\
    \                    r.Add(\"Seven\");\n                    break;\n         \
    \       case 8:\n                    r.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    r.Add(\"Nine\");\n             \
    \       break;\n            }\n        }\n        r.Reverse();\n        return\
    \ r;", "        // Insert your solution here\n        var result = new List<string>();\n\
    \        Dictionary<long, string> dict = new Dictionary<long, string>();\n   \
    \     dict.Add(1, \"One\");\n        dict.Add(2, \"Two\");\n        dict.Add(3,\
    \ \"Three\");\n        dict.Add(4, \"Four\");\n        dict.Add(5, \"Five\");\n\
    \        dict.Add(6, \"Six\");\n        dict.Add(7, \"Seven\");\n        dict.Add(8,\
    \ \"Eight\");\n        dict.Add(9, \"Nine\");\n        foreach (var item in arr)\n\
    \        {\n            if (item > 0 && item < 10)\n            {\n          \
    \      result.Add(dict[item]);\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        var result = from\
    \ x in arr where x >= 1 && x <= 9 orderby x descending select x;\n        var\
    \ res = new List<string>();\n        foreach (var x in result) {\n           \
    \ if (x == 1) {\n                res.Add(\"One\");\n            } else if (x ==\
    \ 2) {\n                res.Add(\"Two\");\n            } else if (x == 3) {\n\
    \                res.Add(\"Three\");\n            } else if (x == 4) {\n     \
    \           res.Add(\"Four\");\n            } else if (x == 5) {\n           \
    \     res.Add(\"Five\");\n            } else if (x == 6) {\n                res.Add(\"\
    Six\");\n            } else if (x == 7) {\n                res.Add(\"Seven\");\n\
    \            } else if (x == 8) {\n                res.Add(\"Eight\");\n     \
    \       } else if (x == 9) {\n                res.Add(\"Nine\");\n           \
    \ }\n        }\n        return res;", "        // TODO: Write your code here\n\
    \        return null;"]
stop_tokens:
- "\n    }\n"
