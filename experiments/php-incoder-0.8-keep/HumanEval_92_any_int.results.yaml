name: HumanEval_92_any_int
language: php
results:
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return $x === $y + $z;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3b8m_0u.php:18\n\
    Stack trace:\n#0 /tmp/tmp_3b8m_0u.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_3b8m_0u.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if($x==$y+$z) {\n    return true;\n  }\n  if($x==$y-$z) {\n    return true;\n\
    \  }\n  if($x==$y-$z) {\n    return true;\n  }\n  if($x==$y+$z) {\n    return\
    \ true;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpir2drd68.php:33\n\
    Stack trace:\n#0 /tmp/tmpir2drd68.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpir2drd68.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Write your code here\n    if($x == $z && $y == $z){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2ot01w2.php:25\n\
    Stack trace:\n#0 /tmp/tmpl2ot01w2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpl2ot01w2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n    return $x === $y || $x === $z || $y === $z;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4fu4q7g.php:19\n\
    Stack trace:\n#0 /tmp/tmpa4fu4q7g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpa4fu4q7g.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return is_int($x) && is_int($y) && is_int($z) &&\n    !is_string($x) && !is_string($y)\
    \ && !is_string($z) &&\n    is_int($x + $y) && is_int($x + $z) && is_int($y +\
    \ $z) &&\n    ($x == $y + $z);\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv7aeryt0.php:21\n\
    Stack trace:\n#0 /tmp/tmpv7aeryt0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv7aeryt0.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) return true;\n    if ($x == $y - $z) return true;\n  \
    \  if ($x == $z - $y) return true;\n    if ($y == $z - $x) return true;\n    if\
    \ ($x == $y || $x == $z || $y == $z) return false;\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hy3za6j.php:25\n\
    Stack trace:\n#0 /tmp/tmp1hy3za6j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1hy3za6j.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) return false;\n    if ($x == $y - $z) return false;\n\
    \    if ($x == $z - $y) return false;\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfeilzh1r.php:22\n\
    Stack trace:\n#0 /tmp/tmpfeilzh1r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfeilzh1r.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \treturn ($x + $y == $z && is_int($x) && is_int($y) && is_int($z));\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8ye9hz2.php:19\n\
    Stack trace:\n#0 /tmp/tmpr8ye9hz2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpr8ye9hz2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $ret = ($x == $y) || ($x == $z) || ($y == $z);\n  if ($ret && (is_integer($x)\
    \ && is_integer($y) && is_integer($z))) {\n    return $ret;\n  } else {\n    return\
    \ false;\n  }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqv9tf35.php:24\n\
    Stack trace:\n#0 /tmp/tmpcqv9tf35.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcqv9tf35.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return is_int($x) && is_int($y) && is_int($z) && $x + $y == $z;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5nn9ylj1.php:18\n\
    Stack trace:\n#0 /tmp/tmp5nn9ylj1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5nn9ylj1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        if ($x == $y) return true;\n        if ($x\
    \ == $z) return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptvm4k4uv.php:24\n\
    Stack trace:\n#0 /tmp/tmptvm4k4uv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptvm4k4uv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_int($x) && is_int($y) && is_int($z)) {\n        return ($x + $y +\
    \ $z) == $x || $x == $y || $x == $z || $y == $z;\n    } else {\n        return\
    \ false;\n    }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbqs58l2.php:22\n\
    Stack trace:\n#0 /tmp/tmplbqs58l2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplbqs58l2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == '' || $y == '' || $z == '') {\n        return false;\n    }\n \
    \   if (is_numeric($x) && is_numeric($y) && is_numeric($z)) {\n        if (((int)\
    \ $x) == $x && ((int) $y) == $y && ((int) $z) == $z) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptfsol3q7.php:32\n\
    Stack trace:\n#0 /tmp/tmptfsol3q7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptfsol3q7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $n1 = $x - $y;\n    $n2 = $x - $z;\n    $n3 = $y - $z;\n    if ($n1 == 0\
    \ && $n2 == 0 && $n3 == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxm9we4fk.php:24\n\
    Stack trace:\n#0 /tmp/tmpxm9we4fk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxm9we4fk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ( ($x == $y + $z) && ($x % 1 == 0) && ($y % 1 == 0) && ($z % 1 ==\
    \ 0) );\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xjccdy3.php:19\n\
    Stack trace:\n#0 /tmp/tmp2xjccdy3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2xjccdy3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x + $y != $z) {\n        if ($x + $y < $z) {\n            return false;\n\
    \        } elseif ($z + $x < $y) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfjij4__.php:27\n\
    Stack trace:\n#0 /tmp/tmpqfjij4__.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqfjij4__.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Only compare integers\n    if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n        if ($x === $y + $z) {\n            // All integers are equal\n  \
    \          return true;\n        } else {\n            return false;\n       \
    \ }\n    } else {\n        return false;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpex099oc2.php:28\n\
    Stack trace:\n#0 /tmp/tmpex099oc2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpex099oc2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y) {\n    return $x<$z && $x>$y;\n  }\n  else if ($x == $z) {\n\
    \    return $y<$x && $y>$z;\n  }\n  else {\n    return $y<$z && $y>$x;\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf2w2eyo.php:27\n\
    Stack trace:\n#0 /tmp/tmpbf2w2eyo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbf2w2eyo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $x_int = (int) $x;\n    $y_int = (int) $y;\n    $z_int = (int) $z;\n    if\
    \ ($x_int == $x_int + $y_int + $z_int) {\n        if ($x_int == $y_int || $x_int\
    \ == $z_int) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7g5l15l.php:27\n\
    Stack trace:\n#0 /tmp/tmpb7g5l15l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpb7g5l15l.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Write your solution here\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ow6txw6.php:19\n\
    Stack trace:\n#0 /tmp/tmp2ow6txw6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2ow6txw6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Return false if any of the input numbers are non-integers\n  if (!is_integer($x)\
    \ || !is_integer($y) || !is_integer($z)) {\n    return false;\n  }\n\n  // Return\
    \ the sum of the other two numbers\n  return $x + $y == $z;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpek5qgsdk.php:25\n\
    Stack trace:\n#0 /tmp/tmpek5qgsdk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpek5qgsdk.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $x_is_int = is_int($x);\n  $y_is_int = is_int($y);\n  $z_is_int = is_int($z);\n\
    \  if (!$x_is_int || !$y_is_int || !$z_is_int) {\n    return false;\n  }\n  return\
    \ $x_is_int && $y_is_int && $z_is_int && $x + $y + $z === $x + $y + $z;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis works, but you have to have PHP 5.5.  If you\
    \ need to support PHP 5.4, you can simply use `return $x_is_int && $y_is_int &&\
    \ $z_is_int && ($x + $y + $z === $x + $y + $z);`\n<|/ c |>\n<| c |>\n: Thanks,\
    \ I fixed the answer to reflect that.\n<|/ c |>\n<| c |>\n: I added the full script\
    \ to the answer.\n<|/ c |>\n<| c |>\nThis will not work if any of the numbers\
    \ are greater than PHP_INT_MAX.  I fixed the issue by switching the return statement\
    \ to: `return $x_is_int && $y_is_int && $z_is_int && ($x + $y + $z === $x + $y\
    \ + $z);`\n<|/ c |>\n<| c |>\n: It works fine with large numbers. Try it out for\
    \ yourself.\n<|/ c |>\n<| a dscore=5 tags=php,math |>\nYou can use the PHP BCMath\
    \ functions. This is just to mention that there is a possibility that BCMath functions\
    \ are not available in your PHP version yet.\n<code>\n$int_a = 1;\n$int_b = 2;\n\
    $int_c = 2;\n\n$int_sum = (int) bcadd($int_a, $int_b, $int_c);\n$float_sum = (float)\
    \ bcadd($int_a, $int_b, $int_c);\n\nvar_dump($int_sum, $float_sum);\n</code>\n\
    Output\n<code>\nfloat(3)\nfloat(3)\n</code>\n<|/ a |>\n<| c |>\nThanks, I've been\
    \ looking for something like this. I needed to do some calculations with fractions\
    \ that didn't support floats. bcadd was exactly what I was looking for!\n<|/ c\
    \ |>\n<| c |>\nGreat tip! I used this method to get an addition with a float.\
    \ `bcadd($int_a, $int_b, $int_c, ':')`\n<|/ c |>\n<| a dscore=5 |>\nFor integers,\
    \ you can use bitwise operations.\n<code>\n<?php\n$a = 1;\n$b = 2;\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfixnwd6j.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_int($x) && is_int($y) && is_int($z)) {\n        return $x === $y ||\
    \ $x === $z || $y === $z;\n    }\n    return false;\n}\n</code>\n<|/ a tags=php,sum,compare\
    \ |>\n<| a dscore=2 |>\nIf you have a lot of numbers and you are looking to improve\
    \ your code, you can try to use arrays and loop through. \n<code>\n$numbers =\
    \ [\n    \"number1\" => 5,\n    \"number2\" => 3,\n    \"number3\" => 7,\n];\n\
    \n$sum = array_sum($numbers);\n\nforeach ($numbers as $key => $number) {\n   \
    \ if ($sum === $number) {\n        echo \"The sum is \" . $number . \" and the\
    \ key is \" . $key . \"<br>\";\n    }\n}\n</code>\n<|/ a tags=php,sum,compare\
    \ |>\n<| a dscore=2 |>\nUsing array_sum() function:\n<code>\n$sum=array_sum($array);\n\
    </code>\nthen loop through array and check whether $sum is equal to number:\n\
    <code>\n for($i=0;$i<count($array);$i++){\n    if($sum==$array[$i]){\n      echo\
    \ $sum .\" = \".$array[$i].\"<br>\";\n    }\n}\n</code>\n<|/ a tags=php,sum,compare\
    \ |>\n<| a dscore=1 |>\nFor simple number you can do this:\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1igtow5y.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return (is_int($x) && is_int($y) && is_int($z) && $x == $y + $z);\n}\n\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddnofbv5.php:19\n\
    Stack trace:\n#0 /tmp/tmpddnofbv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpddnofbv5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if (!is_numeric($x) || !is_numeric($y) || !is_numeric($z)) {\n    return false;\n\
    \  }\n\n  $x = (int) $x;\n  $y = (int) $y;\n  $z = (int) $z;\n\n  if ($x === $y\
    \ && $x === $z) {\n    return true;\n  }\n\n  return false;\n}\n</code>\n<|/ a\
    \ dscore=0 tags=php,math,numbers |>\n<| c |>\nThis does not answer the question\
    \ as asked. It just repeats the same code as before.\n<|/ c |>\n<| c |>\nThe OP\
    \ didn't ask for a complete solution to their problem, they just asked for guidance\
    \ on how to get started. I'm glad you like my solution! I wish you luck in your\
    \ programming endeavors!\n<|/ c |>\n<| c |>\nFair enough. I appreciate your attempt,\
    \ but I think the OP just wanted clarification. I appreciate your effort, but\
    \ this does not answer the question.\n<|/ c |>\n<| c |>\nOk I understand. My solution\
    \ may have not been the best solution. I think this is the best I could come up\
    \ with. Thank you for pointing this out!\n<|/ c |>\n<| c |>\nYour solution is\
    \ incorrect. It works when comparing two numbers, but it will fail in situations\
    \ where comparing three numbers is more complicated than comparing two, such as\
    \ comparing three numbers to their sum or to their product of 2 or 3. It will\
    \ also fail if one or both of the numbers is zero. It will also fail if they are\
    \ negative. Your solution does not handle a situation where the three numbers\
    \ are equal.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpytimatik.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return is_int($x) && is_int($y) && is_int($z) &&\n           $x == $y ||\
    \ $x == $z || $y == $z;\n}\n</code>\n<|/ a tags=sum,php |>\n<| c |>\nThis is very\
    \ clean and readable and easy to understand, thank you!\n<|/ c |>\n<| c |>\nI\
    \ should also note that there are a couple other ways to do this: (a) using the\
    \ `&&` operator, (b) using the `+` operator, (c) using `if-else`, or (d) using\
    \ `switch` with a `case` for each possible outcome.\n<|/ c |>\n<| a dscore=2 tags=sum,php\
    \ |>\nHere is yet another approach using array_reduce() to sum up the values:\n\
    <code>\n$arr = [-4, -3, -2, -1, 1, 2, 3, 4];\nvar_dump(array_reduce($arr, function($a,\
    \ $b) { return $a + $b; }));\n</code>\nIt would output \n<code>\nint(10)\n</code>\n\
    <|/ a |>\n<| c |>\nVery clever, thank you!\n<|/ c |>\n<| c |>\nThis doesn't quite\
    \ work as expected - it just sums up all the values, and leaves the negatives\
    \ intact...\n<|/ c |>\n<| c |>\nI didn't think about negative numbers. So it's\
    \ definitely a better approach. But I wonder how this code will look like with\
    \ negative numbers\n<|/ c |>\n<| c |>\nThe answer to this question has it pretty\
    \ much worked out - the only negative numbers in the array are the ones we're\
    \ summing up.\n<|/ c |>\n<| a tags=sum,php |>\nHere is a solution using array_reduce\
    \ and array_map functions:\n<code>\n$numbers = [-4, -3, -2, -1, 1, 2, 3, 4];\n\
    \nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptdiifdcs.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x + $y + $z == ($x + $y) || $x + $y + $z == ($x + $y + $z) || $x\
    \ + $y + $z == ($x + $y + $z * 2)) ? true : false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz35b4zn0.php:20\n\
    Stack trace:\n#0 /tmp/tmpz35b4zn0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpz35b4zn0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y + $z) return true;\n  if ($x == $y - $z) return true;\n  if ($x\
    \ == $y * $z) return true;\n  if ($y == $z * $x) return true;\n  if ($y == $z\
    \ * $y) return true;\n  if ($z == $x * $y) return true;\n  return false;\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6p432a7.php:26\n\
    Stack trace:\n#0 /tmp/tmpv6p432a7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpv6p432a7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \tif (is_numeric($x) && is_numeric($y) && is_numeric($z)) {\n\t\tif ($x + $y ==\
    \ $z) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\
    \treturn false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pmo8275.php:27\n\
    Stack trace:\n#0 /tmp/tmp9pmo8275.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9pmo8275.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \t// Check if all numbers are integers\n\tif (is_int($x) && is_int($y) && is_int($z))\
    \ {\n\t\t// Check if any number is equal to the sum of the other two\n\t\treturn\
    \ $x === ($y + $z);\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp013pyb2k.php:25\n\
    Stack trace:\n#0 /tmp/tmp013pyb2k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp013pyb2k.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Check that the inputs are integers.\n  // Return true if the inputs satisfy\
    \ those conditions.\n  // Return false otherwise.\n  if ($x === (int) $x && $y\
    \ === (int) $y && $z === (int) $z) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptj60cwvs.php:28\n\
    Stack trace:\n#0 /tmp/tmptj60cwvs.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptj60cwvs.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $xint = is_int($x);\n    $yint = is_int($y);\n    $zint = is_int($z);\n \
    \   if ($xint && $yint && $zint) {\n        return ($x + $y + $z) == $x;\n   \
    \ }\n    return !$xint || !$yint || !$zint;\n}\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_k0cwni.php:24\n\
    Stack trace:\n#0 /tmp/tmpn_k0cwni.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn_k0cwni.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \tif (is_integer($x) && is_integer($y) && is_integer($z)) {\n\t\tif ($x == $y\
    \ || $x == $z || $y == $z) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0v5sywu.php:25\n\
    Stack trace:\n#0 /tmp/tmpb0v5sywu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpb0v5sywu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \tif (is_int($x) && is_int($y) && is_int($z)) {\n\t\treturn ($x + $y + $z == ($x\
    \ + $y));\n\t}\n\telse { return false; }\n}\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_434dw7m.php:21\n\
    Stack trace:\n#0 /tmp/tmp_434dw7m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_434dw7m.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y + $z) {\n    if ($x % 1 == 0 && $y % 1 == 0 && $z % 1 == 0) {\n\
    \      return true;\n    } else {\n      return false;\n    }\n  } else {\n  \
    \  return false;\n  }\n}\n</code>\nAnd then add that to your code. Now the function\
    \ will be able to compare 3 numbers. You can also add more if statements to add\
    \ more conditions.\n<|/ a |>\n<| c |>\nI haven't tested it yet, but I see what\
    \ you mean. Thanks for your help!\n<|/ c |>\n<| a |>\n<code>\n<?php\n$input =\
    \ '4';\n$input2 = '1';\n$input3 = '2';\n$output = '3';\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcr24tf5j.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x + $y == $z) || ($x == $z && $y == $z) || ($x != $z && $y != $z\
    \ && is_int($x) && is_int($y) && is_int($z));\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xkb2za5.php:23\n\
    Stack trace:\n#0 /tmp/tmp3xkb2za5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3xkb2za5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if (is_int($x) && is_int($y) && is_int($z)) {\n    return $x === $y + $z;\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsilabza.php:22\n\
    Stack trace:\n#0 /tmp/tmphsilabza.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphsilabza.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if (!is_numeric($x)) {\n    throw new InvalidArgumentException('$x must be\
    \ numeric');\n  }\n  if (!is_numeric($y)) {\n    throw new InvalidArgumentException('$y\
    \ must be numeric');\n  }\n  if (!is_numeric($z)) {\n    throw new InvalidArgumentException('$z\
    \ must be numeric');\n  }\n\n  return $x === $y + $z;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpersc4t5q.php:28\n\
    Stack trace:\n#0 /tmp/tmpersc4t5q.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpersc4t5q.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $a_num = intval($x);\n  $b_num = intval($y);\n  $c_num = intval($z);\n  if\
    \ ($a_num == $b_num + $c_num) {\n    return true;\n  }\n  return false;\n}\n\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4qdu9o3.php:25\n\
    Stack trace:\n#0 /tmp/tmpo4qdu9o3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo4qdu9o3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x<0 || $y<0 || $z<0) return false;\n    return ($x+$y+$z)==0;\n}\n\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ts59ms8.php:20\n\
    Stack trace:\n#0 /tmp/tmp9ts59ms8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9ts59ms8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \t// Check that all three arguments are integers.\n\t$x_int = intval($x);\n\t\
    $y_int = intval($y);\n\t$z_int = intval($z);\n\n\t// If any of them are 0, they\
    \ can't add up to anything. No point in checking that here.\n\tif ($x_int == 0)\
    \ {\n\t\treturn true;\n\t}\n\tif ($y_int == 0) {\n\t\treturn false;\n\t}\n\tif\
    \ ($z_int == 0) {\n\t\treturn false;\n\t}\n\n\t// If any of them are non-integers,\
    \ return false.\n\tif ($x_int != $x_int) {\n\t\treturn false;\n\t}\n\tif ($y_int\
    \ != $y_int) {\n\t\treturn false;\n\t}\n\tif ($z_int != $z_int) {\n\t\treturn\
    \ false;\n\t}\n\n\t// If they're all integers, return true.\n\treturn true;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36gvgg6h.php:47\n\
    Stack trace:\n#0 /tmp/tmp36gvgg6h.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp36gvgg6h.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf3fhl9p.php:21\n\
    Stack trace:\n#0 /tmp/tmpbf3fhl9p.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbf3fhl9p.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y && $x == $z) return true;\n    if (!is_int($x) || !is_int($y)\
    \ || !is_int($z)) return false;\n    return $x + $y == $z;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39srmask.php:21\n\
    Stack trace:\n#0 /tmp/tmp39srmask.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp39srmask.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $x = intval($x);\n    $y = intval($y);\n    $z = intval($z);\n    return\
    \ ($x + $y + $z === 0);\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphds6kjsm.php:21\n\
    Stack trace:\n#0 /tmp/tmphds6kjsm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphds6kjsm.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // The sum of the first 3 numbers must be equal to the sum of the last 2\
    \ numbers,\n    // and the sum of the first 3 numbers must be equal to the first\
    \ 3 numbers of the last 2 numbers.\n    if ($x === $y + $z && $y === $x + $z &&\
    \ $x === $x + $y) return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpniv_6phy.php:21\n\
    Stack trace:\n#0 /tmp/tmpniv_6phy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpniv_6phy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x == $y + $z && is_int($x) && is_int($y) && is_int($z));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5cfp6z1x.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return is_numeric($x) && is_numeric($y) && is_numeric($z) && $x != '' &&\
    \ $y != '' && $z != '';\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvoaa0nn.php:20\n\
    Stack trace:\n#0 /tmp/tmpgvoaa0nn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgvoaa0nn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $z2 = $x + $y;\n    if ($z === $z2) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bap5nnl.php:23\n\
    Stack trace:\n#0 /tmp/tmp9bap5nnl.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9bap5nnl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n    if ($x == $y + $z) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xnzc84k.php:24\n\
    Stack trace:\n#0 /tmp/tmp3xnzc84k.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3xnzc84k.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \treturn $x + $y == $z;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5zpw3fh.php:19\n\
    Stack trace:\n#0 /tmp/tmpd5zpw3fh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpd5zpw3fh.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_numeric($x) && is_numeric($y) && is_numeric($z)) {\n        return\
    \ $x != $x + $y != $y + $z;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo9hmn6ks.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Only need to check that all three numbers are integers.\n    return is_int($x)\
    \ && is_int($y) && is_int($z);\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbo_rbpk.php:23\n\
    Stack trace:\n#0 /tmp/tmpdbo_rbpk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdbo_rbpk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return $x === $y + $z;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_mnsrr8.php:18\n\
    Stack trace:\n#0 /tmp/tmpm_mnsrr8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm_mnsrr8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y || $y === $z) {\n        return true;\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\nTry this\n<code>\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpksidldm1.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y || $x === $z || $y === $z) return true;\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpri1426h3.php:20\n\
    Stack trace:\n#0 /tmp/tmpri1426h3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpri1426h3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (!is_int($x) || !is_int($y) || !is_int($z)) {\n        return false;\n\
    \    }\n    $x = abs($x);\n    $y = abs($y);\n    $z = abs($z);\n    return ($x\
    \ + $y + $z == $x) + \n           ($y + $z == $y) + \n           ($z + $x == $z);\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc827wlgp.php:27\n\
    Stack trace:\n#0 /tmp/tmpc827wlgp.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc827wlgp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $return = is_int($x) && is_int($y) && is_int($z);\n  if($return) {\n    $return\
    \ = $x + $y + $z == $x + $y + $z;\n  }\n  return $return;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1km00_l1.php:25\n\
    Stack trace:\n#0 /tmp/tmp1km00_l1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1km00_l1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $sum = abs($x + $y + $z);\n    $min = $min ?: $x;\n    $max = $max ?: $z;\n\
    \    $range = abs($max - $min);\n    return $sum == $x || $sum == $y || $sum ==\
    \ $z || $sum == $range && $x % 1 == 0 && $y % 1 == 0 && $z % 1 == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ss0fwu8.php:23\n\
    Stack trace:\n#0 /tmp/tmp4ss0fwu8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4ss0fwu8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if($x == $y + $z) {\n    return true;\n  } else if($x < $y && $y < $z) {\n\
    \    return true;\n  } else if($y < $x && $x < $z) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipbis16c.php:26\n\
    Stack trace:\n#0 /tmp/tmpipbis16c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpipbis16c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x + $y + $z == 15);\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9uarb11.php:19\n\
    Stack trace:\n#0 /tmp/tmps9uarb11.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps9uarb11.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $x_is_int = is_int($x);\n    $y_is_int = is_int($y);\n    $z_is_int = is_int($z);\n\
    \    $x_is_int = is_int($x_is_int);\n    $y_is_int = is_int($y_is_int);\n    $z_is_int\
    \ = is_int($z_is_int);\n\n    $x_is_int = $x_is_int and $x_is_int and $x_is_int;\n\
    \    $y_is_int = $y_is_int and $y_is_int and $y_is_int;\n    $z_is_int = $z_is_int\
    \ and $z_is_int and $z_is_int;\n\n    return $x_is_int and $y_is_int and $z_is_int;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1cv8q9xx.php:30\n\
    Stack trace:\n#0 /tmp/tmp1cv8q9xx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1cv8q9xx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return $x == $y + $z && is_int($x) && is_int($y) && is_int($z);\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzo2zi0lt.php:18\n\
    Stack trace:\n#0 /tmp/tmpzo2zi0lt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzo2zi0lt.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y || $y == $z || $x == $z) {\n    return ($x == $y) ? true : false;\n\
    \  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeec7zazf.php:23\n\
    Stack trace:\n#0 /tmp/tmpeec7zazf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpeec7zazf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return ($x + $y == $z) || ($x != $z && $y != $z && ($x + $z == $y));\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5sdawey.php:20\n\
    Stack trace:\n#0 /tmp/tmph5sdawey.php(30): test()\n#1 {main}\n  thrown in /tmp/tmph5sdawey.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y - $z)\
    \ {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return true;\n\
    \    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa96hrdp.php:32\n\
    Stack trace:\n#0 /tmp/tmpsa96hrdp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsa96hrdp.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Only numbers should pass this function.\n    if (! is_int($x) || ! is_int($y)\
    \ || ! is_int($z)) {\n        return false;\n    }\n\n    return ($x + $y + $z\
    \ == 3);\n}\n</code>\n<|/ a |>\n<| a |>\nYou can check if 3 numbers are equal\
    \ this way:\n<code>\n<?php\n$a = 5;\n$b = 2;\n$c = 7;\n\nif($a == $b && $a ==\
    \ $c){\n    echo \"Match\";\n}\n</code>\n<|/ a dscore=2 tags=php |>\n<| a |>\n\
    This code will work for you if you have a minimum amount of different combinations.\
    \ Let's say you have 3 different combinations:\n<code>\n$a = 5; $b = 2; $c = 3;\n\
    $d = $a + $b; $e = $a + $c; $f = $e + $c;\nif ($a == $d && $b == $e && $c == $f)\
    \ {\n    echo \"They are equal!\";\n} else {\n    echo \"They are not equal!\"\
    ;\n}\n</code>\n<|/ a tags=php dscore=2 |>\n<| c |>\nIf you're going to use multiple\
    \ variables, you should at least name them differently, and use different ones\
    \ for each comparison.  `if($x == $d + $e && $y == $f + $c)` makes it very hard\
    \ to tell what's going on with your code.\n<|/ c |>\n<| a tags=php |>\n<code>\n\
    <?php \n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzdojlj43.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return is_integer($x) && is_integer($y) && is_integer($z) && $x == $y ||\
    \ $x == $z || $y == $z;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ybde8bq.php:19\n\
    Stack trace:\n#0 /tmp/tmp8ybde8bq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8ybde8bq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x + $y + $z == intval($x + $y + $z));\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02m0ccxc.php:20\n\
    Stack trace:\n#0 /tmp/tmp02m0ccxc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp02m0ccxc.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return $x === $y + $z;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupot_350.php:18\n\
    Stack trace:\n#0 /tmp/tmpupot_350.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpupot_350.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return $x === $y + $z;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nA couple\
    \ of good answers here, but here's a PHP function that returns a Boolean, which\
    \ means it returns true if the two values are equal:\n<code>\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsrncq63s.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if(!is_int($x) || !is_int($y) || !is_int($z)) return false;\n    return $x+$y+$z\
    \ === sum(array($x, $y, $z));\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum() in /tmp/tmp4ikp3r32.php:12\n\
    Stack trace:\n#0 /tmp/tmp4ikp3r32.php(16): any_int(2, 3, 1)\n#1 /tmp/tmp4ikp3r32.php(20):\
    \ candidate(2, 3, 1)\n#2 /tmp/tmp4ikp3r32.php(32): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp4ikp3r32.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $x = intval($x);\n  $y = intval($y);\n  $z = intval($z);\n\n  if ( ($x + $y)\
    \ == $z) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8pb8ah5.php:26\n\
    Stack trace:\n#0 /tmp/tmpa8pb8ah5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa8pb8ah5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here.\n    return true;\n}\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpk810y3.php:20\n\
    Stack trace:\n#0 /tmp/tmpwpk810y3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwpk810y3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y + $z) {\n    return true;\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bsunvn4.php:21\n\
    Stack trace:\n#0 /tmp/tmp9bsunvn4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9bsunvn4.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n    $first = $x;\n    $second = $y;\n    $third = $z;\n\
    \    if($first == $second)\n    {\n        if($second == $third)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else\n    {\n        if($second == $third)\n \
    \       {\n            return false;\n        }\n        else\n        {\n   \
    \         return true;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3cml_x7.php:45\n\
    Stack trace:\n#0 /tmp/tmpp3cml_x7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpp3cml_x7.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $is_any_int_1 = ($x == $y + $z);\n    $is_any_int_2 = ($y == $z + $x);\n\
    \    $is_any_int_3 = is_int($x) && is_int($y) && is_int($z);\n\n    return (bool)($is_any_int_1\
    \ || $is_any_int_2 || $is_any_int_3);\n}\n\nfunction candidate(...$args) {\n \
    \   return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptik_o49x.php:25\n\
    Stack trace:\n#0 /tmp/tmptik_o49x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptik_o49x.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Require the numbers to be integers\n  require_once('class.Integer.php');\n\
    \  require_once('class.Float.php');\n\n  $x = new Integer('integer', $x);\n  $y\
    \ = new Integer('integer', $y);\n  $z = new Integer('integer', $z);\n\n  // Check\
    \ to see if any of the numbers are equal to the sum of the other two.\n  if ($x->isGreaterThan($y)\
    \ && $y->isGreaterThan($z)) {\n    if ($x->isLessThan($y) && $y->isGreaterThan($z))\
    \ {\n      if ($x->isLessThan($z)) {\n        return true;\n      }\n    } else\
    \ {\n      if ($z->isLessThan($y)) {\n        return true;\n      }\n    }\n \
    \ }\n\n  return false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: require_once(class.Integer.php): failed to open stream: No such\
    \ file or directory in /tmp/tmpe_vron26.php on line 12\n\nFatal error: require_once():\
    \ Failed opening required 'class.Integer.php' (include_path='.:') in /tmp/tmpe_vron26.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \t// Your code here\n\t// return ((is_int($x)) && (is_int($y)) && (is_int($z)))\
    \ && ($x + $y + $z === ($x + $y));\n\treturn (((is_int($x)) && (is_int($y)) &&\
    \ (is_int($z))) && ($x + $y + $z === ($x + $y)));\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1d2g_ife.php:20\n\
    Stack trace:\n#0 /tmp/tmp1d2g_ife.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1d2g_ife.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $sum = $x + $y + $z;\n    return ($sum == ($x + $y + $z)) && ($sum % 1 ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgrxqp6b.php:21\n\
    Stack trace:\n#0 /tmp/tmpbgrxqp6b.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbgrxqp6b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x != $x + $y || $y != $y + $z) {\n        return false;\n    }\n   \
    \ return $x === $x + $y && $y === $y + $z;\n}\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd53fj4g3.php:21\n\
    Stack trace:\n#0 /tmp/tmpd53fj4g3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd53fj4g3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        $sum = ($x + $y);\n        if (is_int($x) &&\
    \ is_int($y) && is_int($z) && is_int($sum)) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuizftl1v.php:24\n\
    Stack trace:\n#0 /tmp/tmpuizftl1v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuizftl1v.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Only integers are allowed for $x, $y, and $z\n  if ($x % 1 != 0 || $y %\
    \ 1 != 0 || $z % 1 != 0) {\n    return false;\n  }\n  // Ensure that they are\
    \ all integers\n  else if ($x % 1 == 0 && $y % 1 == 0 && $z % 1 == 0) {\n    return\
    \ true;\n  }\n  // Ensure that $z is the sum of the other two numbers\n  else\
    \ {\n    return $x == $y + $z;\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpncupna2f.php:31\n\
    Stack trace:\n#0 /tmp/tmpncupna2f.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpncupna2f.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x == $y + $z) && ($x != $y || $x != $z) && ($x != $z);\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiashx0xi.php:18\n\
    Stack trace:\n#0 /tmp/tmpiashx0xi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiashx0xi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $xx = intval($x);\n  $yy = intval($y);\n  $zz = intval($z);\n  if ($xx != $yy\
    \ && $yy != $zz) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8vfyw7uq.php:28\n\
    Stack trace:\n#0 /tmp/tmp8vfyw7uq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8vfyw7uq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $sum = (int) $x + (int) $y;\n  if ($x == $sum && $y == $sum) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j6i23qw.php:23\n\
    Stack trace:\n#0 /tmp/tmp3j6i23qw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3j6i23qw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if (is_int($x) && is_int($y) && is_int($z)) {\n    return $x === $y || $x ===\
    \ $z || $y === $z;\n  }\n  return false;\n}\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4s06y3y5.php:21\n\
    Stack trace:\n#0 /tmp/tmp4s06y3y5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4s06y3y5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x + $y == $z)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw54l81nw.php:24\n\
    Stack trace:\n#0 /tmp/tmpw54l81nw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw54l81nw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x == $y + $z && $x == (int)$x && $y == (int)$y && $z == (int)$z)\
    \ ? true : false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyrk1ee8w.php:18\n\
    Stack trace:\n#0 /tmp/tmpyrk1ee8w.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyrk1ee8w.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_int($x) && is_int($y) && is_int($z)) {\n        $sum = $x + $y;\n\
    \        return is_int($sum) && $sum == $z;\n    }\n    return false;\n}\n</code>\n\
    Now we can make our code more readable, and less cluttered - using a function,\
    \ and returning a value.\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpix5m_nm3.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return array_sum(array($x, $y, $z)) === $x || array_sum(array($x, $y, $z))\
    \ === $y || array_sum(array($x, $y, $z)) === $z;\n}\n$a = any_int(5,2,7);\n$b\
    \ = any_int(3,2,2);\n$c = any_int(3,-2,1);\n$d = any_int(3.6,-2.2,2);\necho $a;\n\
    echo $b;\necho $c;\necho $d;\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps84ee7vp.php:26\n\
    Stack trace:\n#0 /tmp/tmps84ee7vp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmps84ee7vp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $x_is_int = ($x === intval($x));\n  $y_is_int = ($y === intval($y));\n  $z_is_int\
    \ = ($z === intval($z));\n  if ($x_is_int && $y_is_int && $z_is_int) {\n    if\
    \ ($x !== 0 && $y !== 0 && $z !== 0) {\n      if ($x + $y + $z === intval($x +\
    \ $y + $z)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\
    \nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5uezhm0u.php:32\n\
    Stack trace:\n#0 /tmp/tmp5uezhm0u.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5uezhm0u.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x !== $y && $x !== $z) {\n        if ($x !== $z) {\n            return\
    \ $x === $y || $x === $z;\n        } else {\n            return $y === $z || $y\
    \ === $x;\n        }\n    } else if ($y !== $z) {\n        return $y === $z;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmw4h9s9s.php:28\n\
    Stack trace:\n#0 /tmp/tmpmw4h9s9s.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmw4h9s9s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_int($x) && is_int($y) && is_int($z)) {\n        return $x === $y +\
    \ $z;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7cfd78i.php:21\n\
    Stack trace:\n#0 /tmp/tmpo7cfd78i.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo7cfd78i.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y == $z)\
    \ {\n        return true;\n    }\n    if ($x == 0 || $y == 0) {\n        return\
    \ false;\n    }\n    $x_is_integer = is_integer($x);\n    $y_is_integer = is_integer($y);\n\
    \    $z_is_integer = is_integer($z);\n    if ($x_is_integer && $y_is_integer &&\
    \ $z_is_integer) {\n        if ($x == 0 || $y == 0 || $z == 0) {\n           \
    \ return true;\n        }\n        $x_plus_y = $x + $y;\n        $x_minus_z =\
    \ abs($x) - abs($z);\n        $x_minus_y_plus_z = abs($x) - abs($y) - abs($z);\n\
    \        if ($x_plus_y == $x_minus_z || $x_plus_y == $x_minus_y_plus_z) {\n  \
    \          return true;\n        }\n        $x_plus_z = $x + $z;\n        $x_minus_y\
    \ = abs($x) - abs($y);\n        $x_minus_y_plus_z = abs($x) - abs($y) - abs($z);\n\
    \        if ($x_plus_z == $x_minus_y || $x_plus_z == $x_minus_y_plus_z) {\n  \
    \          return true;\n        }\n        $x_minus_z = $x - $z;\n        $x_plus_y\
    \ = $x + $y;\n        $x_minus_y_plus_z = abs($x) - abs($y) - abs($z);\n     \
    \   if ($x_minus_y == $x_minus_z || $x_minus_y == $x_minus_y_plus_z) {\n     \
    \       return true;\n        }\n        $x_minus_y = $x - $y;\n        $x_plus_z\
    \ = $x + $z;\n        $x_minus_z_plus_y = abs($x) - abs($z) - abs($y);\n     \
    \   if ($x_minus_z == $x_plus_y || $x_minus_z == $x_minus_y_plus_z) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8luxabxv.php:60\n\
    Stack trace:\n#0 /tmp/tmp8luxabxv.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp8luxabxv.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x + $y == $z && is_int($x) && is_int($y) && is_int($z));\n}\n\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mpirypk.php:19\n\
    Stack trace:\n#0 /tmp/tmp0mpirypk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0mpirypk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return ($x == $y + $z || $x == $y - $z || $x == $z + $y || $x == $z - $y);\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpav9z7pmf.php:20\n\
    Stack trace:\n#0 /tmp/tmpav9z7pmf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpav9z7pmf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y + $z) return false;\n  else if (($x != $y) && ($x != $z) && ($z\
    \ != $y)) return false;\n  else if (($x != $y) && ($x != $z) && ($z != $y)) return\
    \ true;\n  else if (($x != $y) && ($x != $z) && ($y != $z)) return false;\n  else\
    \ if (($x == $y) && ($x == $z) && ($y == $z)) return true;\n  else if (($x !=\
    \ $y) && ($x != $z) && ($z != $y)) return false;\n  else if (($x != $y) && ($x\
    \ != $z) && ($z != $y)) return true;\n  else if (($x == $y) && ($x != $z) && ($z\
    \ != $y)) return false;\n  else if (($x == $y) && ($x != $z) && ($y != $z)) return\
    \ false;\n  else if (($x != $y) && ($x == $z) && ($y == $z)) return true;\n  else\
    \ if (($x != $y) && ($x != $z) && ($y != $z)) return false;\n  else if (($x !=\
    \ $y) && ($x != $z) && ($y != $z)) return true;\n  else return false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp305x3606.php:30\n\
    Stack trace:\n#0 /tmp/tmp305x3606.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp305x3606.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x == $y + $z) && ($x === intval($x)) && ($y === intval($y)) && ($z\
    \ === intval($z));\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvskfidmm.php:18\n\
    Stack trace:\n#0 /tmp/tmpvskfidmm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvskfidmm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return ($x === $y || $x === $z || $y === $z);\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvp7wowog.php:19\n\
    Stack trace:\n#0 /tmp/tmpvp7wowog.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvp7wowog.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // If one number is 0, or one number is 1, return true to indicate that all\
    \ 3 are integers.\n  // We only want to return true if all 3 are integers, because\
    \ zero is also 1.\n  // We use the double equals sign to check if one number is\
    \ equal to another.\n  if ($x == 0 || $x == 1) {\n    return true;\n  }\n\n  if\
    \ ($y == 0 || $y == 1) {\n    return true;\n  }\n\n  if ($z == 0 || $z == 1) {\n\
    \    return true;\n  }\n\n  // If none of them are 0, or one is 1, return false.\n\
    \  return false;\n}\n</code>\n<|/ a |>\n<| c |>\nWhat about `any_int(3.6, -2.2,\
    \ 2)`?\n<|/ c |>\n<| c |>\nThanks for the comment. I just updated my answer to\
    \ include that.\n<|/ c |>\n<| c |>\nThank you for the great answer, but how would\
    \ you do this in JavaScript?\n<|/ c |>\n<| a dscore=2 |>\nHere is a version using\
    \ three loops instead of three ifs. This will make your function more readable,\
    \ and also will work correctly with floating point numbers:\n\n<code>\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0_2hrw0b.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x != $y) return false;\n    if ($x == $z) return true;\n    if ($y !=\
    \ $z) return false;\n    return true;\n}\nfunction candidate(...$args) {\n   \
    \ return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc018p2d.php:21\n\
    Stack trace:\n#0 /tmp/tmpvc018p2d.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvc018p2d.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n    if ($x<0 || $y<0 || $z<0) {\n        return false;\n\
    \    }\n    if ($x==$y || $x==$z) {\n        return true;\n    }\n    if ($y==$z)\
    \ {\n        return true;\n    }\n    if ($x<$y && $x<$z) {\n        return true;\n\
    \    }\n    if ($y<$z) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphip2tjx5.php:35\n\
    Stack trace:\n#0 /tmp/tmphip2tjx5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphip2tjx5.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y + $z) {\n    return true;\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo09hkn9.php:21\n\
    Stack trace:\n#0 /tmp/tmpjo09hkn9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjo09hkn9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (($x + $y) == $z) {\n        foreach (range($x, $z) as $number) {\n  \
    \          if (!is_int($number)) {\n                return false;\n          \
    \  }\n        }\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6jeyp1a.php:26\n\
    Stack trace:\n#0 /tmp/tmpx6jeyp1a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx6jeyp1a.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Use a temporary variable to hold the sum of x and y\n    $s = $x + $y;\n\
    \n    // If the sum is equal to the other two, return true\n    if ($s == $z)\
    \ {\n        return true;\n    }\n\n    // If there are different signs for the\
    \ sum, return false\n    if ($x != $y) {\n        return false;\n    }\n\n   \
    \ // If the first number has more digits than the second, return false\n    if\
    \ (strlen($x) < strlen($y)) {\n        return false;\n    }\n\n    // If the first\
    \ number has fewer digits than the second, return true\n    if (strlen($x) > strlen($y))\
    \ {\n        return true;\n    }\n\n    // Otherwise, iterate through both numbers\
    \ and return true if any are equal\n    $xy = str_pad($x, strlen($y), '0', STR_PAD_RIGHT);\n\
    \    $yz = str_pad($y, strlen($z), '0', STR_PAD_RIGHT);\n    for ($i = strlen($x)\
    \ - 1; $i >= 0; $i--) {\n        if ($xy[$i] != $yz[$i]) {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nI'm sorry, but I do not understand what you've done? Why not just\
    \ use $x + $y == $z ? It's not any harder than the code in the question and it\
    \ would work with any type.\n<|/ c |>\n<| c |>\nThe code in the question is actually\
    \ a lot simpler, but unfortunately that won't work with numbers of any type, so\
    \ I included a generalized version. Also added explanation to the code itself.\n\
    <|/ c |>\n<| c |>\nThank you very much for your answer! I just want to add that\
    \ I had to change `if ($x != $y)` to `$x != $z` and `if ($y != $z)` to `$y !=\
    \ $z`. I don't know why, but the former always returned `false` and the latter\
    \ always returned `true` when `any_int(3, -2, 1)` was used.\n<|/ c |>\n<| c |>\n\
    Sorry, you're absolutely right! I should really have tested it, so I did now.\
    \ I'll update the code so it will be clearer in the future.\n<|/ c |>\n<| a tags=php,math\
    \ |>\nIf you know what type your variables are, then you can cast them to their\
    \ correct type before doing any arithmetic operations:\n<code>\n$a = '3';\n$b\
    \ = '-2';\n$c = '1';\n\n$a = (int) $a;\n$b = (int) $b;\n$c = (int) $c;\n</code>\n\
    \nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxyd2evnh.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Return true if the sum of the numbers is equal to any of the numbers.\n\
    \    if ($x + $y == $z) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvopv5sw.php:24\n\
    Stack trace:\n#0 /tmp/tmpsvopv5sw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsvopv5sw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Return the result of the comparison\n    return ($x == $y + $z);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php |>\n<code>\n<?php \n$a1=5;\n$a2=2;\n\
    $b1=2;\n$b2=2;\n$c1=1;\n$c2=1;\n$d1='';\n$d2='';\n$f3=false;\n$f4=false;\n$f5=false;\n\
    if($a1==$b1)\n{\n    $d1='=';\n    $f1='=';\n    $f3=true;\n}\nif($a1==$c1)\n\
    {\n    $d2='=';\n    $f2='=';\n    $f4=true;\n}\nif($b2==$c1)\n{\n    $d1='=';\n\
    \    $f3=true;\n}\nif($a2==$b2)\n{\n    $d2='=';\n    $f4=true;\n}\nif($a1==$d1)\n\
    {\n    $d3='=';\n    $f5=true;\n}\nif($a2==$d2)\n{\n    $d5='=';\n    $f5=true;\n\
    }\nif($b1==$c1)\n{\n    $d3='=';\n    $f5=true;\n}\nif($a2==$d3)\n{\n    $d4='=';\n\
    \    $f5=true;\n}\nif($a1==$d3)\n{\n    $d6='=';\n    $f5=true;\n}\nif($b2==$d4)\n\
    {\n    $d6='=';\n    $f5=true;\n}\nif($a1==$d6)\n{\n    $f7='=';\n}\nif($b2==$d5)\n\
    {\n    $f7='=';\n}\nif($a3==$a2)\n{\n    $f7='=';\n}\nif($a3==$b2)\n{\n    $f7='=';\n\
    }\nif($a3==$c2)\n{\n    $f7='=';\n}\nif($a3==$d2)\n{\n    $f7='=';\n}\nif($a3==$d3)\n\
    {\n    $f7='=';\n}\nif($a3==$d4)\n{\n    $f7='=';\n}\nif($a3==$d5)\n{\n    $f7='=';\n\
    }\nif($a1==$f1)\n{\n    $f7='=';\n}\nif($\nfunction candidate(...$args) {\n  \
    \  return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqk07fubi.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Add together the three numbers.\n  $total = $x + $y + $z;\n  // Return true\
    \ if the total equals the sum of the other two.\n  if ($total == ($x + $y)) {\n\
    \    return true;\n  }\n  // Return false if any number doesn't add up to the\
    \ total.\n  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphf96c4jn.php:26\n\
    Stack trace:\n#0 /tmp/tmphf96c4jn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphf96c4jn.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $xandy = $x & $y;\n    $xory = $x | $y;\n    $notx = ~$x;\n    $noty = ~$y;\n\
    \    $zandy = $z & $y;\n    $zory = $z | $y;\n    $notz = ~$z;\n    return ($xandy\
    \ | $xory | $notx | $noty | $zandy | $zory | $notz == 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcacxkf6.php:26\n\
    Stack trace:\n#0 /tmp/tmplcacxkf6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplcacxkf6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if (!is_int($x)) {\n    return false;\n  }\n  if (!is_int($y)) {\n    return\
    \ false;\n  }\n  if (!is_int($z)) {\n    return false;\n  }\n  return ($x == $y\
    \ + $z);\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvyrhjh9h.php:27\n\
    Stack trace:\n#0 /tmp/tmpvyrhjh9h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvyrhjh9h.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if(is_int($x) && is_int($y) && is_int($z)) {\n    $xy = $x * $y;\n    $xz =\
    \ $x * $z;\n\n    if(is_int($xy) && is_int($xz)) {\n      return $xy == $xz;\n\
    \    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6fcbjzr.php:30\n\
    Stack trace:\n#0 /tmp/tmpg6fcbjzr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg6fcbjzr.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    \n    if (is_numeric($x) && is_numeric($y) && is_numeric($z)) {\n       \
    \ $result = ($x == $y || $x == $z || $y == $z);\n    } else {\n        $result\
    \ = false;\n    }\n    \n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6sng3lm.php:26\n\
    Stack trace:\n#0 /tmp/tmpn6sng3lm.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn6sng3lm.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y || $x == $z) {\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimvf6zfb.php:23\n\
    Stack trace:\n#0 /tmp/tmpimvf6zfb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpimvf6zfb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // All three numbers must be integers.\n  // Return False if one or both of\
    \ the numbers is NOT integer.\n  if (!is_integer($x) || !is_integer($y) || !is_integer($z))\
    \ return false;\n  // Add up all numbers.\n  $sum = $x + $y + $z;\n  // Return\
    \ True if $x is equal to the sum of the other two.\n  if ($sum == $x || $sum ==\
    \ $y || $sum == $z) return true;\n  // Return False otherwise.\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbj3nn41r.php:27\n\
    Stack trace:\n#0 /tmp/tmpbj3nn41r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbj3nn41r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Only integers can be summed\n    $sum = $x + $y;\n    $sum = is_int($sum)\
    \ ? $sum : $x + $y;\n    $sum = is_int($sum) ? $sum : $x + $y;\n    $sum = is_int($sum)\
    \ ? $sum : $x + $y;\n    $sum = is_int($sum) ? $sum : $x + $y;\n    $sum = is_int($sum)\
    \ ? $sum : $x + $y;\n    $sum = is_int($sum) ? $sum : $x + $y;\n    $sum = is_int($sum)\
    \ ? $sum : $x + $y;\n    $sum = is_int($sum) ? $sum : $x + $y;\n    $sum = is_int($sum)\
    \ ? $sum : $x + $y;\n    $sum = is_int($sum) ? $sum : $x + $y;\n    return $sum\
    \ == $z && $x != 0 && $y != 0 && $z != 0;\n}\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnc7kwrn.php:30\n\
    Stack trace:\n#0 /tmp/tmpnnc7kwrn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnnc7kwrn.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \tif ($x == $y || $x == $z || $y == $z) {\n\t\treturn ($x == $y) || ($x == $z)\
    \ || ($y == $z);\n\t}\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1fpnn0g.php:21\n\
    Stack trace:\n#0 /tmp/tmpp1fpnn0g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpp1fpnn0g.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajj_3w_6.php:19\n\
    Stack trace:\n#0 /tmp/tmpajj_3w_6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpajj_3w_6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $int1 = intval($x);\n    $int2 = intval($y);\n    $int3 = intval($z);\n\n\
    \    if ($int1 < $int2 + $int3) {\n        return true;\n    }\n\n    if ($int2\
    \ < $int1 + $int3) {\n        return true;\n    }\n\n    if ($int3 < $int1 + $int2)\
    \ {\n        return true;\n    }\n\n    if ($int1 < $int2 + $int3 && $int2 < $int1\
    \ + $int3) {\n        return true;\n    }\n\n    if ($int1 < $int2 + $int3 &&\
    \ $int3 < $int1 + $int2) {\n        return true;\n    }\n\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi78ye1k5.php:44\n\
    Stack trace:\n#0 /tmp/tmpi78ye1k5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpi78ye1k5.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x === $y + $z) {\n    return true;\n  }\n  else if ($x === $y - $z) {\n\
    \    return true;\n  }\n  else if ($x === $y - $z) {\n    return true;\n  }\n\
    \  else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2noprq4w.php:31\n\
    Stack trace:\n#0 /tmp/tmp2noprq4w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2noprq4w.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $int1 = is_integer($x);\n    $int2 = is_integer($y);\n    $int3 = is_integer($z);\n\
    \    if (!$int1 || !$int2 || !$int3) {\n        die(\"The function any_int() requires\
    \ three integer arguments.\");\n    }\n    if ($x == $y || $x == $z || $y == $z)\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70r0iepx.php:30\n\
    Stack trace:\n#0 /tmp/tmp70r0iepx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp70r0iepx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y || $x === $z || $y === $z) return true;\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lmflor0.php:19\n\
    Stack trace:\n#0 /tmp/tmp2lmflor0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2lmflor0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $r = false;\n    if ($x + $y == $z) {\n        $r = true;\n    } else {\n\
    \        if ($x == $z) {\n            if ($y != 0) {\n                $r = true;\n\
    \            } else {\n                $r = false;\n            }\n        } else\
    \ {\n            if ($y == $z) {\n                if ($x != 0) {\n           \
    \         $r = true;\n                } else {\n                    $r = false;\n\
    \                }\n            } else {\n                if ($x * $y != $z) {\n\
    \                    $r = false;\n                } else {\n                 \
    \   $r = true;\n                }\n            }\n        }\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphc0xfiw2.php:45\n\
    Stack trace:\n#0 /tmp/tmphc0xfiw2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmphc0xfiw2.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y + $z && is_int($x) && is_int($y) && is_int($z)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n$sum = \"15\";\n$x = 15;\n$y =\
    \ 0;\n$z = 5;\n\nif (any_int($sum, $x, $y) || any_int($x, $z, $y)) {\n  echo \"\
    The sum is: $sum.\";\n} else {\n  echo \"The sum is: -$sum.\";\n}\n\n$n1 = \"\
    0\";\n$n2 = \"1\";\n$n3 = \"1\";\n\nif (any_int($n1, $n2, $n3)) {\n  echo \"$n1\
    \ & $n2 & $n3 & =! 0.\";\n} else {\n  echo \"$n1 & $n2 & $n3 & =! 1.\";\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "The sum is: -15.0 & 1 & 1 & =! 1.\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmph5zbnk2p.php:42\nStack trace:\n#0 /tmp/tmph5zbnk2p.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph5zbnk2p.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $sum = $x + $y + $z;\n    if ($sum == $x || $sum == $y || $sum == $z) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaefdewni.php:23\n\
    Stack trace:\n#0 /tmp/tmpaefdewni.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpaefdewni.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $total = abs($x + $y + $z);\n  return ($total === $z) || ($total === $x) ||\
    \ ($total === $y) || ($total === ($x + $y));\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwqpk3b9.php:20\n\
    Stack trace:\n#0 /tmp/tmpxwqpk3b9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxwqpk3b9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $result = ($x + $y) === $z;\n  if ($result && is_int($x) && is_int($y) && is_int($z))\
    \ {\n    return true;\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptiob2339.php:22\n\
    Stack trace:\n#0 /tmp/tmptiob2339.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptiob2339.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $num = $x + $y;\n  if ($num == $z) {\n    $num = $x + $y;\n    if ($num ==\
    \ $z) {\n      return true;\n    }\n    return false;\n  }\n  if ($num != $z)\
    \ {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj__hd_24.php:28\n\
    Stack trace:\n#0 /tmp/tmpj__hd_24.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj__hd_24.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code goes here\n    if ($x>$z || $y>$z) {\n        return false;\n\
    \    }\n    else {\n        return true;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93lmespb.php:24\n\
    Stack trace:\n#0 /tmp/tmp93lmespb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp93lmespb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x == $y || $x == $z || $y == $z) ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptfbwlbdi.php:19\n\
    Stack trace:\n#0 /tmp/tmptfbwlbdi.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptfbwlbdi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $sum = abs($x + $y + $z);\n    return ($sum == $x) || $sum == $y|| $sum ==\
    \ $z || $sum > 0;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1gbfmy3.php:20\n\
    Stack trace:\n#0 /tmp/tmpr1gbfmy3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpr1gbfmy3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $num = floatval($x) + floatval($y) + floatval($z);\n    if ($num === $x or\
    \ $num === $y or $num === $z) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for that. I'm having an\
    \ issue with the last part of your code though, I don't understand how to use\
    \ it exactly. Could you possibly give me an example of how to use that function\
    \ to solve my problem?\n<|/ c |>\n<| c |>\nYeah I got it to work, the only problem\
    \ is that it is outputting all of the possible answers. Can you show me how I\
    \ could modify it to only display one answer for the inputs?\n<|/ c |>\n<| c |>\n\
    I have updated the code to show one answer. Let me know if this is more helpful.\n\
    <|/ c |>\n<| a |>\nHere's a solution using recursion. This one uses the function\
    \ check() from above, and doesn't use any kind of loops -- it's purely for educational\
    \ purposes.\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq3gnqlf0.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Check that the inputs are integers and sum them up.\n    if(!is_integer($x)\
    \ || !is_integer($y) || !is_integer($z)) {\n        return false;\n    }\n   \
    \ return $x + $y === $z;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgrde9k_.php:22\n\
    Stack trace:\n#0 /tmp/tmpjgrde9k_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjgrde9k_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (!is_int($x)) {\n        return false;\n    }\n    if (!is_int($y)) {\n\
    \        return false;\n    }\n    if (!is_int($z)) {\n        return false;\n\
    \    }\n    return $x != $y && $x != $z && $y != $z;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dled20j.php:31\n\
    Stack trace:\n#0 /tmp/tmp6dled20j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6dled20j.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n    return (is_int($x) && is_int($y) && is_int($z) &&\
    \ ($x + $y == $z) && ($x * $y == $z));\n}\n\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtzcwny_.php:20\n\
    Stack trace:\n#0 /tmp/tmprtzcwny_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprtzcwny_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $sum = $x + $y + $z;\n    return $sum == $x or $sum == $y or $sum == $z;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxsqjacx.php:19\n\
    Stack trace:\n#0 /tmp/tmpnxsqjacx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnxsqjacx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        echo \"True\";\n    } elseif ($x != $y) {\n\
    \        echo \"False\";\n    } else {\n        echo \"Try again\";\n    }\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwy4j1cgj.php:24\n\
    Stack trace:\n#0 /tmp/tmpwy4j1cgj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwy4j1cgj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Your code here\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt42442zi.php:19\n\
    Stack trace:\n#0 /tmp/tmpt42442zi.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt42442zi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $valid = false;\n\n    if ($x == $y + $z) {\n        $valid = true;\n   \
    \ }\n\n    if ($x == $y - $z) {\n        $valid = true;\n    }\n\n    if ($x ==\
    \ $y * $z) {\n        $valid = true;\n    }\n\n    if ($x == -$y * $z) {\n   \
    \     $valid = true;\n    }\n\n    if ($x == -$y * $z) {\n        $valid = true;\n\
    \    }\n\n    return $valid;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiv3wqd7b.php:43\n\
    Stack trace:\n#0 /tmp/tmpiv3wqd7b.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpiv3wqd7b.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $result = $x + $y == $z && is_int($x) && is_int($y) && is_int($z);\n    if\
    \ ($result) {\n        // The above works, but it's not very clean.\n        //\
    \ The below is much cleaner, but won't work for all cases.\n        $result =\
    \ is_int($x) && is_int($y) && is_int($z);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eieiu7i.php:25\n\
    Stack trace:\n#0 /tmp/tmp1eieiu7i.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1eieiu7i.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y) return true;\n    if ($x === $z) return true;\n    if ($y\
    \ === $z) return true;\n    if ($x > $y && $x > $z) return true;\n    if ($x <\
    \ $y && $x < $z) return true;\n    if ($y > $z && $y > $x) return true;\n    if\
    \ ($z > $x && $z > $y) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9qb3h9y.php:27\n\
    Stack trace:\n#0 /tmp/tmpr9qb3h9y.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr9qb3h9y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Only check integers.\n  if (!is_int($x) || !is_int($y) || !is_int($z)) {\n\
    \    return false;\n  }\n\n  // If any number is an integer, return true.\n  if\
    \ ($x === $y || $x === $z || $y === $z) {\n    return true;\n  }\n\n  // If all\
    \ numbers are negative, return false.\n  if ($x === 0 && $y === 0 && $z === 0)\
    \ {\n    return false;\n  }\n\n  // If all numbers are positive, return true.\n\
    \  if ($x === 0 && $y === 0 && $z === 0) {\n    return true;\n  }\n\n  // If x\
    \ and y are negative, return false.\n  if ($x === 0 && $y === 0) {\n    return\
    \ false;\n  }\n\n  // If y and z are negative, return false.\n  if ($x === 0 &&\
    \ $z === 0) {\n    return false;\n  }\n\n  // If x and z are positive, return\
    \ true.\n  if ($x === 0 && $z === 0) {\n    return true;\n  }\n\n  // Check which\
    \ numbers are larger.\n  if ($x > $y) {\n    if ($x > $z) {\n      return true;\n\
    \    } else {\n      return false;\n    }\n  } else {\n    if ($y > $z) {\n  \
    \    return true;\n    } else {\n      return false;\n    }\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8jazfqy.php:69\n\
    Stack trace:\n#0 /tmp/tmpd8jazfqy.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpd8jazfqy.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if($x == $y + $z) { return true; }\n  return false;\n}\n\n$num1 = array(\"\
    one\", \"two\", \"three\");\n$num2 = array(1, 2, 3);\n\nif(any_int($num1[1], $num2[1],\
    \ $num1[2])) {\n  echo \"True\";\n} else {\n  echo \"False\";\n}\n\nif(any_int($num1[2],\
    \ $num2[1], $num1[1])) {\n  echo \"True\";\n} else {\n  echo \"False\";\n}\n\n\
    if(any_int($num1[1], $num2[0], $num1[2])) {\n  echo \"True\";\n} else {\n  echo\
    \ \"False\";\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpco2itdbs.php on line\
    \ 11\nFalse\nWarning: A non-numeric value encountered in /tmp/tmpco2itdbs.php\
    \ on line 11\nFalse\nWarning: A non-numeric value encountered in /tmp/tmpco2itdbs.php\
    \ on line 11\nFalse\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpco2itdbs.php:40\n\
    Stack trace:\n#0 /tmp/tmpco2itdbs.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpco2itdbs.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y || $x === $z) {\n        return true;\n    }\n    if ($y ===\
    \ $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwvhde81.php:24\n\
    Stack trace:\n#0 /tmp/tmpfwvhde81.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfwvhde81.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp988idbk4.php:18\n\
    Stack trace:\n#0 /tmp/tmp988idbk4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp988idbk4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y + $z) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnd1f1qkf.php:20\n\
    Stack trace:\n#0 /tmp/tmpnd1f1qkf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnd1f1qkf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n    if (is_int($x) && is_int($y) && is_int($z) && $x>0\
    \ && $y>0 && $z>0 && $x+$y+$z==($x+$y+$z)) {\n        return true;\n    }\n  \
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo77v_8dz.php:26\n\
    Stack trace:\n#0 /tmp/tmpo77v_8dz.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo77v_8dz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if (!is_int($x) || !is_int($y) || !is_int($z)) {\n    return false;\n  }\n\n\
    \  return $x + $y + $z === (int) $x + $y + $z;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1ncga2p.php:25\n\
    Stack trace:\n#0 /tmp/tmpk1ncga2p.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpk1ncga2p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y) {\n        return $z == $x + $y;\n    }\n    if ($x == $z)\
    \ {\n        return $y == $z + $x;\n    }\n    if ($y == $z) {\n        return\
    \ $x == $z + $y;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82ofsecp.php:28\n\
    Stack trace:\n#0 /tmp/tmp82ofsecp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp82ofsecp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $result = false;\n    if ($x == $y + $z && is_int($x) && is_int($y) && is_int($z))\
    \ {\n        $result = true;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuw25lxb2.php:22\n\
    Stack trace:\n#0 /tmp/tmpuw25lxb2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuw25lxb2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_int($x) && is_int($y) && is_int($z) && $x == $x + $y + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y - $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y - $y) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y + $y) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $z - $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $z + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y - $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $z + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y - $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $z - $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $z + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y - $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $z + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y - $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $y + $z) return\
    \ true;\n    if (is_int($x) && is_int($y) && is_int($z) && $x == $z - $z) return\
    \ true;\n    if (is_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcs9lnfzu.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x!==0 || $y!==0 || $z!==0) {\n        return ($x+$y+$z)==0;\n    }\n\
    \    return ($x+$y)==0 || ($x+$z)==0 || ($y+$z)==0;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nHere's my solution for checking any three numbers for equality:\n\
    <code>\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdoiy6jel.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $min = $x < $y ? $x : max($x, $y);\n  $max = $x > $y ? $y : max($x, $y);\n\
    \  return $min === $max && is_int($min);\n}\n</code>\n<|/ a |>\n<| c |>\nThank\
    \ you for the feedback. Unfortunately, I don't think this answers my question.\
    \ I need it to test three numbers and see if they can add up to zero. For example,\
    \ if I have `any_int(3,2,2)`, it should return `false`. But if I do `any_int(3,0,-2)`,\
    \ it should return `true`. If I do `any_int(3,2,-2)`, it should return `true`\
    \ as well. Thank you again!\n<|/ c |>\n<| c |>\nI've updated my answer. Does it\
    \ work as you wanted?\n<|/ c |>\n<| c |>\nNope, unfortunately not. It doesn't\
    \ seem to work at all. It seems to return `true` no matter what the three numbers\
    \ are.\n<|/ c |>\n<| c |>\nI've tested the code and it works exactly as you expected\
    \ it to work. Check out the [codesandbox](https://codesandbox.io/s/wizardly-dust-sq7y6?file=/src/any_int.php)\
    \ for proof. Make sure your variables are defined correctly.\n<|/ c |>\n<| a tags=php\
    \ |>\nHere is a functional solution without recursion and a closure with recursion:\n\
    <code>\n$sum = function() use ($numbers){\n  $sum = 0;\n  foreach ($numbers as\
    \ $number){\n    $sum += $number;\n  }\n  if ($sum < 0){\n    return false;\n\
    \  }\n  return true;\n};\n\n$numbers = [-1, 2, 3];\n\necho $sum instanceof Closure\
    \ ? $sum() : true;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis code is\
    \ a bit more generic than your requirements. It checks to see if there are any\
    \ numbers that are not equal to the first number in the array. \n<code>\n<?php\n\
    \nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcor3lddh.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y + $z) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkyni8tm.php:21\n\
    Stack trace:\n#0 /tmp/tmpmkyni8tm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmkyni8tm.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_int($x) && is_int($y) && is_int($z)) {\n        return $x === $y ||\
    \ $x === $z;\n    }\n\n    return false;\n}\n</code>\n<|/ a dscore=4 tags=php\
    \ |>\n<| c |>\nThe first code example was a great way to explain how this would\
    \ be done, but this was a great example for how you would do it with a function\
    \ with one parameter.  I wouldn't have thought about using a variable with the\
    \ comparison value as an argument.\n<|/ c |>\n<| a dscore=4 tags=php |>\n<code>\n\
    $bool = in_array($value, array(1, 2, 3, 4, 5));\n</code>\n$bool will be true if\
    \ the value is in that array, false otherwise. An example can be found here.\n\
    <|/ a |>\n<| a dscore=3 tags=php |>\nYou could use array_key_exists():\n<code>\n\
    if (array_key_exists('2', $var)) {\n    // '2' exists\n}\n</code>\n<|/ a |>\n\
    <| a dscore=2 tags=php |>\nYou can use array_key_exists()\n<code>\n$a = array(1,\
    \ 2, 3, 4);\nif (array_key_exists('2', $a)) {\n    // '2' exists\n}\n</code>\n\
    <|/ a |>\n<| a tags=php |>\nIf you want a case insensitive array_key_exists()\
    \ use this:\n<code>\nif (array_key_exists(strtolower($search_key), $myarray))\n\
    {\n    // do something here\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 tags=php\
    \ |>\nAs it has been said before use array_key_exists() but here is how you can\
    \ write it in a more readable way.\n<code>\n$array = [1, 2, 3, 4, 5];\nif (array_key_exists('2',\
    \ $array)) {\n    // '2' exists\n}\n</code>\n<|/ a |>\n<| a tags=php |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0yse_98f.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $is_any_int = false;\n    if (is_int($x) && is_int($y) && is_int($z)) {\n\
    \        if ($x === $y || $x === $z) {\n            $is_any_int = true;\n    \
    \    }\n    }\n    return $is_any_int;\n}\n\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0ywta76.php:25\n\
    Stack trace:\n#0 /tmp/tmpz0ywta76.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz0ywta76.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) return false;\n    $r = $x + $z;\n    if ($r >= $y) {\n\
    \        return $r >= $x;\n    }\n    $r = $y - $z;\n    if ($r >= $x) {\n   \
    \     return $r >= $y;\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7m0fosnt.php:28\n\
    Stack trace:\n#0 /tmp/tmp7m0fosnt.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7m0fosnt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $is_any_int = false;\n    if ($x == $y + $z) {\n        $is_any_int = true;\n\
    \    }\n    return $is_any_int;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHow about\
    \ using bitwise operators?\n<|/ c |>\n<| c |>\nNot sure that would make much of\
    \ a difference. Bitwise operations are used a lot on microcontrollers, usually\
    \ when dealing with bytes (like when reading a file or sending packets). I was\
    \ thinking of using `and`, `or`, and `xor` for simple boolean conditionals, and\
    \ `===` for checking if two values are equal, but I'm guessing they would both\
    \ work fine.\n<|/ c |>\n<| a |>\nThis is not an answer to the question but an\
    \ example of how I solved this problem in my project.\nI added the following method\
    \ to my class :\n<code>\npublic function compareWith($other) {\n    if ($this->num1\
    \ < $other->num1) {\n        return -1;\n    } elseif ($this->num1 > $other->num1)\
    \ {\n        return 1;\n    } else {\n        if ($this->num2 < $other->num2)\
    \ {\n            return -1;\n        } elseif ($this->num2 > $other->num2) {\n\
    \            return 1;\n        } else {\n            if ($this->num3 < $other->num3)\
    \ {\n                return -1;\n            } elseif ($this->num3 > $other->num3)\
    \ {\n                return 1;\n            } else {\n                if ($this->num4\
    \ < $other->num4) {\n                    return -1;\n                } elseif\
    \ ($this->num4 > $other->num4) {\n                    return 1;\n            \
    \    } else {\n                    if ($this->num5 < $other->num5) {\n       \
    \                 return -1;\n                    } elseif ($this->num5 > $other->num5)\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        }\n    }\n}\n</code>\nAnd I implemented this in my main controller\
    \ like this:\n<code>\n$compare = Compare::create($value1, $value2, $value3, $value4,\
    \ $value5);\n$compare->compareWith($compare);\n</code>\nAnd it works well!\n<|/\
    \ a dscore=0 tags=php,comparison |>\n<| a dscore=0 |>\nYou can use the class of\
    \ PHP to achieve this. \nThe class is called as Comparison and here is it's description:\n\
    \nThis class allows you to check if a variable is greater than or equal to a given\
    \ value. You can do this for numbers, strings, or DateTime objects. You can create\
    \ your own comparison logic by extending it.\n  A Comparison instance may be used\
    \ to compare a variable to an expression.\n<|/ a tags=php,comparison |>\n<| a\
    \ |>\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5qe8jz_k.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x == $y + $z) && ($x === intval($x) && $y === intval($y) && $z ===\
    \ intval($z));\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwgckfqb.php:19\n\
    Stack trace:\n#0 /tmp/tmpnwgckfqb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnwgckfqb.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $sum = $x + $y;\n  if ($sum == $z) {\n    return true;\n  }\n  return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjpvn051_.php:22\n\
    Stack trace:\n#0 /tmp/tmpjpvn051_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjpvn051_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ((is_numeric($x) && is_numeric($y) && is_numeric($z)) || (is_string($x)\
    \ && is_string($y) && is_string($z))) {\n        return ($x === $y) || ($x ===\
    \ $z) || ($y === $z);\n    }\n    return false; // all numbers are equal\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvo8n516.php:21\n\
    Stack trace:\n#0 /tmp/tmplvo8n516.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplvo8n516.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydbknsdd.php:19\n\
    Stack trace:\n#0 /tmp/tmpydbknsdd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpydbknsdd.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Only consider integers\n    if ($x > $y || $y > $z) {\n        return\
    \ false;\n    }\n    // Ensure that all numbers are integers\n    $x = intval($x);\n\
    \    $y = intval($y);\n    $z = intval($z);\n    if ($x === $y || $x === $z ||\
    \ $y === $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bjx2fow.php:29\n\
    Stack trace:\n#0 /tmp/tmp1bjx2fow.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1bjx2fow.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $return = false;\n    $add = 0;\n    $subtract = 0;\n\n    if(is_integer($x)\
    \ && is_integer($y) && is_integer($z)) {\n        $return = ($x == $y || $x ==\
    \ $z || $y == $z);\n    } else {\n        $return = (is_int($x) && is_int($y)\
    \ && is_int($z));\n    }\n\n    return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7s0p567h.php:29\n\
    Stack trace:\n#0 /tmp/tmp7s0p567h.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7s0p567h.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y || $x === $z) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04q2dwto.php:22\n\
    Stack trace:\n#0 /tmp/tmp04q2dwto.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp04q2dwto.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Write your code here\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9e_rl25.php:18\n\
    Stack trace:\n#0 /tmp/tmpi9e_rl25.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpi9e_rl25.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z && $x === (int)$x && $y === (int)$y && $z === (int)$z)\
    \ {\n        return true;\n    }\n    return false;\n}\n</code>\nOutput:\n<code>\n\
    any_int(5, 2, 7) \u279E True\nany_int(3, 2, 2) \u279E False\nany_int(3, -2, 1)\
    \ \u279E True\nany_int(3.6, -2.2, 2) \u279E False\n</code>\n<|/ a tags=if-statement,php\
    \ |>\n<| c |>\nI appreciate the feedback, but I have already coded a solution\
    \ that works well. Thank you anyway!\n<|/ c |>\n<| a tags=if-statement,php dscore=0\
    \ |>\nYou could use a switch statement:\n<code>\n$a = 5;\n$b = 2;\n$c = 3;\n\n\
    switch (true) {\n    case $a == $b:\n    case $a == $c:\n    case $b == $c:\n\
    \        echo 'true';\n        break;\n    default:\n        echo 'false';\n}\n\
    </code>\nDemo\n<|/ a |>\n<| a |>\nI solved this problem by using the following\
    \ code:\n<code>\n$a = 5;\n$b = 2;\n$c = 3;\n\nif($a == $b && $a == $c || $b ==\
    \ $c || $c == $a){\n    echo 'true';\n}\n</code>\n<|/ a dscore=0 tags=if-statement,php\
    \ |>\n<| a dscore=0 |>\nYou can do it with 1 statement and 2 variables:\n<code>\n\
    <?php\n\n$a = 5;\n$b = 2;\n$c = 3;\n\nif(($a == $b) ^ ($a == $c) || ($b == $c)\
    \ || ($c == $a)){\n    echo 'true';\n}\n</code>\nThis code will output \"true\"\
    \ in all cases.\n<|/ a tags=if-statement,php |>\n<| a |>\n<code>\nif (\n    ($a==$b)\
    \ \n        || ($a==$c) \n        || ($b==$c) \n        || ($c==$a)\n) {\n   \
    \ echo \"true\";\n}\n</code>\n<|/ a dscore=0 tags=if-statement,php |>\n<| c |>\n\
    Please add an explanation why this code works.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\
    \    $a = 5;\n    $b = 2;\n    $c = 3;\n\n    $sum = abs($a-$b);\n    $diff =\
    \ $a-$c;\n    echo !($sum==$diff);\n</code>\n<|/ a tags=if-statement,\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcilenheh.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ((is_int($x) && is_int($y) && is_int($z)) && ($x + $y + $z === $x\
    \ || $x + $y + $z === $y || $x + $y + $z === $z));\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pk_rxa2.php:19\n\
    Stack trace:\n#0 /tmp/tmp9pk_rxa2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9pk_rxa2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y + $z) {\n    if (is_integer($x) && is_integer($y) && is_integer($z))\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdy5am1l.php:23\n\
    Stack trace:\n#0 /tmp/tmpqdy5am1l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqdy5am1l.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x + $y + $z == ($x + $y + $z));\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprt_1qkra.php:20\n\
    Stack trace:\n#0 /tmp/tmprt_1qkra.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprt_1qkra.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        return true;\n    }\n    elseif ($x < $y +\
    \ $z) {\n        return false;\n    }\n    else {\n        return true;\n    }\n\
    }\n\n$arrSum = [5,2,7];\n$arrDiff = [3,2,2];\n$arrDiff = [3,-2,1];\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdu0rojg.php:31\n\
    Stack trace:\n#0 /tmp/tmpvdu0rojg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvdu0rojg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return $x == $y || $x == $z || $y == $z;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI don't think that works. I gave `any_int` three numbers, and it gave\
    \ me `true` when it should give me `false`, because it's equal to `6`.\n<|/ c\
    \ |>\n<| c |>\nI've updated the example to demonstrate how it works when passed\
    \ 3 numbers. Does it work for you?\n<|/ c |>\n<| c |>\nI meant this for my own\
    \ answer, but I guess I'm not the only one who doesn't understand what I am looking\
    \ for. I don't want a function that returns `true` when three numbers are equal,\
    \ but I want `any_int` to return `false` if it's equal to three numbers (not all\
    \ three).\n<|/ c |>\n<| c |>\nOh I see what you mean. I've updated my answer to\
    \ accommodate that.\n<|/ c |>\n<| c |>\nOh, that's a clever solution I hadn't\
    \ thought of. Thanks for sharing it!\n<|/ c |>\n<| a dscore=0 |>\nI figured out\
    \ a way to do this without using global variables or other functions that require\
    \ modifying the global namespace. The idea is to modify your conditional statement\
    \ and use an if-statement with an else statement. The else statement will allow\
    \ the function to evaluate to false. \nI tested this on python:\n<code>\ndef any_int(*nums):\n\
    \    if sum(nums) == sum(nums[1:]):\n        return True\n    else:\n        return\
    \ False\n</code>\n<|/ a tags=php,boolean,function,numbers |>\n<| a |>\nThe previous\
    \ answers didn't work for me in PHP 7.3.10.\nHere's my solution:\n<code>\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7vxx_5ei.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $is_integer = is_integer($x);\n    $is_integer = is_integer($y);\n    $is_integer\
    \ = is_integer($z);\n    $is_integer = $is_integer && ($x >= 0);\n    $is_integer\
    \ = $is_integer && ($y >= 0);\n    $is_integer = $is_integer && ($z >= 0);\n\n\
    \    if ($is_integer) {\n        if ($x != $y + $z) {\n            return false;\n\
    \        }\n    } else {\n        if ($x != $y && $x != $z && $y != $z) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\n</code>\nThe\
    \ \"any number\" test is just to make sure you don't have any funny business.\
    \ I'm assuming that your integer numbers are all positive, so you could simplify\
    \ that to if (!is_integer($x) || !is_integer($y) || !is_integer($z)) return false;.\
    \ Also the function should handle negative integers without issue.\n<|/ a |>\n\
    <| a dscore=0 tags=php |>\nAnother approach is to use array_sum, array_diff and\
    \ array_intersect:\n<code>\n$integers = [1, 2, 3, 4];\n$sum   = array_sum($integers);\n\
    $diff  = array_diff($integers, [$sum]);\n$result = array_intersect($integers,\
    \ [$sum, $diff]);\n</code>\n<|/ a |>\n<| c |>\nI like the logic of this, but a\
    \ small note: when dealing with large arrays, array_intersect can take a long\
    \ time to return. My suggestion is to create a function using array_intersect\
    \ and another using array_diff and then compare the two functions to see which\
    \ one takes longer.\n<|/ c |>\n<| a tags=php |>\n<code>\n$ints=[1,2,3,4,5,6,7,8,9,10];\n\
    $sum=array_sum($ints);\n$array=[];\nforeach($ints as $i){\n    if($i>=$sum){\n\
    \        $array[]=$i;\n    }\n}\nprint_r($array);\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2preopiw.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if( (int)$x == (int)$y && $x == (int)$z) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77ylueki.php:22\n\
    Stack trace:\n#0 /tmp/tmp77ylueki.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp77ylueki.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $total = abs($x + $y + $z);\n    $z = $x + $y + $z;\n    return ($z == $total)\
    \ ? true : false;\n}\n$mystring = 'Hello World!';\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02tpn7d3.php:23\n\
    Stack trace:\n#0 /tmp/tmp02tpn7d3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp02tpn7d3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $z = (int) $z;\n  $y = (int) $y;\n  $x = (int) $x;\n  if ($x + $y == $z) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphx94pk79.php:26\n\
    Stack trace:\n#0 /tmp/tmphx94pk79.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphx94pk79.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return (!is_nan($x) && !is_nan($y) && !is_nan($z)) || $x === $y + $z;\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqw55w4q.php:19\n\
    Stack trace:\n#0 /tmp/tmpsqw55w4q.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsqw55w4q.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x == $y + $z) {\n    return !is_float($x) || !is_float($y) || !is_float($z);\n\
    \  }\n  return false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocw9snl_.php:21\n\
    Stack trace:\n#0 /tmp/tmpocw9snl_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpocw9snl_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if ($x + $y == $z) {\n    return true;\n  }\n  if ($x == $y) {\n    if ($x\
    \ == $z) {\n      return true;\n    }\n    return false;\n  }\n  if ($x < $y)\
    \ {\n    return $y < $z;\n  }\n  return $y < $z;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ym8qajk.php:31\n\
    Stack trace:\n#0 /tmp/tmp4ym8qajk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4ym8qajk.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return ($x == $y || $x == $z || $y == $z);\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsq2ri8ji.php:19\n\
    Stack trace:\n#0 /tmp/tmpsq2ri8ji.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsq2ri8ji.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $sum = abs($x + $y);\n    if ($sum == abs($z)) {\n        return $x + $y\
    \ == $z;\n    } elseif ($sum > abs($z)) {\n        return $x + $y > $z;\n    }\
    \ elseif ($sum < abs($z)) {\n        return $x + $y < $z;\n    } else {\n    \
    \    return false;\n    }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxj1q8391.php:28\n\
    Stack trace:\n#0 /tmp/tmpxj1q8391.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxj1q8391.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x === $y || $x === $z || $y === $z) {\n        return true;\n    }\n\
    \n    return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvantnl0v.php:23\n\
    Stack trace:\n#0 /tmp/tmpvantnl0v.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvantnl0v.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y || $x == $z) {\n        if ($y > $z) {\n            return true;\n\
    \        }\n        if ($y < $z) {\n            return false;\n        }\n   \
    \ }\n    return false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxa9kfzj.php:26\n\
    Stack trace:\n#0 /tmp/tmpoxa9kfzj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpoxa9kfzj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzoytrlo6.php:23\n\
    Stack trace:\n#0 /tmp/tmpzoytrlo6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzoytrlo6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    return $x != 0 && $y != 0 && $z != 0 && $x == $y + $z;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp851d6hwu.php:18\n\
    Stack trace:\n#0 /tmp/tmp851d6hwu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp851d6hwu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if (!is_integer($x) || !is_integer($y) || !is_integer($z)) {\n    return false;\n\
    \  }\n\n  return ($x + $y + $z == 3);\n}\n\nfunction candidate(...$args) {\n \
    \   return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9fvzzi5.php:23\n\
    Stack trace:\n#0 /tmp/tmpy9fvzzi5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpy9fvzzi5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f_3qzvj.php:22\n\
    Stack trace:\n#0 /tmp/tmp4f_3qzvj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4f_3qzvj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y || $x == $z || $y == $z) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnn3krjc.php:22\n\
    Stack trace:\n#0 /tmp/tmpcnn3krjc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcnn3krjc.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $intx  = intval($x);\n    $inty  = intval($y);\n    $intz  = intval($z);\n\
    \n    if ($intx < $inty && $inty < $intz && $intx > $intz) {\n        return true;\n\
    \    }\n    if ($inty < $intx && $intx < $intz && $inty > $intz) {\n        return\
    \ true;\n    }\n    if ($intz < $intx && $intx < $inty && $intz > $inty) {\n \
    \       return true;\n    }\n    if ($intz < $inty && $inty < $intx && $intz >\
    \ $inty) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fl53c3u.php:34\n\
    Stack trace:\n#0 /tmp/tmp4fl53c3u.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4fl53c3u.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x == $y + $z)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkd8w1mf.php:27\n\
    Stack trace:\n#0 /tmp/tmplkd8w1mf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplkd8w1mf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86883ra3.php:23\n\
    Stack trace:\n#0 /tmp/tmp86883ra3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp86883ra3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  $is_any_integer = true;\n\n  if (!is_int($x) || !is_int($y) || !is_int($z))\
    \ {\n    $is_any_integer = false;\n  } elseif ($x == $y + $z) {\n    $is_any_integer\
    \ = true;\n  }\n\n  return $is_any_integer;\n}\n</code>\nI tested my function\
    \ with the two examples you provided in your question, and it appears to work\
    \ correctly.\n<|/ a tags=php,algorithm,math,arrays |>\n<| c |>\nThis seems more\
    \ efficient than my answer. Still need to test if there exists a pair of numbers\
    \ that adds to zero :D\n<|/ c |>\n<| c |>\nI tested it out and it doesn't seem\
    \ to be working for me. Here are my two examples: [1,2,0] and [1,0,2] and it returns\
    \ false. Should return true since it exists a pair of numbers that sums to zero\n\
    <|/ c |>\n<| c |>\nYou have a typo in the code I posted: `if ($x == $y - $z){`\
    \ should be `$z == $y - $x`.  I edited my answer to fix that mistake.\n<|/ c |>\n\
    <| c |>\nI fixed it, but I get a blank page when I test it out. Do you know why\
    \ this is?\n<|/ c |>\n<| c |>\nMake sure to turn on error reporting by adding\
    \ `error_reporting(E_ALL);` at the top of the script.\n<|/ c |>\n<| a |>\nI guess\
    \ this might help\n<code>\n$arr = array(1,2,3,4,5,6,7);\n$sum = 0;\nfor($i=0;$i<count($arr);$i++)\
    \ {\n    for($j=$i+1;$j<count($arr);$j++) {\n        if($arr[$i] == $arr[$j] &&\
    \ $arr[$i] != 0) {\n            $sum = $sum + $arr[$i];\n        }\n    }\n}\n\
    if($sum != 0) {\n    echo $sum;\n}\n</code>\n<|/ a tags=php,algorithm,math,arrays\
    \ dscore=1 |>\n<| c |>\nI thought about this as well, but I was thinking it would\
    \ be more efficient to do it iteratively rather than with a nested for-loop?\n\
    <|/ c |>\n<| c |>\nYes, it would be more efficient to do this iteratively. However,\
    \ this solution is O(n^2) where n is the number of elements in the array. The\
    \ solution I posted is O(n), where n is the number of elements in the array. It\
    \ was only a suggestion as to how you could do it.\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8d845r8l.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x == $y + $z) return true;\n    if ($x != $y + $z) return false;\n \
    \   if ($x != $y - $z) return true;\n    if ($x != $y - $z) return false;\n  \
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75inofj7.php:23\n\
    Stack trace:\n#0 /tmp/tmp75inofj7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp75inofj7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    $total = $x + $y + $z;\n    return ($total == $x || $total == $y || $total\
    \ == $z);\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn477qyaw.php:20\n\
    Stack trace:\n#0 /tmp/tmpn477qyaw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpn477qyaw.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    if ($x + $y === $z && is_int($x) && is_int($y) && is_int($z)) {\n       \
    \ return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6ena416.php:22\n\
    Stack trace:\n#0 /tmp/tmpp6ena416.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp6ena416.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x === $y || $x ===\
    \ $z) {\n      return $x === $z;\n    } else {\n      return false;\n    }\n \
    \ } else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_52yx5h.php:26\n\
    Stack trace:\n#0 /tmp/tmps_52yx5h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmps_52yx5h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \tif ($x == $y + $z) return true;\n\telse if ($y == $z) return true;\n\telse if\
    \ ($z == $x) return true;\n\telse return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_b4ro0r.php:21\n\
    Stack trace:\n#0 /tmp/tmp1_b4ro0r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1_b4ro0r.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  return ($x == $y || (is_int($x) && is_int($y) && is_int($z) && $x + $y + $z\
    \ == 0));\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsekovdqc.php:18\n\
    Stack trace:\n#0 /tmp/tmpsekovdqc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsekovdqc.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  // Your code here\n  if ($x == $y || $x == $z) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdul9_ra.php:23\n\
    Stack trace:\n#0 /tmp/tmppdul9_ra.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppdul9_ra.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \  global $sum;\n  if (!is_int($x)) {\n    return false;\n  }\n  if (!is_int($y))\
    \ {\n    return false;\n  }\n  if (!is_int($z)) {\n    return false;\n  }\n\n\
    \  return ($x === $y + $z) && ($y === $sum);\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1kyam1h.php:30\n\
    Stack trace:\n#0 /tmp/tmpk1kyam1h.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk1kyam1h.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5,\
    \ 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E\
    \ True\n// any_int(3.6, -2.2, 2) \u279E False\nfunction any_int($x, $y, $z) {\n\
    \    // Your code here\n    if ($x<0 || $x>100 || $y<0 || $y>100 || $z<0 || $z>100)\
    \ {\n        return false;\n    }\n    $a = $x+$y;\n    $b = $x+$z;\n    $c =\
    \ $y+$z;\n    $a1 = $a>$b;\n    $a2 = $a>$c;\n    $a3 = $b>$c;\n    if ($a1 ||\
    \ $a2 || $a3) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu488txdc.php:32\n\
    Stack trace:\n#0 /tmp/tmpu488txdc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpu488txdc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
