name: HumanEval_9_rolling_max
language: php
results:
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_reduce($numbers, function ($result, $value) {\n        $result[count($result)\
    \ - 1] = max($result[$result[count($result) - 1]], $value);\n        return $result;\n\
    \    }, []);\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThanks for your help. It's\
    \ very nice approach. But, for my task, i need to find maximum element from the\
    \ sequence not from the array.\n<|/ c |>\n<| c |>\n, I have improved my answer,\
    \ please try again.\n<|/ c |>\n<| c |>\nthanks, i will check it and let you know\
    \ if its work.\n<|/ c |>\n<| c |>\nOk, this approach really good. I tested it\
    \ on the sequence, but i have problem with test case like this :\n$numbers = [1,\
    \ 5, 1, -4, 8, 1, -1];\n$result = rolling_max($numbers);\nprint_r($result);\n\n\
    Output: Array ( [0] => 1 [1] => 5 [2] => 1 [3] => -4 [4] => 8 [5] => 1 [6] =>\
    \ -1 )\n\nSo, i need to fix it but i dont know how to fix it :)\n<|/ c |>\n<|\
    \ c |>\n, I updated my answer, please check it again.\n<|/ c |>\n<| a tags=algorithm,php,optimization\
    \ |>\nI ended up writing a method for this on PHP7+ using the PHP function array_reduce():\n\
    <code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphpnxhd3t.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // First let's sort the array from low to high\n    sort($numbers);\n\
    \    $max_value = $numbers[0];\n    $max_pos = 0;\n    $rolling_max = [];\n  \
    \  for ($i = 0; $i < count($numbers); $i++) {\n        // If current value greater\
    \ than current max, save the current position and current value\n        if ($numbers[$i]\
    \ > $max_value) {\n            $rolling_max[$max_pos] = $numbers[$i];\n      \
    \      $max_value = $numbers[$i];\n            $max_pos = $i;\n        } else\
    \ {\n            // Else, current value is equal to current max value, so we just\
    \ increase current position\n            $max_pos++;\n        }\n    }\n    return\
    \ $rolling_max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n\
    A short and easy solution using array_slice() and array_reduce():\n<code>\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg_7ic8ty.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $temp = [];\n\n    foreach ($numbers as $number) {\n\
    \        if ($number < $temp[0]) {\n            $result[] = $number;\n       \
    \     $temp[] = $number;\n        } else {\n            $temp[] = $number;\n \
    \       }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2kywjzb1.php:28\n\
    Stack trace:\n#0 /tmp/tmp2kywjzb1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2kywjzb1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $current = null;\n    foreach ($numbers as $value)\
    \ {\n        if ($current === null) {\n            $current = $value;\n      \
    \      $result[] = $value;\n        } else if ($value > $current) {\n        \
    \    $current = $value;\n            $result[] = $value;\n        } else {\n \
    \           $result[] = $current;\n            $current = $value;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsscqmrc8.php:31\n\
    Stack trace:\n#0 /tmp/tmpsscqmrc8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsscqmrc8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (!is_array($numbers)) {\n        throw new InvalidArgumentException(\"\
    Input must be an array\");\n    }\n    $output = [];\n    $len = count($numbers);\n\
    \    $numbers = array_reverse($numbers);\n    foreach ($numbers as $num) {\n \
    \       if (count($output) == 0 || $num > $output[count($output) - 1]) {\n   \
    \         $output[] = $num;\n        }\n    }\n    return array_reverse($output);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is an interesting idea to keep track of the\
    \ current max and min. However the output does not match what the OP stated: `[1,\
    \ 2, 3, 3, 3, 4, 4]`\n<|/ c |>\n<| a tags=php,algorithm,arrays |>\n<code>\n<?php\n\
    \n$input = [1, 4, 3, 6, 2, 5];\n$output = [];\n$max = null;\n$min = null;\n\n\
    foreach ($input as $number) {\n    if (!isset($max) || $number > $max) {\n   \
    \     $max = $number;\n    }\n    if (!isset($min) || $number < $min) {\n    \
    \    $min = $number;\n    }\n    if ($number > $max) {\n        $output[] = $max;\n\
    \        $max = $number;\n    }\n    if ($number < $min) {\n        $output[]\
    \ = $min;\n        $min = $number;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThis seems right for me. I would probably store the current min and max\
    \ values as you loop though, otherwise the values will be overwritten as you loop\
    \ over them, instead of storing the initial values. Then, once you have your result,\
    \ you could just reset the min and max values to the stored max and min values.\n\
    <|/ c |>\n<| c |>\nI didn't think about that. I'll update the answer.\n<|/ c |>\n\
    <| a |>\nHere's my solution:\n<code>\n$input = [1, 4, 3, 6, 2, 5];\n$output =\
    \ [];\n$max = null;\n$min = null;\n$i = 0;\nwhile ($i < count($input)) {\n   \
    \ if ($input[$i] > $max) {\n        $max = $input[$i];\n    }\n    if ($input[$i]\
    \ < $min) {\n        $min = $input[$i];\n    }\n    $output[] = $max;\n    $output[]\
    \ = $min;\n    $i++;\n}\n\nprint_r($output);\n</code>\n<|/ a tags=php,algorithm,arrays\
    \ dscore=1 |>\n<| a tags=php,algorithm,arrays dscore=1 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6kvfz4z3.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $value) {\n    $result[] = $value;\n\
    \    $result = array_merge($result, rolling_max($result));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp5ui_mrxd.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  return array_filter($numbers, function ($number) {\n    return $number\
    \ > array_shift($numbers);\n  });\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmplbbonzub.php on line 8\n\nWarning: array_shift() expects parameter 1\
    \ to be array, null given in /tmp/tmplbbonzub.php on line 8\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given in /tmp/tmplbbonzub.php on line\
    \ 8\n\nWarning: array_shift() expects parameter 1 to be array, null given in /tmp/tmplbbonzub.php\
    \ on line 8\n\nWarning: array_shift() expects parameter 1 to be array, null given\
    \ in /tmp/tmplbbonzub.php on line 8\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmplbbonzub.php on line 8\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given in /tmp/tmplbbonzub.php on line\
    \ 8\n\nWarning: array_shift() expects parameter 1 to be array, null given in /tmp/tmplbbonzub.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbbonzub.php:19\n\
    Stack trace:\n#0 /tmp/tmplbbonzub.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplbbonzub.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_value = $numbers[0];\n    $max_pos = 0;\n\n    foreach($numbers\
    \ as $num) {\n        if($num > $max_value) {\n            $max_value = $num;\n\
    \            $max_pos = 0;\n        }\n\n        $max_pos = $max_pos + 1;\n  \
    \  }\n\n    return array_slice($numbers, 0, $max_pos);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1h3tlx0.php:28\n\
    Stack trace:\n#0 /tmp/tmpi1h3tlx0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi1h3tlx0.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_reduce(\n        $numbers,\n        function ($max, $current)\
    \ {\n            return $max > $current ? $max : $current;\n        }\n    );\n\
    }\n</code>\n<|/ a |>\n<| c |>\n`[5, 3, 5, 4, 5, 8, 3, 5]` results in `[5, 3, 5]`\
    \ which is wrong.\n<|/ c |>\n<| c |>\nThe above code returns `[5, 3, 5]`... not\
    \ sure if I'm misreading your comment\n<|/ c |>\n<| c |>\nThe code returns `[5,\
    \ 3, 5]` but it should return `[5, 3, 8, 3, 5]`. The last element should be the\
    \ max of the list except the 1st element.\n<|/ c |>\n<| c |>\n: Notice that the\
    \ OP's code returns `[1, 2, 3, 3, 3, 4, 4]`, which is not what your code returns.\
    \ Your code returns `[1, 2, 3, 3, 3, 4, 4]`.\n<|/ c |>\n<| c |>\n- I've amended\
    \ my answer\n<|/ c |>\n<| a tags=php dscore=4 |>\nHere's another way to do it\
    \ which doesn't use recursion:\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnudkt5ks.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rolling_max = array();\n    $rolling_max[0] = $numbers[0];\n    $rolling_max\
    \ = array_merge($rolling_max, $numbers);\n    $last_element = $rolling_max[0];\n\
    \    $rolling_max[0] = 0;\n    foreach ($rolling_max as $i => $element) {\n  \
    \      $last_element = $element > $last_element ? $element : $last_element;\n\
    \        $rolling_max[$i] = $last_element;\n    }\n    return $rolling_max;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50htbc9g.php:24\n\
    Stack trace:\n#0 /tmp/tmp50htbc9g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp50htbc9g.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $currentMax = $numbers[0];\n    $lastMax  = $numbers[0];\n    foreach\
    \ ($numbers as $value) {\n        if ($value > $currentMax) {\n            $currentMax\
    \ = $value;\n        }\n        else if ($value == $lastMax) {\n            $currentMax\
    \ = $value;\n        }\n        else {\n            $lastMax  = $currentMax;\n\
    \            $currentMax = $value;\n        }\n    }\n    return $lastMax;\n}\n\
    \nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuisxo49w.php:29\n\
    Stack trace:\n#0 /tmp/tmpuisxo49w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuisxo49w.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) < 2) {\n        throw new \\InvalidArgumentException('Rolling\
    \ maximum requires at minimum two elements in the list.');\n    }\n\n    $rolling_max_value\
    \ = $numbers[0];\n    $rolling_max_indexes = [];\n\n    foreach ($numbers as $index\
    \ => $value) {\n        if ($value === $rolling_max_value) {\n            $rolling_max_indexes[]\
    \ = $index;\n        } else {\n            $rolling_max_value = $value;\n    \
    \        $rolling_max_indexes = [];\n        }\n    }\n\n    return array_slice($numbers,\
    \ 0, count($numbers) - count($rolling_max_indexes))\n        ->merge($rolling_max_indexes)\n\
    \        ->toArray();\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: Rolling maximum requires\
    \ at minimum two elements in the list. in /tmp/tmpacyf2ggc.php:8\nStack trace:\n\
    #0 /tmp/tmpacyf2ggc.php(29): rolling_max(Array)\n#1 /tmp/tmpacyf2ggc.php(33):\
    \ candidate(Array)\n#2 /tmp/tmpacyf2ggc.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpacyf2ggc.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    foreach ($numbers as $key => $number) {\n        $current_max = $number;\n\
    \        if ($key > 0) {\n            $current_max = max($numbers[$key-1], $numbers[$key]);\n\
    \        }\n        $numbers[$key] = $current_max;\n    }\n    return $numbers;\n\
    }\n</code>\nThen call it with:\n<code>\n$rolling_max = rolling_max($numbers);\n\
    </code>\nOr even better (more performant):\n<code>\n$rolling_max = array_reduce($numbers,\
    \ function($rolling, $value) { \n    return max($rolling, $value); \n});\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks, I did this myself. I wanted to use recursion\
    \ as I'm new to PHP. I added my solution below.\n<|/ c |>\n<| a dscore=0 tags=php,max,arrays,multidimensional-array\
    \ |>\nI did this myself by creating an array_walk_recursive function to perform\
    \ the operation on every value in the array. \n<code>\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_5vnppqw.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  foreach ($numbers as $key => $value) {\n    if ($value <= $numbers[$key\
    \ - 1]) {\n      $numbers[$key] = $value;\n    } else {\n      $numbers[$key -\
    \ 1] = $value;\n    }\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9hdxgnp.php:23\n\
    Stack trace:\n#0 /tmp/tmpu9hdxgnp.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpu9hdxgnp.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\t$min = array_shift($numbers);\n\treturn array_map(function($val) use ($numbers)\
    \ { return $val > $min ? $val : $min; }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgym_d9pt.php:17\n\
    Stack trace:\n#0 /tmp/tmpgym_d9pt.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgym_d9pt.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_value = -1;\n    foreach ($numbers as $i => $value) {\n        if\
    \ ($value > $max_value) {\n            $max_value = $value;\n        }\n    }\n\
    \    return $max_value;\n}\n</code>\n<|/ a |>\n<| c |>\nI believe `array_reduce()`\
    \ is going to be much more efficient than a plain loop. Unless this code is being\
    \ run a significant number of times where memory pressure is an issue, I'd say\
    \ it's better not to go for micro-optimizing code that's not an actual bottleneck.\n\
    <|/ c |>\n<| c |>\nIf performance is important, I agree with you, but I think\
    \ that in this case performance is a good example of when to use plain loop, also\
    \ because there exist several other ways of doing this in PHP and other languages.\
    \ In this specific case, the performance difference is minimal and in fact is\
    \ negligible.\n<|/ c |>\n<| a dscore=1 tags=algorithm,php |>\n<code>\n$numbers\
    \ = [10, 10, 8, 8, 8, 5, 2, 2, 2, 1];\n$numbers = array_reduce(\n    $numbers,\n\
    \    function($a, $b)\n    {\n        if ($a == -1) $a = $b;\n        return ($b\
    \ > $a) ? $b : $a;\n    }\n);\n</code>\n<|/ a |>\n<| a tags=algorithm,php |>\n\
    <code>\n$numbers = [1, 2, 3, 2, 3, 4, 2];\n\n$max_value = array_reduce($numbers,\
    \ function($result, $value) {\n    if ($value > $result) {\n        return $value;\n\
    \    }\n    return $result;\n}, -1);\n\nvar_dump($max_value);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=algorithm,php |>\n<code>\n$numbers = [1, 2, 3, 2, 3,\
    \ 4, 2];\n$largest = -1;\n\nforeach ($numbers as $num) {\n    if ($num > $largest)\
    \ {\n        $largest = $num;\n    }\n}\n\necho $largest;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$arr=array(1,2,3,4,5,6);\n$max=max($arr);\n$min=min($arr);\n\
    $sum=$max+$min;\n$counts=array_count_values($arr);\n$count=0;\nforeach ($arr as\
    \ $val) {\n    if ($counts[$val] == 1) {\n        $sum -= $val;\n    } else {\n\
    \        $count++;\n    }\n}\n\nvar_dump($sum);\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| a tags=algorithm,php |>\nHere is a one liner that does the job:\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6chro7se.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_result = NULL;\n    $max_index = NULL;\n    $max_value = NULL;\n\
    \    $current_index = 1;\n    $max_index = 0;\n\n    foreach ($numbers as $value)\
    \ {\n        if ($current_index == 1) {\n            if ($max_index == 0) {\n\
    \                $max_value = $value;\n                $max_index = $current_index;\n\
    \            } else {\n                $max_value = $max_value > $value ? $max_value\
    \ : $value;\n                $max_index = $max_index == $current_index ? $max_index\
    \ : $current_index;\n            }\n        } else {\n            if ($max_index\
    \ == 0) {\n                $max_value = $value;\n                $max_index =\
    \ $current_index;\n            } else {\n                $max_value = $max_value\
    \ > $value ? $max_value : $value;\n                $max_index = $max_index ==\
    \ $current_index ? $max_index : $current_index;\n            }\n        }\n\n\
    \        $current_index++;\n    }\n\n    return array_slice($numbers, $max_index);\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu314dhfp.php:44\n\
    Stack trace:\n#0 /tmp/tmpu314dhfp.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpu314dhfp.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = array_shift($numbers);\n    $result = $max;\n    foreach ($numbers\
    \ as $number) {\n        $result = max($number, $result);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw6dtx4ga.php:19\n\
    Stack trace:\n#0 /tmp/tmpw6dtx4ga.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpw6dtx4ga.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (!$numbers)\n        return false;\n    $max = array_shift($numbers);\n\
    \    foreach ($numbers as $num)\n        $max = max($num, $max);\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4z8q5j2.php:20\n\
    Stack trace:\n#0 /tmp/tmpg4z8q5j2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpg4z8q5j2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_rolling = false;\n    $max_so_far = array();\n    $max_rolling_number\
    \ = array();\n\n    foreach ($numbers as $number) {\n        $current_rolling\
    \ = count($max_rolling_number);\n\n        // The last element of the sequence\
    \ has just one element.\n        if ($current_rolling == 1) {\n            $max_rolling\
    \ = $max_rolling_number[0];\n        }\n\n        // The first element of the\
    \ sequence has just one element.\n        else if ($current_rolling == 0) {\n\
    \            $max_rolling = $number;\n        }\n\n        // The last element\
    \ of the sequence has just one element.\n        else if ($current_rolling ==\
    \ count($max_rolling_number)) {\n            $max_rolling = $number;\n       \
    \ }\n\n        // If we've found a new maximum, then update max_rolling and max_rolling_number\n\
    \        // to keep the new values.\n        else {\n            // The last element\
    \ of the sequence has just one element.\n            if ($max_rolling_number[$current_rolling\
    \ - 1] == $number) {\n                $max_rolling = $number;\n\n            \
    \    // The first element of the sequence has just one element.\n            }\n\
    \            // The first element of the sequence has just one element.\n    \
    \        else if ($max_rolling_number[0] == $number) {\n                $max_rolling\
    \ = $max_rolling_number[0];\n\n                // The last element of the sequence\
    \ has just one element.\n            }\n            // The last element of the\
    \ sequence has just one element.\n            else {\n                $max_rolling\
    \ = $max_rolling_number[$current_rolling - 1];\n            }\n\n            //\
    \ If we didn't find a new maximum, then add the current number to the current\
    \ max_rolling_number\n            $max_rolling_number[$current_rolling] = $number;\n\
    \        }\n\n        $max_so_far[] = $max_rolling;\n    }\n\n    return $max_so_far;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0d1rhoff.php:66\n\
    Stack trace:\n#0 /tmp/tmp0d1rhoff.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp0d1rhoff.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    asort($numbers);\n    $max_value = end($numbers);\n    $results = [];\n\
    \    foreach ($numbers as $number) {\n        if ($number >= $max_value) {\n \
    \           $results[] = $max_value;\n        } else {\n            $results[]\
    \ = $number;\n        }\n        $max_value = $number;\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparvxpuuv.php:27\n\
    Stack trace:\n#0 /tmp/tmparvxpuuv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmparvxpuuv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // The size of the rolling window\n    $size = 4;\n\n    $max_element\
    \ = 0;\n    $max_element_count = 0;\n    $rolling_window = [];\n    $current_max\
    \ = 0;\n    $current_max_count = 0;\n\n    foreach ($numbers as $key => $number)\
    \ {\n        if ($number > $current_max) {\n            $rolling_window[$current_max_count]\
    \ = $number;\n            $current_max = $number;\n            $current_max_count\
    \ = $key;\n        }\n        elseif ($number == $current_max) {\n           \
    \ $current_max_count = $key;\n        }\n    }\n\n    // The maximum element found\
    \ until this moment\n    if ($rolling_window[$current_max_count]) {\n        $max_element\
    \ = $rolling_window[$current_max_count];\n    }\n\n    return $max_element;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgttyjm5x.php:40\n\
    Stack trace:\n#0 /tmp/tmpgttyjm5x.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgttyjm5x.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_reduce($numbers, function ($acc, $val) {\n        $acc[$val]\
    \ = $val;\n        return $acc;\n    }, array());\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlhnzq5b.php:19\n\
    Stack trace:\n#0 /tmp/tmpnlhnzq5b.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnlhnzq5b.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) < 1) {\n        return array();\n    }\n\n    $maxs\
    \ = array();\n    $max = reset($numbers);\n    $index = 0;\n\n    while ($index\
    \ < count($numbers)) {\n        $current = $numbers[$index];\n        if ($current\
    \ > $max) {\n            $maxs[] = $max;\n            $max = reset($numbers);\n\
    \            $index = 0;\n        }\n        else {\n            $index++;\n \
    \       }\n    }\n\n    if ($max > 0) {\n        $maxs[] = $max;\n    }\n\n  \
    \  return $maxs;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpflqnl9un.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $n) {\n    $result[] = $n;\n    $result[]\
    \ = $result[-1];\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI made a similar solution a few days ago, here is the code http://stackoverflow.com/a/25676468/2266538\n\
    <|/ c |>\n<| a |>\nI ran into this same problem with my PHPUnit tests and I came\
    \ up with a solution that does not rely on a loop.\n<code>\npublic function testSomething()\n\
    {\n    $max = $this->getMockBuilder('SomeClassToMock')->disableOriginalConstructor()->setMethods(['getMax'])->getMock();\n\
    \    $max->expects($this->any())->method('getMax')->will($this->returnValue(2));\n\
    \n    $this->assertEquals(2, $max->getMax());\n}\n</code>\nHope this helps!\n\
    <|/ a tags=php,unit-testing dscore=5 |>\n<| c |>\nWhat about multiple `getMax()`\
    \ methods?\n<|/ c |>\n<| a dscore=5 tags=php,unit-testing |>\nI think you can\
    \ use the mock framework like so:\n<code>\nfunction candidate(...$args) {\n  \
    \  return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpprmjzox7.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    foreach ($numbers as $number) {\n        $max_val = max($numbers);\n\
    \        if ($max_val > $number) {\n            foreach ($numbers as $i => $number)\
    \ {\n                if ($i == 0) {\n                    $numbers[$i] = $max_val;\n\
    \                    break;\n                }\n                if ($number <\
    \ $numbers[$i - 1]) {\n                    unset($numbers[$i]);\n            \
    \        break;\n                }\n            }\n        }\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5k_giws.php:31\n\
    Stack trace:\n#0 /tmp/tmpi5k_giws.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi5k_giws.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_rolling_number = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] < $max_rolling_number) {\n            $max_rolling_number\
    \ = $numbers[$i];\n        }\n    }\n\n    return $max_rolling_number;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nVery nice function. Unfortunately the question is misunderstood,\
    \ OP wants to get the maximum rolling number in the sequence\n<|/ c |>\n<| c |>\n\
    : thanks for your comment. I've fixed my answer.\n<|/ c |>\n<| c |>\nI like this\
    \ answer. However, in case of multiple rolling numbers bigger than the first one,\
    \ they will be put in the last subarray. I would like to change this behavior\
    \ and put them in the first (or second) array. Is there a way to do this in php\
    \ ?\n<|/ c |>\n<| a dscore=4 |>\nYou can do this easily with a bit of recursion:\n\
    <code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphtwpigpc.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_val = $numbers[0];\n    $max_number = null;\n    for ($i = 1; $i\
    \ < count($numbers); $i++) {\n        $val = $numbers[$i];\n        if ($val >\
    \ $max_val) {\n            $max_val = $val;\n            $max_number = $i;\n \
    \       }\n    }\n    return array_slice($numbers, 0, $max_number + 1);\n}\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9ybr820.php:25\n\
    Stack trace:\n#0 /tmp/tmph9ybr820.php(29): test()\n#1 {main}\n  thrown in /tmp/tmph9ybr820.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $currentMax = $numbers[0];\n    $currentIndex = 0;\n\
    \    foreach ($numbers as $number) {\n        if ($number > $currentMax) {\n \
    \           $currentMax = $number;\n            $currentIndex = $number;\n   \
    \     } else if ($number == $currentMax) {\n            $currentIndex++;\n   \
    \     }\n        $result[] = $currentMax;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = array_shift($numbers);\n\n    foreach ($numbers as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n        }\n    }\n\
    \n    return $max;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24xspp9u.php:23\n\
    Stack trace:\n#0 /tmp/tmp24xspp9u.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp24xspp9u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n\n  foreach ($numbers as $number) {\n    foreach (range(1,\
    \ $number) as $i) {\n      $result[] = $number;\n    }\n  }\n\n  return array_slice($result,\
    \ 0, count($numbers));\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2iulsgoa.php:24\n\
    Stack trace:\n#0 /tmp/tmp2iulsgoa.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2iulsgoa.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\t$rolling_maxes = [];\n\t$rolling_max = null;\n\n\tforeach ($numbers as\
    \ $key => $number) {\n\t\tif ($number > $rolling_max) {\n\t\t\t$rolling_max =\
    \ $number;\n\t\t\t$rolling_maxes[] = $rolling_max;\n\t\t} else if ($number ==\
    \ $rolling_max) {\n\t\t\t$rolling_maxes[] = $rolling_max;\n\t\t}\n\t}\n\n\treturn\
    \ $rolling_maxes;\n}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtcamd12.php:28\n\
    Stack trace:\n#0 /tmp/tmprtcamd12.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprtcamd12.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n  $numbers_count = count($numbers);\n  for ($i = 0; $i <\
    \ $numbers_count; $i++) {\n    if ($i == 0) {\n      $result[$i] = $numbers[$i];\n\
    \    } else {\n      $result[$i] = max($numbers[$i - 1], $numbers[$i]);\n    }\n\
    \  }\n  return $result;\n}\n\n/**\n * Generate an array with rolling minimum element\
    \ found until given moment\n * in the sequence.\n * >>> rolling_min([1, 2, 3,\
    \ 2, 3, 4, 2])\n * [1, 3, 2, 3, 2, 4, 2]\n */\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sd2er0r.php:32\n\
    Stack trace:\n#0 /tmp/tmp7sd2er0r.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7sd2er0r.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $results = [];\n\n    // If the list is empty, return immediately\n \
    \   if (empty($numbers)) {\n        return $results;\n    }\n\n    foreach ($numbers\
    \ as $index => $number) {\n        // If not the first element\n        if (0\
    \ !== $index && $number > $results[0]) {\n            $results[] = $number;\n\
    \        }\n    }\n\n    return $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9o7f298.php:30\n\
    Stack trace:\n#0 /tmp/tmpn9o7f298.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn9o7f298.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (is_array($numbers)) {\n        return array_shift($numbers) >= $numbers[0]\
    \ ? rolling_max($numbers) : rolling_max(array_merge($numbers, [$numbers[0]]));\n\
    \    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 4096 bytes) in /tmp/tmp28bny_o0.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = $numbers[0];\n    foreach ($numbers as $n) {\n        if ($n >\
    \ $max) {\n            $max = $n;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nThis code gives you a very simple answer but I think\
    \ it is very inefficient (O(n^2) complexity) so you need a better algorithm. \n\
    <code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpub2tdnuc.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    foreach($numbers as $n) {\n        if ($max === null\
    \ || $n <= $max)\n            $max = $n;\n    }\n    return $max;\n}\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpir69tild.php:19\n\
    Stack trace:\n#0 /tmp/tmpir69tild.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpir69tild.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_elements = array_slice($numbers, 0, 0);\n\n    $max_element = array_shift($max_elements);\n\
    \    $count = count($max_elements);\n    for ($i = 1; $i <= $count; $i++) {\n\
    \        $max_element = max($max_element, $max_elements[$i - 1]);\n    }\n\n \
    \   return $max_element;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere is a possible\
    \ solution:\n<code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5hmf1ozc.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // Initialize a variable (to hold a rolling max value found)\n    $rolling_max\
    \ = 0;\n    // Initialize the last rolling max value\n    $rolling_max = $rolling_max;\n\
    \    // Loop through the integers\n    foreach ($numbers as $key => $value) {\n\
    \        // If the rolling max is greater than the current value, then set it\
    \ to that value\n        if ($value > $rolling_max) {\n            $rolling_max\
    \ = $value;\n        }\n    }\n    // Return the rolling max value\n    return\
    \ $rolling_max;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gyjx1pl.php:27\n\
    Stack trace:\n#0 /tmp/tmp5gyjx1pl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5gyjx1pl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\t$current_value = array();\n\t$max_value = array();\n\tfor ($i = 0; $i <\
    \ count($numbers); $i++) {\n\t\t$current_value[$i] = $numbers[$i];\n\t\tif (count($max_value)\
    \ < count($current_value)) {\n\t\t\t$max_value = $current_value;\n\t\t}\n\t}\n\
    \t$max_value = array_slice($max_value, count($max_value) - 1);\n\treturn $max_value;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7enr_5x5.php:25\n\
    Stack trace:\n#0 /tmp/tmp7enr_5x5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7enr_5x5.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_map(function($number) {\n        return max($numbers);\n\
    \    }, array_chunk($numbers, ceil(count($numbers) / 2)));\n}\n</code>\nSo the\
    \ output is:\n<code>\n[\n    'day'     => 1,\n    'name'    => 'Monday',\n   \
    \ 'hour'    => 9,\n    'minute'  => 5,\n    'second'  => 0,\n    'year'    =>\
    \ 2018,\n    'month'   => 6,\n    'max'     => 2,\n    'min'     => 1,\n    'rolling_max'\
    \ => [\n        1,\n        2,\n        3,\n        3,\n        3,\n        3,\n\
    \        3,\n        4,\n    ]\n]\n</code>\n<|/ a tags=php |>\n<| c |>\nthanks\
    \ for this. I have edited my question and added my code to it. I need to output\
    \ the time as above (with seconds, minutes and hours). I hope this edit helps!\n\
    <|/ c |>\n<| c |>\nHi Ash, thanks for this. I have edited my question and added\
    \ my code to it. I need to output the time as above (with seconds, minutes and\
    \ hours). I hope this edit helps!\n<|/ c |>\n<| c |>\nHi-saint! Thanks for this.\
    \ I have edited my question and added my code to it. I need to output the time\
    \ as above (with seconds, minutes and hours). I hope this edit helps!\n<|/ c |>\n\
    <| c |>\nHi Ash, thanks for this. I have edited my question and added my code\
    \ to it. I need to output the time as above (with seconds, minutes and hours).\
    \ I hope this edit helps!\n<|/ c |>\n<| a |>\nThe best way is to split this into\
    \ two separate functions.\n<code>\n<?php\n\n$date1 = new DateTime('2018-06-11\
    \ 08:05:05');\n$date2 = new DateTime('2018-06-11 08:15:05');\n$diff = $date1->diff($date2);\n\
    \necho $diff->format('%a days, %h hours, %i minutes and %s seconds');\n</code>\n\
    <|/ a tags=php dscore=1 |>\n<| a dscore=1 tags=php |>\nYou can use array_chunk\
    \ and array_map\n<code>\n<?php\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkehq35kj.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) === 0) return $numbers;\n    $max = array_pop($numbers);\n\
    \    foreach($numbers as $number) {\n        $currentMax = $number;\n        foreach\
    \ ($numbers as $number) {\n            if ($number > $currentMax) {\n        \
    \        $currentMax = $number;\n            }\n        }\n        if ($currentMax\
    \ > $max) {\n            $max = $currentMax;\n        }\n    }\n    return array_merge($numbers,\
    \ array($max));\n}\n\n/**\n * Check if given string is not empty\n */\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgo_40id_.php:33\n\
    Stack trace:\n#0 /tmp/tmpgo_40id_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgo_40id_.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_num = 0;\n    $index = 0;\n    $last_num = null;\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        if ($last_num != $numbers[$i]) {\n\
    \            $max_num = $numbers[$i];\n            $index = $i;\n        }\n\n\
    \        if ($numbers[$i] > $max_num) {\n            $max_num = $numbers[$i];\n\
    \            $index = $i;\n        }\n        $last_num = $numbers[$i];\n    }\n\
    \n    if ($last_num == $numbers[$index]) {\n        return $max_num;\n    } else\
    \ {\n        return $max_num;\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e7a7lnk.php:35\n\
    Stack trace:\n#0 /tmp/tmp_e7a7lnk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_e7a7lnk.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_reduce($numbers, function($carry, $item) {\n        return\
    \ $carry > $item ? $carry : $item;\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxhql6cu9.php:17\n\
    Stack trace:\n#0 /tmp/tmpxhql6cu9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxhql6cu9.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $results = [];\n  for ($i = 0, $length = count($numbers); $i < $length;\
    \ $i++) {\n    $results[] = $numbers[$i];\n    $sum = 0;\n    for ($j = 0; $j\
    \ < $i; $j++) {\n      $sum += $results[$j];\n    }\n    $results[] = $sum;\n\
    \  }\n  return $results;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeldpqau9.php:25\n\
    Stack trace:\n#0 /tmp/tmpeldpqau9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpeldpqau9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\tsort($numbers);\n\t$max = reset($numbers);\n\tforeach($numbers as $k =>\
    \ $v) {\n\t\tif($v > $max) {\n\t\t\t$max = $v;\n\t\t}\n\t}\n\treturn $max;\n}\n\
    \nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9vlvmy_.php:22\n\
    Stack trace:\n#0 /tmp/tmpf9vlvmy_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpf9vlvmy_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) == 0) {\n        return [];\n    }\n\n    $max =\
    \ reset($numbers);\n    $maxes = array();\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n        $maxes[] = $max;\n    }\n\n    return $maxes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rolling_max = 0;\n    $last_index = 0;\n    $rolling_max_index = 0;\n\
    \    for ($i = 0; $i < count($numbers); ++$i) {\n        if ($rolling_max_index\
    \ == count($numbers) - 1) {\n            $rolling_max = max($rolling_max, $numbers[$i]);\n\
    \        } else {\n            if ($numbers[$i] >= $rolling_max) {\n         \
    \       $rolling_max = $numbers[$i];\n                $rolling_max_index = $i;\n\
    \            }\n        }\n    }\n    return $rolling_max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv23agq7.php:28\n\
    Stack trace:\n#0 /tmp/tmpjv23agq7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjv23agq7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max = null;\n  foreach ($numbers as $number) {\n    $max = $number > $max\
    \ ? $number : $max;\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2nso_y_.php:19\n\
    Stack trace:\n#0 /tmp/tmpw2nso_y_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpw2nso_y_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    foreach($numbers as $number)\n        $rMax[] = $number > $rMax[count($rMax)\
    \ - 1] ? $number : $rMax[count($rMax) - 1];\n    return $rMax;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\nHere's my attempt. Not sure how efficient this\
    \ is. But I think it's fairly easy to understand\n<code>\n<?php\n\n$arr = range(10,20);\n\
    \n$arr = $arr[0];\nfor($i=1;$i<count($arr);$i++){\n    if(max($arr, $arr[$i-1])\
    \ >= $arr[$i]){\n        $arr = array($arr[$i-1],$arr[$i]);\n    } else {\n  \
    \      $arr = $arr[$i-1];\n    }\n}\n\nvar_dump($arr);\n</code>\n<|/ a tags=php,function,arrays\
    \ |>\n<| a |>\nI assume that your array is sorted and you want to find the highest\
    \ value, which is the first element of the array which is not greater than the\
    \ element before it. \nIn this case you can do it like this:\n<code>\n$array =\
    \ range(1,10);\n$max = array_shift(array_filter(\n    $array, \n    function ($value)\
    \ {\n        return $value <= $array[0];\n    }\n));\n</code>\narray_filter filters\
    \ the array and only keeps the elements which meet the condition you give it.\
    \ In my example all elements which are not smaller than the lowest value are filtered\
    \ out (array_shift), so I only keep the highest element by comparing it with the\
    \ element before it.\n<|/ a tags=php,function,arrays dscore=1 |>\n<| c |>\n`array_shift`\
    \ does not return an array but a value and you assign that value to a new variable\
    \ which you then have to `return`.\n<|/ c |>\n<| c |>\noh yeah right! I should\
    \ take another breath\n<|/ c |>\n<| a |>\n<code>\n<?php\n$arr = range(1, 10);\n\
    $max = max($arr);\n$index = array_search($max, $arr);\narray_splice($arr, $index,\
    \ 1);\necho implode(',', $arr);\n</code>\nResult: 9,8,7,6,5,4,3,2,1\n<|/ a tags=php,function,arrays\
    \ dscore=1 |>\n<| a dscore=1 tags=php,function,arrays |>\nYou can do this:\n<code>\n\
    $array = range(1,10);\n$temp = array_shift($array);\n$max = $temp;\nforeach($array\
    \ as $val){\n    if($val > $temp){\n        $temp = $val;\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptg6zr7aa.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\t$max_value = reset($numbers);\n\tfor ($i = 1; $i < count($numbers); ++$i)\
    \ {\n\t\t$max_value = max($numbers[$i-1], $max_value, $numbers[$i]);\n\t}\n\t\
    return $max_value;\n}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyytkigv5.php:18\n\
    Stack trace:\n#0 /tmp/tmpyytkigv5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpyytkigv5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $n) {\n        if (count($result)\
    \ < $n) {\n            $result[] = $n;\n        } else {\n            $max = array_pop($result);\n\
    \            if ($n > $max) {\n                $result[] = $n;\n            }\n\
    \        }\n    }\n\n    return array_pop($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybq473t9.php:27\n\
    Stack trace:\n#0 /tmp/tmpybq473t9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpybq473t9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $maxes = array();\n    $n = count($numbers);\n    $current_max = reset($numbers);\n\
    \n    for ($i = 0; $i < $n; $i++) {\n        $current_max = max($numbers[$i],\
    \ $current_max);\n        $maxes[] = $current_max;\n    }\n\n    return $maxes;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_array = [];\n    $max_index = [];\n    for($i=0;$i<count($numbers);$i++)\
    \ {\n        $max_array[] = $numbers[$i];\n        $max_index[] = $i;\n    }\n\
    \    for($i=1;$i<count($numbers);$i++) {\n        if($numbers[$i] >= $numbers[$i-1])\
    \ {\n            $max_array[] = $numbers[$i];\n            $max_index[] = $i;\n\
    \        }\n    }\n    $rolling_max = array_slice($max_array, 0, max($max_index));\n\
    \    return $rolling_max;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmp725r7lko.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp725r7lko.php:29\n\
    Stack trace:\n#0 /tmp/tmp725r7lko.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp725r7lko.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = array();\n    $max = $numbers[0];\n    $current = $max;\n \
    \   foreach ($numbers as $number) {\n        if ($number > $max) {\n         \
    \   $result = array($max);\n            $current = $max;\n        } else {\n \
    \           $result[] = $number;\n            $current = $number;\n        }\n\
    \        $max = $current;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouyzzg0v.php:29\n\
    Stack trace:\n#0 /tmp/tmpouyzzg0v.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpouyzzg0v.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (empty($numbers)) {\n        return [];\n    }\n\n    return array_map(function($number)\
    \ {\n        return max($numbers);\n    }, $numbers);\n}\n\n/**\n * Calculate\
    \ average of the given numbers\n *\n * @param array $numbers A list of numbers\n\
    \ *\n * @return float\n */\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp1jz3p0nj.php on line 12\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmp1jz3p0nj.php on line 12\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmp1jz3p0nj.php\
    \ on line 12\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmp1jz3p0nj.php on line 12\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1jz3p0nj.php:29\nStack trace:\n#0 /tmp/tmp1jz3p0nj.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1jz3p0nj.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    \n    // Initialize variables\n    $max_value = 0;\n    $rolling_max\
    \ = $numbers[0];\n    $last_element = -1;\n    \n    // Go through each element\
    \ in the array\n    for($i=1; $i <= count($numbers); $i++) {\n        \n     \
    \   // Check if the element is higher then last element\n        if($numbers[$i]\
    \ > $max_value) {\n            \n            // Record the maximum value\n   \
    \         $max_value = $numbers[$i];\n            \n            // Keep track\
    \ of the highest element\n            $last_element = $i;\n        }\n    }\n\
    \    \n    // Return the last element that has been found\n    return $numbers[$last_element];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nA few things to note here. First of all,\
    \ the algorithm does not give the correct result. It doesn't return the correct\
    \ rolling maximum value (it returns the first number in the list that has the\
    \ maximum value) but it's easy to fix it by adding an additional check: `if($numbers[$i]\
    \ > $rolling_max) { $rolling_max = $numbers[$i]; $last_element = $i; }`\n<|/ c\
    \ |>\n<| c |>\nI know, I thought that was pretty obvious and that could be easily\
    \ solved by adding the extra check.\n<|/ c |>\n<| c |>\nI added a note on how\
    \ to fix it for those who don't want to try and read the full answer.\n<|/ c |>\n\
    <| a dscore=0 |>\nI made it work by using the max function.\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6usx0fbw.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_numbers = array();\n    $max_index = 0;\n    $current = array();\n\
    \    foreach ($numbers as $number) {\n        if ($number > $current[$max_index])\
    \ {\n            $current[$max_index] = $number;\n            $max_numbers[] =\
    \ $current;\n        }\n    }\n\n    return $max_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl29fx9ph.php:26\n\
    Stack trace:\n#0 /tmp/tmpl29fx9ph.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl29fx9ph.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = array();\n    $prev = $numbers[0];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $result[$i] = $prev;\n        $prev = $numbers[$i];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpny1jaf4a.php:22\n\
    Stack trace:\n#0 /tmp/tmpny1jaf4a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpny1jaf4a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (!is_array($numbers)) throw new InvalidArgumentException('First argument\
    \ is not an array.');\n    $minNumber = array_shift($numbers);\n    $maxNumber\
    \ = $minNumber;\n    foreach ($numbers as $number) {\n        $maxNumber = max($number,\
    \ $maxNumber);\n    }\n    return $maxNumber;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7alnwb1_.php:21\n\
    Stack trace:\n#0 /tmp/tmp7alnwb1_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7alnwb1_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) < 2) {\n        return $numbers;\n    }\n\n    $max_value\
    \ = $numbers[0];\n    $rolling_max = array();\n    foreach ($numbers as $value)\
    \ {\n        if ($value > $max_value) {\n            $rolling_max[] = $max_value;\n\
    \            $max_value = $value;\n        } elseif ($value == $max_value) {\n\
    \            $rolling_max[] = $value;\n        }\n    }\n\n    return $rolling_max;\n\
    }\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppspnmmjh.php:30\n\
    Stack trace:\n#0 /tmp/tmppspnmmjh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppspnmmjh.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\t$max = reset($numbers);\n\tforeach ($numbers as $key => $value) {\n\t\t\
    if ($value > $max) {\n\t\t\t$max = $value;\n\t\t}\n\t}\n\n\treturn $max;\n}\n\n\
    function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14uzmw1c.php:22\n\
    Stack trace:\n#0 /tmp/tmp14uzmw1c.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp14uzmw1c.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $rolling_max = array();\n  $numbers_size = count($numbers);\n  for ($i\
    \ = 1; $i < $numbers_size; ++$i) {\n    $rolling_max[] = max($rolling_max, $numbers[$i\
    \ - 1]);\n  }\n  return $rolling_max;\n}\n\nfunction candidate(...$args) {\n \
    \   return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjk25bkk1.php:21\n\
    Stack trace:\n#0 /tmp/tmpjk25bkk1.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjk25bkk1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rollingMax = [];\n    $currentMax = array();\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $currentMax[0]) {\n            $currentMax\
    \ = array($number);\n        }\n        array_push($rollingMax, $number);\n  \
    \  }\n    if (count($currentMax)) {\n        $rollingMax[] = $currentMax;\n  \
    \  }\n    return $rollingMax;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0kyqvam.php:27\n\
    Stack trace:\n#0 /tmp/tmpf0kyqvam.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf0kyqvam.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (empty($numbers)) {\n        return [];\n    }\n    $max_rolling =\
    \ null;\n    $rolling = $numbers;\n    do {\n        $rolling = $rolling->rolling(1);\n\
    \        if ($rolling->max() !== $max_rolling) {\n            $max_rolling = $rolling->max();\n\
    \        }\n    } while ($rolling->max() === $max_rolling && $rolling->count()\
    \ !== 0);\n    return $rolling->toArray();\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function rolling() on array\
    \ in /tmp/tmpexwkghqh.php:13\nStack trace:\n#0 /tmp/tmpexwkghqh.php(22): rolling_max(Array)\n\
    #1 /tmp/tmpexwkghqh.php(27): candidate(Array)\n#2 /tmp/tmpexwkghqh.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpexwkghqh.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // If no numbers were passed in, just return an empty array immediately.\n\
    \    if (empty($numbers)) {\n        return array();\n    }\n    // Calculate\
    \ the max of every number in the passed array starting from the first one.\n \
    \   $max_array = array_reduce($numbers, function($maxes, $number) {\n        if\
    \ ($number > $maxes[0]) {\n            $maxes[0] = $number;\n            $maxes[1]\
    \ = $maxes[1] ?? $number;\n        }\n        return $maxes;\n    }, array(null,\
    \ null));\n    // Return the max number that was calculated.\n    return $max_array[1];\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0m80bh5l.php:29\n\
    Stack trace:\n#0 /tmp/tmp0m80bh5l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0m80bh5l.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) < 2) {\n        return $numbers;\n    }\n    $max\
    \ = array_shift($numbers);\n    foreach ($numbers as $n) {\n        $max = max($max,\
    \ $n);\n    }\n    return array($max);\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9xg3av4.php:23\n\
    Stack trace:\n#0 /tmp/tmpl9xg3av4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpl9xg3av4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rollingMax = [];\n    foreach ($numbers as $number) {\n        if ($number\
    \ != 0) {\n            $rollingMax[] = $number;\n        } else {\n          \
    \  $rollingMax = array_merge($rollingMax, [$number]);\n        }\n    }\n    return\
    \ $rollingMax;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjh7brxj3.php:25\n\
    Stack trace:\n#0 /tmp/tmpjh7brxj3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjh7brxj3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = $numbers[0];\n    $rolling_maxes = array();\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $rolling_maxes[] =\
    \ $max;\n            $max = $number;\n        } else {\n            $rolling_maxes[]\
    \ = $number;\n        }\n    }\n    return $rolling_maxes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5_en3bk.php:26\n\
    Stack trace:\n#0 /tmp/tmpd5_en3bk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpd5_en3bk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // Initialize maximum values\n    $rolling_max = array();\n    // Add\
    \ each number to max\n    foreach ($numbers as $number) {\n        $rolling_max[]\
    \ = $number;\n    }\n\n    // Initialize current index\n    $index = 0;\n    //\
    \ Initialize rolling max for given index\n    $rolling_max[$index] = $rolling_max[$index];\n\
    \    while (array_search($rolling_max[$index], $rolling_max) > 0) {\n        //\
    \ Check if current index is the one before current rolling max\n        if ($index\
    \ == 0) {\n            break;\n        }\n\n        // Get current max value\n\
    \        $rolling_max[$index] = $rolling_max[array_search($rolling_max[$index],\
    \ $rolling_max)];\n        $index--;\n    }\n    return $rolling_max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqudvbczh.php:36\n\
    Stack trace:\n#0 /tmp/tmpqudvbczh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqudvbczh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $n) {\n        $result[] = $n;\n\
    \        foreach ($result as $val) {\n            if ($val > $n) {\n         \
    \       $result[] = $n;\n                break;\n            }\n        }\n  \
    \  }\n\n    return array_unique($result);\n}\n\n/**\n * Returns the minimum number\
    \ in the given list of integers\n * PHPUnit wrapper for https://github.com/facebook/hhvm/issues/4086\n\
    \ *\n * Example: minimum([3, 1, 2]) = 3\n * PHPUnit wrapper for https://github.com/facebook/hhvm/issues/4086\n\
    \ *\n * @param array $numbers\n *\n * @return int\n */\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa40m6rfg.php:39\n\
    Stack trace:\n#0 /tmp/tmpa40m6rfg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa40m6rfg.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $last_number = 0;\n    $rolling_max = [];\n    $current_max = 0;\n  \
    \  foreach ($numbers as $number) {\n        if ($number > $current_max) {\n  \
    \          $rolling_max[] = $current_max;\n            $current_max = $number;\n\
    \        } else {\n            $current_max = $number;\n        }\n    }\n   \
    \ $rolling_max[] = $current_max;\n    return $rolling_max;\n}\n$rolling_max =\
    \ rolling_max($numbers);\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp4h1frt7m.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h1frt7m.php:27\n\
    Stack trace:\n#0 /tmp/tmp4h1frt7m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4h1frt7m.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) < 2)\n        return $numbers;\n    $result = [];\n\
    \    $result[0] = max($numbers);\n    $numbers_count = count($numbers);\n    for\
    \ ($i = 1; $i < $numbers_count; ++$i) {\n        $value = $numbers[$i];\n    \
    \    if (isset($numbers[$i - 1]))\n            $previous = $numbers[$i - 1];\n\
    \        else\n            $previous = $result[0];\n        if (isset($numbers[$i\
    \ - 2]))\n            $next = $numbers[$i - 2];\n        else\n            $next\
    \ = $result[0];\n        if ($previous > $value) {\n            $result[$i] =\
    \ $previous;\n            unset($numbers[$i - 1]);\n        } elseif ($value >\
    \ $next) {\n            $result[$i] = $value;\n            unset($numbers[$i -\
    \ 2]);\n        } else\n            unset($numbers[$i - 1]);\n    }\n    $result\
    \ = array_merge($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5yhh6q7.php:41\n\
    Stack trace:\n#0 /tmp/tmpj5yhh6q7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpj5yhh6q7.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $rolling_max = null;\n    foreach ($numbers as $i\
    \ => $number) {\n        if ($rolling_max === null) {\n            $rolling_max\
    \ = $number;\n        } else {\n            $rolling_max = $rolling_max > $number\
    \ ? $rolling_max : $number;\n        }\n        $result[] = $rolling_max;\n  \
    \  }\n    return $result;\n}\n</code>\n<|/ a dscore=4 tags=php,arrays |>\n<| c\
    \ |>\nThis worked great for me. Although I ended up just looping through the array\
    \ and counting how many times the element occurred.\n<|/ c |>\n<| c |>\nThe other\
    \ answers are all better in every way. :)\n<|/ c |>\n<| c |>\nThanks, this helped\
    \ me a lot after hours of searching for an answer!\n<|/ c |>\n<| c |>\nIt works,\
    \ But can you explain what is the logic behind this code\n<|/ c |>\n<| c |>\n\
    This is an example of a simple and efficient solution to rolling max numbers.\
    \ Very good explanation of the algorithm is here: https://stackoverflow.com/a/38282325/1569644\n\
    <|/ c |>\n<| a dscore=4 |>\nTo find max value in array use following code -\n\
    <code>\n<?php\n$array = [1 ,2 ,3 ,4 ,5 ,6 ,7];\n$maxvalue = max($array);\n</code>\n\
    If you want to get values which occur max number of times then use following code\
    \ -\n<code>\n$maxvalue = max($array);\n$result = array_count_values($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't answer the OP's question\n\
    <|/ c |>\n<| c |>\nThis will give the max number, not the max number of times\n\
    <|/ c |>\n<| c |>\nThe question is how to find the max number of times, the max\
    \ is 3.\n<|/ c |>\n<| a dscore=3 tags=php,arrays |>\nHere's a quick and dirty\
    \ solution using recursion:\n<code>\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprrx_jq9w.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $r = [];\n    foreach ($numbers as $val) {\n        $r[] = $val;\n  \
    \      $r[] = max($val);\n    }\n    return $r;\n}\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpox0_tddl.php on line 10\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpox0_tddl.php on line 10\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmpox0_tddl.php\
    \ on line 10\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpox0_tddl.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpox0_tddl.php:20\nStack trace:\n#0 /tmp/tmpox0_tddl.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpox0_tddl.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    $i = 0;\n    foreach ($numbers as $number) {\n    \
    \    if ($number > $max && $i !== 0) {\n            $max = $number;\n        }\n\
    \        $i++;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_o4hqqw.php:23\n\
    Stack trace:\n#0 /tmp/tmp0_o4hqqw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0_o4hqqw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [max($numbers)];\n  for ($i = 1; $i < count($numbers); $i++)\
    \ {\n    $result[] = max($numbers[$i], $result[$i - 1]);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpv3ts2wi8.php\
    \ on line 7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3ts2wi8.php:19\n\
    Stack trace:\n#0 /tmp/tmpv3ts2wi8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpv3ts2wi8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $max = -PHP_INT_MAX;\n    $max_at = [];\n\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \            $max_at = [];\n        }\n\n        $max_at[] = $number;\n\n    \
    \    if (count($max_at) > 3) {\n            $max_at = array_slice($max_at, 0,\
    \ count($max_at) - 3);\n        }\n\n        $result[] = $max;\n        $max =\
    \ $number;\n    }\n\n    return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\nI took Robert's approach and added a few enhancements.\n<code>\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp40ih1rht.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    sort($numbers);\n    $previous = $numbers[0];\n    $previous += 0;\n\
    \    $result[] = $previous;\n    $i = 1;\n    foreach ($numbers as $number) {\n\
    \        if ($number < $previous) {\n            $result[] = $number;\n      \
    \  }\n        if ($number > $previous) {\n            $previous = $number;\n \
    \           $result[] = $previous;\n            $i++;\n        }\n    }\n    return\
    \ array_slice($result, 0, $i);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxx0e25h5.php:30\n\
    Stack trace:\n#0 /tmp/tmpxx0e25h5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxx0e25h5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\t$max = null;\n\tforeach ($numbers as $number) {\n\t\tif (is_null($max)\
    \ || $number > $max) {\n\t\t\t$max = $number;\n\t\t}\n\t}\n\treturn $max;\n}\n\
    \nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq44n81yb.php:21\n\
    Stack trace:\n#0 /tmp/tmpq44n81yb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpq44n81yb.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_value = null;\n    $rolling_max_value = null;\n    $rolling_max_time\
    \ = null;\n    $time_counter = 0;\n    foreach ($numbers as $number) {\n     \
    \   if ($number > $rolling_max_value) {\n            $rolling_max_value = $number;\n\
    \            $rolling_max_time = $time_counter;\n        }\n        $time_counter++;\n\
    \    }\n    return $rolling_max_value;\n}\n</code>\n<|/ a tags=arrays,php,arraylist,list\
    \ dscore=0 |>\n<| a dscore=0 |>\nYou can try this:\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9);\n\
    \n$array = array_slice($arr, 0, 0, false);\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpohki8mcy.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = $numbers[0];\n  $rolling = $numbers[1];\n  foreach ($numbers\
    \ as $number) {\n    $rolling = $rolling > $number ? $number : $rolling;\n   \
    \ $result = $number > $result ? $number : $result;\n  }\n  return $result;\n}\n\
    function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxenisou.php:20\n\
    Stack trace:\n#0 /tmp/tmpwxenisou.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwxenisou.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        $result[]\
    \ = $number;\n        if (count($result) > 1 && $result[$result->count() - 1]\
    \ > $number) {\n            $result->pop();\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function count() on array\
    \ in /tmp/tmpxuewvzjs.php:10\nStack trace:\n#0 /tmp/tmpxuewvzjs.php(18): rolling_max(Array)\n\
    #1 /tmp/tmpxuewvzjs.php(23): candidate(Array)\n#2 /tmp/tmpxuewvzjs.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxuewvzjs.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $n) {\n        if ($n >= count($numbers))\
    \ break;\n        $result[$n] = max($result[$n], $numbers[$n]);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbihwtvu.php:21\n\
    Stack trace:\n#0 /tmp/tmpfbihwtvu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfbihwtvu.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $sum = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \    }\n\n    return array_slice($numbers, 0, array_search($sum, array_reverse($numbers)),\
    \ true);\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2audjyr.php:21\n\
    Stack trace:\n#0 /tmp/tmpp2audjyr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpp2audjyr.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = 0;\n    $maxIndex = 0;\n    foreach ($numbers as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n            $maxIndex\
    \ = $i;\n        }\n        $i++;\n    }\n    return array_slice($numbers, 0,\
    \ $maxIndex);\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnsazqx6.php:25\n\
    Stack trace:\n#0 /tmp/tmprnsazqx6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprnsazqx6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $max_value = max($numbers);\n    $number = 1;\n  \
    \  foreach ($numbers as $n) {\n        if ($n > $max_value) {\n            $result[]\
    \ = $max_value;\n            $max_value = $n;\n            $number = 1;\n    \
    \    } else if ($n == $max_value) {\n            $number++;\n        } else {\n\
    \            $result[] = $n;\n        }\n    }\n    if ($number > 0) {\n     \
    \   $result[] = $max_value;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpg48_dza4.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg48_dza4.php:32\n\
    Stack trace:\n#0 /tmp/tmpg48_dza4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpg48_dza4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = array_shift($numbers);\n    while (count($numbers) && $numbers[0]\
    \ >= $max) {\n        $max = array_shift($numbers);\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvn2wzfod.php:19\n\
    Stack trace:\n#0 /tmp/tmpvn2wzfod.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvn2wzfod.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = array_shift($numbers);\n    while (!empty($numbers)) {\n     \
    \   $max = max($numbers[0], $max);\n        $numbers = array_slice($numbers, 1);\n\
    \    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16ky5g8v.php:19\n\
    Stack trace:\n#0 /tmp/tmp16ky5g8v.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp16ky5g8v.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $current = array_shift($numbers);\n    do {\n    \
    \    $result[] = $current;\n        $current = max($current, array_shift($numbers));\n\
    \    } while ($numbers);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2nmxk_xc.php:21\n\
    Stack trace:\n#0 /tmp/tmp2nmxk_xc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2nmxk_xc.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = array_shift($numbers);\n    $index = 0;\n    foreach ($numbers\
    \ as $num) {\n        if ($num > $max) {\n            $max = $num;\n         \
    \   $index = 1;\n        } elseif ($index == 0) {\n            $max = $num;\n\
    \            $index++;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnowosn76.php:26\n\
    Stack trace:\n#0 /tmp/tmpnowosn76.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnowosn76.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $size = count($numbers);\n    foreach ($numbers as\
    \ $i => $number) {\n        if ($number === $numbers[$i - 1]) {\n            $result[]\
    \ = $number;\n        } else {\n            $result[] = $number;\n           \
    \ for ($j = count($numbers); $i < $j; ++$i) {\n                $result[] = $numbers[$i];\n\
    \            }\n            break;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwb55huox.php:29\n\
    Stack trace:\n#0 /tmp/tmpwb55huox.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwb55huox.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = array();\n    $max    = 0;\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       $result[] = $max;\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,laravel,algorithm\
    \ dscore=0 |>\n<| c |>\n`rolling_max()` will return a list containing only the\
    \ maximum values. It doesn't return the array with the maximum values repeated\
    \ to fill the gaps. The result of `rolling_max([1, 2, 3, 2, 3, 4, 2])` should\
    \ be `[1, 2, 3, 3, 3, 4, 4]`.\n<|/ c |>\n<| c |>\nThanks for pointing it out.\
    \ I misunderstood the question. I'll edit my answer.\n<|/ c |>\n<| a tags=php,arrays,laravel,algorithm\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmsfuj59r.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_value = $numbers[0];\n    $max_position = 0;\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max_value) {\n            $max_value =\
    \ $number;\n            $max_position = $i;\n        }\n        $i++;\n    }\n\
    \    return array_slice($numbers, 0, $max_position + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ddhh8eu.php:26\n\
    Stack trace:\n#0 /tmp/tmp2ddhh8eu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2ddhh8eu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $maxes = array();\n    $max = $numbers[0];\n    foreach ($numbers as\
    \ $number) {\n        if ($number > $max) {\n            $max = $number;\n   \
    \     }\n    }\n    $maxes[] = $max;\n    $index = 1;\n    while ($index < count($numbers))\
    \ {\n        $last = count($maxes) - 1;\n        $max = $maxes[$last];\n     \
    \   foreach ($numbers as $number) {\n            if ($number > $max) {\n     \
    \           $max = $number;\n            }\n        }\n        $maxes[$last] =\
    \ $max;\n        $index++;\n    }\n    return $maxes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubvswr80.php:35\n\
    Stack trace:\n#0 /tmp/tmpubvswr80.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpubvswr80.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // Start with a copy of $numbers:\n    $rollingMax = $numbers;\n    //\
    \ Start at index 1:\n    $rollingMaxIndex = 1;\n    // Keep going until we reach\
    \ the end:\n    while ($rollingMaxIndex < count($rollingMax)) {\n        // Find\
    \ the maximum in the rolling max array:\n        $maxIndex = 0;\n        $maxValue\
    \ = $rollingMax[$maxIndex];\n        for ($index = 1; $index < count($rollingMax);\
    \ $index++) {\n            if ($rollingMax[$index] > $maxValue) {\n          \
    \      $maxIndex = $index;\n                $maxValue = $rollingMax[$maxIndex];\n\
    \            }\n        }\n        // Remove that index from the rolling max array:\n\
    \        unset($rollingMax[$maxIndex]);\n        // Add it to the results ($rollingMax):\n\
    \        $rollingMax[$maxIndex] = $maxValue;\n        // Increment the index:\n\
    \        $rollingMaxIndex++;\n    }\n    // Return the results:\n    return $rollingMax;\n\
    }\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8wvrx6e.php:39\n\
    Stack trace:\n#0 /tmp/tmpx8wvrx6e.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpx8wvrx6e.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $current = null;\n    $max = null;\n    $found = false;\n    foreach\
    \ ($numbers as $number) {\n        if ($found === true) {\n            if ($current\
    \ >= $number) {\n                $current = $number;\n            }\n        }\
    \ else {\n            if ($current === null) {\n                $current = $number;\n\
    \                $found = true;\n            } else {\n                $current\
    \ = max($current, $number);\n                $found = true;\n            }\n \
    \       }\n        $max = $number;\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0xjcgzx.php:34\n\
    Stack trace:\n#0 /tmp/tmpt0xjcgzx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt0xjcgzx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return rolling_max($numbers, null, null, null, null, null);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    foreach($numbers as $number) {\n        $result[$number]\
    \ = $number;\n    }\n\n    $current_max = $result[0];\n    foreach($numbers as\
    \ $number) {\n        $current_max = max($current_max, $number);\n    }\n\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpras0uxe8.php:26\n\
    Stack trace:\n#0 /tmp/tmpras0uxe8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpras0uxe8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = -INF;\n    $max_count = 0;\n    $n = count($numbers);\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        if ($numbers[$i] > $max) {\n            $max\
    \ = $numbers[$i];\n            $max_count = $i;\n        }\n    }\n    return\
    \ array_slice($numbers, 0, $max_count);\n}\n\n/**\n * Get the sum of an array\
    \ of numbers\n *\n * @param array $numbers the numbers to sum\n * @return int\
    \ the sum of the numbers\n */\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3colrkiz.php:31\n\
    Stack trace:\n#0 /tmp/tmp3colrkiz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3colrkiz.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) === 0) {\n        return null;\n    }\n\n    $max\
    \ = array_shift($numbers);\n    $max_element = array_shift($numbers);\n\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $max_element) {\n           \
    \ $max_element = $number;\n        }\n    }\n\n    return $max_element;\n}\n\n\
    function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb91yelr6.php:28\n\
    Stack trace:\n#0 /tmp/tmpb91yelr6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb91yelr6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        $result[]\
    \ = $number;\n        if (count($numbers) > 0) {\n            $result[] = array_pop(array_slice($numbers,\
    \ 0, count($numbers) / 2));\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpls5rqfj_.php:23\n\
    Stack trace:\n#0 /tmp/tmpls5rqfj_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpls5rqfj_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    $max_size = 0;\n    $prev_max = null;\n    $max_indexes\
    \ = [];\n    foreach ($numbers as $index => $number) {\n        if ($number >\
    \ $max_size || $prev_max !== null && $number > $prev_max) {\n            $max_size\
    \ = $number;\n            $max = $number;\n            $max_indexes[] = $index;\n\
    \        } elseif ($max_size != null && $number == $max_size) {\n            $max_indexes[]\
    \ = $index;\n        }\n        $prev_max = $number;\n    }\n    return array_merge(array_slice($numbers,\
    \ 0, $max_indexes[0] + 1), [$max], array_slice($numbers, $max_indexes[0] + 1));\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zd03963.php:29\n\
    Stack trace:\n#0 /tmp/tmp0zd03963.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0zd03963.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_slice(\n        array_merge(\n            array_reverse(\n\
    \                array_slice($numbers, -count($numbers))\n            ),\n   \
    \         $numbers\n        ),\n        0,\n        count($numbers)\n    );\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpswcdyp.php:25\n\
    Stack trace:\n#0 /tmp/tmpwpswcdyp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwpswcdyp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = 0;\n    foreach ($numbers as $number) {\n        $max = $max >\
    \ $number ? $number : $max;\n    }\n    return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmper29bzig.php:18\n\
    Stack trace:\n#0 /tmp/tmper29bzig.php(24): test()\n#1 {main}\n  thrown in /tmp/tmper29bzig.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\tdo {\n\t\tforeach ($numbers as $number) {\n\t\t\t$max_rolling_max = $number;\n\
    \t\t\tforeach ($numbers as $index => $value) {\n\t\t\t\tif ($value == $max_rolling_max)\
    \ {\n\t\t\t\t\tif ($index != 0 && $numbers[$index - 1] == $max_rolling_max) {\n\
    \t\t\t\t\t\t$max_rolling_max = $value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$max_rolling_max\
    \ = $max_rolling_max;\n\t\t\t\t\t}\n\t\t\t\t\tunset($numbers[$index]);\n\t\t\t\
    \t\tcontinue 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$numbers[] = $max_rolling_max;\n\t\t\
    }\n\t} while (count($numbers) > 0);\n\treturn $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpneix2huv.php:33\n\
    Stack trace:\n#0 /tmp/tmpneix2huv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpneix2huv.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n  $numbers_length = count($numbers);\n  $rolling_max = $numbers[0];\n\
    \  for ($i = 1; $i < $numbers_length; $i++) {\n    if ($rolling_max < $numbers[$i])\
    \ {\n      $rolling_max = $numbers[$i];\n    }\n  }\n  $result[] = $rolling_max;\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu04u4qyt.php:24\n\
    Stack trace:\n#0 /tmp/tmpu04u4qyt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu04u4qyt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rollingMax = 0;\n    $rollingMaxIndex = 0;\n    $maxIndex = 0;\n   \
    \ $last = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($numbers[$i]\
    \ > $rollingMax) {\n            $rollingMax = $numbers[$i];\n            $maxIndex\
    \ = $i;\n        }\n        if ($numbers[$i] == $rollingMax) {\n            if\
    \ ($i < $maxIndex) {\n                $rollingMax = $numbers[$maxIndex];\n   \
    \             $maxIndex = $i;\n            }\n        }\n        if ($numbers[$i]\
    \ == $rollingMax) {\n            if ($i >= $maxIndex + 1) {\n                $rollingMax\
    \ = $numbers[$maxIndex];\n                $maxIndex = $i;\n            }\n   \
    \     }\n    }\n    return $rollingMax;\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssic0mqq.php:37\n\
    Stack trace:\n#0 /tmp/tmpssic0mqq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpssic0mqq.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $window = [];\n\n    foreach ($numbers as $number) {\n        $window[]\
    \ = $number;\n        if (count($window) == count($numbers) + 1) {\n         \
    \   $window = array_reverse($window);\n            $max = $window[0];\n      \
    \      $window = [];\n        } else {\n            $max = $window[count($window)\
    \ - 1];\n        }\n    }\n\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjfq4qog.php:28\n\
    Stack trace:\n#0 /tmp/tmpgjfq4qog.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpgjfq4qog.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_so_far = array();\n    $max_so_far = array_merge($max_so_far, $numbers);\n\
    \    $max_so_far = array_pop($max_so_far);\n    $max_so_far = array_shift($max_so_far);\n\
    \    $max_so_far = array_pop($max_so_far);\n\n    return $max_so_far;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmpq0ttvxw3.php on line 10\n\nWarning: array_pop() expects parameter 1\
    \ to be array, null given in /tmp/tmpq0ttvxw3.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpq0ttvxw3.php:21\nStack trace:\n#0 /tmp/tmpq0ttvxw3.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq0ttvxw3.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = $numbers[0];\n    $result = [];\n    foreach($numbers as $number)\
    \ {\n        $result[] = max($number, $max);\n        $max = $number;\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy42rqz6d.php:22\n\
    Stack trace:\n#0 /tmp/tmpy42rqz6d.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpy42rqz6d.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    for($i = count($numbers); $i > 0; --$i) {\n      \
    \  $result[] = max($numbers[$i-1], $numbers[$i]);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8gko5ec.php:19\n\
    Stack trace:\n#0 /tmp/tmpr8gko5ec.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpr8gko5ec.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $results = array();\n\n    $results[count($numbers)] = reset($numbers);\n\
    \n    foreach ($numbers as $key => $value) {\n        for ($i = $results[count($results)];\
    \ $i > $value; $i--) {\n            $results[count($results)] = $i;\n        }\n\
    \    }\n\n    return $results;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnb18grn.php:25\n\
    Stack trace:\n#0 /tmp/tmpwnb18grn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwnb18grn.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max = -PHP_INT_MAX;\n  foreach ($numbers as $k => $number) {\n    if ($number\
    \ > $max) $max = $number;\n  }\n  return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpudcxly13.php:18\n\
    Stack trace:\n#0 /tmp/tmpudcxly13.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpudcxly13.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_value = $numbers[0];\n    $rolling_max = $max_value;\n\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $rolling_max) {\n           \
    \ $rolling_max = $number;\n        }\n    }\n\n    return $rolling_max;\n}\n\n\
    function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s2_ngbl.php:24\n\
    Stack trace:\n#0 /tmp/tmp2s2_ngbl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2s2_ngbl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $window = [];\n\n    foreach ($numbers as $number) {\n        if (empty($window))\
    \ {\n            $window[$number] = $number;\n        } else {\n            $max\
    \ = max($window);\n            if ($number == $max) {\n                $window[$number]\
    \ = $max;\n            } else {\n                $window[$number] = $max;\n  \
    \              $window[] = $number;\n            }\n        }\n    }\n\n    return\
    \ array_pop($window);\n}\n</code>\nIt takes the list as input and returns the\
    \ list as output with the maximum values found in each roll, until a given moment\
    \ (in this case the current moment).\nExample:\n<code>\n$numbers = [1, 2, 3, 2,\
    \ 3, 4, 2];\n\n$maxes = rolling_max($numbers);\n$maxes_at_current_moment = array_intersect($numbers,\
    \ $maxes);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks. I see what you did in\
    \ code. But I did not understand the code. I will spend some time to understand\
    \ it. I am going to try this one in my application. Thanks.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = [1, 2, 3, 2, 3, 4, 2];\n\n$maxes = rolling_max($numbers);\n\
    \nvar_dump($maxes);\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb6_utrgu.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    $i = 0;\n    foreach ($numbers as $n) {\n        if\
    \ ($max === null || $n > $max) {\n            $max = $n;\n            $i = $n;\n\
    \        }\n        if ($i == $n) {\n            $max++;\n        }\n        $i++;\n\
    \    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16etf62g.php:27\n\
    Stack trace:\n#0 /tmp/tmp16etf62g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp16etf62g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $results = [];\n    for ($index = 0; $index < count($numbers); $index++)\
    \ {\n        $results[$index] = max($numbers[$index], $results[$index - 1]);\n\
    \    }\n    return $results;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_value = array();\n    foreach ($numbers as $key => $value) {\n \
    \       $max_value[$key] = max($max_value[$key], $value);\n    }\n    return $max_value;\n\
    }\n\n/**\n * Return a list with a list with the consecutive numbers in $numbers\
    \ starting from\n * $start_value and ending in $end_value. \n * @param $numbers\
    \ (array) A list of integers\n * @param $start_value (int) A positive value\n\
    \ * @param $end_value (int) A positive value\n * @return array|null If $numbers\
    \ is empty return null\n * @throws \\Exception if $start_value or $end_value are\
    \ smaller than 0\n */\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplu6gsmts.php:30\n\
    Stack trace:\n#0 /tmp/tmplu6gsmts.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplu6gsmts.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    foreach ($numbers as &$number) {\n        $number = max($number);\n \
    \   }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmple813n8l.php on line 8\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmple813n8l.php on line 8\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmple813n8l.php\
    \ on line 8\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmple813n8l.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmple813n8l.php:19\nStack trace:\n#0 /tmp/tmple813n8l.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmple813n8l.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        $max = array_pop($result);\n\
    \        if ($number > $max) {\n            $result[] = $number;\n        }\n\
    \        $result[] = $max;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujjbrs12.php:24\n\
    Stack trace:\n#0 /tmp/tmpujjbrs12.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpujjbrs12.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_reduce($numbers, function ($result, $current) {\n      \
    \  return max($result, $current);\n    });\n}\n</code>\nNow if you need to generate\
    \ 10 numbers (from the given list) starting with 1, rolling_max can be easily\
    \ used with array_chunk or array_fill:\n<code>\n$chunks = array_chunk($numbers,\
    \ 10);\n</code>\nand then\n<code>\n$result = array_map(function ($chunk) {\n \
    \   return rolling_max($chunk);\n}, $chunks);\n</code>\nor\n<code>\n$result =\
    \ array_fill(0, 10, rolling_max($numbers));\n</code>\nTo get all possible combinations,\
    \ array_combine can be used:\n<code>\n$result = array_combine($chunks, $result);\n\
    </code>\n<|/ a tags=permutation,combinations,php |>\n<| a tags=permutation,combinations,php\
    \ |>\nThis solution was created for php7. For php5.6+ I changed the array_map\
    \ function to call_user_func_array\n<code>\n<?php\n    $numbers = [1,2,3];\n \
    \   $combo = [];\n    $rolling_max = [1, 2, 3, 2, 3, 4, 2];\n    for($i = 0; $i\
    \ < 10; $i++) {\n        $combo[] = rolling_max($rolling_max);\n    }\n    echo\
    \ print_r($combo, 1);\n\n    function rolling_max($arr) {\n        $result = current($arr);\n\
    \        for($i = 0; $i < count($arr); $i++) {\n            $result = max($result,\
    \ $arr[$i]);\n        }\n        return $result;\n    }\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3indp5zt.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_filter(\n        $numbers,\n        function ($el) {\n \
    \           return $el >= array_shift($numbers);\n        }\n    );\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmp50ka9r14.php on line 10\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmp50ka9r14.php on line 10\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given in /tmp/tmp50ka9r14.php on line\
    \ 10\n\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmp50ka9r14.php on line 10\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmp50ka9r14.php on line 10\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given in /tmp/tmp50ka9r14.php on line\
    \ 10\n\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmp50ka9r14.php on line 10\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmp50ka9r14.php on line 10\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp50ka9r14.php:22\nStack trace:\n\
    #0 /tmp/tmp50ka9r14.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp50ka9r14.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rolling_max = array_shift($numbers);\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $rolling_max) {\n            $rolling_max = $number;\n\
    \        }\n    }\n\n    return $rolling_max;\n}\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptd6s21nw.php:21\n\
    Stack trace:\n#0 /tmp/tmptd6s21nw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptd6s21nw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $maximum = 0;\n    foreach($numbers as $number) {\n\
    \        $maximum = max($number, $maximum);\n    }\n    $offset = 0;\n    foreach($numbers\
    \ as $number) {\n        $result[$offset] = $number;\n        $result[$offset\
    \ + 1] = $maximum;\n        $result[$offset + 2] = $maximum;\n        $offset\
    \ += 3;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzazpbmmc.php:28\n\
    Stack trace:\n#0 /tmp/tmpzazpbmmc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzazpbmmc.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_reduce($numbers, function($carry, $n) {\n        return\
    \ $carry > $n ? $carry : $n;\n    });\n}\n\nfunction candidate(...$args) {\n \
    \   return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_7ase8v.php:17\n\
    Stack trace:\n#0 /tmp/tmpt_7ase8v.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpt_7ase8v.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_filter($numbers, function ($num) {\n        return $num\
    \ > $numbers[0];\n    }, ARRAY_FILTER_USE_BOTH);\n}\n</code>\nThe above function\
    \ will give the desired output as expected output mentioned.\n<|/ a tags=php,arrays\
    \ dscore=0 |>\n<| c |>\nYour code is unreadable and incomplete.\n<|/ c |>\n<|\
    \ c |>\nI am sorry about that. I have edited my answer now.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThis is a bit tricky, but you can actually do it with a function albeit\
    \ it isn't as efficient as I would have liked:\n<code>\n<?php\n\n$data = [\n \
    \   [7, 7, 7, 7],\n    [9, 9, 9, 9],\n    [2, 2, 2, 2],\n    [3, 3, 3, 3],\n \
    \   [4, 4, 4, 4],\n    [5, 5, 5, 5]\n];\n\nfunction candidate(...$args) {\n  \
    \  return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxrfyrure.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_reduce($numbers, function ($result, $number) {\n       \
    \ if ($number > $result) {\n            $result = $number;\n        }\n\n    \
    \    return $result;\n    });\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1vqf_cs.php:21\n\
    Stack trace:\n#0 /tmp/tmpe1vqf_cs.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpe1vqf_cs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) < 1) {\n        return null;\n    }\n    $max = array_shift($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max) {\n        \
    \    $max = $number;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsl25uxcx.php:24\n\
    Stack trace:\n#0 /tmp/tmpsl25uxcx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsl25uxcx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n\n  for ($i = 0; $i < count($numbers); ++$i) {\n    $result[]\
    \ = max($numbers[$i], $result[count($result) - 1]);\n  }\n\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $results = array();\n    $max_pos = 0;\n    $max_val = null;\n    foreach($numbers\
    \ as $val) {\n        if($max_pos < $val) {\n            $results[] = $max_pos;\n\
    \            $max_pos = $val;\n        }\n        elseif($max_val === null ||\
    \ $max_pos < $max_val) {\n            $max_pos = $val;\n            $max_val =\
    \ $val;\n        }\n        else {\n            $max_val = $val;\n        }\n\
    \    }\n    return $max_pos;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgwmnjpe.php:31\n\
    Stack trace:\n#0 /tmp/tmpvgwmnjpe.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvgwmnjpe.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (!is_array($numbers)) return [];\n\n    $max = $numbers[0];\n    $result\
    \ = $numbers;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i]\
    \ > $max) {\n            $max = $numbers[$i];\n            $result = array_slice($result,\
    \ 0, $i);\n            $result[] = $max;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjij5528s.php:28\n\
    Stack trace:\n#0 /tmp/tmpjij5528s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjij5528s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max = $numbers[0];\n  for ($i = 1; $i < count($numbers); $i++) {\n   \
    \ if ($numbers[$i] > $max) {\n      $max = $numbers[$i];\n    }\n  }\n  return\
    \ $max;\n}\n</code>\n<|/ a |>\n<| c |>\nThat's interesting, but I doubt that would\
    \ work since the rolling max function needs to take the entire array into account.\n\
    <|/ c |>\n<| c |>\nYeah, that's not what was asked for. The original post is asking\
    \ how to find the max element in a sequence, not a rolling max over a specific\
    \ set of numbers. I think there's a good explanation on how to do this in the\
    \ other answer.\n<|/ c |>\n<| a dscore=0 |>\nFor those who need it using an array,\
    \ this is my implementation:\n<code>\n/**\n * Finds maximum value in array.\n\
    \ * \n * int $array\n * int\n */\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8nwyva94.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $last = array_shift($numbers);\n    $result[] = $last;\n\
    \    while ($numbers) {\n        $max = $numbers[0];\n        for ($i = 0; $i\
    \ < count($numbers); $i++) {\n            $max = $max > $numbers[$i] ? $max :\
    \ $numbers[$i];\n        }\n        $result[] = $max;\n        $numbers = array_slice($numbers,\
    \ 1);\n        $last = array_shift($numbers);\n        $result[] = $last;\n  \
    \  }\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI didn't think\
    \ this answer was complete, but you have a valid point. While this isn't a very\
    \ efficient solution, it is very fast, and very easy to understand.\n<|/ c |>\n\
    <| c |>\nYour solution is too slow. You should use [array_walk](http://php.net/array_walk)\
    \ to avoid the second loop and `if` inside.\n<|/ c |>\n<| c |>\n: thanks, I changed\
    \ the `array_map` to be an `array_walk` now.\n<|/ c |>\n<| c |>\nNow it is a correct\
    \ answer :) You should remove `array_slice` call\n<|/ c |>\n<| c |>\n: I've changed\
    \ the code to use `array_walk`, but that also changes the order of the results.\n\
    <|/ c |>\n<| a tags=arrays,php,sum |>\nHere is a slightly more efficient solution\
    \ using array_walk:\n<code>\n$input = [\n    1, 2, 3, 2, 3, 4, 2\n];\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp06uvi06s.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_element = null;\n    $max_value = null;\n    foreach ($numbers as\
    \ $number) {\n        if ($number > $max_value) {\n            $max_element =\
    \ $number;\n            $max_value = $number;\n        } elseif ($number == $max_value)\
    \ {\n            $max_element = $number;\n        }\n    }\n    return $max_element;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprapkfrc6.php:25\n\
    Stack trace:\n#0 /tmp/tmprapkfrc6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprapkfrc6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = current($numbers);\n    foreach ($numbers as $number) {\n    \
    \    if ($number > $max) {\n            $max = $number;\n        }\n    }\n  \
    \  return $max;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx44h3er.php:21\n\
    Stack trace:\n#0 /tmp/tmpwx44h3er.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpwx44h3er.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    foreach ($numbers as $number) {\n        if ($max ===\
    \ null || $number >= $max) {\n            $max = $number;\n        }\n    }\n\
    \    return $max;\n}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw45h4_wh.php:20\n\
    Stack trace:\n#0 /tmp/tmpw45h4_wh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpw45h4_wh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) < 2) {\n        return $numbers;\n    }\n    $result\
    \ = [];\n    $rolling_max = array_shift($numbers);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if ($rolling_max <= $numbers[$i]) {\n            $result[]\
    \ = $rolling_max;\n            $rolling_max = max($numbers[$i - 1], $rolling_max);\n\
    \        } else {\n            $result[] = $numbers[$i];\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd39fa60b.php:29\n\
    Stack trace:\n#0 /tmp/tmpd39fa60b.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd39fa60b.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (count($numbers) < 2) {\n        return $numbers;\n    }\n    $max\
    \ = array_shift($numbers);\n    foreach ($numbers as $number) {\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky4ij5xm.php:25\n\
    Stack trace:\n#0 /tmp/tmpky4ij5xm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpky4ij5xm.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rollingMax = array();\n    foreach ($numbers as $k => $val) {\n    \
    \    $max = $val - 1;\n        if ($max < 0) {\n            $rollingMax[$k] =\
    \ $max;\n        } else {\n            $rollingMax[$k] = $rollingMax[$k - 1];\n\
    \        }\n    }\n    return $rollingMax;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sk4n8qf.php:25\n\
    Stack trace:\n#0 /tmp/tmp1sk4n8qf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1sk4n8qf.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rolling_max = $numbers[0];\n    foreach ($numbers as $number) {\n  \
    \      if ($number > $rolling_max) {\n            $rolling_max = $number;\n  \
    \      }\n    }\n    return $rolling_max;\n}\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc420poxm.php:20\n\
    Stack trace:\n#0 /tmp/tmpc420poxm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpc420poxm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max = null;\n  $rolling_max_index = -1;\n  foreach ($numbers as $key =>\
    \ $value) {\n    if ($max === null || $max < $value) {\n      $max = $value;\n\
    \      $rolling_max_index = $key;\n    }\n  }\n  return array_slice($numbers,\
    \ 0, $rolling_max_index + 1);\n}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9uw3voyk.php:24\n\
    Stack trace:\n#0 /tmp/tmp9uw3voyk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9uw3voyk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = 0;\n    $rolling_max = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $rolling_max) {\n            $rolling_max\
    \ = $numbers[$i];\n        }\n        if ($numbers[$i] == $rolling_max) {\n  \
    \          $max++;\n        }\n    }\n    return $rolling_max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxj6a43l.php:25\n\
    Stack trace:\n#0 /tmp/tmpzxj6a43l.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzxj6a43l.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = -PHP_INT_MAX;\n    $i = 0;\n    while ($i < count($numbers)) {\n\
    \        $max = $numbers[$i] > $max ? $numbers[$i] : $max;\n        $i++;\n  \
    \  }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjn77l2o1.php:21\n\
    Stack trace:\n#0 /tmp/tmpjn77l2o1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjn77l2o1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $current = current($numbers);\n  $max    = $current;\n\n  foreach ($numbers\
    \ as $number) {\n    if ($number > $max) {\n      $max = $number;\n    }\n  }\n\
    \n  next($numbers);\n\n  return array($current, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8lg5__1.php:26\n\
    Stack trace:\n#0 /tmp/tmpm8lg5__1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpm8lg5__1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $rolling_max = array();\n  $last_max = null;\n  foreach($numbers as $i)\
    \ {\n    // If this is the first time we reach a number different from last, save\
    \ it\n    if($last_max != $i) {\n      $rolling_max[] = $last_max;\n    }\n  \
    \  $last_max = $i;\n  }\n  return $rolling_max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70dlmcbd.php:25\n\
    Stack trace:\n#0 /tmp/tmp70dlmcbd.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp70dlmcbd.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if ($number == null)\
    \ continue;\n    foreach ($result as &$rollingMax) {\n      if ($rollingMax ==\
    \ null) $rollingMax = $number;\n      $rollingMax = max($rollingMax, $number);\n\
    \    }\n    $result[] = $number;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8uc17v2.php:25\n\
    Stack trace:\n#0 /tmp/tmpk8uc17v2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpk8uc17v2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // Initialize variables\n    $last_number = 0;\n    $last_max_number\
    \ = 0;\n    $max_number = 0;\n    $sum_number = 0;\n\n    // Start walking through\
    \ the numbers and keep track of the last number and maximum\n    // number seen\n\
    \    foreach ($numbers as $number) {\n        if ($number > $last_number) {\n\
    \            $max_number = $last_max_number;\n        }\n        if ($number >\
    \ $last_max_number) {\n            $sum_number += $last_max_number;\n        }\n\
    \        $last_number = $number;\n        $last_max_number = $max_number;\n  \
    \      $max_number = $number;\n    }\n\n    // After the loop is done, add the\
    \ final number\n    $max_number += $last_max_number;\n\n    // Return the final\
    \ number\n    return $max_number;\n}\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o8ke19l.php:38\n\
    Stack trace:\n#0 /tmp/tmp0o8ke19l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0o8ke19l.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (empty($numbers)) {\n        return array();\n    }\n\n    $maxs =\
    \ array();\n\n    foreach ($numbers as $number) {\n        $maxs[] = $number;\n\
    \n        while (in_array($numbers[$number - 1], array_slice($maxs, 0, -1))) {\n\
    \            array_pop($maxs);\n        }\n    }\n\n    return $maxs;\n}\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_gttfd1.php:30\n\
    Stack trace:\n#0 /tmp/tmpw_gttfd1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw_gttfd1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $list = [];\n  $index = 0;\n  foreach ($numbers as $number) {\n    // Find\
    \ largest element smaller than $index\n    $largest = array_search($number, $list,\
    \ true);\n    if ($largest === false) {\n      $list[$index] = $number;\n    \
    \  $index++;\n    } else {\n      // If $largest is true, then $number is at $largest\n\
    \      $number = max($number, $list[$largest]);\n    }\n  }\n  return $list;\n\
    }\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprdtg2yg9.php:29\n\
    Stack trace:\n#0 /tmp/tmprdtg2yg9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprdtg2yg9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = $numbers[0];\n    foreach ($numbers as $value) {\n        if ($value\
    \ > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjr35rluo.php:21\n\
    Stack trace:\n#0 /tmp/tmpjr35rluo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjr35rluo.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max_value = array_shift($numbers);\n  $max_number = $max_value;\n  $number\
    \ = array_shift($numbers);\n  while ($number !== $max_value) {\n    $max_value\
    \ = $number;\n    $number = array_shift($numbers);\n  }\n  $max_numbers[] = $max_value;\n\
    \  return $max_numbers;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzoso_6x2.php:23\n\
    Stack trace:\n#0 /tmp/tmpzoso_6x2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpzoso_6x2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (!count($numbers)) {\n        return array();\n    }\n    $last =\
    \ array_pop($numbers);\n    $rollingMax = array();\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $last) {\n            $rollingMax[] = $last;\n    \
    \        $last = $number;\n        } else {\n            $last = $number;\n  \
    \      }\n    }\n    $rollingMax[] = $last;\n    return $rollingMax;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzhvrtwtj.php:30\n\
    Stack trace:\n#0 /tmp/tmpzhvrtwtj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzhvrtwtj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $numbers = array_values($numbers);\n    $sum = 0;\n    $res = $numbers[0];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $sum = $numbers[$i] +\
    \ $sum;\n        if ($sum > $res) $res = $sum;\n    }\n    return $res;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4zgbit0e.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $max_number = $numbers[0];\n    $max_value = $max_number;\n\
    \n    foreach ($numbers as $number) {\n        if ($number > $max_number) {\n\
    \            $max_value = $number;\n        }\n        if ($number == $max_number)\
    \ {\n            $result[] = $number;\n        }\n    }\n\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpssvgsj.php:29\n\
    Stack trace:\n#0 /tmp/tmpdpssvgsj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdpssvgsj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $min = array_shift($numbers);\n  $max = array_shift($numbers);\n  foreach\
    \ ($numbers as $n) {\n    $n = ($n+$min>$max)?$n+$min:$n;\n    $max = max($max,\
    \ $n);\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1pi56145.php:21\n\
    Stack trace:\n#0 /tmp/tmp1pi56145.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1pi56145.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    return array_reduce($numbers, function ($carry, $value) {\n        $carry[$value]\
    \ = $value;\n        return $carry;\n    }, []);\n}\n</code>\nAnd the result is:\n\
    <code>\nArray\n(\n    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4] => 2\n   \
    \ [5] => 3\n    [6] => 3\n    [7] => 3\n    [8] => 4\n    [9] => 4\n    [10] =>\
    \ 4\n    [11] => 4\n    [12] => 4\n    [13] => 4\n    [14] => 4\n)\n</code>\n\
    <|/ a |>\n<| c |>\nI didn't know about the `array_reduce` function. Thanks! I've\
    \ implemented this into my code and I seem to be getting the right result.\n<|/\
    \ c |>\n<| c |>\nI tried to implement your solution, but I don't fully understand\
    \ your implementation. How does this approach compare to the approach I suggested\
    \ in my answer?\n<|/ c |>\n<| a tags=arrays,php |>\nHere's a way to do it using\
    \ array_reduce:\n<code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkpuapvyz.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    sort($numbers);\n    $output = [];\n    for ($i = 1; $i <= count($numbers);\
    \ $i++) {\n        if ($numbers[$i - 1] === $numbers[$i]) {\n            $output[]\
    \ = $numbers[$i - 1];\n        } else {\n            $output[] = $numbers[$i];\n\
    \        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0igz7p60.php:25\n\
    Stack trace:\n#0 /tmp/tmp0igz7p60.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0igz7p60.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  foreach($numbers as $n) {\n    $maxes[] = $n;\n  }\n  $maxes = array_reverse($maxes);\n\
    \  while($maxes[0] < $numbers[0]) {\n    array_shift($maxes);\n  }\n  $maxes =\
    \ array_reverse($maxes);\n  return $maxes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, null given\
    \ in /tmp/tmpdlcd_g2c.php on line 10\n\nWarning: array_reverse() expects parameter\
    \ 1 to be array, null given in /tmp/tmpdlcd_g2c.php on line 14\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpdlcd_g2c.php:23\nStack trace:\n\
    #0 /tmp/tmpdlcd_g2c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdlcd_g2c.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  // Init result array\n  $result = [];\n\n  // Init max and previous max\
    \ values\n  $max = -INF;\n  $previous_max = 0;\n\n  // Iterate through all given\
    \ numbers\n  for ($i = 0; $i < count($numbers); $i++) {\n    // If current number\
    \ is bigger than previous\n    if ($numbers[$i] > $previous_max) {\n      // Add\
    \ element to result\n      $result[] = $numbers[$i];\n\n      // If current number\
    \ is bigger than max, update max and current number\n      if ($numbers[$i] >\
    \ $max) {\n        $max = $numbers[$i];\n      }\n    }\n    else {\n      //\
    \ If current number is smaller than previous\n      if ($numbers[$i] < $previous_max)\
    \ {\n        // If current number is smaller than max, update max and current\
    \ number\n        if ($numbers[$i] < $max) {\n          $max = $numbers[$i];\n\
    \        }\n      }\n    }\n\n    // Update previous max value\n    $previous_max\
    \ = $max;\n  }\n\n  // Return array\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc4vk19ib.php:51\n\
    Stack trace:\n#0 /tmp/tmpc4vk19ib.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpc4vk19ib.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    $maxs = [];\n    $i = 0;\n    $len = count($numbers);\n\
    \    for ($i = 0; $i < $len; ++$i) {\n        if (!isset($maxs[$i])) {\n     \
    \       $maxs[$i] = $numbers[$i];\n            $max = $maxs[$i];\n           \
    \ $maxs[$i] = $numbers[$i];\n        } else {\n            if ($max < $numbers[$i])\
    \ {\n                $maxs[$i] = $numbers[$i];\n                $max = $numbers[$i];\n\
    \            }\n        }\n    }\n    return $maxs;\n}\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y_d9h_2.php:32\n\
    Stack trace:\n#0 /tmp/tmp3y_d9h_2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3y_d9h_2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($numbers as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n            $maxCount\
    \ = 1;\n        }\n        else {\n            $maxCount += 1;\n        }\n  \
    \  }\n    return array($max, $maxCount);\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhkr7oqj.php:26\n\
    Stack trace:\n#0 /tmp/tmphhkr7oqj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphhkr7oqj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = reset($numbers);\n    for ($i = 1, $count = count($numbers); $i\
    \ < $count; $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkibzl2x.php:21\n\
    Stack trace:\n#0 /tmp/tmpqkibzl2x.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqkibzl2x.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (!count($numbers)) return null;\n    return array_slice($numbers,\
    \ 0, count($numbers)-1)\n                + array_slice($numbers, count($numbers)-1);\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmoh0v3nx.php:17\n\
    Stack trace:\n#0 /tmp/tmpmoh0v3nx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmoh0v3nx.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $results = [];\n\n    foreach ($numbers as $k => $n) {\n        $results[$k]\
    \ = $n;\n        if (isset($results[$k - 1])\n            && $results[$k - 1]\
    \ >= $n\n        ) {\n            $results[$k] = $results[$k - 1];\n        }\n\
    \    }\n\n    return array_keys($results);\n}\n\n/**\n * Return an array of all\
    \ values found after a given moment in the sequence.\n *\n * @param array    \
    \  $numbers\n * @param int|string $time\n *\n * @return array\n */\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjlevbcm.php:35\n\
    Stack trace:\n#0 /tmp/tmpyjlevbcm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyjlevbcm.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\t$max = array_pop($numbers);\n\twhile (count($numbers) > 0) {\n\t\t$max\
    \ = $max > array_pop($numbers) ? $max : array_pop($numbers);\n\t}\n\treturn $max;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubs7jvzy.php:19\n\
    Stack trace:\n#0 /tmp/tmpubs7jvzy.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpubs7jvzy.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    $max_index = 0;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if ($max === null || $numbers[$i] > $max) {\n            $max_index\
    \ = $i;\n            $max = $numbers[$i];\n        }\n    }\n\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        if ($i == $max_index) {\n           \
    \ $numbers[$i] = $max + 1;\n        }\n    }\n\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h8jgm29.php:31\n\
    Stack trace:\n#0 /tmp/tmp_h8jgm29.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_h8jgm29.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n  // $numbers should be ordered.\n  // Start with last element\
    \ and iterate from end to start.\n  // If current value is greater than the last,\
    \ stop.\n  // If current value is equal to the last, keep it.\n  // Otherwise,\
    \ add the current value to the result.\n  $current = $numbers[count($numbers)\
    \ - 1];\n  for ($i = 0; $i < count($numbers); $i++) {\n    if ($numbers[$i] >\
    \ $current) {\n      break;\n    }\n    if ($numbers[$i] == $current) {\n    \
    \  $result[] = $current;\n    } else {\n      $result[] = $numbers[$i];\n    }\n\
    \    $current = $numbers[$i];\n  }\n\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_eok2156.php:35\n\
    Stack trace:\n#0 /tmp/tmp_eok2156.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_eok2156.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  array_pop($numbers);\n  $result = $numbers[0];\n  for ($i = 1; $i < count($numbers);\
    \ $i++) {\n    if ($numbers[$i] > $result) {\n      $result = $numbers[$i];\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8bdklr.php:22\n\
    Stack trace:\n#0 /tmp/tmpkn8bdklr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkn8bdklr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rolling_max = array();\n    $n = count($numbers);\n    for($i=0; $i\
    \ < $n; $i++) {\n        $rolling_max[$i] = $numbers[$i];\n    }\n    $j = 1;\n\
    \    for($i=0; $i < $n; $i++) {\n        $rolling_max[$i] = max($rolling_max[$i],\
    \ $numbers[$i]);\n        if($i > 0 && $rolling_max[$i] == $numbers[$i] && $rolling_max[$i-1]\
    \ != $numbers[$i]) {\n            $rolling_max[$j++] = $numbers[$i];\n       \
    \ }\n    }\n    return $rolling_max;\n}\n\nfunction candidate(...$args) {\n  \
    \  return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxij9711_.php:29\n\
    Stack trace:\n#0 /tmp/tmpxij9711_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxij9711_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max = $numbers[0];\n  foreach ($numbers as $n) {\n    $max = $n > $max\
    \ ? $n : $max;\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9rk3bji.php:19\n\
    Stack trace:\n#0 /tmp/tmpj9rk3bji.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpj9rk3bji.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $current = null;\n    $max = null;\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $current) {\n            $current = $number;\n    \
    \        $max = $number;\n        } elseif ($current > $number) {\n          \
    \  $max = $current;\n            $current = $number;\n        } elseif ($number\
    \ == $current) {\n            $current++;\n        }\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg5dqdn_.php:28\n\
    Stack trace:\n#0 /tmp/tmppg5dqdn_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppg5dqdn_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    sort($numbers);\n    $result = [];\n    $number = null;\n    foreach\
    \ ($numbers as $k => $num) {\n        if ($num !== $number) {\n            $result[]\
    \ = $num;\n            $number = $num;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nMy take on it:\n<code>\n<?php\n$numbers = [1,2,3,2,3,4,2];\n\
    var_dump(array_map('array_max', $numbers));\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzh3g2yx1.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_number = 0;\n    $max_number = max($max_number, $numbers[0]);\n\
    \    $numbers_count = count($numbers);\n\n    for ($i = 1; $i < $numbers_count;\
    \ $i++) {\n        if ($numbers[$i] > $max_number) {\n            $max_number\
    \ = $numbers[$i];\n        }\n    }\n\n    return $max_number;\n}\n</code>\n<|/\
    \ a tags=math,max,algorithm,php,sequence |>\n<| a tags=math,max,algorithm,php,sequence\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqmq716av.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_element = null;\n    $max_value = null;\n    foreach ($numbers as\
    \ $number) {\n        if ($number > $max_value) {\n            $max_value = $number;\n\
    \            $max_element = $number;\n        } elseif ($number == $max_value)\
    \ {\n            $max_element = $number . \",\" . $max_element;\n            $max_value\
    \ = $number;\n        }\n    }\n\n    return $max_element;\n}\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dv3cofi.php:26\n\
    Stack trace:\n#0 /tmp/tmp6dv3cofi.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6dv3cofi.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $last_index = 0;\n    $last_value = 0;\n    foreach\
    \ ($numbers as $number) {\n        $last_value = $number;\n        $result[] =\
    \ $number;\n        while ($last_value < $number) {\n            $last_value =\
    \ $last_index + array_shift($result);\n            $last_index++;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpim8u70hx.php:28\n\
    Stack trace:\n#0 /tmp/tmpim8u70hx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpim8u70hx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_number = 0;\n\n    foreach ($numbers as $number) {\n        if ($number\
    \ > $max_number) {\n            $max_number = $number;\n        }\n    }\n\n \
    \   return $max_number;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpncyxjt26.php:23\n\
    Stack trace:\n#0 /tmp/tmpncyxjt26.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpncyxjt26.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $maximums = array();\n\n    foreach ($numbers as $number) {\n       \
    \ $maximums[] = $number;\n\n        // if the current number is the maximum\n\
    \        if ($number == max($maximums)) {\n            // remove the current number\
    \ from the list of maximums\n            array_pop($maximums);\n\n           \
    \ // if the number of elements in the list is greater than the number of maximums\n\
    \            if (sizeof($maximums) > count($maximums)) {\n                // remove\
    \ the last number from the list of maximums\n                array_pop($maximums);\n\
    \            }\n        }\n    }\n\n    return $maximums;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqeput6fo.php:34\n\
    Stack trace:\n#0 /tmp/tmpqeput6fo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqeput6fo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_element = array();\n    $current_element = 0;\n    foreach ($numbers\
    \ as $number => $value) {\n        if ($value > $current_element) {\n        \
    \    $max_element[] = $current_element;\n            $current_element = $value;\n\
    \        }\n    }\n    $max_element[] = $current_element;\n    return $max_element;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9v83ekor.php:24\n\
    Stack trace:\n#0 /tmp/tmp9v83ekor.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9v83ekor.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $value) {\n        $result[]\
    \ = $value;\n        foreach ($result as $key => $val) {\n            if ($val\
    \ > $numbers[$key + 1]) {\n                $result[$key] = $numbers[$key + 1];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p1iuebj.php:25\n\
    Stack trace:\n#0 /tmp/tmp0p1iuebj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0p1iuebj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n    $max = $numbers[0];\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       $result[] = $max;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    if (!is_array($numbers)) $numbers = array($numbers);\n    $numbers =\
    \ array_reverse($numbers);\n    $numbers = array_slice($numbers, 0, count($numbers)\
    \ - 1);\n    $numbers[count($numbers) - 1] = array_pop($numbers);\n    return\
    \ $numbers;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer,\
    \ but it does not work. `max` would return `[1, 2, 2, 1]`, while I need `[1, 2,\
    \ 3, 3, 3, 4, 4]`.\n<|/ c |>\n<| c |>\nWhat do you mean by \"not work\"? It gives\
    \ the exact result you asked for: `[1, 2, 3, 3, 3, 4, 4]`.\n<|/ c |>\n<| c |>\n\
    Ok, it works if I remove the call to `array_reverse()`. Could you explain why\
    \ and why does it work?\n<|/ c |>\n<| c |>\nOh, I get it: by reversing the list\
    \ first, I get an array of all elements with biggest values, and then I keep only\
    \ the last one. Thanks!\n<|/ c |>\n<| a dscore=0 |>\nThe best solution would be\
    \ to use PHP's built in max function, because this should always work regardless\
    \ of whether your input array has duplicates or not:\n<code>\n<?php\n\n$arr =\
    \ [1, 2, 3, 2, 3, 4, 2];\n\necho max($arr); // prints 1\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpns2ls37p.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = $numbers[0];\n    foreach ($numbers as $num) {\n        if\
    \ ($num > $result) {\n            $result = $num;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpai168o17.php:21\n\
    Stack trace:\n#0 /tmp/tmpai168o17.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpai168o17.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = [];\n  $max_number = max($numbers);\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    $result[] = max( $numbers[$i], $max_number);\n  }\n  return $result;\n\
    }\n\n/**\n * Return the difference of two given numbers.\n *\n * @param int $number1\n\
    \ * @param int $number2\n *\n * @return int\n */\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmp8355e_xq.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8355e_xq.php:29\n\
    Stack trace:\n#0 /tmp/tmp8355e_xq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8355e_xq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $results = array();\n    foreach ($numbers as $value) {\n        $results[]\
    \ = $value;\n    }\n\n    foreach ($results as $i => $value) {\n        $min =\
    \ min($results);\n        if ($value == $min) {\n            continue;\n     \
    \   }\n        $results[$i] = $value;\n        foreach ($results as $j => $max)\
    \ {\n            if ($max == $min) {\n                break;\n            }\n\
    \            if ($max > $min) {\n                unset($results[$j]);\n      \
    \      }\n        }\n    }\n\n    return array_values($results);\n}\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays,recursion dscore=0 |>\n<code>\n<?php\n/**\n * Finds\
    \ all numbers bigger than the one given in the array until the given moment\n\
    \ *\n * array $numbers List of integers\n * int $number Number to be tested against\
    \ bigger numbers\n * int $index  Current index\n * array List of integers\n */\n\
    function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpikznajgk.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max = null;\n    foreach ($numbers as $n) {\n        if (is_null($max))\
    \ $max = $n;\n        if ($n > $max) $max = $n;\n    }\n    return $max;\n}\n\n\
    function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5juxkbz.php:20\n\
    Stack trace:\n#0 /tmp/tmpy5juxkbz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpy5juxkbz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    sort($numbers);\n\n    $result = $numbers[0];\n    $max_index = 0;\n\
    \    $max_val = $numbers[0];\n\n    for ($i = 1; $i < count($numbers); $i++) {\n\
    \        if ($numbers[$i] >= $max_val) {\n            $max_index = $i;\n     \
    \       $max_val = $numbers[$i];\n        }\n    }\n\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if ($i == $max_index) {\n            $result[] = $numbers[$i];\n\
    \        } else if ($numbers[$i] > $max_val) {\n            $result[] = $max_val;\n\
    \        } else {\n            $result[] = $numbers[$i];\n        }\n    }\n\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n\
    $array=array(1,2,4,7,8);\n$result=array();\n$max_val=array_pop($array);\n$last_index=0;\n\
    \nforeach ($array as $key=>$value){\n    if($value>$max_val){\n        $result[]=$value;\n\
    \        $last_index=$key;\n    }\n    elseif($value==$max_val){\n        if($key<$last_index){\n\
    \            $result[]=$max_val;\n            $last_index=$key;\n        }\n \
    \   }\n    else{\n        $max_val=$value;\n    }\n}\n\n$result=array_slice($array,0,$last_index+1);\n\
    print_r($result);\n</code>\n<|/ a dscore=2 tags=php,arrays |>\n<| c |>\nThis answer\
    \ is more general because you can choose to pick the last index instead of choosing\
    \ the first.\n<|/ c |>\n<| a tags=php,arrays |>\nYou can try the below\n<code>\n\
    function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2h19elbz.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    do {\n        $return = array_pop(array_merge(array_reverse($numbers),\
    \ $numbers));\n    } while ($return > 0);\n    return $return;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThat's a terrible answer, but nice work :). Also,\
    \ I don't really see what is the purpose of this, but it's definitely a great\
    \ answer.\n<|/ c |>\n<| c |>\n: Not really, I guess :) But it's an interesting\
    \ solution nonetheless. I've never thought of something like that before (it might\
    \ help with some applications). It also makes it easy to calculate the max by\
    \ only looking at the current and previous elements (see http://php.net/manual/en/function.array-walk.php#example-2577).\n\
    <|/ c |>\n<| c |>\nIt's not as bad as some of the other answers but it's definitely\
    \ better. :)\n<|/ c |>\n<| c |>\nThis answer is great, but it's worth noting that\
    \ this is a special case of an approach that's used in a lot of languages, not\
    \ just PHP. It can be found a lot on SO. See: http://stackoverflow.com/a/773518/183073\n\
    <|/ c |>\n<| a dscore=5 |>\nThis is a great answer by Ivo Stoyanov but instead\
    \ of using foreach you can just use the array_map function. \n<code>\nfunction\
    \ candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
    \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwx9fcoi5.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // We can't use array_reverse() because it would change the order\n \
    \   $max_number = end($numbers);\n    return $max_number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj6bl04l.php:17\n\
    Stack trace:\n#0 /tmp/tmplj6bl04l.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplj6bl04l.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $result = [];\n\n    $current_highest = null;\n    $current_highest_index\
    \ = null;\n\n    $array_size = count($numbers);\n\n    for ($i = 0; $i < $array_size;\
    \ ++$i) {\n        if ($numbers[$i] > $current_highest || $current_highest ===\
    \ null) {\n            $current_highest = $numbers[$i];\n            $current_highest_index\
    \ = $i;\n        }\n\n        $result[++$i] = $current_highest;\n    }\n\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeiaudvf4.php:32\n\
    Stack trace:\n#0 /tmp/tmpeiaudvf4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpeiaudvf4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max = $numbers[0];\n  $rolling_max = [];\n  for ($i = 1; $i < count($numbers);\
    \ $i++) {\n    if ($numbers[$i] > $max) {\n      $rolling_max[] = $max;\n    \
    \  $max = $numbers[$i];\n    } else {\n      $max = $numbers[$i];\n    }\n   \
    \ $rolling_max[] = $max;\n  }\n  return $rolling_max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39g3chqs.php:27\n\
    Stack trace:\n#0 /tmp/tmp39g3chqs.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp39g3chqs.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $result = $numbers[0];\n  for ($i = 1; $i < count($numbers); $i++) {\n\
    \    if ($numbers[$i] > $result) {\n      $result = $numbers[$i];\n    }\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpov3nzlnp.php:20\n\
    Stack trace:\n#0 /tmp/tmpov3nzlnp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpov3nzlnp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max = null;\n  $result = $numbers[0];\n  for ($i = 1; $i < count($numbers);\
    \ $i++) {\n    if ($numbers[$i] > $result) {\n      $result = $numbers[$i];\n\
    \    }\n    $max = ($numbers[$i] <= $result) ? $numbers[$i] : $max;\n  }\n  return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpme3tgf_1.php:23\n\
    Stack trace:\n#0 /tmp/tmpme3tgf_1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpme3tgf_1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $max_found = array(0);\n    foreach($numbers as $num) {\n        $max_found[]\
    \ = max($max_found[count($max_found) - 1], $num);\n    }\n    return $max_found;\n\
    }\n\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0mp6tti.php:19\n\
    Stack trace:\n#0 /tmp/tmpu0mp6tti.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpu0mp6tti.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max_number = array_shift($numbers);\n  $current_max = $max_number;\n \
    \ $current_index = 0;\n  foreach ($numbers as $number) {\n    if ($number > $current_max)\
    \ {\n      $current_max = $number;\n      $current_index = 0;\n    }\n    $current_index++;\n\
    \  }\n  return array_slice($numbers, 0, $current_index + 1);\n}\n</code>\n<|/\
    \ a tags=php,arrays,loops dscore=1 |>\n<| c |>\nOh! I didn't know what it was.\
    \ Thank you very much.\n<|/ c |>\n<| c |>\nWhat is the difference between array_reduce\
    \ and array_walk_recursive?\n<|/ c |>\n<| c |>\n: No difference. I edited the\
    \ answer to remove mention of `array_reduce`.\n<|/ c |>\n<| c |>\nI added the\
    \ code you suggested to my answer. Feel free to roll back if you don't agree with\
    \ what I added.\n<|/ c |>\n<| c |>\nOk, I understood. Thanks again.\n<|/ c |>\n\
    <| a |>\nHere is an optimized version of your code. It should be O(N). See if\
    \ it works for you\n<code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpukijx7fj.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n\tassert(is_array($numbers), '$numbers must be an array.');\n\t$result =\
    \ [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$result[] = array_shift($numbers)\
    \ ?: null;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky4_9_m2.php:21\n\
    Stack trace:\n#0 /tmp/tmpky4_9_m2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpky4_9_m2.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n  $max = null;\n  $maxIndex = -1;\n  foreach ($numbers as $index => $number)\
    \ {\n    if ($number > $max) {\n      $max = $number;\n      $maxIndex = $index;\n\
    \    }\n  }\n  $numbers = array_slice($numbers, 0, $maxIndex + 1);\n  $numbers[]\
    \ = $max;\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6mybrfa.php:25\n\
    Stack trace:\n#0 /tmp/tmpy6mybrfa.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy6mybrfa.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $maximum = PHP_INT_MAX;\n    $output = [];\n    foreach ($numbers as\
    \ $key => $number) {\n        $output[] = max ($number, $maximum);\n        $maximum\
    \ = $number;\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3,\
    \ 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9zph7ql.php:22\n\
    Stack trace:\n#0 /tmp/tmpc9zph7ql.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc9zph7ql.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    // Convert all elements to integer\n    $numbers = array_map(function\
    \ ($value) use ($numbers) {\n        return (int) $value;\n    }, $numbers);\n\
    \n    // If there are no numbers\n    if (empty($numbers)) {\n        return [];\n\
    \    }\n\n    // Sort numbers from lowest to highest\n    sort($numbers);\n\n\
    \    // Calculate rolling max\n    $rollingMax = [];\n    $prevMax = $numbers[0];\n\
    \    foreach ($numbers as $index => $number) {\n        if ($number > $prevMax)\
    \ {\n            $rollingMax[] = $prevMax;\n        }\n        $prevMax = $number;\n\
    \    }\n\n    // Return rolling max\n    return $rollingMax;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThanks for the answer.\n<|/ c |>\n<| a |>\nI made another version\
    \ that might be a bit faster but with some drawbacks \n\nit will only work if\
    \ all elements can go from low to high\nIt will output all elements that went\
    \ over your threshold (but might not necessarily be the right one).\n\n<code>\n\
    function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2,\
    \ 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxvm8ytfw.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers)\
    \ {\n    $rolling_max = array();\n    $max_value = $numbers[0];\n    foreach ($numbers\
    \ as $index => $value) {\n        if ($value > $max_value) {\n            $max_value\
    \ = $value;\n        }\n        array_push($rolling_max, $max_value);\n    }\n\
    \    return $rolling_max;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is the\
    \ best answer, but i think you should add comments to explain what the code is\
    \ doing, rather than just pasting the code.\n<|/ c |>\n<| c |>\nThanks Robin for\
    \ pointing that out. I'm still learning this kind of thing. I'm currently trying\
    \ to understand the code. So it's basically a for loop inside of a for loop that\
    \ loops through the array and checks if the current index is bigger than the max\
    \ index. In the first loop (the one that starts with 'for($i =1;' ) it is resetting\
    \ the max value to 0 then the first loop is starting with the second array index.\
    \ So this would also work for the first array?\n<|/ c |>\n<| c |>\nYes, you can\
    \ do it the way you suggested. But in the case of `rolling_max` function the max\
    \ is initialized only for the first array entry. So the initialization is not\
    \ needed in the function itself. If you need max for other array values then you\
    \ can initialize max value outside of the function. I'll also update the code\
    \ to reflect this.\n<|/ c |>\n<| a dscore=0 |>\nA short recursive solution. Hope\
    \ it helps someone:\n<code>\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpin47qvw6.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
